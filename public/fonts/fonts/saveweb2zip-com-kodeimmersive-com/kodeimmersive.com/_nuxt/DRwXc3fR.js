const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["./Ce9-8Jfa.js","./nQE8Ziy-.js","./DF1vY5yY.js","./CI8pHMb7.js","./index.D3n3syXv.css","./Pw6zLrTA.js","./index.-yFVtmFo.css","./BzFVioGV.js","./index.dX3FytUd.css","./index.BHferi5R.css","./BgOK5k-N.js","./baloon.Bfv4N9LV.css","./D44WRN35.js","./CnW5UN0w.js","./asterisk.CILRNiJi.css","./ihraz-Rx.js","./Dk9mXss7.js","./DIHJwgKc.js","./BsgAUN5Y.js","./CxVmN9ol.js","./AudioButton.BuhniWfw.css","./EOBYE-xC.js","./MouseTrail.BxLds9O_.css","./DWwIJlc8.js","./BxRX0Qpb.js","./DhyUotyb.js","./default.Clj2ieeg.css","./D2tYX_dy.js","./holding.D2kg_WQh.css","./B7xq1DED.js","./error-404.CqSv90Ow.css","./DAXZmV_2.js","./error-500.CsYknRXg.css"])))=>i.map(i=>d[i]);
var __defProp = Object.defineProperty;
var __typeError = (msg) => {
  throw TypeError(msg);
};
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
var __accessCheck = (obj, member, msg) => member.has(obj) || __typeError("Cannot " + msg);
var __privateAdd = (obj, member, value) => member.has(obj) ? __typeError("Cannot add the same private member more than once") : member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
var __privateMethod = (obj, member, method) => (__accessCheck(obj, member, "access private method"), method);
let Ee, np, zt, Et, GV, Bt, L2, AV, Tl, je, rt, If, kn, P4, QV, Ji, l2, HV, jV, BV, cs, Pf, Ue, YV, ls, Zn, Pe, Tf, u2, FP, u1, gb, C2, Gv, e8, gn, wV, lf, cf, EV, Mr, Y2, Re, qe, LV, eG, Vv, CV, yt, TV, zb, qV, OV, kV, Pr, XV, gL, IV, n2, T8, cI, R8, DV, iv, MV, lP, br, wp, uw, MM, uV, vn, JV, Wt, VV, NP, D8, zV, Oi, nn, es, $V, hi, d2, F2, h2, Np, D3, Cl, i2, Cs, f2, e6, Ye, OP, kP, BP, HP, gs, Sp, JD, UV, Pn, s6, r6, V8, Wf, oP, PV, aP, jt, FV, nr, RV, pe, E7, lA, v2, Wi, e2, ZV, Gt;
let __tla = (async () => {
  var _MU_instances, e_fn, _uB_instances, e_fn2;
  (function() {
    const e = document.createElement("link").relList;
    if (e && e.supports && e.supports("modulepreload")) return;
    for (const r of document.querySelectorAll('link[rel="modulepreload"]')) i(r);
    new MutationObserver((r) => {
      for (const s of r) if (s.type === "childList") for (const o of s.addedNodes) o.tagName === "LINK" && o.rel === "modulepreload" && i(o);
    }).observe(document, {
      childList: true,
      subtree: true
    });
    function t(r) {
      const s = {};
      return r.integrity && (s.integrity = r.integrity), r.referrerPolicy && (s.referrerPolicy = r.referrerPolicy), r.crossOrigin === "use-credentials" ? s.credentials = "include" : r.crossOrigin === "anonymous" ? s.credentials = "omit" : s.credentials = "same-origin", s;
    }
    function i(r) {
      if (r.ep) return;
      r.ep = true;
      const s = t(r);
      fetch(r.href, s);
    }
  })();
  function ip(n) {
    const e = /* @__PURE__ */ Object.create(null);
    for (const t of n.split(",")) e[t] = 1;
    return (t) => t in e;
  }
  const at = {}, To = [], pi = () => {
  }, yE = () => false, vl = (n) => n.charCodeAt(0) === 111 && n.charCodeAt(1) === 110 && (n.charCodeAt(2) > 122 || n.charCodeAt(2) < 97), rp = (n) => n.startsWith("onUpdate:"), dn = Object.assign, sp = (n, e) => {
    const t = n.indexOf(e);
    t > -1 && n.splice(t, 1);
  }, xE = Object.prototype.hasOwnProperty, Ze = (n, e) => xE.call(n, e), be = Array.isArray, Co = (n) => yl(n) === "[object Map]", m7 = (n) => yl(n) === "[object Set]", SE = (n) => yl(n) === "[object RegExp]", ve = (n) => typeof n == "function", pt = (n) => typeof n == "string", I3 = (n) => typeof n == "symbol", ut = (n) => n !== null && typeof n == "object", g7 = (n) => (ut(n) || ve(n)) && ve(n.then) && ve(n.catch), _7 = Object.prototype.toString, yl = (n) => _7.call(n), EE = (n) => yl(n).slice(8, -1), b7 = (n) => yl(n) === "[object Object]", op = (n) => pt(n) && n !== "NaN" && n[0] !== "-" && "" + parseInt(n, 10) === n, Ao = ip(",key,ref,ref_for,ref_key,onVnodeBeforeMount,onVnodeMounted,onVnodeBeforeUpdate,onVnodeUpdated,onVnodeBeforeUnmount,onVnodeUnmounted"), sf = (n) => {
    const e = /* @__PURE__ */ Object.create(null);
    return (t) => e[t] || (e[t] = n(t));
  }, wE = /-(\w)/g, J2 = sf((n) => n.replace(wE, (e, t) => t ? t.toUpperCase() : "")), ME = /\B([A-Z])/g, Fs = sf((n) => n.replace(ME, "-$1").toLowerCase()), of = sf((n) => n.charAt(0).toUpperCase() + n.slice(1)), $f = sf((n) => n ? `on${of(n)}` : ""), pr = (n, e) => !Object.is(n, e), Do = (n, ...e) => {
    for (let t = 0; t < n.length; t++) n[t](...e);
  }, v7 = (n, e, t, i = false) => {
    Object.defineProperty(n, e, {
      configurable: true,
      enumerable: false,
      writable: i,
      value: t
    });
  }, Hd = (n) => {
    const e = parseFloat(n);
    return isNaN(e) ? n : e;
  }, y7 = (n) => {
    const e = pt(n) ? Number(n) : NaN;
    return isNaN(e) ? n : e;
  };
  let j6;
  const af = () => j6 || (j6 = typeof globalThis < "u" ? globalThis : typeof self < "u" ? self : typeof window < "u" ? window : typeof global < "u" ? global : {});
  lf = function(n) {
    if (be(n)) {
      const e = {};
      for (let t = 0; t < n.length; t++) {
        const i = n[t], r = pt(i) ? DE(i) : lf(i);
        if (r) for (const s in r) e[s] = r[s];
      }
      return e;
    } else if (pt(n) || ut(n)) return n;
  };
  const TE = /;(?![^(]*\))/g, CE = /:([^]+)/, AE = /\/\*[^]*?\*\//g;
  function DE(n) {
    const e = {};
    return n.replace(AE, "").split(TE).forEach((t) => {
      if (t) {
        const i = t.split(CE);
        i.length > 1 && (e[i[0].trim()] = i[1].trim());
      }
    }), e;
  }
  cf = function(n) {
    let e = "";
    if (pt(n)) e = n;
    else if (be(n)) for (let t = 0; t < n.length; t++) {
      const i = cf(n[t]);
      i && (e += i + " ");
    }
    else if (ut(n)) for (const t in n) n[t] && (e += t + " ");
    return e.trim();
  };
  function RE(n) {
    if (!n) return null;
    let { class: e, style: t } = n;
    return e && !pt(e) && (n.class = cf(e)), t && (n.style = lf(t)), n;
  }
  const PE = "itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly", LE = ip(PE);
  function x7(n) {
    return !!n || n === "";
  }
  let S7, w7, qf;
  S7 = (n) => !!(n && n.__v_isRef === true);
  E7 = (n) => pt(n) ? n : n == null ? "" : be(n) || ut(n) && (n.toString === _7 || !ve(n.toString)) ? S7(n) ? E7(n.value) : JSON.stringify(n, w7, 2) : String(n);
  w7 = (n, e) => S7(e) ? w7(n, e.value) : Co(e) ? {
    [`Map(${e.size})`]: [
      ...e.entries()
    ].reduce((t, [i, r], s) => (t[qf(i, s) + " =>"] = r, t), {})
  } : m7(e) ? {
    [`Set(${e.size})`]: [
      ...e.values()
    ].map((t) => qf(t))
  } : I3(e) ? qf(e) : ut(e) && !be(e) && !b7(e) ? String(e) : e;
  qf = (n, e = "") => {
    var t;
    return I3(n) ? `Symbol(${(t = n.description) != null ? t : e})` : n;
  };
  let Xn;
  class M7 {
    constructor(e = false) {
      this.detached = e, this._active = true, this.effects = [], this.cleanups = [], this._isPaused = false, this.parent = Xn, !e && Xn && (this.index = (Xn.scopes || (Xn.scopes = [])).push(this) - 1);
    }
    get active() {
      return this._active;
    }
    pause() {
      if (this._active) {
        this._isPaused = true;
        let e, t;
        if (this.scopes) for (e = 0, t = this.scopes.length; e < t; e++) this.scopes[e].pause();
        for (e = 0, t = this.effects.length; e < t; e++) this.effects[e].pause();
      }
    }
    resume() {
      if (this._active && this._isPaused) {
        this._isPaused = false;
        let e, t;
        if (this.scopes) for (e = 0, t = this.scopes.length; e < t; e++) this.scopes[e].resume();
        for (e = 0, t = this.effects.length; e < t; e++) this.effects[e].resume();
      }
    }
    run(e) {
      if (this._active) {
        const t = Xn;
        try {
          return Xn = this, e();
        } finally {
          Xn = t;
        }
      }
    }
    on() {
      Xn = this;
    }
    off() {
      Xn = this.parent;
    }
    stop(e) {
      if (this._active) {
        this._active = false;
        let t, i;
        for (t = 0, i = this.effects.length; t < i; t++) this.effects[t].stop();
        for (this.effects.length = 0, t = 0, i = this.cleanups.length; t < i; t++) this.cleanups[t]();
        if (this.cleanups.length = 0, this.scopes) {
          for (t = 0, i = this.scopes.length; t < i; t++) this.scopes[t].stop(true);
          this.scopes.length = 0;
        }
        if (!this.detached && this.parent && !e) {
          const r = this.parent.scopes.pop();
          r && r !== this && (this.parent.scopes[this.index] = r, r.index = this.index);
        }
        this.parent = void 0;
      }
    }
  }
  function ap(n) {
    return new M7(n);
  }
  function uf() {
    return Xn;
  }
  function T7(n, e = false) {
    Xn && Xn.cleanups.push(n);
  }
  let ct;
  const Yf = /* @__PURE__ */ new WeakSet();
  class C7 {
    constructor(e) {
      this.fn = e, this.deps = void 0, this.depsTail = void 0, this.flags = 5, this.next = void 0, this.cleanup = void 0, this.scheduler = void 0, Xn && Xn.active && Xn.effects.push(this);
    }
    pause() {
      this.flags |= 64;
    }
    resume() {
      this.flags & 64 && (this.flags &= -65, Yf.has(this) && (Yf.delete(this), this.trigger()));
    }
    notify() {
      this.flags & 2 && !(this.flags & 32) || this.flags & 8 || D7(this);
    }
    run() {
      if (!(this.flags & 1)) return this.fn();
      this.flags |= 2, X6(this), R7(this);
      const e = ct, t = mi;
      ct = this, mi = true;
      try {
        return this.fn();
      } finally {
        P7(this), ct = e, mi = t, this.flags &= -3;
      }
    }
    stop() {
      if (this.flags & 1) {
        for (let e = this.deps; e; e = e.nextDep) up(e);
        this.deps = this.depsTail = void 0, X6(this), this.onStop && this.onStop(), this.flags &= -2;
      }
    }
    trigger() {
      this.flags & 64 ? Yf.add(this) : this.scheduler ? this.scheduler() : this.runIfDirty();
    }
    runIfDirty() {
      zd(this) && this.run();
    }
    get dirty() {
      return zd(this);
    }
  }
  let A7 = 0, u0, f0;
  function D7(n, e = false) {
    if (n.flags |= 8, e) {
      n.next = f0, f0 = n;
      return;
    }
    n.next = u0, u0 = n;
  }
  function lp() {
    A7++;
  }
  function cp() {
    if (--A7 > 0) return;
    if (f0) {
      let e = f0;
      for (f0 = void 0; e; ) {
        const t = e.next;
        e.next = void 0, e.flags &= -9, e = t;
      }
    }
    let n;
    for (; u0; ) {
      let e = u0;
      for (u0 = void 0; e; ) {
        const t = e.next;
        if (e.next = void 0, e.flags &= -9, e.flags & 1) try {
          e.trigger();
        } catch (i) {
          n || (n = i);
        }
        e = t;
      }
    }
    if (n) throw n;
  }
  function R7(n) {
    for (let e = n.deps; e; e = e.nextDep) e.version = -1, e.prevActiveLink = e.dep.activeLink, e.dep.activeLink = e;
  }
  function P7(n) {
    let e, t = n.depsTail, i = t;
    for (; i; ) {
      const r = i.prevDep;
      i.version === -1 ? (i === t && (t = r), up(i), IE(i)) : e = i, i.dep.activeLink = i.prevActiveLink, i.prevActiveLink = void 0, i = r;
    }
    n.deps = e, n.depsTail = t;
  }
  function zd(n) {
    for (let e = n.deps; e; e = e.nextDep) if (e.dep.version !== e.version || e.dep.computed && (L7(e.dep.computed) || e.dep.version !== e.version)) return true;
    return !!n._dirty;
  }
  function L7(n) {
    if (n.flags & 4 && !(n.flags & 16) || (n.flags &= -17, n.globalVersion === G0)) return;
    n.globalVersion = G0;
    const e = n.dep;
    if (n.flags |= 2, e.version > 0 && !n.isSSR && n.deps && !zd(n)) {
      n.flags &= -3;
      return;
    }
    const t = ct, i = mi;
    ct = n, mi = true;
    try {
      R7(n);
      const r = n.fn(n._value);
      (e.version === 0 || pr(r, n._value)) && (n._value = r, e.version++);
    } catch (r) {
      throw e.version++, r;
    } finally {
      ct = t, mi = i, P7(n), n.flags &= -3;
    }
  }
  function up(n, e = false) {
    const { dep: t, prevSub: i, nextSub: r } = n;
    if (i && (i.nextSub = r, n.prevSub = void 0), r && (r.prevSub = i, n.nextSub = void 0), t.subs === n && (t.subs = i, !i && t.computed)) {
      t.computed.flags &= -5;
      for (let s = t.computed.deps; s; s = s.nextDep) up(s, true);
    }
    !e && !--t.sc && t.map && t.map.delete(t.key);
  }
  function IE(n) {
    const { prevDep: e, nextDep: t } = n;
    e && (e.nextDep = t, n.prevDep = void 0), t && (t.prevDep = e, n.nextDep = void 0);
  }
  let mi = true;
  const I7 = [];
  function Dr() {
    I7.push(mi), mi = false;
  }
  function Rr() {
    const n = I7.pop();
    mi = n === void 0 ? true : n;
  }
  function X6(n) {
    const { cleanup: e } = n;
    if (n.cleanup = void 0, e) {
      const t = ct;
      ct = void 0;
      try {
        e();
      } finally {
        ct = t;
      }
    }
  }
  let G0 = 0;
  class FE {
    constructor(e, t) {
      this.sub = e, this.dep = t, this.version = t.version, this.nextDep = this.prevDep = this.nextSub = this.prevSub = this.prevActiveLink = void 0;
    }
  }
  class ff {
    constructor(e) {
      this.computed = e, this.version = 0, this.activeLink = void 0, this.subs = void 0, this.map = void 0, this.key = void 0, this.sc = 0;
    }
    track(e) {
      if (!ct || !mi || ct === this.computed) return;
      let t = this.activeLink;
      if (t === void 0 || t.sub !== ct) t = this.activeLink = new FE(ct, this), ct.deps ? (t.prevDep = ct.depsTail, ct.depsTail.nextDep = t, ct.depsTail = t) : ct.deps = ct.depsTail = t, F7(t);
      else if (t.version === -1 && (t.version = this.version, t.nextDep)) {
        const i = t.nextDep;
        i.prevDep = t.prevDep, t.prevDep && (t.prevDep.nextDep = i), t.prevDep = ct.depsTail, t.nextDep = void 0, ct.depsTail.nextDep = t, ct.depsTail = t, ct.deps === t && (ct.deps = i);
      }
      return t;
    }
    trigger(e) {
      this.version++, G0++, this.notify(e);
    }
    notify(e) {
      lp();
      try {
        for (let t = this.subs; t; t = t.prevSub) t.sub.notify() && t.sub.dep.notify();
      } finally {
        cp();
      }
    }
  }
  function F7(n) {
    if (n.dep.sc++, n.sub.flags & 4) {
      const e = n.dep.computed;
      if (e && !n.dep.subs) {
        e.flags |= 20;
        for (let i = e.deps; i; i = i.nextDep) F7(i);
      }
      const t = n.dep.subs;
      t !== n && (n.prevSub = t, t && (t.nextSub = n)), n.dep.subs = n;
    }
  }
  const fu = /* @__PURE__ */ new WeakMap(), ds = Symbol(""), Vd = Symbol(""), W0 = Symbol("");
  function Cn(n, e, t) {
    if (mi && ct) {
      let i = fu.get(n);
      i || fu.set(n, i = /* @__PURE__ */ new Map());
      let r = i.get(t);
      r || (i.set(t, r = new ff()), r.map = i, r.key = t), r.track();
    }
  }
  function g3(n, e, t, i, r, s) {
    const o = fu.get(n);
    if (!o) {
      G0++;
      return;
    }
    const a = (l) => {
      l && l.trigger();
    };
    if (lp(), e === "clear") o.forEach(a);
    else {
      const l = be(n), c = l && op(t);
      if (l && t === "length") {
        const u = Number(i);
        o.forEach((h, d) => {
          (d === "length" || d === W0 || !I3(d) && d >= u) && a(h);
        });
      } else switch ((t !== void 0 || o.has(void 0)) && a(o.get(t)), c && a(o.get(W0)), e) {
        case "add":
          l ? c && a(o.get("length")) : (a(o.get(ds)), Co(n) && a(o.get(Vd)));
          break;
        case "delete":
          l || (a(o.get(ds)), Co(n) && a(o.get(Vd)));
          break;
        case "set":
          Co(n) && a(o.get(ds));
          break;
      }
    }
    cp();
  }
  function OE(n, e) {
    const t = fu.get(n);
    return t && t.get(e);
  }
  function Hs(n) {
    const e = We(n);
    return e === n ? e : (Cn(e, "iterate", W0), q2(n) ? e : e.map(An));
  }
  function hf(n) {
    return Cn(n = We(n), "iterate", W0), n;
  }
  const kE = {
    __proto__: null,
    [Symbol.iterator]() {
      return Kf(this, Symbol.iterator, An);
    },
    concat(...n) {
      return Hs(this).concat(...n.map((e) => be(e) ? Hs(e) : e));
    },
    entries() {
      return Kf(this, "entries", (n) => (n[1] = An(n[1]), n));
    },
    every(n, e) {
      return e3(this, "every", n, e, void 0, arguments);
    },
    filter(n, e) {
      return e3(this, "filter", n, e, (t) => t.map(An), arguments);
    },
    find(n, e) {
      return e3(this, "find", n, e, An, arguments);
    },
    findIndex(n, e) {
      return e3(this, "findIndex", n, e, void 0, arguments);
    },
    findLast(n, e) {
      return e3(this, "findLast", n, e, An, arguments);
    },
    findLastIndex(n, e) {
      return e3(this, "findLastIndex", n, e, void 0, arguments);
    },
    forEach(n, e) {
      return e3(this, "forEach", n, e, void 0, arguments);
    },
    includes(...n) {
      return Jf(this, "includes", n);
    },
    indexOf(...n) {
      return Jf(this, "indexOf", n);
    },
    join(n) {
      return Hs(this).join(n);
    },
    lastIndexOf(...n) {
      return Jf(this, "lastIndexOf", n);
    },
    map(n, e) {
      return e3(this, "map", n, e, void 0, arguments);
    },
    pop() {
      return Aa(this, "pop");
    },
    push(...n) {
      return Aa(this, "push", n);
    },
    reduce(n, ...e) {
      return $6(this, "reduce", n, e);
    },
    reduceRight(n, ...e) {
      return $6(this, "reduceRight", n, e);
    },
    shift() {
      return Aa(this, "shift");
    },
    some(n, e) {
      return e3(this, "some", n, e, void 0, arguments);
    },
    splice(...n) {
      return Aa(this, "splice", n);
    },
    toReversed() {
      return Hs(this).toReversed();
    },
    toSorted(n) {
      return Hs(this).toSorted(n);
    },
    toSpliced(...n) {
      return Hs(this).toSpliced(...n);
    },
    unshift(...n) {
      return Aa(this, "unshift", n);
    },
    values() {
      return Kf(this, "values", An);
    }
  };
  function Kf(n, e, t) {
    const i = hf(n), r = i[e]();
    return i !== n && !q2(n) && (r._next = r.next, r.next = () => {
      const s = r._next();
      return s.value && (s.value = t(s.value)), s;
    }), r;
  }
  const NE = Array.prototype;
  function e3(n, e, t, i, r, s) {
    const o = hf(n), a = o !== n && !q2(n), l = o[e];
    if (l !== NE[e]) {
      const h = l.apply(n, s);
      return a ? An(h) : h;
    }
    let c = t;
    o !== n && (a ? c = function(h, d) {
      return t.call(this, An(h), d, n);
    } : t.length > 2 && (c = function(h, d) {
      return t.call(this, h, d, n);
    }));
    const u = l.call(o, c, i);
    return a && r ? r(u) : u;
  }
  function $6(n, e, t, i) {
    const r = hf(n);
    let s = t;
    return r !== n && (q2(n) ? t.length > 3 && (s = function(o, a, l) {
      return t.call(this, o, a, l, n);
    }) : s = function(o, a, l) {
      return t.call(this, o, An(a), l, n);
    }), r[e](s, ...i);
  }
  function Jf(n, e, t) {
    const i = We(n);
    Cn(i, "iterate", W0);
    const r = i[e](...t);
    return (r === -1 || r === false) && fp(t[0]) ? (t[0] = We(t[0]), i[e](...t)) : r;
  }
  function Aa(n, e, t = []) {
    Dr(), lp();
    const i = We(n)[e].apply(n, t);
    return cp(), Rr(), i;
  }
  const UE = ip("__proto__,__v_isRef,__isVue"), O7 = new Set(Object.getOwnPropertyNames(Symbol).filter((n) => n !== "arguments" && n !== "caller").map((n) => Symbol[n]).filter(I3));
  function BE(n) {
    I3(n) || (n = String(n));
    const e = We(this);
    return Cn(e, "has", n), e.hasOwnProperty(n);
  }
  class k7 {
    constructor(e = false, t = false) {
      this._isReadonly = e, this._isShallow = t;
    }
    get(e, t, i) {
      if (t === "__v_skip") return e.__v_skip;
      const r = this._isReadonly, s = this._isShallow;
      if (t === "__v_isReactive") return !r;
      if (t === "__v_isReadonly") return r;
      if (t === "__v_isShallow") return s;
      if (t === "__v_raw") return i === (r ? s ? V7 : z7 : s ? H7 : B7).get(e) || Object.getPrototypeOf(e) === Object.getPrototypeOf(i) ? e : void 0;
      const o = be(e);
      if (!r) {
        let l;
        if (o && (l = kE[t])) return l;
        if (t === "hasOwnProperty") return BE;
      }
      const a = Reflect.get(e, t, yt(e) ? e : i);
      return (I3(t) ? O7.has(t) : UE(t)) || (r || Cn(e, "get", t), s) ? a : yt(a) ? o && op(t) ? a : a.value : ut(a) ? r ? va(a) : k2(a) : a;
    }
  }
  class N7 extends k7 {
    constructor(e = false) {
      super(false, e);
    }
    set(e, t, i, r) {
      let s = e[t];
      if (!this._isShallow) {
        const l = Er(s);
        if (!q2(i) && !Er(i) && (s = We(s), i = We(i)), !be(e) && yt(s) && !yt(i)) return l ? false : (s.value = i, true);
      }
      const o = be(e) && op(t) ? Number(t) < e.length : Ze(e, t), a = Reflect.set(e, t, i, yt(e) ? e : r);
      return e === We(r) && (o ? pr(i, s) && g3(e, "set", t, i) : g3(e, "add", t, i)), a;
    }
    deleteProperty(e, t) {
      const i = Ze(e, t);
      e[t];
      const r = Reflect.deleteProperty(e, t);
      return r && i && g3(e, "delete", t, void 0), r;
    }
    has(e, t) {
      const i = Reflect.has(e, t);
      return (!I3(t) || !O7.has(t)) && Cn(e, "has", t), i;
    }
    ownKeys(e) {
      return Cn(e, "iterate", be(e) ? "length" : ds), Reflect.ownKeys(e);
    }
  }
  class U7 extends k7 {
    constructor(e = false) {
      super(true, e);
    }
    set(e, t) {
      return true;
    }
    deleteProperty(e, t) {
      return true;
    }
  }
  const HE = new N7(), zE = new U7(), VE = new N7(true), GE = new U7(true), Gd = (n) => n, Fl = (n) => Reflect.getPrototypeOf(n);
  function WE(n, e, t) {
    return function(...i) {
      const r = this.__v_raw, s = We(r), o = Co(s), a = n === "entries" || n === Symbol.iterator && o, l = n === "keys" && o, c = r[n](...i), u = t ? Gd : e ? Wd : An;
      return !e && Cn(s, "iterate", l ? Vd : ds), {
        next() {
          const { value: h, done: d } = c.next();
          return d ? {
            value: h,
            done: d
          } : {
            value: a ? [
              u(h[0]),
              u(h[1])
            ] : u(h),
            done: d
          };
        },
        [Symbol.iterator]() {
          return this;
        }
      };
    };
  }
  function Ol(n) {
    return function(...e) {
      return n === "delete" ? false : n === "clear" ? void 0 : this;
    };
  }
  function jE(n, e) {
    const t = {
      get(r) {
        const s = this.__v_raw, o = We(s), a = We(r);
        n || (pr(r, a) && Cn(o, "get", r), Cn(o, "get", a));
        const { has: l } = Fl(o), c = e ? Gd : n ? Wd : An;
        if (l.call(o, r)) return c(s.get(r));
        if (l.call(o, a)) return c(s.get(a));
        s !== o && s.get(r);
      },
      get size() {
        const r = this.__v_raw;
        return !n && Cn(We(r), "iterate", ds), Reflect.get(r, "size", r);
      },
      has(r) {
        const s = this.__v_raw, o = We(s), a = We(r);
        return n || (pr(r, a) && Cn(o, "has", r), Cn(o, "has", a)), r === a ? s.has(r) : s.has(r) || s.has(a);
      },
      forEach(r, s) {
        const o = this, a = o.__v_raw, l = We(a), c = e ? Gd : n ? Wd : An;
        return !n && Cn(l, "iterate", ds), a.forEach((u, h) => r.call(s, c(u), c(h), o));
      }
    };
    return dn(t, n ? {
      add: Ol("add"),
      set: Ol("set"),
      delete: Ol("delete"),
      clear: Ol("clear")
    } : {
      add(r) {
        !e && !q2(r) && !Er(r) && (r = We(r));
        const s = We(this);
        return Fl(s).has.call(s, r) || (s.add(r), g3(s, "add", r, r)), this;
      },
      set(r, s) {
        !e && !q2(s) && !Er(s) && (s = We(s));
        const o = We(this), { has: a, get: l } = Fl(o);
        let c = a.call(o, r);
        c || (r = We(r), c = a.call(o, r));
        const u = l.call(o, r);
        return o.set(r, s), c ? pr(s, u) && g3(o, "set", r, s) : g3(o, "add", r, s), this;
      },
      delete(r) {
        const s = We(this), { has: o, get: a } = Fl(s);
        let l = o.call(s, r);
        l || (r = We(r), l = o.call(s, r)), a && a.call(s, r);
        const c = s.delete(r);
        return l && g3(s, "delete", r, void 0), c;
      },
      clear() {
        const r = We(this), s = r.size !== 0, o = r.clear();
        return s && g3(r, "clear", void 0, void 0), o;
      }
    }), [
      "keys",
      "values",
      "entries",
      Symbol.iterator
    ].forEach((r) => {
      t[r] = WE(r, n, e);
    }), t;
  }
  function df(n, e) {
    const t = jE(n, e);
    return (i, r, s) => r === "__v_isReactive" ? !n : r === "__v_isReadonly" ? n : r === "__v_raw" ? i : Reflect.get(Ze(t, r) && r in i ? t : i, r, s);
  }
  const XE = {
    get: df(false, false)
  }, $E = {
    get: df(false, true)
  }, qE = {
    get: df(true, false)
  }, YE = {
    get: df(true, true)
  }, B7 = /* @__PURE__ */ new WeakMap(), H7 = /* @__PURE__ */ new WeakMap(), z7 = /* @__PURE__ */ new WeakMap(), V7 = /* @__PURE__ */ new WeakMap();
  function KE(n) {
    switch (n) {
      case "Object":
      case "Array":
        return 1;
      case "Map":
      case "Set":
      case "WeakMap":
      case "WeakSet":
        return 2;
      default:
        return 0;
    }
  }
  function JE(n) {
    return n.__v_skip || !Object.isExtensible(n) ? 0 : KE(EE(n));
  }
  function k2(n) {
    return Er(n) ? n : pf(n, false, HE, XE, B7);
  }
  function y3(n) {
    return pf(n, false, VE, $E, H7);
  }
  function va(n) {
    return pf(n, true, zE, qE, z7);
  }
  function QE(n) {
    return pf(n, true, GE, YE, V7);
  }
  function pf(n, e, t, i, r) {
    if (!ut(n) || n.__v_raw && !(e && n.__v_isReactive)) return n;
    const s = r.get(n);
    if (s) return s;
    const o = JE(n);
    if (o === 0) return n;
    const a = new Proxy(n, o === 2 ? i : t);
    return r.set(n, a), a;
  }
  function M3(n) {
    return Er(n) ? M3(n.__v_raw) : !!(n && n.__v_isReactive);
  }
  function Er(n) {
    return !!(n && n.__v_isReadonly);
  }
  function q2(n) {
    return !!(n && n.__v_isShallow);
  }
  function fp(n) {
    return n ? !!n.__v_raw : false;
  }
  function We(n) {
    const e = n && n.__v_raw;
    return e ? We(e) : n;
  }
  function hp(n) {
    return !Ze(n, "__v_skip") && Object.isExtensible(n) && v7(n, "__v_skip", true), n;
  }
  const An = (n) => ut(n) ? k2(n) : n, Wd = (n) => ut(n) ? va(n) : n;
  yt = function(n) {
    return n ? n.__v_isRef === true : false;
  };
  vn = function(n) {
    return G7(n, false);
  };
  pe = function(n) {
    return G7(n, true);
  };
  function G7(n, e) {
    return yt(n) ? n : new ZE(n, e);
  }
  class ZE {
    constructor(e, t) {
      this.dep = new ff(), this.__v_isRef = true, this.__v_isShallow = false, this._rawValue = t ? e : We(e), this._value = t ? e : An(e), this.__v_isShallow = t;
    }
    get value() {
      return this.dep.track(), this._value;
    }
    set value(e) {
      const t = this._rawValue, i = this.__v_isShallow || q2(e) || Er(e);
      e = i ? e : We(e), pr(e, t) && (this._rawValue = e, this._value = i ? e : An(e), this.dep.trigger());
    }
  }
  Pe = function(n) {
    return yt(n) ? n.value : n;
  };
  function $t(n) {
    return ve(n) ? n() : Pe(n);
  }
  const ew = {
    get: (n, e, t) => e === "__v_raw" ? n : Pe(Reflect.get(n, e, t)),
    set: (n, e, t, i) => {
      const r = n[e];
      return yt(r) && !yt(t) ? (r.value = t, true) : Reflect.set(n, e, t, i);
    }
  };
  function W7(n) {
    return M3(n) ? n : new Proxy(n, ew);
  }
  class tw {
    constructor(e) {
      this.__v_isRef = true, this._value = void 0;
      const t = this.dep = new ff(), { get: i, set: r } = e(t.track.bind(t), t.trigger.bind(t));
      this._get = i, this._set = r;
    }
    get value() {
      return this._value = this._get();
    }
    set value(e) {
      this._set(e);
    }
  }
  function j7(n) {
    return new tw(n);
  }
  function X7(n) {
    const e = be(n) ? new Array(n.length) : {};
    for (const t in n) e[t] = q7(n, t);
    return e;
  }
  class nw {
    constructor(e, t, i) {
      this._object = e, this._key = t, this._defaultValue = i, this.__v_isRef = true, this._value = void 0;
    }
    get value() {
      const e = this._object[this._key];
      return this._value = e === void 0 ? this._defaultValue : e;
    }
    set value(e) {
      this._object[this._key] = e;
    }
    get dep() {
      return OE(We(this._object), this._key);
    }
  }
  class iw {
    constructor(e) {
      this._getter = e, this.__v_isRef = true, this.__v_isReadonly = true, this._value = void 0;
    }
    get value() {
      return this._value = this._getter();
    }
  }
  function $7(n, e, t) {
    return yt(n) ? n : ve(n) ? new iw(n) : ut(n) && arguments.length > 1 ? q7(n, e, t) : vn(n);
  }
  function q7(n, e, t) {
    const i = n[e];
    return yt(i) ? i : new nw(n, e, t);
  }
  class rw {
    constructor(e, t, i) {
      this.fn = e, this.setter = t, this._value = void 0, this.dep = new ff(this), this.__v_isRef = true, this.deps = void 0, this.depsTail = void 0, this.flags = 16, this.globalVersion = G0 - 1, this.next = void 0, this.effect = this, this.__v_isReadonly = !t, this.isSSR = i;
    }
    notify() {
      if (this.flags |= 16, !(this.flags & 8) && ct !== this) return D7(this, true), true;
    }
    get value() {
      const e = this.dep.track();
      return L7(this), e && (e.version = this.dep.version), this._value;
    }
    set value(e) {
      this.setter && this.setter(e);
    }
  }
  function sw(n, e, t = false) {
    let i, r;
    return ve(n) ? i = n : (i = n.get, r = n.set), new rw(i, r, t);
  }
  const kl = {}, hu = /* @__PURE__ */ new WeakMap();
  let Qr;
  function ow(n, e = false, t = Qr) {
    if (t) {
      let i = hu.get(t);
      i || hu.set(t, i = []), i.push(n);
    }
  }
  function aw(n, e, t = at) {
    const { immediate: i, deep: r, once: s, scheduler: o, augmentJob: a, call: l } = t, c = (v) => r ? v : q2(v) || r === false || r === 0 ? _3(v, 1) : _3(v);
    let u, h, d, f, m = false, _ = false;
    if (yt(n) ? (h = () => n.value, m = q2(n)) : M3(n) ? (h = () => c(n), m = true) : be(n) ? (_ = true, m = n.some((v) => M3(v) || q2(v)), h = () => n.map((v) => {
      if (yt(v)) return v.value;
      if (M3(v)) return c(v);
      if (ve(v)) return l ? l(v, 2) : v();
    })) : ve(n) ? e ? h = l ? () => l(n, 2) : n : h = () => {
      if (d) {
        Dr();
        try {
          d();
        } finally {
          Rr();
        }
      }
      const v = Qr;
      Qr = u;
      try {
        return l ? l(n, 3, [
          f
        ]) : n(f);
      } finally {
        Qr = v;
      }
    } : h = pi, e && r) {
      const v = h, x = r === true ? 1 / 0 : r;
      h = () => _3(v(), x);
    }
    const p = uf(), g = () => {
      u.stop(), p && p.active && sp(p.effects, u);
    };
    if (s && e) {
      const v = e;
      e = (...x) => {
        v(...x), g();
      };
    }
    let y = _ ? new Array(n.length).fill(kl) : kl;
    const b = (v) => {
      if (!(!(u.flags & 1) || !u.dirty && !v)) if (e) {
        const x = u.run();
        if (r || m || (_ ? x.some((C, A) => pr(C, y[A])) : pr(x, y))) {
          d && d();
          const C = Qr;
          Qr = u;
          try {
            const A = [
              x,
              y === kl ? void 0 : _ && y[0] === kl ? [] : y,
              f
            ];
            l ? l(e, 3, A) : e(...A), y = x;
          } finally {
            Qr = C;
          }
        }
      } else u.run();
    };
    return a && a(b), u = new C7(h), u.scheduler = o ? () => o(b, false) : b, f = (v) => ow(v, false, u), d = u.onStop = () => {
      const v = hu.get(u);
      if (v) {
        if (l) l(v, 4);
        else for (const x of v) x();
        hu.delete(u);
      }
    }, e ? i ? b(true) : y = u.run() : o ? o(b.bind(null, true), true) : u.run(), g.pause = u.pause.bind(u), g.resume = u.resume.bind(u), g.stop = g, g;
  }
  function _3(n, e = 1 / 0, t) {
    if (e <= 0 || !ut(n) || n.__v_skip || (t = t || /* @__PURE__ */ new Set(), t.has(n))) return n;
    if (t.add(n), e--, yt(n)) _3(n.value, e, t);
    else if (be(n)) for (let i = 0; i < n.length; i++) _3(n[i], e, t);
    else if (m7(n) || Co(n)) n.forEach((i) => {
      _3(i, e, t);
    });
    else if (b7(n)) {
      for (const i in n) _3(n[i], e, t);
      for (const i of Object.getOwnPropertySymbols(n)) Object.prototype.propertyIsEnumerable.call(n, i) && _3(n[i], e, t);
    }
    return n;
  }
  function xl(n, e, t, i) {
    try {
      return i ? n(...i) : n();
    } catch (r) {
      ya(r, e, t);
    }
  }
  function vi(n, e, t, i) {
    if (ve(n)) {
      const r = xl(n, e, t, i);
      return r && g7(r) && r.catch((s) => {
        ya(s, e, t);
      }), r;
    }
    if (be(n)) {
      const r = [];
      for (let s = 0; s < n.length; s++) r.push(vi(n[s], e, t, i));
      return r;
    }
  }
  function ya(n, e, t, i = true) {
    const r = e ? e.vnode : null, { errorHandler: s, throwUnhandledErrorInProduction: o } = e && e.appContext.config || at;
    if (e) {
      let a = e.parent;
      const l = e.proxy, c = `https://vuejs.org/error-reference/#runtime-${t}`;
      for (; a; ) {
        const u = a.ec;
        if (u) {
          for (let h = 0; h < u.length; h++) if (u[h](n, l, c) === false) return;
        }
        a = a.parent;
      }
      if (s) {
        Dr(), xl(s, null, 10, [
          n,
          l,
          c
        ]), Rr();
        return;
      }
    }
    lw(n, t, r, i, o);
  }
  function lw(n, e, t, i = true, r = false) {
    if (r) throw n;
    console.error(n);
  }
  const Yn = [];
  let Ai = -1;
  const Ro = [];
  let K3 = null, uo = 0;
  const Y7 = Promise.resolve();
  let du = null;
  e2 = function(n) {
    const e = du || Y7;
    return n ? e.then(this ? n.bind(this) : n) : e;
  };
  function cw(n) {
    let e = Ai + 1, t = Yn.length;
    for (; e < t; ) {
      const i = e + t >>> 1, r = Yn[i], s = j0(r);
      s < n || s === n && r.flags & 2 ? e = i + 1 : t = i;
    }
    return e;
  }
  function dp(n) {
    if (!(n.flags & 1)) {
      const e = j0(n), t = Yn[Yn.length - 1];
      !t || !(n.flags & 2) && e >= j0(t) ? Yn.push(n) : Yn.splice(cw(e), 0, n), n.flags |= 1, K7();
    }
  }
  function K7() {
    du || (du = Y7.then(J7));
  }
  function pu(n) {
    be(n) ? Ro.push(...n) : K3 && n.id === -1 ? K3.splice(uo + 1, 0, n) : n.flags & 1 || (Ro.push(n), n.flags |= 1), K7();
  }
  function q6(n, e, t = Ai + 1) {
    for (; t < Yn.length; t++) {
      const i = Yn[t];
      if (i && i.flags & 2) {
        if (n && i.id !== n.uid) continue;
        Yn.splice(t, 1), t--, i.flags & 4 && (i.flags &= -2), i(), i.flags & 4 || (i.flags &= -2);
      }
    }
  }
  function mu(n) {
    if (Ro.length) {
      const e = [
        ...new Set(Ro)
      ].sort((t, i) => j0(t) - j0(i));
      if (Ro.length = 0, K3) {
        K3.push(...e);
        return;
      }
      for (K3 = e, uo = 0; uo < K3.length; uo++) {
        const t = K3[uo];
        t.flags & 4 && (t.flags &= -2), t.flags & 8 || t(), t.flags &= -2;
      }
      K3 = null, uo = 0;
    }
  }
  const j0 = (n) => n.id == null ? n.flags & 2 ? -1 : 1 / 0 : n.id;
  function J7(n) {
    try {
      for (Ai = 0; Ai < Yn.length; Ai++) {
        const e = Yn[Ai];
        e && !(e.flags & 8) && (e.flags & 4 && (e.flags &= -2), xl(e, e.i, e.i ? 15 : 14), e.flags & 4 || (e.flags &= -2));
      }
    } finally {
      for (; Ai < Yn.length; Ai++) {
        const e = Yn[Ai];
        e && (e.flags &= -2);
      }
      Ai = -1, Yn.length = 0, mu(), du = null, (Yn.length || Ro.length) && J7();
    }
  }
  let tn = null, Q7 = null;
  function gu(n) {
    const e = tn;
    return tn = n, Q7 = n && n.type.__scopeId || null, e;
  }
  Wi = function(n, e = tn, t) {
    if (!e || n._n) return n;
    const i = (...r) => {
      i._d && u5(-1);
      const s = gu(e);
      let o;
      try {
        o = n(...r);
      } finally {
        gu(s), i._d && u5(1);
      }
      return o;
    };
    return i._n = true, i._c = true, i._d = true, i;
  };
  uw = function(n, e) {
    if (tn === null) return n;
    const t = bf(tn), i = n.dirs || (n.dirs = []);
    for (let r = 0; r < e.length; r++) {
      let [s, o, a, l = at] = e[r];
      s && (ve(s) && (s = {
        mounted: s,
        updated: s
      }), s.deep && _3(o), i.push({
        dir: s,
        instance: t,
        value: o,
        oldValue: void 0,
        arg: a,
        modifiers: l
      }));
    }
    return n;
  };
  function Ri(n, e, t, i) {
    const r = n.dirs, s = e && e.dirs;
    for (let o = 0; o < r.length; o++) {
      const a = r[o];
      s && (a.oldValue = s[o].value);
      let l = a.dir[i];
      l && (Dr(), vi(l, t, 8, [
        n.el,
        a,
        n,
        e
      ]), Rr());
    }
  }
  const Z7 = Symbol("_vte"), eb = (n) => n.__isTeleport, h0 = (n) => n && (n.disabled || n.disabled === ""), Y6 = (n) => n && (n.defer || n.defer === ""), K6 = (n) => typeof SVGElement < "u" && n instanceof SVGElement, J6 = (n) => typeof MathMLElement == "function" && n instanceof MathMLElement, jd = (n, e) => {
    const t = n && n.to;
    return pt(t) ? e ? e(t) : null : t;
  }, tb = {
    name: "Teleport",
    __isTeleport: true,
    process(n, e, t, i, r, s, o, a, l, c) {
      const { mc: u, pc: h, pbc: d, o: { insert: f, querySelector: m, createText: _, createComment: p } } = c, g = h0(e.props);
      let { shapeFlag: y, children: b, dynamicChildren: v } = e;
      if (n == null) {
        const x = e.el = _(""), C = e.anchor = _("");
        f(x, t, i), f(C, t, i);
        const A = (M, E) => {
          y & 16 && (r && r.isCE && (r.ce._teleportTarget = M), u(b, M, E, r, s, o, a, l));
        }, P = () => {
          const M = e.target = jd(e.props, m), E = nb(M, e, _, f);
          M && (o !== "svg" && K6(M) ? o = "svg" : o !== "mathml" && J6(M) && (o = "mathml"), g || (A(M, E), Uc(e, false)));
        };
        g && (A(t, C), Uc(e, true)), Y6(e.props) ? Jt(() => {
          P(), e.el.__isMounted = true;
        }, s) : P();
      } else {
        if (Y6(e.props) && !n.el.__isMounted) {
          Jt(() => {
            tb.process(n, e, t, i, r, s, o, a, l, c), delete n.el.__isMounted;
          }, s);
          return;
        }
        e.el = n.el, e.targetStart = n.targetStart;
        const x = e.anchor = n.anchor, C = e.target = n.target, A = e.targetAnchor = n.targetAnchor, P = h0(n.props), M = P ? t : C, E = P ? x : A;
        if (o === "svg" || K6(C) ? o = "svg" : (o === "mathml" || J6(C)) && (o = "mathml"), v ? (d(n.dynamicChildren, v, M, r, s, o, a), vp(n, e, true)) : l || h(n, e, M, E, r, s, o, a, false), g) P ? e.props && n.props && e.props.to !== n.props.to && (e.props.to = n.props.to) : Nl(e, t, x, c, 1);
        else if ((e.props && e.props.to) !== (n.props && n.props.to)) {
          const I = e.target = jd(e.props, m);
          I && Nl(e, I, null, c, 0);
        } else P && Nl(e, C, A, c, 1);
        Uc(e, g);
      }
    },
    remove(n, e, t, { um: i, o: { remove: r } }, s) {
      const { shapeFlag: o, children: a, anchor: l, targetStart: c, targetAnchor: u, target: h, props: d } = n;
      if (h && (r(c), r(u)), s && r(l), o & 16) {
        const f = s || !h0(d);
        for (let m = 0; m < a.length; m++) {
          const _ = a[m];
          i(_, e, t, f, !!_.dynamicChildren);
        }
      }
    },
    move: Nl,
    hydrate: fw
  };
  function Nl(n, e, t, { o: { insert: i }, m: r }, s = 2) {
    s === 0 && i(n.targetAnchor, e, t);
    const { el: o, anchor: a, shapeFlag: l, children: c, props: u } = n, h = s === 2;
    if (h && i(o, e, t), (!h || h0(u)) && l & 16) for (let d = 0; d < c.length; d++) r(c[d], e, t, 2);
    h && i(a, e, t);
  }
  function fw(n, e, t, i, r, s, { o: { nextSibling: o, parentNode: a, querySelector: l, insert: c, createText: u } }, h) {
    const d = e.target = jd(e.props, l);
    if (d) {
      const f = h0(e.props), m = d._lpa || d.firstChild;
      if (e.shapeFlag & 16) if (f) e.anchor = h(o(n), e, a(n), t, i, r, s), e.targetStart = m, e.targetAnchor = m && o(m);
      else {
        e.anchor = o(n);
        let _ = m;
        for (; _; ) {
          if (_ && _.nodeType === 8) {
            if (_.data === "teleport start anchor") e.targetStart = _;
            else if (_.data === "teleport anchor") {
              e.targetAnchor = _, d._lpa = e.targetAnchor && o(e.targetAnchor);
              break;
            }
          }
          _ = o(_);
        }
        e.targetAnchor || nb(d, e, u, c), h(m && o(m), e, d, t, i, r, s);
      }
      Uc(e, f);
    }
    return e.anchor && o(e.anchor);
  }
  EV = tb;
  function Uc(n, e) {
    const t = n.ctx;
    if (t && t.ut) {
      let i, r;
      for (e ? (i = n.el, r = n.anchor) : (i = n.targetStart, r = n.targetAnchor); i && i !== r; ) i.nodeType === 1 && i.setAttribute("data-v-owner", t.uid), i = i.nextSibling;
      t.ut();
    }
  }
  function nb(n, e, t, i) {
    const r = e.targetStart = t(""), s = e.targetAnchor = t("");
    return r[Z7] = s, n && (i(r, n), i(s, n)), s;
  }
  const J3 = Symbol("_leaveCb"), Ul = Symbol("_enterCb");
  function hw() {
    const n = {
      isMounted: false,
      isLeaving: false,
      isUnmounting: false,
      leavingVNodes: /* @__PURE__ */ new Map()
    };
    return v2(() => {
      n.isMounted = true;
    }), Os(() => {
      n.isUnmounting = true;
    }), n;
  }
  const B2 = [
    Function,
    Array
  ], ib = {
    mode: String,
    appear: Boolean,
    persisted: Boolean,
    onBeforeEnter: B2,
    onEnter: B2,
    onAfterEnter: B2,
    onEnterCancelled: B2,
    onBeforeLeave: B2,
    onLeave: B2,
    onAfterLeave: B2,
    onLeaveCancelled: B2,
    onBeforeAppear: B2,
    onAppear: B2,
    onAfterAppear: B2,
    onAppearCancelled: B2
  }, rb = (n) => {
    const e = n.subTree;
    return e.component ? rb(e.component) : e;
  }, dw = {
    name: "BaseTransition",
    props: ib,
    setup(n, { slots: e }) {
      const t = O3(), i = hw();
      return () => {
        const r = e.default && ab(e.default(), true);
        if (!r || !r.length) return;
        const s = sb(r), o = We(n), { mode: a } = o;
        if (i.isLeaving) return Qf(s);
        const l = Q6(s);
        if (!l) return Qf(s);
        let c = Xd(l, o, i, t, (h) => c = h);
        l.type !== Zt && Ko(l, c);
        let u = t.subTree && Q6(t.subTree);
        if (u && u.type !== Zt && !ui(l, u) && rb(t).type !== Zt) {
          let h = Xd(u, o, i, t);
          if (Ko(u, h), a === "out-in" && l.type !== Zt) return i.isLeaving = true, h.afterLeave = () => {
            i.isLeaving = false, t.job.flags & 8 || t.update(), delete h.afterLeave, u = void 0;
          }, Qf(s);
          a === "in-out" && l.type !== Zt ? h.delayLeave = (d, f, m) => {
            const _ = ob(i, u);
            _[String(u.key)] = u, d[J3] = () => {
              f(), d[J3] = void 0, delete c.delayedLeave, u = void 0;
            }, c.delayedLeave = () => {
              m(), delete c.delayedLeave, u = void 0;
            };
          } : u = void 0;
        } else u && (u = void 0);
        return s;
      };
    }
  };
  function sb(n) {
    let e = n[0];
    if (n.length > 1) {
      for (const t of n) if (t.type !== Zt) {
        e = t;
        break;
      }
    }
    return e;
  }
  const pw = dw;
  function ob(n, e) {
    const { leavingVNodes: t } = n;
    let i = t.get(e.type);
    return i || (i = /* @__PURE__ */ Object.create(null), t.set(e.type, i)), i;
  }
  function Xd(n, e, t, i, r) {
    const { appear: s, mode: o, persisted: a = false, onBeforeEnter: l, onEnter: c, onAfterEnter: u, onEnterCancelled: h, onBeforeLeave: d, onLeave: f, onAfterLeave: m, onLeaveCancelled: _, onBeforeAppear: p, onAppear: g, onAfterAppear: y, onAppearCancelled: b } = e, v = String(n.key), x = ob(t, n), C = (M, E) => {
      M && vi(M, i, 9, E);
    }, A = (M, E) => {
      const I = E[1];
      C(M, E), be(M) ? M.every((k) => k.length <= 1) && I() : M.length <= 1 && I();
    }, P = {
      mode: o,
      persisted: a,
      beforeEnter(M) {
        let E = l;
        if (!t.isMounted) if (s) E = p || l;
        else return;
        M[J3] && M[J3](true);
        const I = x[v];
        I && ui(n, I) && I.el[J3] && I.el[J3](), C(E, [
          M
        ]);
      },
      enter(M) {
        let E = c, I = u, k = h;
        if (!t.isMounted) if (s) E = g || c, I = y || u, k = b || h;
        else return;
        let H = false;
        const K = M[Ul] = (J) => {
          H || (H = true, J ? C(k, [
            M
          ]) : C(I, [
            M
          ]), P.delayedLeave && P.delayedLeave(), M[Ul] = void 0);
        };
        E ? A(E, [
          M,
          K
        ]) : K();
      },
      leave(M, E) {
        const I = String(n.key);
        if (M[Ul] && M[Ul](true), t.isUnmounting) return E();
        C(d, [
          M
        ]);
        let k = false;
        const H = M[J3] = (K) => {
          k || (k = true, E(), K ? C(_, [
            M
          ]) : C(m, [
            M
          ]), M[J3] = void 0, x[I] === n && delete x[I]);
        };
        x[I] = n, f ? A(f, [
          M,
          H
        ]) : H();
      },
      clone(M) {
        const E = Xd(M, e, t, i, r);
        return r && r(E), E;
      }
    };
    return P;
  }
  function Qf(n) {
    if (Sl(n)) return n = A3(n), n.children = null, n;
  }
  function Q6(n) {
    if (!Sl(n)) return eb(n.type) && n.children ? sb(n.children) : n;
    const { shapeFlag: e, children: t } = n;
    if (t) {
      if (e & 16) return t[0];
      if (e & 32 && ve(t.default)) return t.default();
    }
  }
  function Ko(n, e) {
    n.shapeFlag & 6 && n.component ? (n.transition = e, Ko(n.component.subTree, e)) : n.shapeFlag & 128 ? (n.ssContent.transition = e.clone(n.ssContent), n.ssFallback.transition = e.clone(n.ssFallback)) : n.transition = e;
  }
  function ab(n, e = false, t) {
    let i = [], r = 0;
    for (let s = 0; s < n.length; s++) {
      let o = n[s];
      const a = t == null ? o.key : String(t) + String(o.key != null ? o.key : s);
      o.type === gn ? (o.patchFlag & 128 && r++, i = i.concat(ab(o.children, e, a))) : (e || o.type !== Zt) && i.push(a != null ? A3(o, {
        key: a
      }) : o);
    }
    if (r > 1) for (let s = 0; s < i.length; s++) i[s].patchFlag = -2;
    return i;
  }
  function xi(n, e) {
    return ve(n) ? dn({
      name: n.name
    }, e, {
      setup: n
    }) : n;
  }
  function pp(n) {
    n.ids = [
      n.ids[0] + n.ids[2]++ + "-",
      0,
      0
    ];
  }
  function X0(n, e, t, i, r = false) {
    if (be(n)) {
      n.forEach((m, _) => X0(m, e && (be(e) ? e[_] : e), t, i, r));
      return;
    }
    if (mr(i) && !r) {
      i.shapeFlag & 512 && i.type.__asyncResolved && i.component.subTree.component && X0(n, e, t, i.component.subTree);
      return;
    }
    const s = i.shapeFlag & 4 ? bf(i.component) : i.el, o = r ? null : s, { i: a, r: l } = n, c = e && e.r, u = a.refs === at ? a.refs = {} : a.refs, h = a.setupState, d = We(h), f = h === at ? () => false : (m) => Ze(d, m);
    if (c != null && c !== l && (pt(c) ? (u[c] = null, f(c) && (h[c] = null)) : yt(c) && (c.value = null)), ve(l)) xl(l, a, 12, [
      o,
      u
    ]);
    else {
      const m = pt(l), _ = yt(l);
      if (m || _) {
        const p = () => {
          if (n.f) {
            const g = m ? f(l) ? h[l] : u[l] : l.value;
            r ? be(g) && sp(g, s) : be(g) ? g.includes(s) || g.push(s) : m ? (u[l] = [
              s
            ], f(l) && (h[l] = u[l])) : (l.value = [
              s
            ], n.k && (u[n.k] = l.value));
          } else m ? (u[l] = o, f(l) && (h[l] = o)) : _ && (l.value = o, n.k && (u[n.k] = o));
        };
        o ? (p.id = -1, Jt(p, t)) : p();
      }
    }
  }
  let Z6 = false;
  const zs = () => {
    Z6 || (console.error("Hydration completed but contains mismatches."), Z6 = true);
  }, mw = (n) => n.namespaceURI.includes("svg") && n.tagName !== "foreignObject", gw = (n) => n.namespaceURI.includes("MathML"), Bl = (n) => {
    if (n.nodeType === 1) {
      if (mw(n)) return "svg";
      if (gw(n)) return "mathml";
    }
  }, _o = (n) => n.nodeType === 8;
  function _w(n) {
    const { mt: e, p: t, o: { patchProp: i, createText: r, nextSibling: s, parentNode: o, remove: a, insert: l, createComment: c } } = n, u = (b, v) => {
      if (!v.hasChildNodes()) {
        t(null, b, v), mu(), v._vnode = b;
        return;
      }
      h(v.firstChild, b, null, null, null), mu(), v._vnode = b;
    }, h = (b, v, x, C, A, P = false) => {
      P = P || !!v.dynamicChildren;
      const M = _o(b) && b.data === "[", E = () => _(b, v, x, C, A, M), { type: I, ref: k, shapeFlag: H, patchFlag: K } = v;
      let J = b.nodeType;
      v.el = b, K === -2 && (P = false, v.dynamicChildren = null);
      let z = null;
      switch (I) {
        case ms:
          J !== 3 ? v.children === "" ? (l(v.el = r(""), o(b), b), z = b) : z = E() : (b.data !== v.children && (zs(), b.data = v.children), z = s(b));
          break;
        case Zt:
          y(b) ? (z = s(b), g(v.el = b.content.firstChild, b, x)) : J !== 8 || M ? z = E() : z = s(b);
          break;
        case Lo:
          if (M && (b = s(b), J = b.nodeType), J === 1 || J === 3) {
            z = b;
            const $ = !v.children.length;
            for (let G = 0; G < v.staticCount; G++) $ && (v.children += z.nodeType === 1 ? z.outerHTML : z.data), G === v.staticCount - 1 && (v.anchor = z), z = s(z);
            return M ? s(z) : z;
          } else E();
          break;
        case gn:
          M ? z = m(b, v, x, C, A, P) : z = E();
          break;
        default:
          if (H & 1) (J !== 1 || v.type.toLowerCase() !== b.tagName.toLowerCase()) && !y(b) ? z = E() : z = d(b, v, x, C, A, P);
          else if (H & 6) {
            v.slotScopeIds = A;
            const $ = o(b);
            if (M ? z = p(b) : _o(b) && b.data === "teleport start" ? z = p(b, b.data, "teleport end") : z = s(b), e(v, $, null, x, C, Bl($), P), mr(v) && !v.type.__asyncResolved) {
              let G;
              M ? (G = Ye(gn), G.anchor = z ? z.previousSibling : $.lastChild) : G = b.nodeType === 3 ? Sp("") : Ye("div"), G.el = b, v.component.subTree = G;
            }
          } else H & 64 ? J !== 8 ? z = E() : z = v.type.hydrate(b, v, x, C, A, P, n, f) : H & 128 && (z = v.type.hydrate(b, v, x, C, Bl(o(b)), A, P, n, h));
      }
      return k != null && X0(k, null, C, v), z;
    }, d = (b, v, x, C, A, P) => {
      P = P || !!v.dynamicChildren;
      const { type: M, props: E, patchFlag: I, shapeFlag: k, dirs: H, transition: K } = v, J = M === "input" || M === "option";
      if (J || I !== -1) {
        H && Ri(v, null, x, "created");
        let z = false;
        if (y(b)) {
          z = Pb(null, K) && x && x.vnode.props && x.vnode.props.appear;
          const G = b.content.firstChild;
          z && K.beforeEnter(G), g(G, b, x), v.el = b = G;
        }
        if (k & 16 && !(E && (E.innerHTML || E.textContent))) {
          let G = f(b.firstChild, v, b, x, C, A, P);
          for (; G; ) {
            Hl(b, 1) || zs();
            const Q = G;
            G = G.nextSibling, a(Q);
          }
        } else if (k & 8) {
          let G = v.children;
          G[0] === `
` && (b.tagName === "PRE" || b.tagName === "TEXTAREA") && (G = G.slice(1)), b.textContent !== G && (Hl(b, 0) || zs(), b.textContent = v.children);
        }
        if (E) {
          if (J || !P || I & 48) {
            const G = b.tagName.includes("-");
            for (const Q in E) (J && (Q.endsWith("value") || Q === "indeterminate") || vl(Q) && !Ao(Q) || Q[0] === "." || G) && i(b, Q, null, E[Q], void 0, x);
          } else if (E.onClick) i(b, "onClick", null, E.onClick, void 0, x);
          else if (I & 4 && M3(E.style)) for (const G in E.style) E.style[G];
        }
        let $;
        ($ = E && E.onVnodeBeforeMount) && s2($, x, v), H && Ri(v, null, x, "beforeMount"), (($ = E && E.onVnodeMounted) || H || z) && kb(() => {
          $ && s2($, x, v), z && K.enter(b), H && Ri(v, null, x, "mounted");
        }, C);
      }
      return b.nextSibling;
    }, f = (b, v, x, C, A, P, M) => {
      M = M || !!v.dynamicChildren;
      const E = v.children, I = E.length;
      for (let k = 0; k < I; k++) {
        const H = M ? E[k] : E[k] = T2(E[k]), K = H.type === ms;
        b ? (K && !M && k + 1 < I && T2(E[k + 1]).type === ms && (l(r(b.data.slice(H.children.length)), x, s(b)), b.data = H.children), b = h(b, H, C, A, P, M)) : K && !H.children ? l(H.el = r(""), x) : (Hl(x, 1) || zs(), t(null, H, x, null, C, A, Bl(x), P));
      }
      return b;
    }, m = (b, v, x, C, A, P) => {
      const { slotScopeIds: M } = v;
      M && (A = A ? A.concat(M) : M);
      const E = o(b), I = f(s(b), v, E, x, C, A, P);
      return I && _o(I) && I.data === "]" ? s(v.anchor = I) : (zs(), l(v.anchor = c("]"), E, I), I);
    }, _ = (b, v, x, C, A, P) => {
      if (Hl(b.parentElement, 1) || zs(), v.el = null, P) {
        const I = p(b);
        for (; ; ) {
          const k = s(b);
          if (k && k !== I) a(k);
          else break;
        }
      }
      const M = s(b), E = o(b);
      return a(b), t(null, v, E, M, x, C, Bl(E), A), x && (x.vnode.el = v.el, _f(x, v.el)), M;
    }, p = (b, v = "[", x = "]") => {
      let C = 0;
      for (; b; ) if (b = s(b), b && _o(b) && (b.data === v && C++, b.data === x)) {
        if (C === 0) return s(b);
        C--;
      }
      return b;
    }, g = (b, v, x) => {
      const C = v.parentNode;
      C && C.replaceChild(b, v);
      let A = x;
      for (; A; ) A.vnode.el === v && (A.vnode.el = A.subTree.el = b), A = A.parent;
    }, y = (b) => b.nodeType === 1 && b.tagName === "TEMPLATE";
    return [
      u,
      h
    ];
  }
  const e5 = "data-allow-mismatch", bw = {
    0: "text",
    1: "children",
    2: "class",
    3: "style",
    4: "attribute"
  };
  function Hl(n, e) {
    if (e === 0 || e === 1) for (; n && !n.hasAttribute(e5); ) n = n.parentElement;
    const t = n && n.getAttribute(e5);
    if (t == null) return false;
    if (t === "") return true;
    {
      const i = t.split(",");
      return e === 0 && i.includes("children") ? true : t.split(",").includes(bw[e]);
    }
  }
  af().requestIdleCallback;
  af().cancelIdleCallback;
  function vw(n, e) {
    if (_o(n) && n.data === "[") {
      let t = 1, i = n.nextSibling;
      for (; i; ) {
        if (i.nodeType === 1) {
          if (e(i) === false) break;
        } else if (_o(i)) if (i.data === "]") {
          if (--t === 0) break;
        } else i.data === "[" && t++;
        i = i.nextSibling;
      }
    } else e(n);
  }
  const mr = (n) => !!n.type.__asyncLoader;
  function Q2(n) {
    ve(n) && (n = {
      loader: n
    });
    const { loader: e, loadingComponent: t, errorComponent: i, delay: r = 200, hydrate: s, timeout: o, suspensible: a = true, onError: l } = n;
    let c = null, u, h = 0;
    const d = () => (h++, c = null, f()), f = () => {
      let m;
      return c || (m = c = e().catch((_) => {
        if (_ = _ instanceof Error ? _ : new Error(String(_)), l) return new Promise((p, g) => {
          l(_, () => p(d()), () => g(_), h + 1);
        });
        throw _;
      }).then((_) => m !== c && c ? c : (_ && (_.__esModule || _[Symbol.toStringTag] === "Module") && (_ = _.default), u = _, _)));
    };
    return xi({
      name: "AsyncComponentWrapper",
      __asyncLoader: f,
      __asyncHydrate(m, _, p) {
        const g = s ? () => {
          const y = s(p, (b) => vw(m, b));
          y && (_.bum || (_.bum = [])).push(y);
        } : p;
        u ? g() : f().then(() => !_.isUnmounted && g());
      },
      get __asyncResolved() {
        return u;
      },
      setup() {
        const m = en;
        if (pp(m), u) return () => Zf(u, m);
        const _ = (b) => {
          c = null, ya(b, m, 13, !i);
        };
        if (a && m.suspense || Qo) return f().then((b) => () => Zf(b, m)).catch((b) => (_(b), () => i ? Ye(i, {
          error: b
        }) : null));
        const p = vn(false), g = vn(), y = vn(!!r);
        return r && setTimeout(() => {
          y.value = false;
        }, r), o != null && setTimeout(() => {
          if (!p.value && !g.value) {
            const b = new Error(`Async component timed out after ${o}ms.`);
            _(b), g.value = b;
          }
        }, o), f().then(() => {
          p.value = true, m.parent && Sl(m.parent.vnode) && m.parent.update();
        }).catch((b) => {
          _(b), g.value = b;
        }), () => {
          if (p.value && u) return Zf(u, m);
          if (g.value && i) return Ye(i, {
            error: g.value
          });
          if (t && !y.value) return Ye(t);
        };
      }
    });
  }
  function Zf(n, e) {
    const { ref: t, props: i, children: r, ce: s } = e.vnode, o = Ye(n, i, r);
    return o.ref = t, o.ce = s, delete e.vnode.ce, o;
  }
  const Sl = (n) => n.type.__isKeepAlive, yw = {
    name: "KeepAlive",
    __isKeepAlive: true,
    props: {
      include: [
        String,
        RegExp,
        Array
      ],
      exclude: [
        String,
        RegExp,
        Array
      ],
      max: [
        String,
        Number
      ]
    },
    setup(n, { slots: e }) {
      const t = O3(), i = t.ctx;
      if (!i.renderer) return () => {
        const y = e.default && e.default();
        return y && y.length === 1 ? y[0] : y;
      };
      const r = /* @__PURE__ */ new Map(), s = /* @__PURE__ */ new Set();
      let o = null;
      const a = t.suspense, { renderer: { p: l, m: c, um: u, o: { createElement: h } } } = i, d = h("div");
      i.activate = (y, b, v, x, C) => {
        const A = y.component;
        c(y, b, v, 0, a), l(A.vnode, y, b, v, A, a, x, y.slotScopeIds, C), Jt(() => {
          A.isDeactivated = false, A.a && Do(A.a);
          const P = y.props && y.props.onVnodeMounted;
          P && s2(P, A.parent, y);
        }, a);
      }, i.deactivate = (y) => {
        const b = y.component;
        bu(b.m), bu(b.a), c(y, d, null, 1, a), Jt(() => {
          b.da && Do(b.da);
          const v = y.props && y.props.onVnodeUnmounted;
          v && s2(v, b.parent, y), b.isDeactivated = true;
        }, a);
      };
      function f(y) {
        eh(y), u(y, t, a, true);
      }
      function m(y) {
        r.forEach((b, v) => {
          const x = e4(b.type);
          x && !y(x) && _(v);
        });
      }
      function _(y) {
        const b = r.get(y);
        b && (!o || !ui(b, o)) ? f(b) : o && eh(o), r.delete(y), s.delete(y);
      }
      je(() => [
        n.include,
        n.exclude
      ], ([y, b]) => {
        y && m((v) => qa(y, v)), b && m((v) => !qa(b, v));
      }, {
        flush: "post",
        deep: true
      });
      let p = null;
      const g = () => {
        p != null && (yu(t.subTree.type) ? Jt(() => {
          r.set(p, zl(t.subTree));
        }, t.subTree.suspense) : r.set(p, zl(t.subTree)));
      };
      return v2(g), mp(g), Os(() => {
        r.forEach((y) => {
          const { subTree: b, suspense: v } = t, x = zl(b);
          if (y.type === x.type && y.key === x.key) {
            eh(x);
            const C = x.component.da;
            C && Jt(C, v);
            return;
          }
          f(y);
        });
      }), () => {
        if (p = null, !e.default) return o = null;
        const y = e.default(), b = y[0];
        if (y.length > 1) return o = null, y;
        if (!Ts(b) || !(b.shapeFlag & 4) && !(b.shapeFlag & 128)) return o = null, b;
        let v = zl(b);
        if (v.type === Zt) return o = null, v;
        const x = v.type, C = e4(mr(v) ? v.type.__asyncResolved || {} : x), { include: A, exclude: P, max: M } = n;
        if (A && (!C || !qa(A, C)) || P && C && qa(P, C)) return v.shapeFlag &= -257, o = v, b;
        const E = v.key == null ? x : v.key, I = r.get(E);
        return v.el && (v = A3(v), b.shapeFlag & 128 && (b.ssContent = v)), p = E, I ? (v.el = I.el, v.component = I.component, v.transition && Ko(v, v.transition), v.shapeFlag |= 512, s.delete(E), s.add(E)) : (s.add(E), M && s.size > parseInt(M, 10) && _(s.values().next().value)), v.shapeFlag |= 256, o = v, yu(b.type) ? b : v;
      };
    }
  }, xw = yw;
  function qa(n, e) {
    return be(n) ? n.some((t) => qa(t, e)) : pt(n) ? n.split(",").includes(e) : SE(n) ? (n.lastIndex = 0, n.test(e)) : false;
  }
  function lb(n, e) {
    ub(n, "a", e);
  }
  function cb(n, e) {
    ub(n, "da", e);
  }
  function ub(n, e, t = en) {
    const i = n.__wdc || (n.__wdc = () => {
      let r = t;
      for (; r; ) {
        if (r.isDeactivated) return;
        r = r.parent;
      }
      return n();
    });
    if (mf(e, i, t), t) {
      let r = t.parent;
      for (; r && r.parent; ) Sl(r.parent.vnode) && Sw(i, e, t, r), r = r.parent;
    }
  }
  function Sw(n, e, t, i) {
    const r = mf(e, n, i, true);
    gp(() => {
      sp(i[e], r);
    }, t);
  }
  function eh(n) {
    n.shapeFlag &= -257, n.shapeFlag &= -513;
  }
  function zl(n) {
    return n.shapeFlag & 128 ? n.ssContent : n;
  }
  function mf(n, e, t = en, i = false) {
    if (t) {
      const r = t[n] || (t[n] = []), s = e.__weh || (e.__weh = (...o) => {
        Dr();
        const a = El(t), l = vi(e, t, n, o);
        return a(), Rr(), l;
      });
      return i ? r.unshift(s) : r.push(s), s;
    }
  }
  let F3, Ew, fb, mp, Os, gp, ww, Mw, Tw;
  F3 = (n) => (e, t = en) => {
    (!Qo || n === "sp") && mf(n, (...i) => e(...i), t);
  };
  Ew = F3("bm");
  v2 = F3("m");
  fb = F3("bu");
  mp = F3("u");
  Os = F3("bum");
  gp = F3("um");
  ww = F3("sp");
  Mw = F3("rtg");
  Tw = F3("rtc");
  function hb(n, e = en) {
    mf("ec", n, e);
  }
  const db = "components";
  function t5(n, e) {
    return mb(db, n, true, e) || n;
  }
  const pb = Symbol.for("v-ndc");
  function _p(n) {
    return pt(n) ? mb(db, n, false) || n : n || pb;
  }
  function mb(n, e, t = true, i = false) {
    const r = tn || en;
    if (r) {
      const s = r.type;
      {
        const a = e4(s, false);
        if (a && (a === e || a === J2(e) || a === of(J2(e)))) return s;
      }
      const o = n5(r[n] || s[n], e) || n5(r.appContext[n], e);
      return !o && i ? s : o;
    }
  }
  function n5(n, e) {
    return n && (n[e] || n[J2(e)] || n[of(J2(e))]);
  }
  wV = function(n, e, t, i) {
    let r;
    const s = t, o = be(n);
    if (o || pt(n)) {
      const a = o && M3(n);
      let l = false;
      a && (l = !q2(n), n = hf(n)), r = new Array(n.length);
      for (let c = 0, u = n.length; c < u; c++) r[c] = e(l ? An(n[c]) : n[c], c, void 0, s);
    } else if (typeof n == "number") {
      r = new Array(n);
      for (let a = 0; a < n; a++) r[a] = e(a + 1, a, void 0, s);
    } else if (ut(n)) if (n[Symbol.iterator]) r = Array.from(n, (a, l) => e(a, l, void 0, s));
    else {
      const a = Object.keys(n);
      r = new Array(a.length);
      for (let l = 0, c = a.length; l < c; l++) {
        const u = a[l];
        r[l] = e(n[u], u, l, s);
      }
    }
    else r = [];
    return r;
  };
  gb = function(n, e, t = {}, i, r) {
    if (tn.ce || tn.parent && mr(tn.parent) && tn.parent.ce) return jt(), C2(gn, null, [
      Ye("slot", t, i)
    ], 64);
    let s = n[e];
    s && s._c && (s._d = false), jt();
    const o = s && _b(s(t)), a = t.key || o && o.key, l = C2(gn, {
      key: (a && !I3(a) ? a : `_${e}`) + ""
    }, o || [], o && n._ === 1 ? 64 : -2);
    return !r && l.scopeId && (l.slotScopeIds = [
      l.scopeId + "-s"
    ]), s && s._c && (s._d = true), l;
  };
  function _b(n) {
    return n.some((e) => Ts(e) ? !(e.type === Zt || e.type === gn && !_b(e.children)) : true) ? n : null;
  }
  const $d = (n) => n ? Gb(n) ? bf(n) : $d(n.parent) : null, d0 = dn(/* @__PURE__ */ Object.create(null), {
    $: (n) => n,
    $el: (n) => n.vnode.el,
    $data: (n) => n.data,
    $props: (n) => n.props,
    $attrs: (n) => n.attrs,
    $slots: (n) => n.slots,
    $refs: (n) => n.refs,
    $parent: (n) => $d(n.parent),
    $root: (n) => $d(n.root),
    $host: (n) => n.ce,
    $emit: (n) => n.emit,
    $options: (n) => vb(n),
    $forceUpdate: (n) => n.f || (n.f = () => {
      dp(n.update);
    }),
    $nextTick: (n) => n.n || (n.n = e2.bind(n.proxy)),
    $watch: (n) => Xw.bind(n)
  }), th = (n, e) => n !== at && !n.__isScriptSetup && Ze(n, e), Cw = {
    get({ _: n }, e) {
      if (e === "__v_skip") return true;
      const { ctx: t, setupState: i, data: r, props: s, accessCache: o, type: a, appContext: l } = n;
      let c;
      if (e[0] !== "$") {
        const f = o[e];
        if (f !== void 0) switch (f) {
          case 1:
            return i[e];
          case 2:
            return r[e];
          case 4:
            return t[e];
          case 3:
            return s[e];
        }
        else {
          if (th(i, e)) return o[e] = 1, i[e];
          if (r !== at && Ze(r, e)) return o[e] = 2, r[e];
          if ((c = n.propsOptions[0]) && Ze(c, e)) return o[e] = 3, s[e];
          if (t !== at && Ze(t, e)) return o[e] = 4, t[e];
          qd && (o[e] = 0);
        }
      }
      const u = d0[e];
      let h, d;
      if (u) return e === "$attrs" && Cn(n.attrs, "get", ""), u(n);
      if ((h = a.__cssModules) && (h = h[e])) return h;
      if (t !== at && Ze(t, e)) return o[e] = 4, t[e];
      if (d = l.config.globalProperties, Ze(d, e)) return d[e];
    },
    set({ _: n }, e, t) {
      const { data: i, setupState: r, ctx: s } = n;
      return th(r, e) ? (r[e] = t, true) : i !== at && Ze(i, e) ? (i[e] = t, true) : Ze(n.props, e) || e[0] === "$" && e.slice(1) in n ? false : (s[e] = t, true);
    },
    has({ _: { data: n, setupState: e, accessCache: t, ctx: i, appContext: r, propsOptions: s } }, o) {
      let a;
      return !!t[o] || n !== at && Ze(n, o) || th(e, o) || (a = s[0]) && Ze(a, o) || Ze(i, o) || Ze(d0, o) || Ze(r.config.globalProperties, o);
    },
    defineProperty(n, e, t) {
      return t.get != null ? n._.accessCache[e] = 0 : Ze(t, "value") && this.set(n, e, t.value, null), Reflect.defineProperty(n, e, t);
    }
  };
  function i5(n) {
    return be(n) ? n.reduce((e, t) => (e[t] = null, e), {}) : n;
  }
  let qd = true;
  function Aw(n) {
    const e = vb(n), t = n.proxy, i = n.ctx;
    qd = false, e.beforeCreate && r5(e.beforeCreate, n, "bc");
    const { data: r, computed: s, methods: o, watch: a, provide: l, inject: c, created: u, beforeMount: h, mounted: d, beforeUpdate: f, updated: m, activated: _, deactivated: p, beforeDestroy: g, beforeUnmount: y, destroyed: b, unmounted: v, render: x, renderTracked: C, renderTriggered: A, errorCaptured: P, serverPrefetch: M, expose: E, inheritAttrs: I, components: k, directives: H, filters: K } = e;
    if (c && Dw(c, i, null), o) for (const $ in o) {
      const G = o[$];
      ve(G) && (i[$] = G.bind(t));
    }
    if (r) {
      const $ = r.call(t, t);
      ut($) && (n.data = k2($));
    }
    if (qd = true, s) for (const $ in s) {
      const G = s[$], Q = ve(G) ? G.bind(t, t) : ve(G.get) ? G.get.bind(t, t) : pi, V = !ve(G) && ve(G.set) ? G.set.bind(t) : pi, w1 = qe({
        get: Q,
        set: V
      });
      Object.defineProperty(i, $, {
        enumerable: true,
        configurable: true,
        get: () => w1.value,
        set: (m1) => w1.value = m1
      });
    }
    if (a) for (const $ in a) bb(a[$], i, t, $);
    if (l) {
      const $ = ve(l) ? l.call(t) : l;
      Reflect.ownKeys($).forEach((G) => {
        gr(G, $[G]);
      });
    }
    u && r5(u, n, "c");
    function z($, G) {
      be(G) ? G.forEach((Q) => $(Q.bind(t))) : G && $(G.bind(t));
    }
    if (z(Ew, h), z(v2, d), z(fb, f), z(mp, m), z(lb, _), z(cb, p), z(hb, P), z(Tw, C), z(Mw, A), z(Os, y), z(gp, v), z(ww, M), be(E)) if (E.length) {
      const $ = n.exposed || (n.exposed = {});
      E.forEach((G) => {
        Object.defineProperty($, G, {
          get: () => t[G],
          set: (Q) => t[G] = Q
        });
      });
    } else n.exposed || (n.exposed = {});
    x && n.render === pi && (n.render = x), I != null && (n.inheritAttrs = I), k && (n.components = k), H && (n.directives = H), M && pp(n);
  }
  function Dw(n, e, t = pi) {
    be(n) && (n = Yd(n));
    for (const i in n) {
      const r = n[i];
      let s;
      ut(r) ? "default" in r ? s = fn(r.from || i, r.default, true) : s = fn(r.from || i) : s = fn(r), yt(s) ? Object.defineProperty(e, i, {
        enumerable: true,
        configurable: true,
        get: () => s.value,
        set: (o) => s.value = o
      }) : e[i] = s;
    }
  }
  function r5(n, e, t) {
    vi(be(n) ? n.map((i) => i.bind(e.proxy)) : n.bind(e.proxy), e, t);
  }
  function bb(n, e, t, i) {
    let r = i.includes(".") ? Ib(t, i) : () => t[i];
    if (pt(n)) {
      const s = e[n];
      ve(s) && je(r, s);
    } else if (ve(n)) je(r, n.bind(t));
    else if (ut(n)) if (be(n)) n.forEach((s) => bb(s, e, t, i));
    else {
      const s = ve(n.handler) ? n.handler.bind(t) : e[n.handler];
      ve(s) && je(r, s, n);
    }
  }
  function vb(n) {
    const e = n.type, { mixins: t, extends: i } = e, { mixins: r, optionsCache: s, config: { optionMergeStrategies: o } } = n.appContext, a = s.get(e);
    let l;
    return a ? l = a : !r.length && !t && !i ? l = e : (l = {}, r.length && r.forEach((c) => _u(l, c, o, true)), _u(l, e, o)), ut(e) && s.set(e, l), l;
  }
  function _u(n, e, t, i = false) {
    const { mixins: r, extends: s } = e;
    s && _u(n, s, t, true), r && r.forEach((o) => _u(n, o, t, true));
    for (const o in e) if (!(i && o === "expose")) {
      const a = Rw[o] || t && t[o];
      n[o] = a ? a(n[o], e[o]) : e[o];
    }
    return n;
  }
  const Rw = {
    data: s5,
    props: o5,
    emits: o5,
    methods: Ya,
    computed: Ya,
    beforeCreate: Vn,
    created: Vn,
    beforeMount: Vn,
    mounted: Vn,
    beforeUpdate: Vn,
    updated: Vn,
    beforeDestroy: Vn,
    beforeUnmount: Vn,
    destroyed: Vn,
    unmounted: Vn,
    activated: Vn,
    deactivated: Vn,
    errorCaptured: Vn,
    serverPrefetch: Vn,
    components: Ya,
    directives: Ya,
    watch: Lw,
    provide: s5,
    inject: Pw
  };
  function s5(n, e) {
    return e ? n ? function() {
      return dn(ve(n) ? n.call(this, this) : n, ve(e) ? e.call(this, this) : e);
    } : e : n;
  }
  function Pw(n, e) {
    return Ya(Yd(n), Yd(e));
  }
  function Yd(n) {
    if (be(n)) {
      const e = {};
      for (let t = 0; t < n.length; t++) e[n[t]] = n[t];
      return e;
    }
    return n;
  }
  function Vn(n, e) {
    return n ? [
      ...new Set([].concat(n, e))
    ] : e;
  }
  function Ya(n, e) {
    return n ? dn(/* @__PURE__ */ Object.create(null), n, e) : e;
  }
  function o5(n, e) {
    return n ? be(n) && be(e) ? [
      .../* @__PURE__ */ new Set([
        ...n,
        ...e
      ])
    ] : dn(/* @__PURE__ */ Object.create(null), i5(n), i5(e ?? {})) : e;
  }
  function Lw(n, e) {
    if (!n) return e;
    if (!e) return n;
    const t = dn(/* @__PURE__ */ Object.create(null), n);
    for (const i in e) t[i] = Vn(n[i], e[i]);
    return t;
  }
  function yb() {
    return {
      app: null,
      config: {
        isNativeTag: yE,
        performance: false,
        globalProperties: {},
        optionMergeStrategies: {},
        errorHandler: void 0,
        warnHandler: void 0,
        compilerOptions: {}
      },
      mixins: [],
      components: {},
      directives: {},
      provides: /* @__PURE__ */ Object.create(null),
      optionsCache: /* @__PURE__ */ new WeakMap(),
      propsCache: /* @__PURE__ */ new WeakMap(),
      emitsCache: /* @__PURE__ */ new WeakMap()
    };
  }
  let Iw = 0;
  function Fw(n, e) {
    return function(i, r = null) {
      ve(i) || (i = dn({}, i)), r != null && !ut(r) && (r = null);
      const s = yb(), o = /* @__PURE__ */ new WeakSet(), a = [];
      let l = false;
      const c = s.app = {
        _uid: Iw++,
        _component: i,
        _props: r,
        _container: null,
        _context: s,
        _instance: null,
        version: pM,
        get config() {
          return s.config;
        },
        set config(u) {
        },
        use(u, ...h) {
          return o.has(u) || (u && ve(u.install) ? (o.add(u), u.install(c, ...h)) : ve(u) && (o.add(u), u(c, ...h))), c;
        },
        mixin(u) {
          return s.mixins.includes(u) || s.mixins.push(u), c;
        },
        component(u, h) {
          return h ? (s.components[u] = h, c) : s.components[u];
        },
        directive(u, h) {
          return h ? (s.directives[u] = h, c) : s.directives[u];
        },
        mount(u, h, d) {
          if (!l) {
            const f = c._ceVNode || Ye(i, r);
            return f.appContext = s, d === true ? d = "svg" : d === false && (d = void 0), h && e ? e(f, u) : n(f, u, d), l = true, c._container = u, u.__vue_app__ = c, bf(f.component);
          }
        },
        onUnmount(u) {
          a.push(u);
        },
        unmount() {
          l && (vi(a, c._instance, 16), n(null, c._container), delete c._container.__vue_app__);
        },
        provide(u, h) {
          return s.provides[u] = h, c;
        },
        runWithContext(u) {
          const h = ps;
          ps = c;
          try {
            return u();
          } finally {
            ps = h;
          }
        }
      };
      return c;
    };
  }
  let ps = null;
  function gr(n, e) {
    if (en) {
      let t = en.provides;
      const i = en.parent && en.parent.provides;
      i === t && (t = en.provides = Object.create(i)), t[n] = e;
    }
  }
  function fn(n, e, t = false) {
    const i = en || tn;
    if (i || ps) {
      const r = ps ? ps._context.provides : i ? i.parent == null ? i.vnode.appContext && i.vnode.appContext.provides : i.parent.provides : void 0;
      if (r && n in r) return r[n];
      if (arguments.length > 1) return t && ve(e) ? e.call(i && i.proxy) : e;
    }
  }
  function ks() {
    return !!(en || tn || ps);
  }
  const xb = {}, Sb = () => Object.create(xb), Eb = (n) => Object.getPrototypeOf(n) === xb;
  function Ow(n, e, t, i = false) {
    const r = {}, s = Sb();
    n.propsDefaults = /* @__PURE__ */ Object.create(null), wb(n, e, r, s);
    for (const o in n.propsOptions[0]) o in r || (r[o] = void 0);
    t ? n.props = i ? r : y3(r) : n.type.props ? n.props = r : n.props = s, n.attrs = s;
  }
  function kw(n, e, t, i) {
    const { props: r, attrs: s, vnode: { patchFlag: o } } = n, a = We(r), [l] = n.propsOptions;
    let c = false;
    if ((i || o > 0) && !(o & 16)) {
      if (o & 8) {
        const u = n.vnode.dynamicProps;
        for (let h = 0; h < u.length; h++) {
          let d = u[h];
          if (gf(n.emitsOptions, d)) continue;
          const f = e[d];
          if (l) if (Ze(s, d)) f !== s[d] && (s[d] = f, c = true);
          else {
            const m = J2(d);
            r[m] = Kd(l, a, m, f, n, false);
          }
          else f !== s[d] && (s[d] = f, c = true);
        }
      }
    } else {
      wb(n, e, r, s) && (c = true);
      let u;
      for (const h in a) (!e || !Ze(e, h) && ((u = Fs(h)) === h || !Ze(e, u))) && (l ? t && (t[h] !== void 0 || t[u] !== void 0) && (r[h] = Kd(l, a, h, void 0, n, true)) : delete r[h]);
      if (s !== a) for (const h in s) (!e || !Ze(e, h)) && (delete s[h], c = true);
    }
    c && g3(n.attrs, "set", "");
  }
  function wb(n, e, t, i) {
    const [r, s] = n.propsOptions;
    let o = false, a;
    if (e) for (let l in e) {
      if (Ao(l)) continue;
      const c = e[l];
      let u;
      r && Ze(r, u = J2(l)) ? !s || !s.includes(u) ? t[u] = c : (a || (a = {}))[u] = c : gf(n.emitsOptions, l) || (!(l in i) || c !== i[l]) && (i[l] = c, o = true);
    }
    if (s) {
      const l = We(t), c = a || at;
      for (let u = 0; u < s.length; u++) {
        const h = s[u];
        t[h] = Kd(r, l, h, c[h], n, !Ze(c, h));
      }
    }
    return o;
  }
  function Kd(n, e, t, i, r, s) {
    const o = n[t];
    if (o != null) {
      const a = Ze(o, "default");
      if (a && i === void 0) {
        const l = o.default;
        if (o.type !== Function && !o.skipFactory && ve(l)) {
          const { propsDefaults: c } = r;
          if (t in c) i = c[t];
          else {
            const u = El(r);
            i = c[t] = l.call(null, e), u();
          }
        } else i = l;
        r.ce && r.ce._setProp(t, i);
      }
      o[0] && (s && !a ? i = false : o[1] && (i === "" || i === Fs(t)) && (i = true));
    }
    return i;
  }
  const Nw = /* @__PURE__ */ new WeakMap();
  function Mb(n, e, t = false) {
    const i = t ? Nw : e.propsCache, r = i.get(n);
    if (r) return r;
    const s = n.props, o = {}, a = [];
    let l = false;
    if (!ve(n)) {
      const u = (h) => {
        l = true;
        const [d, f] = Mb(h, e, true);
        dn(o, d), f && a.push(...f);
      };
      !t && e.mixins.length && e.mixins.forEach(u), n.extends && u(n.extends), n.mixins && n.mixins.forEach(u);
    }
    if (!s && !l) return ut(n) && i.set(n, To), To;
    if (be(s)) for (let u = 0; u < s.length; u++) {
      const h = J2(s[u]);
      a5(h) && (o[h] = at);
    }
    else if (s) for (const u in s) {
      const h = J2(u);
      if (a5(h)) {
        const d = s[u], f = o[h] = be(d) || ve(d) ? {
          type: d
        } : dn({}, d), m = f.type;
        let _ = false, p = true;
        if (be(m)) for (let g = 0; g < m.length; ++g) {
          const y = m[g], b = ve(y) && y.name;
          if (b === "Boolean") {
            _ = true;
            break;
          } else b === "String" && (p = false);
        }
        else _ = ve(m) && m.name === "Boolean";
        f[0] = _, f[1] = p, (_ || Ze(f, "default")) && a.push(h);
      }
    }
    const c = [
      o,
      a
    ];
    return ut(n) && i.set(n, c), c;
  }
  function a5(n) {
    return n[0] !== "$" && !Ao(n);
  }
  const Tb = (n) => n[0] === "_" || n === "$stable", bp = (n) => be(n) ? n.map(T2) : [
    T2(n)
  ], Uw = (n, e, t) => {
    if (e._n) return e;
    const i = Wi((...r) => bp(e(...r)), t);
    return i._c = false, i;
  }, Cb = (n, e, t) => {
    const i = n._ctx;
    for (const r in n) {
      if (Tb(r)) continue;
      const s = n[r];
      if (ve(s)) e[r] = Uw(r, s, i);
      else if (s != null) {
        const o = bp(s);
        e[r] = () => o;
      }
    }
  }, Ab = (n, e) => {
    const t = bp(e);
    n.slots.default = () => t;
  }, Db = (n, e, t) => {
    for (const i in e) (t || i !== "_") && (n[i] = e[i]);
  }, Bw = (n, e, t) => {
    const i = n.slots = Sb();
    if (n.vnode.shapeFlag & 32) {
      const r = e._;
      r ? (Db(i, e, t), t && v7(i, "_", r, true)) : Cb(e, i);
    } else e && Ab(n, e);
  }, Hw = (n, e, t) => {
    const { vnode: i, slots: r } = n;
    let s = true, o = at;
    if (i.shapeFlag & 32) {
      const a = e._;
      a ? t && a === 1 ? s = false : Db(r, e, t) : (s = !e.$stable, Cb(e, r)), o = e;
    } else e && (Ab(n, e), o = {
      default: 1
    });
    if (s) for (const a in r) !Tb(a) && o[a] == null && delete r[a];
  }, Jt = kb;
  function zw(n) {
    return Rb(n);
  }
  function Vw(n) {
    return Rb(n, _w);
  }
  function Rb(n, e) {
    const t = af();
    t.__VUE__ = true;
    const { insert: i, remove: r, patchProp: s, createElement: o, createText: a, createComment: l, setText: c, setElementText: u, parentNode: h, nextSibling: d, setScopeId: f = pi, insertStaticContent: m } = n, _ = (F, T, e1, _1 = null, B = null, l1 = null, D1 = void 0, p1 = null, o1 = !!T.dynamicChildren) => {
      if (F === T) return;
      F && !ui(F, T) && (_1 = W(F), m1(F, B, l1, true), F = null), T.patchFlag === -2 && (o1 = false, T.dynamicChildren = null);
      const { type: E1, ref: N, shapeFlag: D } = T;
      switch (E1) {
        case ms:
          p(F, T, e1, _1);
          break;
        case Zt:
          g(F, T, e1, _1);
          break;
        case Lo:
          F == null && y(T, e1, _1, D1);
          break;
        case gn:
          k(F, T, e1, _1, B, l1, D1, p1, o1);
          break;
        default:
          D & 1 ? x(F, T, e1, _1, B, l1, D1, p1, o1) : D & 6 ? H(F, T, e1, _1, B, l1, D1, p1, o1) : (D & 64 || D & 128) && E1.process(F, T, e1, _1, B, l1, D1, p1, o1, S1);
      }
      N != null && B && X0(N, F && F.ref, l1, T || F, !T);
    }, p = (F, T, e1, _1) => {
      if (F == null) i(T.el = a(T.children), e1, _1);
      else {
        const B = T.el = F.el;
        T.children !== F.children && c(B, T.children);
      }
    }, g = (F, T, e1, _1) => {
      F == null ? i(T.el = l(T.children || ""), e1, _1) : T.el = F.el;
    }, y = (F, T, e1, _1) => {
      [F.el, F.anchor] = m(F.children, T, e1, _1, F.el, F.anchor);
    }, b = ({ el: F, anchor: T }, e1, _1) => {
      let B;
      for (; F && F !== T; ) B = d(F), i(F, e1, _1), F = B;
      i(T, e1, _1);
    }, v = ({ el: F, anchor: T }) => {
      let e1;
      for (; F && F !== T; ) e1 = d(F), r(F), F = e1;
      r(T);
    }, x = (F, T, e1, _1, B, l1, D1, p1, o1) => {
      T.type === "svg" ? D1 = "svg" : T.type === "math" && (D1 = "mathml"), F == null ? C(T, e1, _1, B, l1, D1, p1, o1) : M(F, T, B, l1, D1, p1, o1);
    }, C = (F, T, e1, _1, B, l1, D1, p1) => {
      let o1, E1;
      const { props: N, shapeFlag: D, transition: q, dirs: c1 } = F;
      if (o1 = F.el = o(F.type, l1, N && N.is, N), D & 8 ? u(o1, F.children) : D & 16 && P(F.children, o1, null, _1, B, nh(F, l1), D1, p1), c1 && Ri(F, null, _1, "created"), A(o1, F, F.scopeId, D1, _1), N) {
        for (const d1 in N) d1 !== "value" && !Ao(d1) && s(o1, d1, null, N[d1], l1, _1);
        "value" in N && s(o1, "value", null, N.value, l1), (E1 = N.onVnodeBeforeMount) && s2(E1, _1, F);
      }
      c1 && Ri(F, null, _1, "beforeMount");
      const h1 = Pb(B, q);
      h1 && q.beforeEnter(o1), i(o1, T, e1), ((E1 = N && N.onVnodeMounted) || h1 || c1) && Jt(() => {
        E1 && s2(E1, _1, F), h1 && q.enter(o1), c1 && Ri(F, null, _1, "mounted");
      }, B);
    }, A = (F, T, e1, _1, B) => {
      if (e1 && f(F, e1), _1) for (let l1 = 0; l1 < _1.length; l1++) f(F, _1[l1]);
      if (B) {
        let l1 = B.subTree;
        if (T === l1 || yu(l1.type) && (l1.ssContent === T || l1.ssFallback === T)) {
          const D1 = B.vnode;
          A(F, D1, D1.scopeId, D1.slotScopeIds, B.parent);
        }
      }
    }, P = (F, T, e1, _1, B, l1, D1, p1, o1 = 0) => {
      for (let E1 = o1; E1 < F.length; E1++) {
        const N = F[E1] = p1 ? Q3(F[E1]) : T2(F[E1]);
        _(null, N, T, e1, _1, B, l1, D1, p1);
      }
    }, M = (F, T, e1, _1, B, l1, D1) => {
      const p1 = T.el = F.el;
      let { patchFlag: o1, dynamicChildren: E1, dirs: N } = T;
      o1 |= F.patchFlag & 16;
      const D = F.props || at, q = T.props || at;
      let c1;
      if (e1 && kr(e1, false), (c1 = q.onVnodeBeforeUpdate) && s2(c1, e1, T, F), N && Ri(T, F, e1, "beforeUpdate"), e1 && kr(e1, true), (D.innerHTML && q.innerHTML == null || D.textContent && q.textContent == null) && u(p1, ""), E1 ? E(F.dynamicChildren, E1, p1, e1, _1, nh(T, B), l1) : D1 || G(F, T, p1, null, e1, _1, nh(T, B), l1, false), o1 > 0) {
        if (o1 & 16) I(p1, D, q, e1, B);
        else if (o1 & 2 && D.class !== q.class && s(p1, "class", null, q.class, B), o1 & 4 && s(p1, "style", D.style, q.style, B), o1 & 8) {
          const h1 = T.dynamicProps;
          for (let d1 = 0; d1 < h1.length; d1++) {
            const U1 = h1[d1], B1 = D[U1], j1 = q[U1];
            (j1 !== B1 || U1 === "value") && s(p1, U1, B1, j1, B, e1);
          }
        }
        o1 & 1 && F.children !== T.children && u(p1, T.children);
      } else !D1 && E1 == null && I(p1, D, q, e1, B);
      ((c1 = q.onVnodeUpdated) || N) && Jt(() => {
        c1 && s2(c1, e1, T, F), N && Ri(T, F, e1, "updated");
      }, _1);
    }, E = (F, T, e1, _1, B, l1, D1) => {
      for (let p1 = 0; p1 < T.length; p1++) {
        const o1 = F[p1], E1 = T[p1], N = o1.el && (o1.type === gn || !ui(o1, E1) || o1.shapeFlag & 70) ? h(o1.el) : e1;
        _(o1, E1, N, null, _1, B, l1, D1, true);
      }
    }, I = (F, T, e1, _1, B) => {
      if (T !== e1) {
        if (T !== at) for (const l1 in T) !Ao(l1) && !(l1 in e1) && s(F, l1, T[l1], null, B, _1);
        for (const l1 in e1) {
          if (Ao(l1)) continue;
          const D1 = e1[l1], p1 = T[l1];
          D1 !== p1 && l1 !== "value" && s(F, l1, p1, D1, B, _1);
        }
        "value" in e1 && s(F, "value", T.value, e1.value, B);
      }
    }, k = (F, T, e1, _1, B, l1, D1, p1, o1) => {
      const E1 = T.el = F ? F.el : a(""), N = T.anchor = F ? F.anchor : a("");
      let { patchFlag: D, dynamicChildren: q, slotScopeIds: c1 } = T;
      c1 && (p1 = p1 ? p1.concat(c1) : c1), F == null ? (i(E1, e1, _1), i(N, e1, _1), P(T.children || [], e1, N, B, l1, D1, p1, o1)) : D > 0 && D & 64 && q && F.dynamicChildren ? (E(F.dynamicChildren, q, e1, B, l1, D1, p1), (T.key != null || B && T === B.subTree) && vp(F, T, true)) : G(F, T, e1, N, B, l1, D1, p1, o1);
    }, H = (F, T, e1, _1, B, l1, D1, p1, o1) => {
      T.slotScopeIds = p1, F == null ? T.shapeFlag & 512 ? B.ctx.activate(T, e1, _1, D1, o1) : K(T, e1, _1, B, l1, D1, o1) : J(F, T, o1);
    }, K = (F, T, e1, _1, B, l1, D1) => {
      const p1 = F.component = lM(F, _1, B);
      if (Sl(F) && (p1.ctx.renderer = S1), cM(p1, false, D1), p1.asyncDep) {
        if (B && B.registerDep(p1, z, D1), !F.el) {
          const o1 = p1.subTree = Ye(Zt);
          g(null, o1, T, e1);
        }
      } else z(p1, F, T, e1, B, l1, D1);
    }, J = (F, T, e1) => {
      const _1 = T.component = F.component;
      if (Qw(F, T, e1)) if (_1.asyncDep && !_1.asyncResolved) {
        $(_1, T, e1);
        return;
      } else _1.next = T, _1.update();
      else T.el = F.el, _1.vnode = T;
    }, z = (F, T, e1, _1, B, l1, D1) => {
      const p1 = () => {
        if (F.isMounted) {
          let { next: D, bu: q, u: c1, parent: h1, vnode: d1 } = F;
          {
            const A1 = Lb(F);
            if (A1) {
              D && (D.el = d1.el, $(F, D, D1)), A1.asyncDep.then(() => {
                F.isUnmounted || p1();
              });
              return;
            }
          }
          let U1 = D, B1;
          kr(F, false), D ? (D.el = d1.el, $(F, D, D1)) : D = d1, q && Do(q), (B1 = D.props && D.props.onVnodeBeforeUpdate) && s2(B1, h1, D, d1), kr(F, true);
          const j1 = ih(F), G1 = F.subTree;
          F.subTree = j1, _(G1, j1, h(G1.el), W(G1), F, B, l1), D.el = j1.el, U1 === null && _f(F, j1.el), c1 && Jt(c1, B), (B1 = D.props && D.props.onVnodeUpdated) && Jt(() => s2(B1, h1, D, d1), B);
        } else {
          let D;
          const { el: q, props: c1 } = T, { bm: h1, m: d1, parent: U1, root: B1, type: j1 } = F, G1 = mr(T);
          if (kr(F, false), h1 && Do(h1), !G1 && (D = c1 && c1.onVnodeBeforeMount) && s2(D, U1, T), kr(F, true), q && Z1) {
            const A1 = () => {
              F.subTree = ih(F), Z1(q, F.subTree, F, B, null);
            };
            G1 && j1.__asyncHydrate ? j1.__asyncHydrate(q, F, A1) : A1();
          } else {
            B1.ce && B1.ce._injectChildStyle(j1);
            const A1 = F.subTree = ih(F);
            _(null, A1, e1, _1, F, B, l1), T.el = A1.el;
          }
          if (d1 && Jt(d1, B), !G1 && (D = c1 && c1.onVnodeMounted)) {
            const A1 = T;
            Jt(() => s2(D, U1, A1), B);
          }
          (T.shapeFlag & 256 || U1 && mr(U1.vnode) && U1.vnode.shapeFlag & 256) && F.a && Jt(F.a, B), F.isMounted = true, T = e1 = _1 = null;
        }
      };
      F.scope.on();
      const o1 = F.effect = new C7(p1);
      F.scope.off();
      const E1 = F.update = o1.run.bind(o1), N = F.job = o1.runIfDirty.bind(o1);
      N.i = F, N.id = F.uid, o1.scheduler = () => dp(N), kr(F, true), E1();
    }, $ = (F, T, e1) => {
      T.component = F;
      const _1 = F.vnode.props;
      F.vnode = T, F.next = null, kw(F, T.props, _1, e1), Hw(F, T.children, e1), Dr(), q6(F), Rr();
    }, G = (F, T, e1, _1, B, l1, D1, p1, o1 = false) => {
      const E1 = F && F.children, N = F ? F.shapeFlag : 0, D = T.children, { patchFlag: q, shapeFlag: c1 } = T;
      if (q > 0) {
        if (q & 128) {
          V(E1, D, e1, _1, B, l1, D1, p1, o1);
          return;
        } else if (q & 256) {
          Q(E1, D, e1, _1, B, l1, D1, p1, o1);
          return;
        }
      }
      c1 & 8 ? (N & 16 && M1(E1, B, l1), D !== E1 && u(e1, D)) : N & 16 ? c1 & 16 ? V(E1, D, e1, _1, B, l1, D1, p1, o1) : M1(E1, B, l1, true) : (N & 8 && u(e1, ""), c1 & 16 && P(D, e1, _1, B, l1, D1, p1, o1));
    }, Q = (F, T, e1, _1, B, l1, D1, p1, o1) => {
      F = F || To, T = T || To;
      const E1 = F.length, N = T.length, D = Math.min(E1, N);
      let q;
      for (q = 0; q < D; q++) {
        const c1 = T[q] = o1 ? Q3(T[q]) : T2(T[q]);
        _(F[q], c1, e1, null, B, l1, D1, p1, o1);
      }
      E1 > N ? M1(F, B, l1, true, false, D) : P(T, e1, _1, B, l1, D1, p1, o1, D);
    }, V = (F, T, e1, _1, B, l1, D1, p1, o1) => {
      let E1 = 0;
      const N = T.length;
      let D = F.length - 1, q = N - 1;
      for (; E1 <= D && E1 <= q; ) {
        const c1 = F[E1], h1 = T[E1] = o1 ? Q3(T[E1]) : T2(T[E1]);
        if (ui(c1, h1)) _(c1, h1, e1, null, B, l1, D1, p1, o1);
        else break;
        E1++;
      }
      for (; E1 <= D && E1 <= q; ) {
        const c1 = F[D], h1 = T[q] = o1 ? Q3(T[q]) : T2(T[q]);
        if (ui(c1, h1)) _(c1, h1, e1, null, B, l1, D1, p1, o1);
        else break;
        D--, q--;
      }
      if (E1 > D) {
        if (E1 <= q) {
          const c1 = q + 1, h1 = c1 < N ? T[c1].el : _1;
          for (; E1 <= q; ) _(null, T[E1] = o1 ? Q3(T[E1]) : T2(T[E1]), e1, h1, B, l1, D1, p1, o1), E1++;
        }
      } else if (E1 > q) for (; E1 <= D; ) m1(F[E1], B, l1, true), E1++;
      else {
        const c1 = E1, h1 = E1, d1 = /* @__PURE__ */ new Map();
        for (E1 = h1; E1 <= q; E1++) {
          const K1 = T[E1] = o1 ? Q3(T[E1]) : T2(T[E1]);
          K1.key != null && d1.set(K1.key, E1);
        }
        let U1, B1 = 0;
        const j1 = q - h1 + 1;
        let G1 = false, A1 = 0;
        const $1 = new Array(j1);
        for (E1 = 0; E1 < j1; E1++) $1[E1] = 0;
        for (E1 = c1; E1 <= D; E1++) {
          const K1 = F[E1];
          if (B1 >= j1) {
            m1(K1, B, l1, true);
            continue;
          }
          let V1;
          if (K1.key != null) V1 = d1.get(K1.key);
          else for (U1 = h1; U1 <= q; U1++) if ($1[U1 - h1] === 0 && ui(K1, T[U1])) {
            V1 = U1;
            break;
          }
          V1 === void 0 ? m1(K1, B, l1, true) : ($1[V1 - h1] = E1 + 1, V1 >= A1 ? A1 = V1 : G1 = true, _(K1, T[V1], e1, null, B, l1, D1, p1, o1), B1++);
        }
        const ne = G1 ? Gw($1) : To;
        for (U1 = ne.length - 1, E1 = j1 - 1; E1 >= 0; E1--) {
          const K1 = h1 + E1, V1 = T[K1], ie = K1 + 1 < N ? T[K1 + 1].el : _1;
          $1[E1] === 0 ? _(null, V1, e1, ie, B, l1, D1, p1, o1) : G1 && (U1 < 0 || E1 !== ne[U1] ? w1(V1, e1, ie, 2) : U1--);
        }
      }
    }, w1 = (F, T, e1, _1, B = null) => {
      const { el: l1, type: D1, transition: p1, children: o1, shapeFlag: E1 } = F;
      if (E1 & 6) {
        w1(F.component.subTree, T, e1, _1);
        return;
      }
      if (E1 & 128) {
        F.suspense.move(T, e1, _1);
        return;
      }
      if (E1 & 64) {
        D1.move(F, T, e1, S1);
        return;
      }
      if (D1 === gn) {
        i(l1, T, e1);
        for (let D = 0; D < o1.length; D++) w1(o1[D], T, e1, _1);
        i(F.anchor, T, e1);
        return;
      }
      if (D1 === Lo) {
        b(F, T, e1);
        return;
      }
      if (_1 !== 2 && E1 & 1 && p1) if (_1 === 0) p1.beforeEnter(l1), i(l1, T, e1), Jt(() => p1.enter(l1), B);
      else {
        const { leave: D, delayLeave: q, afterLeave: c1 } = p1, h1 = () => i(l1, T, e1), d1 = () => {
          D(l1, () => {
            h1(), c1 && c1();
          });
        };
        q ? q(l1, h1, d1) : d1();
      }
      else i(l1, T, e1);
    }, m1 = (F, T, e1, _1 = false, B = false) => {
      const { type: l1, props: D1, ref: p1, children: o1, dynamicChildren: E1, shapeFlag: N, patchFlag: D, dirs: q, cacheIndex: c1 } = F;
      if (D === -2 && (B = false), p1 != null && X0(p1, null, e1, F, true), c1 != null && (T.renderCache[c1] = void 0), N & 256) {
        T.ctx.deactivate(F);
        return;
      }
      const h1 = N & 1 && q, d1 = !mr(F);
      let U1;
      if (d1 && (U1 = D1 && D1.onVnodeBeforeUnmount) && s2(U1, T, F), N & 6) f1(F.component, e1, _1);
      else {
        if (N & 128) {
          F.suspense.unmount(e1, _1);
          return;
        }
        h1 && Ri(F, null, T, "beforeUnmount"), N & 64 ? F.type.remove(F, T, e1, S1, _1) : E1 && !E1.hasOnce && (l1 !== gn || D > 0 && D & 64) ? M1(E1, T, e1, false, true) : (l1 === gn && D & 384 || !B && N & 16) && M1(o1, T, e1), _1 && I1(F);
      }
      (d1 && (U1 = D1 && D1.onVnodeUnmounted) || h1) && Jt(() => {
        U1 && s2(U1, T, F), h1 && Ri(F, null, T, "unmounted");
      }, e1);
    }, I1 = (F) => {
      const { type: T, el: e1, anchor: _1, transition: B } = F;
      if (T === gn) {
        Z(e1, _1);
        return;
      }
      if (T === Lo) {
        v(F);
        return;
      }
      const l1 = () => {
        r(e1), B && !B.persisted && B.afterLeave && B.afterLeave();
      };
      if (F.shapeFlag & 1 && B && !B.persisted) {
        const { leave: D1, delayLeave: p1 } = B, o1 = () => D1(e1, l1);
        p1 ? p1(F.el, l1, o1) : o1();
      } else l1();
    }, Z = (F, T) => {
      let e1;
      for (; F !== T; ) e1 = d(F), r(F), F = e1;
      r(T);
    }, f1 = (F, T, e1) => {
      const { bum: _1, scope: B, job: l1, subTree: D1, um: p1, m: o1, a: E1 } = F;
      bu(o1), bu(E1), _1 && Do(_1), B.stop(), l1 && (l1.flags |= 8, m1(D1, F, T, e1)), p1 && Jt(p1, T), Jt(() => {
        F.isUnmounted = true;
      }, T), T && T.pendingBranch && !T.isUnmounted && F.asyncDep && !F.asyncResolved && F.suspenseId === T.pendingId && (T.deps--, T.deps === 0 && T.resolve());
    }, M1 = (F, T, e1, _1 = false, B = false, l1 = 0) => {
      for (let D1 = l1; D1 < F.length; D1++) m1(F[D1], T, e1, _1, B);
    }, W = (F) => {
      if (F.shapeFlag & 6) return W(F.component.subTree);
      if (F.shapeFlag & 128) return F.suspense.next();
      const T = d(F.anchor || F.el), e1 = T && T[Z7];
      return e1 ? d(e1) : T;
    };
    let r1 = false;
    const v1 = (F, T, e1) => {
      F == null ? T._vnode && m1(T._vnode, null, null, true) : _(T._vnode || null, F, T, null, null, null, e1), T._vnode = F, r1 || (r1 = true, q6(), mu(), r1 = false);
    }, S1 = {
      p: _,
      um: m1,
      m: w1,
      r: I1,
      mt: K,
      mc: P,
      pc: G,
      pbc: E,
      n: W,
      o: n
    };
    let z1, Z1;
    return e && ([z1, Z1] = e(S1)), {
      render: v1,
      hydrate: z1,
      createApp: Fw(v1, z1)
    };
  }
  function nh({ type: n, props: e }, t) {
    return t === "svg" && n === "foreignObject" || t === "mathml" && n === "annotation-xml" && e && e.encoding && e.encoding.includes("html") ? void 0 : t;
  }
  function kr({ effect: n, job: e }, t) {
    t ? (n.flags |= 32, e.flags |= 4) : (n.flags &= -33, e.flags &= -5);
  }
  function Pb(n, e) {
    return (!n || n && !n.pendingBranch) && e && !e.persisted;
  }
  function vp(n, e, t = false) {
    const i = n.children, r = e.children;
    if (be(i) && be(r)) for (let s = 0; s < i.length; s++) {
      const o = i[s];
      let a = r[s];
      a.shapeFlag & 1 && !a.dynamicChildren && ((a.patchFlag <= 0 || a.patchFlag === 32) && (a = r[s] = Q3(r[s]), a.el = o.el), !t && a.patchFlag !== -2 && vp(o, a)), a.type === ms && (a.el = o.el);
    }
  }
  function Gw(n) {
    const e = n.slice(), t = [
      0
    ];
    let i, r, s, o, a;
    const l = n.length;
    for (i = 0; i < l; i++) {
      const c = n[i];
      if (c !== 0) {
        if (r = t[t.length - 1], n[r] < c) {
          e[i] = r, t.push(i);
          continue;
        }
        for (s = 0, o = t.length - 1; s < o; ) a = s + o >> 1, n[t[a]] < c ? s = a + 1 : o = a;
        c < n[t[s]] && (s > 0 && (e[i] = t[s - 1]), t[s] = i);
      }
    }
    for (s = t.length, o = t[s - 1]; s-- > 0; ) t[s] = o, o = e[o];
    return t;
  }
  function Lb(n) {
    const e = n.subTree.component;
    if (e) return e.asyncDep && !e.asyncResolved ? e : Lb(e);
  }
  function bu(n) {
    if (n) for (let e = 0; e < n.length; e++) n[e].flags |= 8;
  }
  const Ww = Symbol.for("v-scx"), jw = () => fn(Ww);
  function vu(n, e) {
    return yp(n, null, e);
  }
  je = function(n, e, t) {
    return yp(n, e, t);
  };
  function yp(n, e, t = at) {
    const { immediate: i, deep: r, flush: s, once: o } = t, a = dn({}, t), l = e && i || !e && s !== "post";
    let c;
    if (Qo) {
      if (s === "sync") {
        const f = jw();
        c = f.__watcherHandles || (f.__watcherHandles = []);
      } else if (!l) {
        const f = () => {
        };
        return f.stop = pi, f.resume = pi, f.pause = pi, f;
      }
    }
    const u = en;
    a.call = (f, m, _) => vi(f, u, m, _);
    let h = false;
    s === "post" ? a.scheduler = (f) => {
      Jt(f, u && u.suspense);
    } : s !== "sync" && (h = true, a.scheduler = (f, m) => {
      m ? f() : dp(f);
    }), a.augmentJob = (f) => {
      e && (f.flags |= 4), h && (f.flags |= 2, u && (f.id = u.uid, f.i = u));
    };
    const d = aw(n, e, a);
    return Qo && (c ? c.push(d) : l && d()), d;
  }
  function Xw(n, e, t) {
    const i = this.proxy, r = pt(n) ? n.includes(".") ? Ib(i, n) : () => i[n] : n.bind(i, i);
    let s;
    ve(e) ? s = e : (s = e.handler, t = e);
    const o = El(this), a = yp(r, s.bind(i), t);
    return o(), a;
  }
  function Ib(n, e) {
    const t = e.split(".");
    return () => {
      let i = n;
      for (let r = 0; r < t.length && i; r++) i = i[t[r]];
      return i;
    };
  }
  const $w = (n, e) => e === "modelValue" || e === "model-value" ? n.modelModifiers : n[`${e}Modifiers`] || n[`${J2(e)}Modifiers`] || n[`${Fs(e)}Modifiers`];
  function qw(n, e, ...t) {
    if (n.isUnmounted) return;
    const i = n.vnode.props || at;
    let r = t;
    const s = e.startsWith("update:"), o = s && $w(i, e.slice(7));
    o && (o.trim && (r = t.map((u) => pt(u) ? u.trim() : u)), o.number && (r = t.map(Hd)));
    let a, l = i[a = $f(e)] || i[a = $f(J2(e))];
    !l && s && (l = i[a = $f(Fs(e))]), l && vi(l, n, 6, r);
    const c = i[a + "Once"];
    if (c) {
      if (!n.emitted) n.emitted = {};
      else if (n.emitted[a]) return;
      n.emitted[a] = true, vi(c, n, 6, r);
    }
  }
  function Fb(n, e, t = false) {
    const i = e.emitsCache, r = i.get(n);
    if (r !== void 0) return r;
    const s = n.emits;
    let o = {}, a = false;
    if (!ve(n)) {
      const l = (c) => {
        const u = Fb(c, e, true);
        u && (a = true, dn(o, u));
      };
      !t && e.mixins.length && e.mixins.forEach(l), n.extends && l(n.extends), n.mixins && n.mixins.forEach(l);
    }
    return !s && !a ? (ut(n) && i.set(n, null), null) : (be(s) ? s.forEach((l) => o[l] = null) : dn(o, s), ut(n) && i.set(n, o), o);
  }
  function gf(n, e) {
    return !n || !vl(e) ? false : (e = e.slice(2).replace(/Once$/, ""), Ze(n, e[0].toLowerCase() + e.slice(1)) || Ze(n, Fs(e)) || Ze(n, e));
  }
  function ih(n) {
    const { type: e, vnode: t, proxy: i, withProxy: r, propsOptions: [s], slots: o, attrs: a, emit: l, render: c, renderCache: u, props: h, data: d, setupState: f, ctx: m, inheritAttrs: _ } = n, p = gu(n);
    let g, y;
    try {
      if (t.shapeFlag & 4) {
        const v = r || i, x = v;
        g = T2(c.call(x, v, u, h, f, d, m)), y = a;
      } else {
        const v = e;
        g = T2(v.length > 1 ? v(h, {
          attrs: a,
          slots: o,
          emit: l
        }) : v(h, null)), y = e.props ? a : Kw(a);
      }
    } catch (v) {
      p0.length = 0, ya(v, n, 1), g = Ye(Zt);
    }
    let b = g;
    if (y && _ !== false) {
      const v = Object.keys(y), { shapeFlag: x } = b;
      v.length && x & 7 && (s && v.some(rp) && (y = Jw(y, s)), b = A3(b, y, false, true));
    }
    return t.dirs && (b = A3(b, null, false, true), b.dirs = b.dirs ? b.dirs.concat(t.dirs) : t.dirs), t.transition && Ko(b, t.transition), g = b, gu(p), g;
  }
  function Yw(n, e = true) {
    let t;
    for (let i = 0; i < n.length; i++) {
      const r = n[i];
      if (Ts(r)) {
        if (r.type !== Zt || r.children === "v-if") {
          if (t) return;
          t = r;
        }
      } else return;
    }
    return t;
  }
  const Kw = (n) => {
    let e;
    for (const t in n) (t === "class" || t === "style" || vl(t)) && ((e || (e = {}))[t] = n[t]);
    return e;
  }, Jw = (n, e) => {
    const t = {};
    for (const i in n) (!rp(i) || !(i.slice(9) in e)) && (t[i] = n[i]);
    return t;
  };
  function Qw(n, e, t) {
    const { props: i, children: r, component: s } = n, { props: o, children: a, patchFlag: l } = e, c = s.emitsOptions;
    if (e.dirs || e.transition) return true;
    if (t && l >= 0) {
      if (l & 1024) return true;
      if (l & 16) return i ? l5(i, o, c) : !!o;
      if (l & 8) {
        const u = e.dynamicProps;
        for (let h = 0; h < u.length; h++) {
          const d = u[h];
          if (o[d] !== i[d] && !gf(c, d)) return true;
        }
      }
    } else return (r || a) && (!a || !a.$stable) ? true : i === o ? false : i ? o ? l5(i, o, c) : true : !!o;
    return false;
  }
  function l5(n, e, t) {
    const i = Object.keys(e);
    if (i.length !== Object.keys(n).length) return true;
    for (let r = 0; r < i.length; r++) {
      const s = i[r];
      if (e[s] !== n[s] && !gf(t, s)) return true;
    }
    return false;
  }
  function _f({ vnode: n, parent: e }, t) {
    for (; e; ) {
      const i = e.subTree;
      if (i.suspense && i.suspense.activeBranch === n && (i.el = n.el), i === n) (n = e.vnode).el = t, e = e.parent;
      else break;
    }
  }
  const yu = (n) => n.__isSuspense;
  let Jd = 0;
  const Zw = {
    name: "Suspense",
    __isSuspense: true,
    process(n, e, t, i, r, s, o, a, l, c) {
      if (n == null) eM(e, t, i, r, s, o, a, l, c);
      else {
        if (s && s.deps > 0 && !n.suspense.isInFallback) {
          e.suspense = n.suspense, e.suspense.vnode = e, e.el = n.el;
          return;
        }
        tM(n, e, t, i, r, o, a, l, c);
      }
    },
    hydrate: nM,
    normalize: iM
  }, xp = Zw;
  function $0(n, e) {
    const t = n.props && n.props[e];
    ve(t) && t();
  }
  function eM(n, e, t, i, r, s, o, a, l) {
    const { p: c, o: { createElement: u } } = l, h = u("div"), d = n.suspense = Ob(n, r, i, e, h, t, s, o, a, l);
    c(null, d.pendingBranch = n.ssContent, h, null, i, d, s, o), d.deps > 0 ? ($0(n, "onPending"), $0(n, "onFallback"), c(null, n.ssFallback, e, t, i, null, s, o), Po(d, n.ssFallback)) : d.resolve(false, true);
  }
  function tM(n, e, t, i, r, s, o, a, { p: l, um: c, o: { createElement: u } }) {
    const h = e.suspense = n.suspense;
    h.vnode = e, e.el = n.el;
    const d = e.ssContent, f = e.ssFallback, { activeBranch: m, pendingBranch: _, isInFallback: p, isHydrating: g } = h;
    if (_) h.pendingBranch = d, ui(d, _) ? (l(_, d, h.hiddenContainer, null, r, h, s, o, a), h.deps <= 0 ? h.resolve() : p && (g || (l(m, f, t, i, r, null, s, o, a), Po(h, f)))) : (h.pendingId = Jd++, g ? (h.isHydrating = false, h.activeBranch = _) : c(_, r, h), h.deps = 0, h.effects.length = 0, h.hiddenContainer = u("div"), p ? (l(null, d, h.hiddenContainer, null, r, h, s, o, a), h.deps <= 0 ? h.resolve() : (l(m, f, t, i, r, null, s, o, a), Po(h, f))) : m && ui(d, m) ? (l(m, d, t, i, r, h, s, o, a), h.resolve(true)) : (l(null, d, h.hiddenContainer, null, r, h, s, o, a), h.deps <= 0 && h.resolve()));
    else if (m && ui(d, m)) l(m, d, t, i, r, h, s, o, a), Po(h, d);
    else if ($0(e, "onPending"), h.pendingBranch = d, d.shapeFlag & 512 ? h.pendingId = d.component.suspenseId : h.pendingId = Jd++, l(null, d, h.hiddenContainer, null, r, h, s, o, a), h.deps <= 0) h.resolve();
    else {
      const { timeout: y, pendingId: b } = h;
      y > 0 ? setTimeout(() => {
        h.pendingId === b && h.fallback(f);
      }, y) : y === 0 && h.fallback(f);
    }
  }
  function Ob(n, e, t, i, r, s, o, a, l, c, u = false) {
    const { p: h, m: d, um: f, n: m, o: { parentNode: _, remove: p } } = c;
    let g;
    const y = rM(n);
    y && e && e.pendingBranch && (g = e.pendingId, e.deps++);
    const b = n.props ? y7(n.props.timeout) : void 0, v = s, x = {
      vnode: n,
      parent: e,
      parentComponent: t,
      namespace: o,
      container: i,
      hiddenContainer: r,
      deps: 0,
      pendingId: Jd++,
      timeout: typeof b == "number" ? b : -1,
      activeBranch: null,
      pendingBranch: null,
      isInFallback: !u,
      isHydrating: u,
      isUnmounted: false,
      effects: [],
      resolve(C = false, A = false) {
        const { vnode: P, activeBranch: M, pendingBranch: E, pendingId: I, effects: k, parentComponent: H, container: K } = x;
        let J = false;
        x.isHydrating ? x.isHydrating = false : C || (J = M && E.transition && E.transition.mode === "out-in", J && (M.transition.afterLeave = () => {
          I === x.pendingId && (d(E, K, s === v ? m(M) : s, 0), pu(k));
        }), M && (_(M.el) === K && (s = m(M)), f(M, H, x, true)), J || d(E, K, s, 0)), Po(x, E), x.pendingBranch = null, x.isInFallback = false;
        let z = x.parent, $ = false;
        for (; z; ) {
          if (z.pendingBranch) {
            z.effects.push(...k), $ = true;
            break;
          }
          z = z.parent;
        }
        !$ && !J && pu(k), x.effects = [], y && e && e.pendingBranch && g === e.pendingId && (e.deps--, e.deps === 0 && !A && e.resolve()), $0(P, "onResolve");
      },
      fallback(C) {
        if (!x.pendingBranch) return;
        const { vnode: A, activeBranch: P, parentComponent: M, container: E, namespace: I } = x;
        $0(A, "onFallback");
        const k = m(P), H = () => {
          x.isInFallback && (h(null, C, E, k, M, null, I, a, l), Po(x, C));
        }, K = C.transition && C.transition.mode === "out-in";
        K && (P.transition.afterLeave = H), x.isInFallback = true, f(P, M, null, true), K || H();
      },
      move(C, A, P) {
        x.activeBranch && d(x.activeBranch, C, A, P), x.container = C;
      },
      next() {
        return x.activeBranch && m(x.activeBranch);
      },
      registerDep(C, A, P) {
        const M = !!x.pendingBranch;
        M && x.deps++;
        const E = C.vnode.el;
        C.asyncDep.catch((I) => {
          ya(I, C, 0);
        }).then((I) => {
          if (C.isUnmounted || x.isUnmounted || x.pendingId !== C.suspenseId) return;
          C.asyncResolved = true;
          const { vnode: k } = C;
          Zd(C, I), E && (k.el = E);
          const H = !E && C.subTree.el;
          A(C, k, _(E || C.subTree.el), E ? null : m(C.subTree), x, o, P), H && p(H), _f(C, k.el), M && --x.deps === 0 && x.resolve();
        });
      },
      unmount(C, A) {
        x.isUnmounted = true, x.activeBranch && f(x.activeBranch, t, C, A), x.pendingBranch && f(x.pendingBranch, t, C, A);
      }
    };
    return x;
  }
  function nM(n, e, t, i, r, s, o, a, l) {
    const c = e.suspense = Ob(e, i, t, n.parentNode, document.createElement("div"), null, r, s, o, a, true), u = l(n, c.pendingBranch = e.ssContent, t, c, s, o);
    return c.deps === 0 && c.resolve(false, true), u;
  }
  function iM(n) {
    const { shapeFlag: e, children: t } = n, i = e & 32;
    n.ssContent = c5(i ? t.default : t), n.ssFallback = i ? c5(t.fallback) : Ye(Zt);
  }
  function c5(n) {
    let e;
    if (ve(n)) {
      const t = Jo && n._c;
      t && (n._d = false, jt()), n = n(), t && (n._d = true, e = c2, Nb());
    }
    return be(n) && (n = Yw(n)), n = T2(n), e && !n.dynamicChildren && (n.dynamicChildren = e.filter((t) => t !== n)), n;
  }
  function kb(n, e) {
    e && e.pendingBranch ? be(n) ? e.effects.push(...n) : e.effects.push(n) : pu(n);
  }
  function Po(n, e) {
    n.activeBranch = e;
    const { vnode: t, parentComponent: i } = n;
    let r = e.el;
    for (; !r && e.component; ) e = e.component.subTree, r = e.el;
    t.el = r, i && i.subTree === t && (i.vnode.el = r, _f(i, r));
  }
  function rM(n) {
    const e = n.props && n.props.suspensible;
    return e != null && e !== false;
  }
  let ms, Zt, Lo, p0;
  gn = Symbol.for("v-fgt");
  ms = Symbol.for("v-txt");
  Zt = Symbol.for("v-cmt");
  Lo = Symbol.for("v-stc");
  p0 = [];
  let c2 = null;
  jt = function(n = false) {
    p0.push(c2 = n ? null : []);
  };
  function Nb() {
    p0.pop(), c2 = p0[p0.length - 1] || null;
  }
  let Jo = 1;
  function u5(n, e = false) {
    Jo += n, n < 0 && c2 && e && (c2.hasOnce = true);
  }
  function Ub(n) {
    return n.dynamicChildren = Jo > 0 ? c2 || To : null, Nb(), Jo > 0 && c2 && c2.push(n), n;
  }
  gs = function(n, e, t, i, r, s) {
    return Ub(u2(n, e, t, i, r, s, true));
  };
  C2 = function(n, e, t, i, r) {
    return Ub(Ye(n, e, t, i, r, true));
  };
  function Ts(n) {
    return n ? n.__v_isVNode === true : false;
  }
  function ui(n, e) {
    return n.type === e.type && n.key === e.key;
  }
  const Bb = ({ key: n }) => n ?? null, Bc = ({ ref: n, ref_key: e, ref_for: t }) => (typeof n == "number" && (n = "" + n), n != null ? pt(n) || yt(n) || ve(n) ? {
    i: tn,
    r: n,
    k: e,
    f: !!t
  } : n : null);
  u2 = function(n, e = null, t = null, i = 0, r = null, s = n === gn ? 0 : 1, o = false, a = false) {
    const l = {
      __v_isVNode: true,
      __v_skip: true,
      type: n,
      props: e,
      key: e && Bb(e),
      ref: e && Bc(e),
      scopeId: Q7,
      slotScopeIds: null,
      children: t,
      component: null,
      suspense: null,
      ssContent: null,
      ssFallback: null,
      dirs: null,
      transition: null,
      el: null,
      anchor: null,
      target: null,
      targetStart: null,
      targetAnchor: null,
      staticCount: 0,
      shapeFlag: s,
      patchFlag: i,
      dynamicProps: r,
      dynamicChildren: null,
      appContext: null,
      ctx: tn
    };
    return a ? (Ep(l, t), s & 128 && n.normalize(l)) : t && (l.shapeFlag |= pt(t) ? 8 : 16), Jo > 0 && !o && c2 && (l.patchFlag > 0 || s & 6) && l.patchFlag !== 32 && c2.push(l), l;
  };
  Ye = sM;
  function sM(n, e = null, t = null, i = 0, r = null, s = false) {
    if ((!n || n === pb) && (n = Zt), Ts(n)) {
      const a = A3(n, e, true);
      return t && Ep(a, t), Jo > 0 && !s && c2 && (a.shapeFlag & 6 ? c2[c2.indexOf(n)] = a : c2.push(a)), a.patchFlag = -2, a;
    }
    if (dM(n) && (n = n.__vccOpts), e) {
      e = Hb(e);
      let { class: a, style: l } = e;
      a && !pt(a) && (e.class = cf(a)), ut(l) && (fp(l) && !be(l) && (l = dn({}, l)), e.style = lf(l));
    }
    const o = pt(n) ? 1 : yu(n) ? 128 : eb(n) ? 64 : ut(n) ? 4 : ve(n) ? 2 : 0;
    return u2(n, e, t, i, r, o, s, true);
  }
  function Hb(n) {
    return n ? fp(n) || Eb(n) ? dn({}, n) : n : null;
  }
  function A3(n, e, t = false, i = false) {
    const { props: r, ref: s, patchFlag: o, children: a, transition: l } = n, c = e ? Vb(r || {}, e) : r, u = {
      __v_isVNode: true,
      __v_skip: true,
      type: n.type,
      props: c,
      key: c && Bb(c),
      ref: e && e.ref ? t && s ? be(s) ? s.concat(Bc(e)) : [
        s,
        Bc(e)
      ] : Bc(e) : s,
      scopeId: n.scopeId,
      slotScopeIds: n.slotScopeIds,
      children: a,
      target: n.target,
      targetStart: n.targetStart,
      targetAnchor: n.targetAnchor,
      staticCount: n.staticCount,
      shapeFlag: n.shapeFlag,
      patchFlag: e && n.type !== gn ? o === -1 ? 16 : o | 16 : o,
      dynamicProps: n.dynamicProps,
      dynamicChildren: n.dynamicChildren,
      appContext: n.appContext,
      dirs: n.dirs,
      transition: l,
      component: n.component,
      suspense: n.suspense,
      ssContent: n.ssContent && A3(n.ssContent),
      ssFallback: n.ssFallback && A3(n.ssFallback),
      el: n.el,
      anchor: n.anchor,
      ctx: n.ctx,
      ce: n.ce
    };
    return l && i && Ko(u, l.clone(u)), u;
  }
  Sp = function(n = " ", e = 0) {
    return Ye(ms, null, n, e);
  };
  MV = function(n, e) {
    const t = Ye(Lo, null, n);
    return t.staticCount = e, t;
  };
  zb = function(n = "", e = false) {
    return e ? (jt(), C2(Zt, null, n)) : Ye(Zt, null, n);
  };
  function T2(n) {
    return n == null || typeof n == "boolean" ? Ye(Zt) : be(n) ? Ye(gn, null, n.slice()) : Ts(n) ? Q3(n) : Ye(ms, null, String(n));
  }
  function Q3(n) {
    return n.el === null && n.patchFlag !== -1 || n.memo ? n : A3(n);
  }
  function Ep(n, e) {
    let t = 0;
    const { shapeFlag: i } = n;
    if (e == null) e = null;
    else if (be(e)) t = 16;
    else if (typeof e == "object") if (i & 65) {
      const r = e.default;
      r && (r._c && (r._d = false), Ep(n, r()), r._c && (r._d = true));
      return;
    } else {
      t = 32;
      const r = e._;
      !r && !Eb(e) ? e._ctx = tn : r === 3 && tn && (tn.slots._ === 1 ? e._ = 1 : (e._ = 2, n.patchFlag |= 1024));
    }
    else ve(e) ? (e = {
      default: e,
      _ctx: tn
    }, t = 32) : (e = String(e), i & 64 ? (t = 16, e = [
      Sp(e)
    ]) : t = 8);
    n.children = e, n.shapeFlag |= t;
  }
  function Vb(...n) {
    const e = {};
    for (let t = 0; t < n.length; t++) {
      const i = n[t];
      for (const r in i) if (r === "class") e.class !== i.class && (e.class = cf([
        e.class,
        i.class
      ]));
      else if (r === "style") e.style = lf([
        e.style,
        i.style
      ]);
      else if (vl(r)) {
        const s = e[r], o = i[r];
        o && s !== o && !(be(s) && s.includes(o)) && (e[r] = s ? [].concat(s, o) : o);
      } else r !== "" && (e[r] = i[r]);
    }
    return e;
  }
  function s2(n, e, t, i = null) {
    vi(n, e, 7, [
      t,
      i
    ]);
  }
  const oM = yb();
  let aM = 0;
  function lM(n, e, t) {
    const i = n.type, r = (e ? e.appContext : n.appContext) || oM, s = {
      uid: aM++,
      vnode: n,
      type: i,
      parent: e,
      appContext: r,
      root: null,
      next: null,
      subTree: null,
      effect: null,
      update: null,
      job: null,
      scope: new M7(true),
      render: null,
      proxy: null,
      exposed: null,
      exposeProxy: null,
      withProxy: null,
      provides: e ? e.provides : Object.create(r.provides),
      ids: e ? e.ids : [
        "",
        0,
        0
      ],
      accessCache: null,
      renderCache: [],
      components: null,
      directives: null,
      propsOptions: Mb(i, r),
      emitsOptions: Fb(i, r),
      emit: null,
      emitted: null,
      propsDefaults: at,
      inheritAttrs: i.inheritAttrs,
      ctx: at,
      data: at,
      props: at,
      attrs: at,
      slots: at,
      refs: at,
      setupState: at,
      setupContext: null,
      suspense: t,
      suspenseId: t ? t.pendingId : 0,
      asyncDep: null,
      asyncResolved: false,
      isMounted: false,
      isUnmounted: false,
      isDeactivated: false,
      bc: null,
      c: null,
      bm: null,
      m: null,
      bu: null,
      u: null,
      um: null,
      bum: null,
      da: null,
      a: null,
      rtg: null,
      rtc: null,
      ec: null,
      sp: null
    };
    return s.ctx = {
      _: s
    }, s.root = e ? e.root : s, s.emit = qw.bind(null, s), n.ce && n.ce(s), s;
  }
  let en = null;
  const O3 = () => en || tn;
  let xu, Qd;
  {
    const n = af(), e = (t, i) => {
      let r;
      return (r = n[t]) || (r = n[t] = []), r.push(i), (s) => {
        r.length > 1 ? r.forEach((o) => o(s)) : r[0](s);
      };
    };
    xu = e("__VUE_INSTANCE_SETTERS__", (t) => en = t), Qd = e("__VUE_SSR_SETTERS__", (t) => Qo = t);
  }
  const El = (n) => {
    const e = en;
    return xu(n), n.scope.on(), () => {
      n.scope.off(), xu(e);
    };
  }, f5 = () => {
    en && en.scope.off(), xu(null);
  };
  function Gb(n) {
    return n.vnode.shapeFlag & 4;
  }
  let Qo = false;
  function cM(n, e = false, t = false) {
    e && Qd(e);
    const { props: i, children: r } = n.vnode, s = Gb(n);
    Ow(n, i, s, e), Bw(n, r, t);
    const o = s ? uM(n, e) : void 0;
    return e && Qd(false), o;
  }
  function uM(n, e) {
    const t = n.type;
    n.accessCache = /* @__PURE__ */ Object.create(null), n.proxy = new Proxy(n.ctx, Cw);
    const { setup: i } = t;
    if (i) {
      Dr();
      const r = n.setupContext = i.length > 1 ? hM(n) : null, s = El(n), o = xl(i, n, 0, [
        n.props,
        r
      ]), a = g7(o);
      if (Rr(), s(), (a || n.sp) && !mr(n) && pp(n), a) {
        if (o.then(f5, f5), e) return o.then((l) => {
          Zd(n, l);
        }).catch((l) => {
          ya(l, n, 0);
        });
        n.asyncDep = o;
      } else Zd(n, o);
    } else Wb(n);
  }
  function Zd(n, e, t) {
    ve(e) ? n.type.__ssrInlineRender ? n.ssrRender = e : n.render = e : ut(e) && (n.setupState = W7(e)), Wb(n);
  }
  function Wb(n, e, t) {
    const i = n.type;
    n.render || (n.render = i.render || pi);
    {
      const r = El(n);
      Dr();
      try {
        Aw(n);
      } finally {
        Rr(), r();
      }
    }
  }
  const fM = {
    get(n, e) {
      return Cn(n, "get", ""), n[e];
    }
  };
  function hM(n) {
    const e = (t) => {
      n.exposed = t || {};
    };
    return {
      attrs: new Proxy(n.attrs, fM),
      slots: n.slots,
      emit: n.emit,
      expose: e
    };
  }
  function bf(n) {
    return n.exposed ? n.exposeProxy || (n.exposeProxy = new Proxy(W7(hp(n.exposed)), {
      get(e, t) {
        if (t in e) return e[t];
        if (t in d0) return d0[t](n);
      },
      has(e, t) {
        return t in e || t in d0;
      }
    })) : n.proxy;
  }
  function e4(n, e = true) {
    return ve(n) ? n.displayName || n.name : n.name || e && n.__name;
  }
  function dM(n) {
    return ve(n) && "__vccOpts" in n;
  }
  qe = (n, e) => sw(n, e, Qo);
  function Xt(n, e, t) {
    const i = arguments.length;
    return i === 2 ? ut(e) && !be(e) ? Ts(e) ? Ye(n, null, [
      e
    ]) : Ye(n, e) : Ye(n, null, e) : (i > 3 ? t = Array.prototype.slice.call(arguments, 2) : i === 3 && Ts(t) && (t = [
      t
    ]), Ye(n, e, t));
  }
  const pM = "3.5.13";
  let t4;
  const h5 = typeof window < "u" && window.trustedTypes;
  if (h5) try {
    t4 = h5.createPolicy("vue", {
      createHTML: (n) => n
    });
  } catch {
  }
  let jb, mM, gM, f3, d5, _M, N3, Da, q0, Xb, bM, vM, Nr, p5;
  jb = t4 ? (n) => t4.createHTML(n) : (n) => n;
  mM = "http://www.w3.org/2000/svg";
  gM = "http://www.w3.org/1998/Math/MathML";
  f3 = typeof document < "u" ? document : null;
  d5 = f3 && f3.createElement("template");
  _M = {
    insert: (n, e, t) => {
      e.insertBefore(n, t || null);
    },
    remove: (n) => {
      const e = n.parentNode;
      e && e.removeChild(n);
    },
    createElement: (n, e, t, i) => {
      const r = e === "svg" ? f3.createElementNS(mM, n) : e === "mathml" ? f3.createElementNS(gM, n) : t ? f3.createElement(n, {
        is: t
      }) : f3.createElement(n);
      return n === "select" && i && i.multiple != null && r.setAttribute("multiple", i.multiple), r;
    },
    createText: (n) => f3.createTextNode(n),
    createComment: (n) => f3.createComment(n),
    setText: (n, e) => {
      n.nodeValue = e;
    },
    setElementText: (n, e) => {
      n.textContent = e;
    },
    parentNode: (n) => n.parentNode,
    nextSibling: (n) => n.nextSibling,
    querySelector: (n) => f3.querySelector(n),
    setScopeId(n, e) {
      n.setAttribute(e, "");
    },
    insertStaticContent(n, e, t, i, r, s) {
      const o = t ? t.previousSibling : e.lastChild;
      if (r && (r === s || r.nextSibling)) for (; e.insertBefore(r.cloneNode(true), t), !(r === s || !(r = r.nextSibling)); ) ;
      else {
        d5.innerHTML = jb(i === "svg" ? `<svg>${n}</svg>` : i === "mathml" ? `<math>${n}</math>` : n);
        const a = d5.content;
        if (i === "svg" || i === "mathml") {
          const l = a.firstChild;
          for (; l.firstChild; ) a.appendChild(l.firstChild);
          a.removeChild(l);
        }
        e.insertBefore(a, t);
      }
      return [
        o ? o.nextSibling : e.firstChild,
        t ? t.previousSibling : e.lastChild
      ];
    }
  };
  N3 = "transition";
  Da = "animation";
  q0 = Symbol("_vtc");
  Xb = {
    name: String,
    type: String,
    css: {
      type: Boolean,
      default: true
    },
    duration: [
      String,
      Number,
      Object
    ],
    enterFromClass: String,
    enterActiveClass: String,
    enterToClass: String,
    appearFromClass: String,
    appearActiveClass: String,
    appearToClass: String,
    leaveFromClass: String,
    leaveActiveClass: String,
    leaveToClass: String
  };
  bM = dn({}, ib, Xb);
  vM = (n) => (n.displayName = "Transition", n.props = bM, n);
  wp = vM((n, { slots: e }) => Xt(pw, yM(n), e));
  Nr = (n, e = []) => {
    be(n) ? n.forEach((t) => t(...e)) : n && n(...e);
  };
  p5 = (n) => n ? be(n) ? n.some((e) => e.length > 1) : n.length > 1 : false;
  function yM(n) {
    const e = {};
    for (const k in n) k in Xb || (e[k] = n[k]);
    if (n.css === false) return e;
    const { name: t = "v", type: i, duration: r, enterFromClass: s = `${t}-enter-from`, enterActiveClass: o = `${t}-enter-active`, enterToClass: a = `${t}-enter-to`, appearFromClass: l = s, appearActiveClass: c = o, appearToClass: u = a, leaveFromClass: h = `${t}-leave-from`, leaveActiveClass: d = `${t}-leave-active`, leaveToClass: f = `${t}-leave-to` } = n, m = xM(r), _ = m && m[0], p = m && m[1], { onBeforeEnter: g, onEnter: y, onEnterCancelled: b, onLeave: v, onLeaveCancelled: x, onBeforeAppear: C = g, onAppear: A = y, onAppearCancelled: P = b } = e, M = (k, H, K, J) => {
      k._enterCancelled = J, Ur(k, H ? u : a), Ur(k, H ? c : o), K && K();
    }, E = (k, H) => {
      k._isLeaving = false, Ur(k, h), Ur(k, f), Ur(k, d), H && H();
    }, I = (k) => (H, K) => {
      const J = k ? A : y, z = () => M(H, k, K);
      Nr(J, [
        H,
        z
      ]), m5(() => {
        Ur(H, k ? l : s), t3(H, k ? u : a), p5(J) || g5(H, i, _, z);
      });
    };
    return dn(e, {
      onBeforeEnter(k) {
        Nr(g, [
          k
        ]), t3(k, s), t3(k, o);
      },
      onBeforeAppear(k) {
        Nr(C, [
          k
        ]), t3(k, l), t3(k, c);
      },
      onEnter: I(false),
      onAppear: I(true),
      onLeave(k, H) {
        k._isLeaving = true;
        const K = () => E(k, H);
        t3(k, h), k._enterCancelled ? (t3(k, d), v5()) : (v5(), t3(k, d)), m5(() => {
          k._isLeaving && (Ur(k, h), t3(k, f), p5(v) || g5(k, i, p, K));
        }), Nr(v, [
          k,
          K
        ]);
      },
      onEnterCancelled(k) {
        M(k, false, void 0, true), Nr(b, [
          k
        ]);
      },
      onAppearCancelled(k) {
        M(k, true, void 0, true), Nr(P, [
          k
        ]);
      },
      onLeaveCancelled(k) {
        E(k), Nr(x, [
          k
        ]);
      }
    });
  }
  function xM(n) {
    if (n == null) return null;
    if (ut(n)) return [
      rh(n.enter),
      rh(n.leave)
    ];
    {
      const e = rh(n);
      return [
        e,
        e
      ];
    }
  }
  function rh(n) {
    return y7(n);
  }
  function t3(n, e) {
    e.split(/\s+/).forEach((t) => t && n.classList.add(t)), (n[q0] || (n[q0] = /* @__PURE__ */ new Set())).add(e);
  }
  function Ur(n, e) {
    e.split(/\s+/).forEach((i) => i && n.classList.remove(i));
    const t = n[q0];
    t && (t.delete(e), t.size || (n[q0] = void 0));
  }
  function m5(n) {
    requestAnimationFrame(() => {
      requestAnimationFrame(n);
    });
  }
  let SM = 0;
  function g5(n, e, t, i) {
    const r = n._endId = ++SM, s = () => {
      r === n._endId && i();
    };
    if (t != null) return setTimeout(s, t);
    const { type: o, timeout: a, propCount: l } = EM(n, e);
    if (!o) return i();
    const c = o + "end";
    let u = 0;
    const h = () => {
      n.removeEventListener(c, d), s();
    }, d = (f) => {
      f.target === n && ++u >= l && h();
    };
    setTimeout(() => {
      u < l && h();
    }, a + 1), n.addEventListener(c, d);
  }
  function EM(n, e) {
    const t = window.getComputedStyle(n), i = (m) => (t[m] || "").split(", "), r = i(`${N3}Delay`), s = i(`${N3}Duration`), o = _5(r, s), a = i(`${Da}Delay`), l = i(`${Da}Duration`), c = _5(a, l);
    let u = null, h = 0, d = 0;
    e === N3 ? o > 0 && (u = N3, h = o, d = s.length) : e === Da ? c > 0 && (u = Da, h = c, d = l.length) : (h = Math.max(o, c), u = h > 0 ? o > c ? N3 : Da : null, d = u ? u === N3 ? s.length : l.length : 0);
    const f = u === N3 && /\b(transform|all)(,|$)/.test(i(`${N3}Property`).toString());
    return {
      type: u,
      timeout: h,
      propCount: d,
      hasTransform: f
    };
  }
  function _5(n, e) {
    for (; n.length < e.length; ) n = n.concat(n);
    return Math.max(...e.map((t, i) => b5(t) + b5(n[i])));
  }
  function b5(n) {
    return n === "auto" ? 0 : Number(n.slice(0, -1).replace(",", ".")) * 1e3;
  }
  function v5() {
    return document.body.offsetHeight;
  }
  function wM(n, e, t) {
    const i = n[q0];
    i && (e = (e ? [
      e,
      ...i
    ] : [
      ...i
    ]).join(" ")), e == null ? n.removeAttribute("class") : t ? n.setAttribute("class", e) : n.className = e;
  }
  let Su, $b;
  Su = Symbol("_vod");
  $b = Symbol("_vsh");
  MM = {
    beforeMount(n, { value: e }, { transition: t }) {
      n[Su] = n.style.display === "none" ? "" : n.style.display, t && e ? t.beforeEnter(n) : Ra(n, e);
    },
    mounted(n, { value: e }, { transition: t }) {
      t && e && t.enter(n);
    },
    updated(n, { value: e, oldValue: t }, { transition: i }) {
      !e != !t && (i ? e ? (i.beforeEnter(n), Ra(n, true), i.enter(n)) : i.leave(n, () => {
        Ra(n, false);
      }) : Ra(n, e));
    },
    beforeUnmount(n, { value: e }) {
      Ra(n, e);
    }
  };
  function Ra(n, e) {
    n.style.display = e ? n[Su] : "none", n[$b] = !e;
  }
  const qb = Symbol("");
  function TM(n) {
    const e = O3();
    if (!e) return;
    const t = e.ut = (r = n(e.proxy)) => {
      Array.from(document.querySelectorAll(`[data-v-owner="${e.uid}"]`)).forEach((s) => Eu(s, r));
    }, i = () => {
      const r = n(e.proxy);
      e.ce ? Eu(e.ce, r) : n4(e.subTree, r), t(r);
    };
    fb(() => {
      pu(i);
    }), v2(() => {
      je(i, pi, {
        flush: "post"
      });
      const r = new MutationObserver(i);
      r.observe(e.subTree.el.parentNode, {
        childList: true
      }), gp(() => r.disconnect());
    });
  }
  function n4(n, e) {
    if (n.shapeFlag & 128) {
      const t = n.suspense;
      n = t.activeBranch, t.pendingBranch && !t.isHydrating && t.effects.push(() => {
        n4(t.activeBranch, e);
      });
    }
    for (; n.component; ) n = n.component.subTree;
    if (n.shapeFlag & 1 && n.el) Eu(n.el, e);
    else if (n.type === gn) n.children.forEach((t) => n4(t, e));
    else if (n.type === Lo) {
      let { el: t, anchor: i } = n;
      for (; t && (Eu(t, e), t !== i); ) t = t.nextSibling;
    }
  }
  function Eu(n, e) {
    if (n.nodeType === 1) {
      const t = n.style;
      let i = "";
      for (const r in e) t.setProperty(`--${r}`, e[r]), i += `--${r}: ${e[r]};`;
      t[qb] = i;
    }
  }
  const CM = /(^|;)\s*display\s*:/;
  function AM(n, e, t) {
    const i = n.style, r = pt(t);
    let s = false;
    if (t && !r) {
      if (e) if (pt(e)) for (const o of e.split(";")) {
        const a = o.slice(0, o.indexOf(":")).trim();
        t[a] == null && Hc(i, a, "");
      }
      else for (const o in e) t[o] == null && Hc(i, o, "");
      for (const o in t) o === "display" && (s = true), Hc(i, o, t[o]);
    } else if (r) {
      if (e !== t) {
        const o = i[qb];
        o && (t += ";" + o), i.cssText = t, s = CM.test(t);
      }
    } else e && n.removeAttribute("style");
    Su in n && (n[Su] = s ? i.display : "", n[$b] && (i.display = "none"));
  }
  const y5 = /\s*!important$/;
  function Hc(n, e, t) {
    if (be(t)) t.forEach((i) => Hc(n, e, i));
    else if (t == null && (t = ""), e.startsWith("--")) n.setProperty(e, t);
    else {
      const i = DM(n, e);
      y5.test(t) ? n.setProperty(Fs(i), t.replace(y5, ""), "important") : n[i] = t;
    }
  }
  const x5 = [
    "Webkit",
    "Moz",
    "ms"
  ], sh = {};
  function DM(n, e) {
    const t = sh[e];
    if (t) return t;
    let i = J2(e);
    if (i !== "filter" && i in n) return sh[e] = i;
    i = of(i);
    for (let r = 0; r < x5.length; r++) {
      const s = x5[r] + i;
      if (s in n) return sh[e] = s;
    }
    return e;
  }
  const S5 = "http://www.w3.org/1999/xlink";
  function E5(n, e, t, i, r, s = LE(e)) {
    i && e.startsWith("xlink:") ? t == null ? n.removeAttributeNS(S5, e.slice(6, e.length)) : n.setAttributeNS(S5, e, t) : t == null || s && !x7(t) ? n.removeAttribute(e) : n.setAttribute(e, s ? "" : I3(t) ? String(t) : t);
  }
  function w5(n, e, t, i, r) {
    if (e === "innerHTML" || e === "textContent") {
      t != null && (n[e] = e === "innerHTML" ? jb(t) : t);
      return;
    }
    const s = n.tagName;
    if (e === "value" && s !== "PROGRESS" && !s.includes("-")) {
      const a = s === "OPTION" ? n.getAttribute("value") || "" : n.value, l = t == null ? n.type === "checkbox" ? "on" : "" : String(t);
      (a !== l || !("_value" in n)) && (n.value = l), t == null && n.removeAttribute(e), n._value = t;
      return;
    }
    let o = false;
    if (t === "" || t == null) {
      const a = typeof n[e];
      a === "boolean" ? t = x7(t) : t == null && a === "string" ? (t = "", o = true) : a === "number" && (t = 0, o = true);
    }
    try {
      n[e] = t;
    } catch {
    }
    o && n.removeAttribute(r || e);
  }
  function fo(n, e, t, i) {
    n.addEventListener(e, t, i);
  }
  function RM(n, e, t, i) {
    n.removeEventListener(e, t, i);
  }
  const M5 = Symbol("_vei");
  function PM(n, e, t, i, r = null) {
    const s = n[M5] || (n[M5] = {}), o = s[e];
    if (i && o) o.value = i;
    else {
      const [a, l] = LM(e);
      if (i) {
        const c = s[e] = OM(i, r);
        fo(n, a, c, l);
      } else o && (RM(n, a, o, l), s[e] = void 0);
    }
  }
  const T5 = /(?:Once|Passive|Capture)$/;
  function LM(n) {
    let e;
    if (T5.test(n)) {
      e = {};
      let i;
      for (; i = n.match(T5); ) n = n.slice(0, n.length - i[0].length), e[i[0].toLowerCase()] = true;
    }
    return [
      n[2] === ":" ? n.slice(3) : Fs(n.slice(2)),
      e
    ];
  }
  let oh = 0;
  const IM = Promise.resolve(), FM = () => oh || (IM.then(() => oh = 0), oh = Date.now());
  function OM(n, e) {
    const t = (i) => {
      if (!i._vts) i._vts = Date.now();
      else if (i._vts <= t.attached) return;
      vi(kM(i, t.value), e, 5, [
        i
      ]);
    };
    return t.value = n, t.attached = FM(), t;
  }
  function kM(n, e) {
    if (be(e)) {
      const t = n.stopImmediatePropagation;
      return n.stopImmediatePropagation = () => {
        t.call(n), n._stopped = true;
      }, e.map((i) => (r) => !r._stopped && i && i(r));
    } else return e;
  }
  const C5 = (n) => n.charCodeAt(0) === 111 && n.charCodeAt(1) === 110 && n.charCodeAt(2) > 96 && n.charCodeAt(2) < 123, NM = (n, e, t, i, r, s) => {
    const o = r === "svg";
    e === "class" ? wM(n, i, o) : e === "style" ? AM(n, t, i) : vl(e) ? rp(e) || PM(n, e, t, i, s) : (e[0] === "." ? (e = e.slice(1), true) : e[0] === "^" ? (e = e.slice(1), false) : UM(n, e, i, o)) ? (w5(n, e, i), !n.tagName.includes("-") && (e === "value" || e === "checked" || e === "selected") && E5(n, e, i, o, s, e !== "value")) : n._isVueCE && (/[A-Z]/.test(e) || !pt(i)) ? w5(n, J2(e), i, s, e) : (e === "true-value" ? n._trueValue = i : e === "false-value" && (n._falseValue = i), E5(n, e, i, o));
  };
  function UM(n, e, t, i) {
    if (i) return !!(e === "innerHTML" || e === "textContent" || e in n && C5(e) && ve(t));
    if (e === "spellcheck" || e === "draggable" || e === "translate" || e === "form" || e === "list" && n.tagName === "INPUT" || e === "type" && n.tagName === "TEXTAREA") return false;
    if (e === "width" || e === "height") {
      const r = n.tagName;
      if (r === "IMG" || r === "VIDEO" || r === "CANVAS" || r === "SOURCE") return false;
    }
    return C5(e) && pt(t) ? false : e in n;
  }
  const A5 = (n) => {
    const e = n.props["onUpdate:modelValue"] || false;
    return be(e) ? (t) => Do(e, t) : e;
  };
  function BM(n) {
    n.target.composing = true;
  }
  function D5(n) {
    const e = n.target;
    e.composing && (e.composing = false, e.dispatchEvent(new Event("input")));
  }
  let ah, HM, zM, Yb;
  ah = Symbol("_assign");
  TV = {
    created(n, { modifiers: { lazy: e, trim: t, number: i } }, r) {
      n[ah] = A5(r);
      const s = i || r.props && r.props.type === "number";
      fo(n, e ? "change" : "input", (o) => {
        if (o.target.composing) return;
        let a = n.value;
        t && (a = a.trim()), s && (a = Hd(a)), n[ah](a);
      }), t && fo(n, "change", () => {
        n.value = n.value.trim();
      }), e || (fo(n, "compositionstart", BM), fo(n, "compositionend", D5), fo(n, "change", D5));
    },
    mounted(n, { value: e }) {
      n.value = e ?? "";
    },
    beforeUpdate(n, { value: e, oldValue: t, modifiers: { lazy: i, trim: r, number: s } }, o) {
      if (n[ah] = A5(o), n.composing) return;
      const a = (s || n.type === "number") && !/^0\d/.test(n.value) ? Hd(n.value) : n.value, l = e ?? "";
      a !== l && (document.activeElement === n && n.type !== "range" && (i && e === t || r && n.value.trim() === l) || (n.value = l));
    }
  };
  HM = [
    "ctrl",
    "shift",
    "alt",
    "meta"
  ];
  zM = {
    stop: (n) => n.stopPropagation(),
    prevent: (n) => n.preventDefault(),
    self: (n) => n.target !== n.currentTarget,
    ctrl: (n) => !n.ctrlKey,
    shift: (n) => !n.shiftKey,
    alt: (n) => !n.altKey,
    meta: (n) => !n.metaKey,
    left: (n) => "button" in n && n.button !== 0,
    middle: (n) => "button" in n && n.button !== 1,
    right: (n) => "button" in n && n.button !== 2,
    exact: (n, e) => HM.some((t) => n[`${t}Key`] && !e.includes(t))
  };
  CV = (n, e) => {
    const t = n._withMods || (n._withMods = {}), i = e.join(".");
    return t[i] || (t[i] = (r, ...s) => {
      for (let o = 0; o < e.length; o++) {
        const a = zM[e[o]];
        if (a && a(r, e)) return;
      }
      return n(r, ...s);
    });
  };
  Yb = dn({
    patchProp: NM
  }, _M);
  let m0, R5 = false;
  function VM() {
    return m0 || (m0 = zw(Yb));
  }
  function GM() {
    return m0 = R5 ? m0 : Vw(Yb), R5 = true, m0;
  }
  const WM = (...n) => {
    const e = VM().createApp(...n), { mount: t } = e;
    return e.mount = (i) => {
      const r = Jb(i);
      if (!r) return;
      const s = e._component;
      !ve(s) && !s.render && !s.template && (s.template = r.innerHTML), r.nodeType === 1 && (r.textContent = "");
      const o = t(r, false, Kb(r));
      return r instanceof Element && (r.removeAttribute("v-cloak"), r.setAttribute("data-v-app", "")), o;
    }, e;
  }, jM = (...n) => {
    const e = GM().createApp(...n), { mount: t } = e;
    return e.mount = (i) => {
      const r = Jb(i);
      if (r) return t(r, true, Kb(r));
    }, e;
  };
  function Kb(n) {
    if (n instanceof SVGElement) return "svg";
    if (typeof MathMLElement == "function" && n instanceof MathMLElement) return "mathml";
  }
  function Jb(n) {
    return pt(n) ? document.querySelector(n) : n;
  }
  const XM = /"(?:_|\\u0{2}5[Ff]){2}(?:p|\\u0{2}70)(?:r|\\u0{2}72)(?:o|\\u0{2}6[Ff])(?:t|\\u0{2}74)(?:o|\\u0{2}6[Ff])(?:_|\\u0{2}5[Ff]){2}"\s*:/, $M = /"(?:c|\\u0063)(?:o|\\u006[Ff])(?:n|\\u006[Ee])(?:s|\\u0073)(?:t|\\u0074)(?:r|\\u0072)(?:u|\\u0075)(?:c|\\u0063)(?:t|\\u0074)(?:o|\\u006[Ff])(?:r|\\u0072)"\s*:/, qM = /^\s*["[{]|^\s*-?\d{1,16}(\.\d{1,17})?([Ee][+-]?\d+)?\s*$/;
  function YM(n, e) {
    if (n === "__proto__" || n === "constructor" && e && typeof e == "object" && "prototype" in e) {
      KM(n);
      return;
    }
    return e;
  }
  function KM(n) {
    console.warn(`[destr] Dropping "${n}" key to prevent prototype pollution.`);
  }
  function wu(n, e = {}) {
    if (typeof n != "string") return n;
    const t = n.trim();
    if (n[0] === '"' && n.endsWith('"') && !n.includes("\\")) return t.slice(1, -1);
    if (t.length <= 9) {
      const i = t.toLowerCase();
      if (i === "true") return true;
      if (i === "false") return false;
      if (i === "undefined") return;
      if (i === "null") return null;
      if (i === "nan") return Number.NaN;
      if (i === "infinity") return Number.POSITIVE_INFINITY;
      if (i === "-infinity") return Number.NEGATIVE_INFINITY;
    }
    if (!qM.test(n)) {
      if (e.strict) throw new SyntaxError("[destr] Invalid JSON");
      return n;
    }
    try {
      if (XM.test(n) || $M.test(n)) {
        if (e.strict) throw new Error("[destr] Possible prototype pollution");
        return JSON.parse(n, YM);
      }
      return JSON.parse(n);
    } catch (i) {
      if (e.strict) throw i;
      return n;
    }
  }
  const JM = /#/g, QM = /&/g, ZM = /\//g, eT = /=/g, Mp = /\+/g, tT = /%5e/gi, nT = /%60/gi, iT = /%7c/gi, rT = /%20/gi;
  function sT(n) {
    return encodeURI("" + n).replace(iT, "|");
  }
  function i4(n) {
    return sT(typeof n == "string" ? n : JSON.stringify(n)).replace(Mp, "%2B").replace(rT, "+").replace(JM, "%23").replace(QM, "%26").replace(nT, "`").replace(tT, "^").replace(ZM, "%2F");
  }
  function lh(n) {
    return i4(n).replace(eT, "%3D");
  }
  function Mu(n = "") {
    try {
      return decodeURIComponent("" + n);
    } catch {
      return "" + n;
    }
  }
  function oT(n) {
    return Mu(n.replace(Mp, " "));
  }
  function aT(n) {
    return Mu(n.replace(Mp, " "));
  }
  function Tp(n = "") {
    const e = {};
    n[0] === "?" && (n = n.slice(1));
    for (const t of n.split("&")) {
      const i = t.match(/([^=]+)=?(.*)/) || [];
      if (i.length < 2) continue;
      const r = oT(i[1]);
      if (r === "__proto__" || r === "constructor") continue;
      const s = aT(i[2] || "");
      e[r] === void 0 ? e[r] = s : Array.isArray(e[r]) ? e[r].push(s) : e[r] = [
        e[r],
        s
      ];
    }
    return e;
  }
  function lT(n, e) {
    return (typeof e == "number" || typeof e == "boolean") && (e = String(e)), e ? Array.isArray(e) ? e.map((t) => `${lh(n)}=${i4(t)}`).join("&") : `${lh(n)}=${i4(e)}` : lh(n);
  }
  function cT(n) {
    return Object.keys(n).filter((e) => n[e] !== void 0).map((e) => lT(e, n[e])).filter(Boolean).join("&");
  }
  const uT = /^[\s\w\0+.-]{2,}:([/\\]{1,2})/, fT = /^[\s\w\0+.-]{2,}:([/\\]{2})?/, hT = /^([/\\]\s*){2,}[^/\\]/, dT = /^[\s\0]*(blob|data|javascript|vbscript):$/i, pT = /\/$|\/\?|\/#/, mT = /^\.?\//;
  function k3(n, e = {}) {
    return typeof e == "boolean" && (e = {
      acceptRelative: e
    }), e.strict ? uT.test(n) : fT.test(n) || (e.acceptRelative ? hT.test(n) : false);
  }
  function gT(n) {
    return !!n && dT.test(n);
  }
  function r4(n = "", e) {
    return e ? pT.test(n) : n.endsWith("/");
  }
  function vf(n = "", e) {
    if (!e) return (r4(n) ? n.slice(0, -1) : n) || "/";
    if (!r4(n, true)) return n || "/";
    let t = n, i = "";
    const r = n.indexOf("#");
    r >= 0 && (t = n.slice(0, r), i = n.slice(r));
    const [s, ...o] = t.split("?");
    return ((s.endsWith("/") ? s.slice(0, -1) : s) || "/") + (o.length > 0 ? `?${o.join("?")}` : "") + i;
  }
  function Tu(n = "", e) {
    if (!e) return n.endsWith("/") ? n : n + "/";
    if (r4(n, true)) return n || "/";
    let t = n, i = "";
    const r = n.indexOf("#");
    if (r >= 0 && (t = n.slice(0, r), i = n.slice(r), !t)) return i;
    const [s, ...o] = t.split("?");
    return s + "/" + (o.length > 0 ? `?${o.join("?")}` : "") + i;
  }
  function _T(n = "") {
    return n.startsWith("/");
  }
  function P5(n = "") {
    return _T(n) ? n : "/" + n;
  }
  function bT(n, e) {
    if (Qb(e) || k3(n)) return n;
    const t = vf(e);
    return n.startsWith(t) ? n : yf(t, n);
  }
  function L5(n, e) {
    if (Qb(e)) return n;
    const t = vf(e);
    if (!n.startsWith(t)) return n;
    const i = n.slice(t.length);
    return i[0] === "/" ? i : "/" + i;
  }
  function Cu(n, e) {
    const t = tv(n), i = {
      ...Tp(t.search),
      ...e
    };
    return t.search = cT(i), xT(t);
  }
  function Qb(n) {
    return !n || n === "/";
  }
  function vT(n) {
    return n && n !== "/";
  }
  function yf(n, ...e) {
    let t = n || "";
    for (const i of e.filter((r) => vT(r))) if (t) {
      const r = i.replace(mT, "");
      t = Tu(t) + r;
    } else t = i;
    return t;
  }
  function Zb(...n) {
    var _a2, _b2, _c2, _d2;
    const e = /\/(?!\/)/, t = n.filter(Boolean), i = [];
    let r = 0;
    for (const o of t) if (!(!o || o === "/")) {
      for (const [a, l] of o.split(e).entries()) if (!(!l || l === ".")) {
        if (l === "..") {
          if (i.length === 1 && k3(i[0])) continue;
          i.pop(), r--;
          continue;
        }
        if (a === 1 && ((_a2 = i[i.length - 1]) == null ? void 0 : _a2.endsWith(":/"))) {
          i[i.length - 1] += "/" + l;
          continue;
        }
        i.push(l), r++;
      }
    }
    let s = i.join("/");
    return r >= 0 ? ((_b2 = t[0]) == null ? void 0 : _b2.startsWith("/")) && !s.startsWith("/") ? s = "/" + s : ((_c2 = t[0]) == null ? void 0 : _c2.startsWith("./")) && !s.startsWith("./") && (s = "./" + s) : s = "../".repeat(-1 * r) + s, ((_d2 = t[t.length - 1]) == null ? void 0 : _d2.endsWith("/")) && !s.endsWith("/") && (s += "/"), s;
  }
  function yT(n, e, t = {}) {
    return t.trailingSlash || (n = Tu(n), e = Tu(e)), t.leadingSlash || (n = P5(n), e = P5(e)), t.encoding || (n = Mu(n), e = Mu(e)), n === e;
  }
  const ev = Symbol.for("ufo:protocolRelative");
  function tv(n = "", e) {
    const t = n.match(/^[\s\0]*(blob:|data:|javascript:|vbscript:)(.*)/i);
    if (t) {
      const [, h, d = ""] = t;
      return {
        protocol: h.toLowerCase(),
        pathname: d,
        href: h + d,
        auth: "",
        host: "",
        search: "",
        hash: ""
      };
    }
    if (!k3(n, {
      acceptRelative: true
    })) return I5(n);
    const [, i = "", r, s = ""] = n.replace(/\\/g, "/").match(/^[\s\0]*([\w+.-]{2,}:)?\/\/([^/@]+@)?(.*)/) || [];
    let [, o = "", a = ""] = s.match(/([^#/?]*)(.*)?/) || [];
    i === "file:" && (a = a.replace(/\/(?=[A-Za-z]:)/, ""));
    const { pathname: l, search: c, hash: u } = I5(a);
    return {
      protocol: i.toLowerCase(),
      auth: r ? r.slice(0, Math.max(0, r.length - 1)) : "",
      host: o,
      pathname: l,
      search: c,
      hash: u,
      [ev]: !i
    };
  }
  function I5(n = "") {
    const [e = "", t = "", i = ""] = (n.match(/([^#?]*)(\?[^#]*)?(#.*)?/) || []).splice(1);
    return {
      pathname: e,
      search: t,
      hash: i
    };
  }
  function xT(n) {
    const e = n.pathname || "", t = n.search ? (n.search.startsWith("?") ? "" : "?") + n.search : "", i = n.hash || "", r = n.auth ? n.auth + "@" : "", s = n.host || "";
    return (n.protocol || n[ev] ? (n.protocol || "") + "//" : "") + r + s + e + t + i;
  }
  class ST extends Error {
    constructor(e, t) {
      super(e, t), this.name = "FetchError", (t == null ? void 0 : t.cause) && !this.cause && (this.cause = t.cause);
    }
  }
  function ET(n) {
    var _a2, _b2, _c2, _d2, _e;
    const e = ((_a2 = n.error) == null ? void 0 : _a2.message) || ((_b2 = n.error) == null ? void 0 : _b2.toString()) || "", t = ((_c2 = n.request) == null ? void 0 : _c2.method) || ((_d2 = n.options) == null ? void 0 : _d2.method) || "GET", i = ((_e = n.request) == null ? void 0 : _e.url) || String(n.request) || "/", r = `[${t}] ${JSON.stringify(i)}`, s = n.response ? `${n.response.status} ${n.response.statusText}` : "<no response>", o = `${r}: ${s}${e ? ` ${e}` : ""}`, a = new ST(o, n.error ? {
      cause: n.error
    } : void 0);
    for (const l of [
      "request",
      "options",
      "response"
    ]) Object.defineProperty(a, l, {
      get() {
        return n[l];
      }
    });
    for (const [l, c] of [
      [
        "data",
        "_data"
      ],
      [
        "status",
        "status"
      ],
      [
        "statusCode",
        "status"
      ],
      [
        "statusText",
        "statusText"
      ],
      [
        "statusMessage",
        "statusText"
      ]
    ]) Object.defineProperty(a, l, {
      get() {
        return n.response && n.response[c];
      }
    });
    return a;
  }
  const wT = new Set(Object.freeze([
    "PATCH",
    "POST",
    "PUT",
    "DELETE"
  ]));
  function F5(n = "GET") {
    return wT.has(n.toUpperCase());
  }
  function MT(n) {
    if (n === void 0) return false;
    const e = typeof n;
    return e === "string" || e === "number" || e === "boolean" || e === null ? true : e !== "object" ? false : Array.isArray(n) ? true : n.buffer ? false : n.constructor && n.constructor.name === "Object" || typeof n.toJSON == "function";
  }
  const TT = /* @__PURE__ */ new Set([
    "image/svg",
    "application/xml",
    "application/xhtml",
    "application/html"
  ]), CT = /^application\/(?:[\w!#$%&*.^`~-]*\+)?json(;.+)?$/i;
  function AT(n = "") {
    if (!n) return "json";
    const e = n.split(";").shift() || "";
    return CT.test(e) ? "json" : TT.has(e) || e.startsWith("text/") ? "text" : "blob";
  }
  function DT(n, e, t, i) {
    const r = RT((e == null ? void 0 : e.headers) ?? (n == null ? void 0 : n.headers), t == null ? void 0 : t.headers, i);
    let s;
    return ((t == null ? void 0 : t.query) || (t == null ? void 0 : t.params) || (e == null ? void 0 : e.params) || (e == null ? void 0 : e.query)) && (s = {
      ...t == null ? void 0 : t.params,
      ...t == null ? void 0 : t.query,
      ...e == null ? void 0 : e.params,
      ...e == null ? void 0 : e.query
    }), {
      ...t,
      ...e,
      query: s,
      params: s,
      headers: r
    };
  }
  function RT(n, e, t) {
    if (!e) return new t(n);
    const i = new t(e);
    if (n) for (const [r, s] of Symbol.iterator in n || Array.isArray(n) ? n : new t(n)) i.set(r, s);
    return i;
  }
  async function Vl(n, e) {
    if (e) if (Array.isArray(e)) for (const t of e) await t(n);
    else await e(n);
  }
  const PT = /* @__PURE__ */ new Set([
    408,
    409,
    425,
    429,
    500,
    502,
    503,
    504
  ]), LT = /* @__PURE__ */ new Set([
    101,
    204,
    205,
    304
  ]);
  function nv(n = {}) {
    const { fetch: e = globalThis.fetch, Headers: t = globalThis.Headers, AbortController: i = globalThis.AbortController } = n;
    async function r(a) {
      const l = a.error && a.error.name === "AbortError" && !a.options.timeout || false;
      if (a.options.retry !== false && !l) {
        let u;
        typeof a.options.retry == "number" ? u = a.options.retry : u = F5(a.options.method) ? 0 : 1;
        const h = a.response && a.response.status || 500;
        if (u > 0 && (Array.isArray(a.options.retryStatusCodes) ? a.options.retryStatusCodes.includes(h) : PT.has(h))) {
          const d = typeof a.options.retryDelay == "function" ? a.options.retryDelay(a) : a.options.retryDelay || 0;
          return d > 0 && await new Promise((f) => setTimeout(f, d)), s(a.request, {
            ...a.options,
            retry: u - 1
          });
        }
      }
      const c = ET(a);
      throw Error.captureStackTrace && Error.captureStackTrace(c, s), c;
    }
    const s = async function(l, c = {}) {
      const u = {
        request: l,
        options: DT(l, c, n.defaults, t),
        response: void 0,
        error: void 0
      };
      u.options.method && (u.options.method = u.options.method.toUpperCase()), u.options.onRequest && await Vl(u, u.options.onRequest), typeof u.request == "string" && (u.options.baseURL && (u.request = bT(u.request, u.options.baseURL)), u.options.query && (u.request = Cu(u.request, u.options.query), delete u.options.query), "query" in u.options && delete u.options.query, "params" in u.options && delete u.options.params), u.options.body && F5(u.options.method) && (MT(u.options.body) ? (u.options.body = typeof u.options.body == "string" ? u.options.body : JSON.stringify(u.options.body), u.options.headers = new t(u.options.headers || {}), u.options.headers.has("content-type") || u.options.headers.set("content-type", "application/json"), u.options.headers.has("accept") || u.options.headers.set("accept", "application/json")) : ("pipeTo" in u.options.body && typeof u.options.body.pipeTo == "function" || typeof u.options.body.pipe == "function") && ("duplex" in u.options || (u.options.duplex = "half")));
      let h;
      if (!u.options.signal && u.options.timeout) {
        const f = new i();
        h = setTimeout(() => {
          const m = new Error("[TimeoutError]: The operation was aborted due to timeout");
          m.name = "TimeoutError", m.code = 23, f.abort(m);
        }, u.options.timeout), u.options.signal = f.signal;
      }
      try {
        u.response = await e(u.request, u.options);
      } catch (f) {
        return u.error = f, u.options.onRequestError && await Vl(u, u.options.onRequestError), await r(u);
      } finally {
        h && clearTimeout(h);
      }
      if ((u.response.body || u.response._bodyInit) && !LT.has(u.response.status) && u.options.method !== "HEAD") {
        const f = (u.options.parseResponse ? "json" : u.options.responseType) || AT(u.response.headers.get("content-type") || "");
        switch (f) {
          case "json": {
            const m = await u.response.text(), _ = u.options.parseResponse || wu;
            u.response._data = _(m);
            break;
          }
          case "stream": {
            u.response._data = u.response.body || u.response._bodyInit;
            break;
          }
          default:
            u.response._data = await u.response[f]();
        }
      }
      return u.options.onResponse && await Vl(u, u.options.onResponse), !u.options.ignoreResponseError && u.response.status >= 400 && u.response.status < 600 ? (u.options.onResponseError && await Vl(u, u.options.onResponseError), await r(u)) : u.response;
    }, o = async function(l, c) {
      return (await s(l, c))._data;
    };
    return o.raw = s, o.native = (...a) => e(...a), o.create = (a = {}, l = {}) => nv({
      ...n,
      ...l,
      defaults: {
        ...n.defaults,
        ...l.defaults,
        ...a
      }
    }), o;
  }
  let Au, IT, FT, OT, kT, NT, UT, Du, BT, HT, Cp;
  Au = function() {
    if (typeof globalThis < "u") return globalThis;
    if (typeof self < "u") return self;
    if (typeof window < "u") return window;
    if (typeof global < "u") return global;
    throw new Error("unable to locate global object");
  }();
  IT = Au.fetch ? (...n) => Au.fetch(...n) : () => Promise.reject(new Error("[ofetch] global.fetch is not supported!"));
  FT = Au.Headers;
  OT = Au.AbortController;
  kT = nv({
    fetch: IT,
    Headers: FT,
    AbortController: OT
  });
  NT = kT;
  UT = () => {
    var _a2;
    return ((_a2 = window == null ? void 0 : window.__NUXT__) == null ? void 0 : _a2.config) || {};
  };
  Du = UT().app;
  BT = () => Du.baseURL;
  HT = () => Du.buildAssetsDir;
  Cp = (...n) => Zb(iv(), HT(), ...n);
  iv = (...n) => {
    const e = Du.cdnURL || Du.baseURL;
    return n.length ? Zb(e, ...n) : e;
  };
  globalThis.__buildAssetsURL = Cp, globalThis.__publicAssetsURL = iv;
  globalThis.$fetch || (globalThis.$fetch = NT.create({
    baseURL: BT()
  }));
  function s4(n, e = {}, t) {
    for (const i in n) {
      const r = n[i], s = t ? `${t}:${i}` : i;
      typeof r == "object" && r !== null ? s4(r, e, s) : typeof r == "function" && (e[s] = r);
    }
    return e;
  }
  const zT = {
    run: (n) => n()
  }, VT = () => zT, rv = typeof console.createTask < "u" ? console.createTask : VT;
  function GT(n, e) {
    const t = e.shift(), i = rv(t);
    return n.reduce((r, s) => r.then(() => i.run(() => s(...e))), Promise.resolve());
  }
  function WT(n, e) {
    const t = e.shift(), i = rv(t);
    return Promise.all(n.map((r) => i.run(() => r(...e))));
  }
  function ch(n, e) {
    for (const t of [
      ...n
    ]) t(e);
  }
  class jT {
    constructor() {
      this._hooks = {}, this._before = void 0, this._after = void 0, this._deprecatedMessages = void 0, this._deprecatedHooks = {}, this.hook = this.hook.bind(this), this.callHook = this.callHook.bind(this), this.callHookWith = this.callHookWith.bind(this);
    }
    hook(e, t, i = {}) {
      if (!e || typeof t != "function") return () => {
      };
      const r = e;
      let s;
      for (; this._deprecatedHooks[e]; ) s = this._deprecatedHooks[e], e = s.to;
      if (s && !i.allowDeprecated) {
        let o = s.message;
        o || (o = `${r} hook has been deprecated` + (s.to ? `, please use ${s.to}` : "")), this._deprecatedMessages || (this._deprecatedMessages = /* @__PURE__ */ new Set()), this._deprecatedMessages.has(o) || (console.warn(o), this._deprecatedMessages.add(o));
      }
      if (!t.name) try {
        Object.defineProperty(t, "name", {
          get: () => "_" + e.replace(/\W+/g, "_") + "_hook_cb",
          configurable: true
        });
      } catch {
      }
      return this._hooks[e] = this._hooks[e] || [], this._hooks[e].push(t), () => {
        t && (this.removeHook(e, t), t = void 0);
      };
    }
    hookOnce(e, t) {
      let i, r = (...s) => (typeof i == "function" && i(), i = void 0, r = void 0, t(...s));
      return i = this.hook(e, r), i;
    }
    removeHook(e, t) {
      if (this._hooks[e]) {
        const i = this._hooks[e].indexOf(t);
        i !== -1 && this._hooks[e].splice(i, 1), this._hooks[e].length === 0 && delete this._hooks[e];
      }
    }
    deprecateHook(e, t) {
      this._deprecatedHooks[e] = typeof t == "string" ? {
        to: t
      } : t;
      const i = this._hooks[e] || [];
      delete this._hooks[e];
      for (const r of i) this.hook(e, r);
    }
    deprecateHooks(e) {
      Object.assign(this._deprecatedHooks, e);
      for (const t in e) this.deprecateHook(t, e[t]);
    }
    addHooks(e) {
      const t = s4(e), i = Object.keys(t).map((r) => this.hook(r, t[r]));
      return () => {
        for (const r of i.splice(0, i.length)) r();
      };
    }
    removeHooks(e) {
      const t = s4(e);
      for (const i in t) this.removeHook(i, t[i]);
    }
    removeAllHooks() {
      for (const e in this._hooks) delete this._hooks[e];
    }
    callHook(e, ...t) {
      return t.unshift(e), this.callHookWith(GT, e, ...t);
    }
    callHookParallel(e, ...t) {
      return t.unshift(e), this.callHookWith(WT, e, ...t);
    }
    callHookWith(e, t, ...i) {
      const r = this._before || this._after ? {
        name: t,
        args: i,
        context: {}
      } : void 0;
      this._before && ch(this._before, r);
      const s = e(t in this._hooks ? [
        ...this._hooks[t]
      ] : [], i);
      return s instanceof Promise ? s.finally(() => {
        this._after && r && ch(this._after, r);
      }) : (this._after && r && ch(this._after, r), s);
    }
    beforeEach(e) {
      return this._before = this._before || [], this._before.push(e), () => {
        if (this._before !== void 0) {
          const t = this._before.indexOf(e);
          t !== -1 && this._before.splice(t, 1);
        }
      };
    }
    afterEach(e) {
      return this._after = this._after || [], this._after.push(e), () => {
        if (this._after !== void 0) {
          const t = this._after.indexOf(e);
          t !== -1 && this._after.splice(t, 1);
        }
      };
    }
  }
  function sv() {
    return new jT();
  }
  function XT(n = {}) {
    let e, t = false;
    const i = (o) => {
      if (e && e !== o) throw new Error("Context conflict");
    };
    let r;
    if (n.asyncContext) {
      const o = n.AsyncLocalStorage || globalThis.AsyncLocalStorage;
      o ? r = new o() : console.warn("[unctx] `AsyncLocalStorage` is not provided.");
    }
    const s = () => {
      if (r) {
        const o = r.getStore();
        if (o !== void 0) return o;
      }
      return e;
    };
    return {
      use: () => {
        const o = s();
        if (o === void 0) throw new Error("Context is not available");
        return o;
      },
      tryUse: () => s(),
      set: (o, a) => {
        a || i(o), e = o, t = true;
      },
      unset: () => {
        e = void 0, t = false;
      },
      call: (o, a) => {
        i(o), e = o;
        try {
          return r ? r.run(o, a) : a();
        } finally {
          t || (e = void 0);
        }
      },
      async callAsync(o, a) {
        e = o;
        const l = () => {
          e = o;
        }, c = () => e === o ? l : void 0;
        o4.add(c);
        try {
          const u = r ? r.run(o, a) : a();
          return t || (e = void 0), await u;
        } finally {
          o4.delete(c);
        }
      }
    };
  }
  function $T(n = {}) {
    const e = {};
    return {
      get(t, i = {}) {
        return e[t] || (e[t] = XT({
          ...n,
          ...i
        })), e[t];
      }
    };
  }
  const Ru = typeof globalThis < "u" ? globalThis : typeof self < "u" ? self : typeof global < "u" ? global : typeof window < "u" ? window : {}, O5 = "__unctx__", qT = Ru[O5] || (Ru[O5] = $T()), YT = (n, e = {}) => qT.get(n, e), k5 = "__unctx_async_handlers__", o4 = Ru[k5] || (Ru[k5] = /* @__PURE__ */ new Set());
  function Io(n) {
    const e = [];
    for (const r of o4) {
      const s = r();
      s && e.push(s);
    }
    const t = () => {
      for (const r of e) r();
    };
    let i = n();
    return i && typeof i == "object" && "catch" in i && (i = i.catch((r) => {
      throw t(), r;
    })), [
      i,
      t
    ];
  }
  const KT = false, a4 = false, JT = false, QT = {
    componentName: "NuxtLink",
    prefetch: true,
    prefetchOn: {
      visibility: true
    }
  }, ZT = null, eC = "#__nuxt", ov = "nuxt-app", N5 = 36e5, tC = "vite:preloadError";
  function av(n = ov) {
    return YT(n, {
      asyncContext: false
    });
  }
  const nC = "__nuxt_plugin";
  function iC(n) {
    var _a2;
    let e = 0;
    const t = {
      _id: n.id || ov || "nuxt-app",
      _scope: ap(),
      provide: void 0,
      globalName: "nuxt",
      versions: {
        get nuxt() {
          return "3.16.2";
        },
        get vue() {
          return t.vueApp.version;
        }
      },
      payload: y3({
        ...((_a2 = n.ssrContext) == null ? void 0 : _a2.payload) || {},
        data: y3({}),
        state: k2({}),
        once: /* @__PURE__ */ new Set(),
        _errors: y3({})
      }),
      static: {
        data: {}
      },
      runWithContext(r) {
        return t._scope.active && !uf() ? t._scope.run(() => U5(t, r)) : U5(t, r);
      },
      isHydrating: true,
      deferHydration() {
        if (!t.isHydrating) return () => {
        };
        e++;
        let r = false;
        return () => {
          if (!r && (r = true, e--, e === 0)) return t.isHydrating = false, t.callHook("app:suspense:resolve");
        };
      },
      _asyncDataPromises: {},
      _asyncData: y3({}),
      _payloadRevivers: {},
      ...n
    };
    {
      const r = window.__NUXT__;
      if (r) for (const s in r) switch (s) {
        case "data":
        case "state":
        case "_errors":
          Object.assign(t.payload[s], r[s]);
          break;
        default:
          t.payload[s] = r[s];
      }
    }
    t.hooks = sv(), t.hook = t.hooks.hook, t.callHook = t.hooks.callHook, t.provide = (r, s) => {
      const o = "$" + r;
      Gl(t, o, s), Gl(t.vueApp.config.globalProperties, o, s);
    }, Gl(t.vueApp, "$nuxt", t), Gl(t.vueApp.config.globalProperties, "$nuxt", t);
    {
      window.addEventListener(tC, (s) => {
        t.callHook("app:chunkError", {
          error: s.payload
        }), (t.isHydrating || s.payload.message.includes("Unable to preload CSS")) && s.preventDefault();
      }), window.useNuxtApp || (window.useNuxtApp = At);
      const r = t.hook("app:error", (...s) => {
        console.error("[nuxt] error caught during app initialization", ...s);
      });
      t.hook("app:mounted", r);
    }
    const i = t.payload.config;
    return t.provide("config", i), t;
  }
  function rC(n, e) {
    e.hooks && n.hooks.addHooks(e.hooks);
  }
  async function sC(n, e) {
    if (typeof e == "function") {
      const { provide: t } = await n.runWithContext(() => e(n)) || {};
      if (t && typeof t == "object") for (const i in t) n.provide(i, t[i]);
    }
  }
  async function oC(n, e) {
    const t = [], i = [], r = [], s = [];
    let o = 0;
    async function a(l) {
      var _a2;
      const c = ((_a2 = l.dependsOn) == null ? void 0 : _a2.filter((u) => e.some((h) => h._name === u) && !t.includes(u))) ?? [];
      if (c.length > 0) i.push([
        new Set(c),
        l
      ]);
      else {
        const u = sC(n, l).then(async () => {
          l._name && (t.push(l._name), await Promise.all(i.map(async ([h, d]) => {
            h.has(l._name) && (h.delete(l._name), h.size === 0 && (o++, await a(d)));
          })));
        });
        l.parallel ? r.push(u.catch((h) => s.push(h))) : await u;
      }
    }
    for (const l of e) rC(n, l);
    for (const l of e) await a(l);
    if (await Promise.all(r), o) for (let l = 0; l < o; l++) await Promise.all(r);
    if (s.length) throw s[0];
  }
  function ei(n) {
    if (typeof n == "function") return n;
    const e = n._name || n.name;
    return delete n.name, Object.assign(n.setup || (() => {
    }), n, {
      [nC]: true,
      _name: e
    });
  }
  const aC = ei;
  function U5(n, e, t) {
    const i = () => e();
    return av(n._id).set(n), n.vueApp.runWithContext(i);
  }
  function lv(n) {
    var _a2;
    let e;
    return ks() && (e = (_a2 = O3()) == null ? void 0 : _a2.appContext.app.$nuxt), e || (e = av(n).tryUse()), e || null;
  }
  function At(n) {
    const e = lv(n);
    if (!e) throw new Error("[nuxt] instance unavailable");
    return e;
  }
  function Ns(n) {
    return At().$config;
  }
  function Gl(n, e, t) {
    Object.defineProperty(n, e, {
      get: () => t
    });
  }
  function lC(n, e) {
    return {
      ctx: {
        table: n
      },
      matchAll: (t) => uv(t, n)
    };
  }
  function cv(n) {
    const e = {};
    for (const t in n) e[t] = t === "dynamic" ? new Map(Object.entries(n[t]).map(([i, r]) => [
      i,
      cv(r)
    ])) : new Map(Object.entries(n[t]));
    return e;
  }
  function cC(n) {
    return lC(cv(n));
  }
  function uv(n, e, t) {
    n.endsWith("/") && (n = n.slice(0, -1) || "/");
    const i = [];
    for (const [s, o] of B5(e.wildcard)) (n === s || n.startsWith(s + "/")) && i.push(o);
    for (const [s, o] of B5(e.dynamic)) if (n.startsWith(s + "/")) {
      const a = "/" + n.slice(s.length).split("/").splice(2).join("/");
      i.push(...uv(a, o));
    }
    const r = e.static.get(n);
    return r && i.push(r), i.filter(Boolean);
  }
  function B5(n) {
    return [
      ...n.entries()
    ].sort((e, t) => e[0].length - t[0].length);
  }
  function uh(n) {
    if (n === null || typeof n != "object") return false;
    const e = Object.getPrototypeOf(n);
    return e !== null && e !== Object.prototype && Object.getPrototypeOf(e) !== null || Symbol.iterator in n ? false : Symbol.toStringTag in n ? Object.prototype.toString.call(n) === "[object Module]" : true;
  }
  function l4(n, e, t = ".", i) {
    if (!uh(e)) return l4(n, {}, t, i);
    const r = Object.assign({}, e);
    for (const s in n) {
      if (s === "__proto__" || s === "constructor") continue;
      const o = n[s];
      o != null && (i && i(r, s, o, t) || (Array.isArray(o) && Array.isArray(r[s]) ? r[s] = [
        ...o,
        ...r[s]
      ] : uh(o) && uh(r[s]) ? r[s] = l4(o, r[s], (t ? `${t}.` : "") + s.toString(), i) : r[s] = o));
    }
    return r;
  }
  function uC(n) {
    return (...e) => e.reduce((t, i) => l4(t, i, "", n), {});
  }
  const fv = uC();
  function fC(n, e) {
    try {
      return e in n;
    } catch {
      return false;
    }
  }
  class H5 extends Error {
    constructor(e, t = {}) {
      super(e, t);
      __publicField(this, "statusCode", 500);
      __publicField(this, "fatal", false);
      __publicField(this, "unhandled", false);
      __publicField(this, "statusMessage");
      __publicField(this, "data");
      __publicField(this, "cause");
      t.cause && !this.cause && (this.cause = t.cause);
    }
    toJSON() {
      const e = {
        message: this.message,
        statusCode: c4(this.statusCode, 500)
      };
      return this.statusMessage && (e.statusMessage = hv(this.statusMessage)), this.data !== void 0 && (e.data = this.data), e;
    }
  }
  __publicField(H5, "__h3_error__", true);
  function zc(n) {
    if (typeof n == "string") return new H5(n);
    if (hC(n)) return n;
    const e = new H5(n.message ?? n.statusMessage ?? "", {
      cause: n.cause || n
    });
    if (fC(n, "stack")) try {
      Object.defineProperty(e, "stack", {
        get() {
          return n.stack;
        }
      });
    } catch {
      try {
        e.stack = n.stack;
      } catch {
      }
    }
    if (n.data && (e.data = n.data), n.statusCode ? e.statusCode = c4(n.statusCode, e.statusCode) : n.status && (e.statusCode = c4(n.status, e.statusCode)), n.statusMessage ? e.statusMessage = n.statusMessage : n.statusText && (e.statusMessage = n.statusText), e.statusMessage) {
      const t = e.statusMessage;
      hv(e.statusMessage) !== t && console.warn("[h3] Please prefer using `message` for longer error messages instead of `statusMessage`. In the future, `statusMessage` will be sanitized by default.");
    }
    return n.fatal !== void 0 && (e.fatal = n.fatal), n.unhandled !== void 0 && (e.unhandled = n.unhandled), e;
  }
  function hC(n) {
    var _a2;
    return ((_a2 = n == null ? void 0 : n.constructor) == null ? void 0 : _a2.__h3_error__) === true;
  }
  const dC = /[^\u0009\u0020-\u007E]/g;
  function hv(n = "") {
    return n.replace(dC, "");
  }
  function c4(n, e = 200) {
    return !n || (typeof n == "string" && (n = Number.parseInt(n, 10)), n < 100 || n > 999) ? e : n;
  }
  const dv = Symbol("layout-meta"), wl = Symbol("route"), On = () => {
    var _a2;
    return (_a2 = At()) == null ? void 0 : _a2.$router;
  }, Ap = () => ks() ? fn(wl, At()._route) : At()._route;
  const pC = () => {
    try {
      if (At()._processingMiddleware) return true;
    } catch {
      return false;
    }
    return false;
  }, mC = (n, e) => {
    n || (n = "/");
    const t = typeof n == "string" ? n : "path" in n ? u4(n) : On().resolve(n).href;
    if (e == null ? void 0 : e.open) {
      const { target: l = "_blank", windowFeatures: c = {} } = e.open, u = Object.entries(c).filter(([h, d]) => d !== void 0).map(([h, d]) => `${h.toLowerCase()}=${d}`).join(", ");
      return open(t, l, u), Promise.resolve();
    }
    const i = k3(t, {
      acceptRelative: true
    }), r = (e == null ? void 0 : e.external) || i;
    if (r) {
      if (!(e == null ? void 0 : e.external)) throw new Error("Navigating to an external URL is not allowed by default. Use `navigateTo(url, { external: true })`.");
      const { protocol: l } = new URL(t, window.location.href);
      if (l && gT(l)) throw new Error(`Cannot navigate to a URL with '${l}' protocol.`);
    }
    const s = pC();
    if (!r && s) {
      if (e == null ? void 0 : e.replace) {
        if (typeof n == "string") {
          const { pathname: l, search: c, hash: u } = tv(n);
          return {
            path: l,
            ...c && {
              query: Tp(c)
            },
            ...u && {
              hash: u
            },
            replace: true
          };
        }
        return {
          ...n,
          replace: true
        };
      }
      return n;
    }
    const o = On(), a = At();
    return r ? (a._scope.stop(), (e == null ? void 0 : e.replace) ? location.replace(t) : location.href = t, s ? a.isHydrating ? new Promise(() => {
    }) : false : Promise.resolve()) : (e == null ? void 0 : e.replace) ? o.replace(n) : o.push(n);
  };
  function u4(n) {
    return Cu(n.path || "", n.query || {}) + (n.hash || "");
  }
  const pv = "__nuxt_error", xf = () => $7(At().payload, "error"), Z3 = (n) => {
    const e = Sf(n);
    try {
      const t = At(), i = xf();
      t.hooks.callHook("app:error", e), i.value || (i.value = e);
    } catch {
      throw e;
    }
    return e;
  }, gC = async (n = {}) => {
    const e = At(), t = xf();
    e.callHook("app:error:cleared", n), n.redirect && await On().replace(n.redirect), t.value = ZT;
  }, mv = (n) => !!n && typeof n == "object" && pv in n, Sf = (n) => {
    const e = zc(n);
    return Object.defineProperty(e, pv, {
      value: true,
      configurable: false,
      writable: false
    }), e;
  };
  let gv;
  const Ml = (n) => gv = n, _v = Symbol();
  function f4(n) {
    return n && typeof n == "object" && Object.prototype.toString.call(n) === "[object Object]" && typeof n.toJSON != "function";
  }
  var g0;
  (function(n) {
    n.direct = "direct", n.patchObject = "patch object", n.patchFunction = "patch function";
  })(g0 || (g0 = {}));
  function _C() {
    const n = ap(true), e = n.run(() => vn({}));
    let t = [], i = [];
    const r = hp({
      install(s) {
        Ml(r), r._a = s, s.provide(_v, r), s.config.globalProperties.$pinia = r, i.forEach((o) => t.push(o)), i = [];
      },
      use(s) {
        return this._a ? t.push(s) : i.push(s), this;
      },
      _p: t,
      _a: null,
      _e: n,
      _s: /* @__PURE__ */ new Map(),
      state: e
    });
    return r;
  }
  const bv = () => {
  };
  function z5(n, e, t, i = bv) {
    n.push(e);
    const r = () => {
      const s = n.indexOf(e);
      s > -1 && (n.splice(s, 1), i());
    };
    return !t && uf() && T7(r), r;
  }
  function Vs(n, ...e) {
    n.slice().forEach((t) => {
      t(...e);
    });
  }
  const bC = (n) => n(), V5 = Symbol(), fh = Symbol();
  function h4(n, e) {
    n instanceof Map && e instanceof Map ? e.forEach((t, i) => n.set(i, t)) : n instanceof Set && e instanceof Set && e.forEach(n.add, n);
    for (const t in e) {
      if (!e.hasOwnProperty(t)) continue;
      const i = e[t], r = n[t];
      f4(r) && f4(i) && n.hasOwnProperty(t) && !yt(i) && !M3(i) ? n[t] = h4(r, i) : n[t] = i;
    }
    return n;
  }
  const vC = Symbol();
  function yC(n) {
    return !f4(n) || !n.hasOwnProperty(vC);
  }
  const { assign: q3 } = Object;
  function xC(n) {
    return !!(yt(n) && n.effect);
  }
  function SC(n, e, t, i) {
    const { state: r, actions: s, getters: o } = e, a = t.state.value[n];
    let l;
    function c() {
      a || (t.state.value[n] = r ? r() : {});
      const u = X7(t.state.value[n]);
      return q3(u, s, Object.keys(o || {}).reduce((h, d) => (h[d] = hp(qe(() => {
        Ml(t);
        const f = t._s.get(n);
        return o[d].call(f, f);
      })), h), {}));
    }
    return l = vv(n, c, e, t, i, true), l;
  }
  function vv(n, e, t = {}, i, r, s) {
    let o;
    const a = q3({
      actions: {}
    }, t), l = {
      deep: true
    };
    let c, u, h = [], d = [], f;
    const m = i.state.value[n];
    !s && !m && (i.state.value[n] = {}), vn({});
    let _;
    function p(P) {
      let M;
      c = u = false, typeof P == "function" ? (P(i.state.value[n]), M = {
        type: g0.patchFunction,
        storeId: n,
        events: f
      }) : (h4(i.state.value[n], P), M = {
        type: g0.patchObject,
        payload: P,
        storeId: n,
        events: f
      });
      const E = _ = Symbol();
      e2().then(() => {
        _ === E && (c = true);
      }), u = true, Vs(h, M, i.state.value[n]);
    }
    const g = s ? function() {
      const { state: M } = t, E = M ? M() : {};
      this.$patch((I) => {
        q3(I, E);
      });
    } : bv;
    function y() {
      o.stop(), h = [], d = [], i._s.delete(n);
    }
    const b = (P, M = "") => {
      if (V5 in P) return P[fh] = M, P;
      const E = function() {
        Ml(i);
        const I = Array.from(arguments), k = [], H = [];
        function K($) {
          k.push($);
        }
        function J($) {
          H.push($);
        }
        Vs(d, {
          args: I,
          name: E[fh],
          store: x,
          after: K,
          onError: J
        });
        let z;
        try {
          z = P.apply(this && this.$id === n ? this : x, I);
        } catch ($) {
          throw Vs(H, $), $;
        }
        return z instanceof Promise ? z.then(($) => (Vs(k, $), $)).catch(($) => (Vs(H, $), Promise.reject($))) : (Vs(k, z), z);
      };
      return E[V5] = true, E[fh] = M, E;
    }, v = {
      _p: i,
      $id: n,
      $onAction: z5.bind(null, d),
      $patch: p,
      $reset: g,
      $subscribe(P, M = {}) {
        const E = z5(h, P, M.detached, () => I()), I = o.run(() => je(() => i.state.value[n], (k) => {
          (M.flush === "sync" ? u : c) && P({
            storeId: n,
            type: g0.direct,
            events: f
          }, k);
        }, q3({}, l, M)));
        return E;
      },
      $dispose: y
    }, x = k2(v);
    i._s.set(n, x);
    const A = (i._a && i._a.runWithContext || bC)(() => i._e.run(() => (o = ap()).run(() => e({
      action: b
    }))));
    for (const P in A) {
      const M = A[P];
      if (yt(M) && !xC(M) || M3(M)) s || (m && yC(M) && (yt(M) ? M.value = m[P] : h4(M, m[P])), i.state.value[n][P] = M);
      else if (typeof M == "function") {
        const E = b(M, P);
        A[P] = E, a.actions[P] = M;
      }
    }
    return q3(x, A), q3(We(x), A), Object.defineProperty(x, "$state", {
      get: () => i.state.value[n],
      set: (P) => {
        p((M) => {
          q3(M, P);
        });
      }
    }), i._p.forEach((P) => {
      q3(x, o.run(() => P({
        store: x,
        app: i._a,
        pinia: i,
        options: a
      })));
    }), m && s && t.hydrate && t.hydrate(x.$state, m), c = true, u = true, x;
  }
  function Dp(n, e, t) {
    let i;
    const r = typeof e == "function";
    i = r ? t : e;
    function s(o, a) {
      const l = ks();
      return o = o || (l ? fn(_v, null) : null), o && Ml(o), o = gv, o._s.has(n) || (r ? vv(n, e, i, o) : SC(n, i, o)), o._s.get(n);
    }
    return s.$id = n, s;
  }
  function G5(n) {
    const e = wC(n), t = new ArrayBuffer(e.length), i = new DataView(t);
    for (let r = 0; r < t.byteLength; r++) i.setUint8(r, e.charCodeAt(r));
    return t;
  }
  const EC = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
  function wC(n) {
    n.length % 4 === 0 && (n = n.replace(/==?$/, ""));
    let e = "", t = 0, i = 0;
    for (let r = 0; r < n.length; r++) t <<= 6, t |= EC.indexOf(n[r]), i += 6, i === 24 && (e += String.fromCharCode((t & 16711680) >> 16), e += String.fromCharCode((t & 65280) >> 8), e += String.fromCharCode(t & 255), t = i = 0);
    return i === 12 ? (t >>= 4, e += String.fromCharCode(t)) : i === 18 && (t >>= 2, e += String.fromCharCode((t & 65280) >> 8), e += String.fromCharCode(t & 255)), e;
  }
  const MC = -1, TC = -2, CC = -3, AC = -4, DC = -5, RC = -6;
  function PC(n, e) {
    return LC(JSON.parse(n), e);
  }
  function LC(n, e) {
    if (typeof n == "number") return r(n, true);
    if (!Array.isArray(n) || n.length === 0) throw new Error("Invalid input");
    const t = n, i = Array(t.length);
    function r(s, o = false) {
      if (s === MC) return;
      if (s === CC) return NaN;
      if (s === AC) return 1 / 0;
      if (s === DC) return -1 / 0;
      if (s === RC) return -0;
      if (o) throw new Error("Invalid input");
      if (s in i) return i[s];
      const a = t[s];
      if (!a || typeof a != "object") i[s] = a;
      else if (Array.isArray(a)) if (typeof a[0] == "string") {
        const l = a[0], c = e == null ? void 0 : e[l];
        if (c) return i[s] = c(r(a[1]));
        switch (l) {
          case "Date":
            i[s] = new Date(a[1]);
            break;
          case "Set":
            const u = /* @__PURE__ */ new Set();
            i[s] = u;
            for (let f = 1; f < a.length; f += 1) u.add(r(a[f]));
            break;
          case "Map":
            const h = /* @__PURE__ */ new Map();
            i[s] = h;
            for (let f = 1; f < a.length; f += 2) h.set(r(a[f]), r(a[f + 1]));
            break;
          case "RegExp":
            i[s] = new RegExp(a[1], a[2]);
            break;
          case "Object":
            i[s] = Object(a[1]);
            break;
          case "BigInt":
            i[s] = BigInt(a[1]);
            break;
          case "null":
            const d = /* @__PURE__ */ Object.create(null);
            i[s] = d;
            for (let f = 1; f < a.length; f += 2) d[a[f]] = r(a[f + 1]);
            break;
          case "Int8Array":
          case "Uint8Array":
          case "Uint8ClampedArray":
          case "Int16Array":
          case "Uint16Array":
          case "Int32Array":
          case "Uint32Array":
          case "Float32Array":
          case "Float64Array":
          case "BigInt64Array":
          case "BigUint64Array": {
            const f = globalThis[l], m = a[1], _ = G5(m), p = new f(_);
            i[s] = p;
            break;
          }
          case "ArrayBuffer": {
            const f = a[1], m = G5(f);
            i[s] = m;
            break;
          }
          default:
            throw new Error(`Unknown type ${l}`);
        }
      } else {
        const l = new Array(a.length);
        i[s] = l;
        for (let c = 0; c < a.length; c += 1) {
          const u = a[c];
          u !== TC && (l[c] = r(u));
        }
      }
      else {
        const l = {};
        i[s] = l;
        for (const c in a) {
          const u = a[c];
          l[c] = r(u);
        }
      }
      return i[s];
    }
    return r(0);
  }
  const IC = /* @__PURE__ */ new Set([
    "link",
    "style",
    "script",
    "noscript"
  ]), FC = /* @__PURE__ */ new Set([
    "title",
    "titleTemplate",
    "script",
    "style",
    "noscript"
  ]), W5 = /* @__PURE__ */ new Set([
    "base",
    "meta",
    "link",
    "style",
    "script",
    "noscript"
  ]), OC = /* @__PURE__ */ new Set([
    "title",
    "base",
    "htmlAttrs",
    "bodyAttrs",
    "meta",
    "link",
    "style",
    "script",
    "noscript"
  ]), kC = /* @__PURE__ */ new Set([
    "base",
    "title",
    "titleTemplate",
    "bodyAttrs",
    "htmlAttrs",
    "templateParams"
  ]), NC = /* @__PURE__ */ new Set([
    "key",
    "tagPosition",
    "tagPriority",
    "tagDuplicateStrategy",
    "innerHTML",
    "textContent",
    "processTemplateParams"
  ]), UC = /* @__PURE__ */ new Set([
    "templateParams",
    "htmlAttrs",
    "bodyAttrs"
  ]), BC = /* @__PURE__ */ new Set([
    "theme-color",
    "google-site-verification",
    "og",
    "article",
    "book",
    "profile",
    "twitter",
    "author"
  ]);
  const HC = [
    "name",
    "property",
    "http-equiv"
  ];
  function yv(n) {
    const e = n.split(":")[1];
    return BC.has(e);
  }
  function d4(n) {
    const { props: e, tag: t } = n;
    if (kC.has(t)) return t;
    if (t === "link" && e.rel === "canonical") return "canonical";
    if (e.charset) return "charset";
    if (n.tag === "meta") {
      for (const i of HC) if (e[i] !== void 0) return `${t}:${e[i]}`;
    }
    if (n.key) return `${t}:key:${n.key}`;
    if (e.id) return `${t}:id:${e.id}`;
    if (FC.has(t)) {
      const i = n.textContent || n.innerHTML;
      if (i) return `${t}:content:${i}`;
    }
  }
  function j5(n) {
    const e = n._h || n._d;
    if (e) return e;
    const t = n.textContent || n.innerHTML;
    return t || `${n.tag}:${Object.entries(n.props).map(([i, r]) => `${i}:${String(r)}`).join(",")}`;
  }
  function Pu(n, e, t) {
    typeof n === "function" && (!t || t !== "titleTemplate" && !(t[0] === "o" && t[1] === "n")) && (n = n());
    let r;
    if (e && (r = e(t, n)), Array.isArray(r)) return r.map((s) => Pu(s, e));
    if ((r == null ? void 0 : r.constructor) === Object) {
      const s = {};
      for (const o of Object.keys(r)) s[o] = Pu(r[o], e, o);
      return s;
    }
    return r;
  }
  function zC(n, e) {
    const t = n === "style" ? /* @__PURE__ */ new Map() : /* @__PURE__ */ new Set();
    function i(r) {
      const s = r.trim();
      if (s) if (n === "style") {
        const [o, ...a] = s.split(":").map((l) => l.trim());
        o && a.length && t.set(o, a.join(":"));
      } else s.split(" ").filter(Boolean).forEach((o) => t.add(o));
    }
    return typeof e == "string" ? n === "style" ? e.split(";").forEach(i) : i(e) : Array.isArray(e) ? e.forEach((r) => i(r)) : e && typeof e == "object" && Object.entries(e).forEach(([r, s]) => {
      s && s !== "false" && (n === "style" ? t.set(r.trim(), s) : i(r));
    }), t;
  }
  function xv(n, e) {
    return n.props = n.props || {}, e && Object.entries(e).forEach(([t, i]) => {
      if (i === null) {
        n.props[t] = null;
        return;
      }
      if (t === "class" || t === "style") {
        n.props[t] = zC(t, i);
        return;
      }
      if (NC.has(t)) {
        if ([
          "textContent",
          "innerHTML"
        ].includes(t) && typeof i == "object") {
          let o = e.type;
          if (e.type || (o = "application/json"), !(o == null ? void 0 : o.endsWith("json")) && o !== "speculationrules") return;
          e.type = o, n.props.type = o, n[t] = JSON.stringify(i);
        } else n[t] = i;
        return;
      }
      const r = String(i), s = t.startsWith("data-");
      r === "true" || r === "" ? n.props[t] = s ? r : true : !i && s && r === "false" ? n.props[t] = "false" : i !== void 0 && (n.props[t] = i);
    }), n;
  }
  function VC(n, e) {
    const t = typeof e == "object" && typeof e != "function" ? e : {
      [n === "script" || n === "noscript" || n === "style" ? "innerHTML" : "textContent"]: e
    }, i = xv({
      tag: n,
      props: {}
    }, t);
    return i.key && IC.has(i.tag) && (i.props["data-hid"] = i._h = i.key), i.tag === "script" && typeof i.innerHTML == "object" && (i.innerHTML = JSON.stringify(i.innerHTML), i.props.type = i.props.type || "application/json"), Array.isArray(i.props.content) ? i.props.content.map((r) => ({
      ...i,
      props: {
        ...i.props,
        content: r
      }
    })) : i;
  }
  function GC(n, e) {
    if (!n) return [];
    typeof n == "function" && (n = n());
    const t = (r, s) => {
      for (let o = 0; o < e.length; o++) s = e[o](r, s);
      return s;
    };
    n = t(void 0, n);
    const i = [];
    return n = Pu(n, t), Object.entries(n || {}).forEach(([r, s]) => {
      if (s !== void 0) for (const o of Array.isArray(s) ? s : [
        s
      ]) i.push(VC(r, o));
    }), i.flat();
  }
  const p4 = (n, e) => n._w === e._w ? n._p - e._p : n._w - e._w, X5 = {
    base: -10,
    title: 10
  }, WC = {
    critical: -8,
    high: -1,
    low: 2
  }, $5 = {
    meta: {
      "content-security-policy": -30,
      charset: -20,
      viewport: -15
    },
    link: {
      preconnect: 20,
      stylesheet: 60,
      preload: 70,
      modulepreload: 70,
      prefetch: 90,
      "dns-prefetch": 90,
      prerender: 90
    },
    script: {
      async: 30,
      defer: 80,
      sync: 50
    },
    style: {
      imported: 40,
      sync: 60
    }
  }, jC = /@import/, Pa = (n) => n === "" || n === true;
  function XC(n, e) {
    var _a2;
    if (typeof e.tagPriority == "number") return e.tagPriority;
    let t = 100;
    const i = WC[e.tagPriority] || 0, r = n.resolvedOptions.disableCapoSorting ? {
      link: {},
      script: {},
      style: {}
    } : $5;
    if (e.tag in X5) t = X5[e.tag];
    else if (e.tag === "meta") {
      const s = e.props["http-equiv"] === "content-security-policy" ? "content-security-policy" : e.props.charset ? "charset" : e.props.name === "viewport" ? "viewport" : null;
      s && (t = $5.meta[s]);
    } else e.tag === "link" && e.props.rel ? t = r.link[e.props.rel] : e.tag === "script" ? Pa(e.props.async) ? t = r.script.async : e.props.src && !Pa(e.props.defer) && !Pa(e.props.async) && e.props.type !== "module" && !((_a2 = e.props.type) == null ? void 0 : _a2.endsWith("json")) ? t = r.script.sync : Pa(e.props.defer) && e.props.src && !Pa(e.props.async) && (t = r.script.defer) : e.tag === "style" && (t = e.innerHTML && jC.test(e.innerHTML) ? r.style.imported : r.style.sync);
    return (t || 100) + i;
  }
  function q5(n, e) {
    const t = typeof e == "function" ? e(n) : e, i = t.key || String(n.plugins.size + 1);
    n.plugins.get(i) || (n.plugins.set(i, t), n.hooks.addHooks(t.hooks || {}));
  }
  function $C(n = {}) {
    var _a2;
    const e = sv();
    e.addHooks(n.hooks || {});
    const t = !n.document, i = /* @__PURE__ */ new Map(), r = /* @__PURE__ */ new Map(), s = [], o = {
      _entryCount: 1,
      plugins: r,
      dirty: false,
      resolvedOptions: n,
      hooks: e,
      ssr: t,
      entries: i,
      headEntries() {
        return [
          ...i.values()
        ];
      },
      use: (a) => q5(o, a),
      push(a, l) {
        const c = {
          ...l || {}
        };
        delete c.head;
        const u = c._index ?? o._entryCount++, h = {
          _i: u,
          input: a,
          options: c
        }, d = {
          _poll(f = false) {
            o.dirty = true, !f && s.push(u), e.callHook("entries:updated", o);
          },
          dispose() {
            i.delete(u) && d._poll(true);
          },
          patch(f) {
            (!c.mode || c.mode === "server" && t || c.mode === "client" && !t) && (h.input = f, i.set(u, h), d._poll());
          }
        };
        return d.patch(a), d;
      },
      async resolveTags() {
        var _a3;
        const a = {
          tagMap: /* @__PURE__ */ new Map(),
          tags: [],
          entries: [
            ...o.entries.values()
          ]
        };
        for (await e.callHook("entries:resolve", a); s.length; ) {
          const d = s.shift(), f = i.get(d);
          if (f) {
            const m = {
              tags: GC(f.input, n.propResolvers || []).map((_) => Object.assign(_, f.options)),
              entry: f
            };
            await e.callHook("entries:normalize", m), f._tags = m.tags.map((_, p) => (_._w = XC(o, _), _._p = (f._i << 10) + p, _._d = d4(_), _));
          }
        }
        let l = false;
        a.entries.flatMap((d) => (d._tags || []).map((f) => ({
          ...f,
          props: {
            ...f.props
          }
        }))).sort(p4).reduce((d, f) => {
          const m = String(f._d || f._p);
          if (!d.has(m)) return d.set(m, f);
          const _ = d.get(m);
          if (((f == null ? void 0 : f.tagDuplicateStrategy) || (UC.has(f.tag) ? "merge" : null) || (f.key && f.key === _.key ? "merge" : null)) === "merge") {
            const g = {
              ..._.props
            };
            Object.entries(f.props).forEach(([y, b]) => g[y] = y === "style" ? new Map([
              ..._.props.style || /* @__PURE__ */ new Map(),
              ...b
            ]) : y === "class" ? /* @__PURE__ */ new Set([
              ..._.props.class || /* @__PURE__ */ new Set(),
              ...b
            ]) : b), d.set(m, {
              ...f,
              props: g
            });
          } else f._p >> 10 === _._p >> 10 && yv(f._d) ? (d.set(m, Object.assign([
            ...Array.isArray(_) ? _ : [
              _
            ],
            f
          ], f)), l = true) : (f._w === _._w ? f._p > _._p : (f == null ? void 0 : f._w) < (_ == null ? void 0 : _._w)) && d.set(m, f);
          return d;
        }, a.tagMap);
        const c = a.tagMap.get("title"), u = a.tagMap.get("titleTemplate");
        if (o._title = c == null ? void 0 : c.textContent, u) {
          const d = u == null ? void 0 : u.textContent;
          if (o._titleTemplate = typeof d == "string" ? d : void 0, d) {
            let f = typeof d == "function" ? d(c == null ? void 0 : c.textContent) : d;
            typeof f == "string" && !o.plugins.has("template-params") && (f = f.replace("%s", (c == null ? void 0 : c.textContent) || "")), c ? f === null ? a.tagMap.delete("title") : a.tagMap.set("title", {
              ...c,
              textContent: f
            }) : (u.tag = "title", u.textContent = f);
          }
        }
        a.tags = Array.from(a.tagMap.values()), l && (a.tags = a.tags.flat().sort(p4)), await e.callHook("tags:beforeResolve", a), await e.callHook("tags:resolve", a), await e.callHook("tags:afterResolve", a);
        const h = [];
        for (const d of a.tags) {
          const { innerHTML: f, tag: m, props: _ } = d;
          if (OC.has(m) && !(Object.keys(_).length === 0 && !d.innerHTML && !d.textContent) && !(m === "meta" && !_.content && !_["http-equiv"] && !_.charset)) {
            if (m === "script" && f) {
              if ((_a3 = _.type) == null ? void 0 : _a3.endsWith("json")) {
                const p = typeof f == "string" ? f : JSON.stringify(f);
                d.innerHTML = p.replace(/</g, "\\u003C");
              } else typeof f == "string" && (d.innerHTML = f.replace(new RegExp(`</${m}`, "g"), `<\\/${m}`));
              d._d = d4(d);
            }
            h.push(d);
          }
        }
        return h;
      }
    };
    return ((n == null ? void 0 : n.plugins) || []).forEach((a) => q5(o, a)), o.hooks.callHook("init", o), (_a2 = n.init) == null ? void 0 : _a2.forEach((a) => a && o.push(a)), o;
  }
  const er = "%separator", qC = new RegExp(`${er}(?:\\s*${er})*`, "g");
  function YC(n, e, t = false) {
    var _a2;
    let i;
    if (e === "s" || e === "pageTitle") i = n.pageTitle;
    else if (e.includes(".")) {
      const r = e.indexOf(".");
      i = (_a2 = n[e.substring(0, r)]) == null ? void 0 : _a2[e.substring(r + 1)];
    } else i = n[e];
    if (i !== void 0) return t ? (i || "").replace(/\\/g, "\\\\").replace(/</g, "\\u003C").replace(/"/g, '\\"') : i || "";
  }
  function Wl(n, e, t, i = false) {
    if (typeof n != "string" || !n.includes("%")) return n;
    let r = n;
    try {
      r = decodeURI(n);
    } catch {
    }
    const s = r.match(/%\w+(?:\.\w+)?/g);
    if (!s) return n;
    const o = n.includes(er);
    return n = n.replace(/%\w+(?:\.\w+)?/g, (a) => {
      if (a === er || !s.includes(a)) return a;
      const l = YC(e, a.slice(1), i);
      return l !== void 0 ? l : a;
    }).trim(), o && (n.endsWith(er) && (n = n.slice(0, -er.length)), n.startsWith(er) && (n = n.slice(er.length)), n = n.replace(qC, t || "").trim()), n;
  }
  const Y5 = (n) => n.includes(":key") ? n : n.split(":").join(":key:"), KC = {
    key: "aliasSorting",
    hooks: {
      "tags:resolve": (n) => {
        let e = false;
        for (const t of n.tags) {
          const i = t.tagPriority;
          if (!i) continue;
          const r = String(i);
          if (r.startsWith("before:")) {
            const s = Y5(r.slice(7)), o = n.tagMap.get(s);
            o && (typeof o.tagPriority == "number" && (t.tagPriority = o.tagPriority), t._p = o._p - 1, e = true);
          } else if (r.startsWith("after:")) {
            const s = Y5(r.slice(6)), o = n.tagMap.get(s);
            o && (typeof o.tagPriority == "number" && (t.tagPriority = o.tagPriority), t._p = o._p + 1, e = true);
          }
        }
        e && (n.tags = n.tags.sort(p4));
      }
    }
  }, JC = {
    key: "deprecations",
    hooks: {
      "entries:normalize": ({ tags: n }) => {
        for (const e of n) e.props.children && (e.innerHTML = e.props.children, delete e.props.children), e.props.hid && (e.key = e.props.hid, delete e.props.hid), e.props.vmid && (e.key = e.props.vmid, delete e.props.vmid), e.props.body && (e.tagPosition = "bodyClose", delete e.props.body);
      }
    }
  };
  async function m4(n) {
    if (typeof n === "function") return n;
    if (n instanceof Promise) return await n;
    if (Array.isArray(n)) return await Promise.all(n.map((t) => m4(t)));
    if ((n == null ? void 0 : n.constructor) === Object) {
      const t = {};
      for (const i of Object.keys(n)) t[i] = await m4(n[i]);
      return t;
    }
    return n;
  }
  const QC = {
    key: "promises",
    hooks: {
      "entries:resolve": async (n) => {
        const e = [];
        for (const t in n.entries) n.entries[t]._promisesProcessed || e.push(m4(n.entries[t].input).then((i) => {
          n.entries[t].input = i, n.entries[t]._promisesProcessed = true;
        }));
        await Promise.all(e);
      }
    }
  }, ZC = {
    meta: "content",
    link: "href",
    htmlAttrs: "lang"
  }, eA = [
    "innerHTML",
    "textContent"
  ], tA = (n) => ({
    key: "template-params",
    hooks: {
      "entries:normalize": (e) => {
        var _a2, _b2, _c2;
        const t = ((_b2 = (_a2 = e.tags.filter((i) => i.tag === "templateParams" && i.mode === "server")) == null ? void 0 : _a2[0]) == null ? void 0 : _b2.props) || {};
        Object.keys(t).length && (n._ssrPayload = {
          templateParams: {
            ...((_c2 = n._ssrPayload) == null ? void 0 : _c2.templateParams) || {},
            ...t
          }
        });
      },
      "tags:resolve": ({ tagMap: e, tags: t }) => {
        var _a2;
        const i = ((_a2 = e.get("templateParams")) == null ? void 0 : _a2.props) || {}, r = i.separator || "|";
        delete i.separator, i.pageTitle = Wl(i.pageTitle || n._title || "", i, r);
        for (const s of t) {
          if (s.processTemplateParams === false) continue;
          const o = ZC[s.tag];
          if (o && typeof s.props[o] == "string") s.props[o] = Wl(s.props[o], i, r);
          else if (s.processTemplateParams || s.tag === "titleTemplate" || s.tag === "title") for (const a of eA) typeof s[a] == "string" && (s[a] = Wl(s[a], i, r, s.tag === "script" && s.props.type.endsWith("json")));
        }
        n._templateParams = i, n._separator = r;
      },
      "tags:afterResolve": ({ tagMap: e }) => {
        const t = e.get("title");
        (t == null ? void 0 : t.textContent) && t.processTemplateParams !== false && (t.textContent = Wl(t.textContent, n._templateParams, n._separator));
      }
    }
  }), nA = (n, e) => yt(e) ? $t(e) : e, Rp = "usehead";
  function iA(n) {
    return {
      install(t) {
        t.config.globalProperties.$unhead = n, t.config.globalProperties.$head = n, t.provide(Rp, n);
      }
    }.install;
  }
  function rA() {
    if (ks()) {
      const n = fn(Rp);
      if (!n) throw new Error("useHead() was called without provide context, ensure you call it through the setup() function.");
      return n;
    }
    throw new Error("useHead() was called without provide context, ensure you call it through the setup() function.");
  }
  function sA(n, e = {}) {
    const t = e.head || rA();
    return t.ssr ? t.push(n || {}, e) : oA(t, n, e);
  }
  function oA(n, e, t = {}) {
    const i = vn(false);
    let r;
    return vu(() => {
      const o = i.value ? {} : Pu(e, nA);
      r ? r.patch(o) : r = n.push(o, t);
    }), O3() && (Os(() => {
      r.dispose();
    }), cb(() => {
      i.value = true;
    }), lb(() => {
      i.value = false;
    })), r;
  }
  function aA(n) {
    var _a2;
    const e = n || lv();
    return ((_a2 = e == null ? void 0 : e.ssrContext) == null ? void 0 : _a2.head) || (e == null ? void 0 : e.runWithContext(() => {
      if (ks()) return fn(Rp);
    }));
  }
  lA = function(n, e = {}) {
    const t = aA(e.nuxt);
    if (t) return sA(n, {
      head: t,
      ...e
    });
  };
  let cA, uA, K5;
  cA = "modulepreload";
  uA = function(n, e) {
    return new URL(n, e).href;
  };
  K5 = {};
  Gt = function(e, t, i) {
    let r = Promise.resolve();
    if (t && t.length > 0) {
      const o = document.getElementsByTagName("link"), a = document.querySelector("meta[property=csp-nonce]"), l = (a == null ? void 0 : a.nonce) || (a == null ? void 0 : a.getAttribute("nonce"));
      r = Promise.allSettled(t.map((c) => {
        if (c = uA(c, i), c in K5) return;
        K5[c] = true;
        const u = c.endsWith(".css"), h = u ? '[rel="stylesheet"]' : "";
        if (!!i) for (let m = o.length - 1; m >= 0; m--) {
          const _ = o[m];
          if (_.href === c && (!u || _.rel === "stylesheet")) return;
        }
        else if (document.querySelector(`link[href="${c}"]${h}`)) return;
        const f = document.createElement("link");
        if (f.rel = u ? "stylesheet" : cA, u || (f.as = "script"), f.crossOrigin = "", f.href = c, l && f.setAttribute("nonce", l), document.head.appendChild(f), u) return new Promise((m, _) => {
          f.addEventListener("load", m), f.addEventListener("error", () => _(new Error(`Unable to preload CSS for ${c}`)));
        });
      }));
    }
    function s(o) {
      const a = new Event("vite:preloadError", {
        cancelable: true
      });
      if (a.payload = o, window.dispatchEvent(a), !a.defaultPrevented) throw o;
    }
    return r.then((o) => {
      for (const a of o || []) a.status === "rejected" && s(a.reason);
      return e().catch(s);
    });
  };
  let Vc, Gc;
  function fA() {
    return Vc = $fetch(Cp(`builds/meta/${Ns().app.buildId}.json`), {
      responseType: "json"
    }), Vc.then((n) => {
      Gc = cC(n.matcher);
    }).catch((n) => {
      console.error("[nuxt] Error fetching app manifest.", n);
    }), Vc;
  }
  function Ef() {
    return Vc || fA();
  }
  async function Pp(n) {
    const e = typeof n == "string" ? n : n.path;
    if (await Ef(), !Gc) return console.error("[nuxt] Error creating app manifest matcher.", Gc), {};
    try {
      return fv({}, ...Gc.matchAll(e).reverse());
    } catch (t) {
      return console.error("[nuxt] Error matching route rules.", t), {};
    }
  }
  async function J5(n, e = {}) {
    if (!await Ev(n)) return null;
    const i = await dA(n, e);
    return await Sv(i) || null;
  }
  const hA = "_payload.json";
  async function dA(n, e = {}) {
    const t = new URL(n, "http://localhost");
    if (t.host !== "localhost" || k3(t.pathname, {
      acceptRelative: true
    })) throw new Error("Payload URL must not include hostname: " + n);
    const i = Ns(), r = e.hash || (e.fresh ? Date.now() : i.app.buildId), s = i.app.cdnURL, o = s && await Ev(n) ? s : i.app.baseURL;
    return yf(o, t.pathname, hA + (r ? `?${r}` : ""));
  }
  async function Sv(n) {
    const e = fetch(n, {
      cache: "force-cache"
    }).then((t) => t.text().then(wv));
    try {
      return await e;
    } catch (t) {
      console.warn("[nuxt] Cannot load payload ", n, t);
    }
    return null;
  }
  async function Ev(n = Ap().path) {
    const e = At();
    return n = vf(n), (await Ef()).prerendered.includes(n) ? true : e.runWithContext(async () => {
      const i = await Pp({
        path: n
      });
      return !!i.prerender && !i.redirect;
    });
  }
  let Br = null;
  async function pA() {
    var _a2;
    if (Br) return Br;
    const n = document.getElementById("__NUXT_DATA__");
    if (!n) return {};
    const e = await wv(n.textContent || ""), t = n.dataset.src ? await Sv(n.dataset.src) : void 0;
    return Br = {
      ...e,
      ...t,
      ...window.__NUXT__
    }, ((_a2 = Br.config) == null ? void 0 : _a2.public) && (Br.config.public = k2(Br.config.public)), Br;
  }
  async function wv(n) {
    return await PC(n, At()._payloadRevivers);
  }
  function Mv(n, e) {
    At()._payloadRevivers[n] = e;
  }
  const mA = aC(() => {
    Mv("skipHydrate", (n) => {
    });
  }), gA = [
    [
      "NuxtError",
      (n) => Sf(n)
    ],
    [
      "EmptyShallowRef",
      (n) => pe(n === "_" ? void 0 : n === "0n" ? BigInt(0) : wu(n))
    ],
    [
      "EmptyRef",
      (n) => vn(n === "_" ? void 0 : n === "0n" ? BigInt(0) : wu(n))
    ],
    [
      "ShallowRef",
      (n) => pe(n)
    ],
    [
      "ShallowReactive",
      (n) => y3(n)
    ],
    [
      "Ref",
      (n) => vn(n)
    ],
    [
      "Reactive",
      (n) => k2(n)
    ]
  ], _A = ei({
    name: "nuxt:revive-payload:client",
    order: -30,
    async setup(n) {
      let e, t;
      for (const [i, r] of gA) Mv(i, r);
      Object.assign(n.payload, ([e, t] = Io(() => n.runWithContext(pA)), e = await e, t(), e)), window.__NUXT__ = n.payload;
    }
  });
  async function Lp(n, e = {}) {
    const t = e.document || n.resolvedOptions.document;
    if (!t || !n.dirty) return;
    const i = {
      shouldRender: true,
      tags: []
    };
    if (await n.hooks.callHook("dom:beforeRender", i), !!i.shouldRender) return n._domUpdatePromise || (n._domUpdatePromise = new Promise(async (r) => {
      var _a2;
      const s = /* @__PURE__ */ new Map(), o = new Promise((f) => {
        n.resolveTags().then((m) => {
          f(m.map((_) => {
            const p = s.get(_._d) || 0, g = {
              tag: _,
              id: (p ? `${_._d}:${p}` : _._d) || j5(_),
              shouldRender: true
            };
            return _._d && yv(_._d) && s.set(_._d, p + 1), g;
          }));
        });
      });
      let a = n._dom;
      if (!a) {
        a = {
          title: t.title,
          elMap: (/* @__PURE__ */ new Map()).set("htmlAttrs", t.documentElement).set("bodyAttrs", t.body)
        };
        for (const f of [
          "body",
          "head"
        ]) {
          const m = (_a2 = t[f]) == null ? void 0 : _a2.children;
          for (const _ of m) {
            const p = _.tagName.toLowerCase();
            if (!W5.has(p)) continue;
            const g = xv({
              tag: p,
              props: {}
            }, {
              innerHTML: _.innerHTML,
              ..._.getAttributeNames().reduce((y, b) => (y[b] = _.getAttribute(b), y), {}) || {}
            });
            if (g.key = _.getAttribute("data-hid") || void 0, g._d = d4(g) || j5(g), a.elMap.has(g._d)) {
              let y = 1, b = g._d;
              for (; a.elMap.has(b); ) b = `${g._d}:${y++}`;
              a.elMap.set(b, _);
            } else a.elMap.set(g._d, _);
          }
        }
      }
      a.pendingSideEffects = {
        ...a.sideEffects
      }, a.sideEffects = {};
      function l(f, m, _) {
        const p = `${f}:${m}`;
        a.sideEffects[p] = _, delete a.pendingSideEffects[p];
      }
      function c({ id: f, $el: m, tag: _ }) {
        const p = _.tag.endsWith("Attrs");
        a.elMap.set(f, m), p || (_.textContent && _.textContent !== m.textContent && (m.textContent = _.textContent), _.innerHTML && _.innerHTML !== m.innerHTML && (m.innerHTML = _.innerHTML), l(f, "el", () => {
          m == null ? void 0 : m.remove(), a.elMap.delete(f);
        }));
        for (const g in _.props) {
          if (!Object.prototype.hasOwnProperty.call(_.props, g)) continue;
          const y = _.props[g];
          if (g.startsWith("on") && typeof y == "function") {
            const v = m == null ? void 0 : m.dataset;
            if (v && v[`${g}fired`]) {
              const x = g.slice(0, -5);
              y.call(m, new Event(x.substring(2)));
            }
            m.getAttribute(`data-${g}`) !== "" && ((_.tag === "bodyAttrs" ? t.defaultView : m).addEventListener(g.substring(2), y.bind(m)), m.setAttribute(`data-${g}`, ""));
            continue;
          }
          const b = `attr:${g}`;
          if (g === "class") {
            if (!y) continue;
            for (const v of y) p && l(f, `${b}:${v}`, () => m.classList.remove(v)), !m.classList.contains(v) && m.classList.add(v);
          } else if (g === "style") {
            if (!y) continue;
            for (const [v, x] of y) l(f, `${b}:${v}`, () => {
              m.style.removeProperty(v);
            }), m.style.setProperty(v, x);
          } else y !== false && y !== null && (m.getAttribute(g) !== y && m.setAttribute(g, y === true ? "" : String(y)), p && l(f, b, () => m.removeAttribute(g)));
        }
      }
      const u = [], h = {
        bodyClose: void 0,
        bodyOpen: void 0,
        head: void 0
      }, d = await o;
      for (const f of d) {
        const { tag: m, shouldRender: _, id: p } = f;
        if (_) {
          if (m.tag === "title") {
            t.title = m.textContent, l("title", "", () => t.title = a.title);
            continue;
          }
          f.$el = f.$el || a.elMap.get(p), f.$el ? c(f) : W5.has(m.tag) && u.push(f);
        }
      }
      for (const f of u) {
        const m = f.tag.tagPosition || "head";
        f.$el = t.createElement(f.tag.tag), c(f), h[m] = h[m] || t.createDocumentFragment(), h[m].appendChild(f.$el);
      }
      for (const f of d) await n.hooks.callHook("dom:renderTag", f, t, l);
      h.head && t.head.appendChild(h.head), h.bodyOpen && t.body.insertBefore(h.bodyOpen, t.body.firstChild), h.bodyClose && t.body.appendChild(h.bodyClose);
      for (const f in a.pendingSideEffects) a.pendingSideEffects[f]();
      n._dom = a, await n.hooks.callHook("dom:rendered", {
        renders: d
      }), r();
    }).finally(() => {
      n._domUpdatePromise = void 0, n.dirty = false;
    })), n._domUpdatePromise;
  }
  function bA(n = {}) {
    var _a2, _b2, _c2;
    const e = ((_a2 = n.domOptions) == null ? void 0 : _a2.render) || Lp;
    n.document = n.document || (typeof window < "u" ? document : void 0);
    const t = ((_c2 = (_b2 = n.document) == null ? void 0 : _b2.head.querySelector('script[id="unhead:payload"]')) == null ? void 0 : _c2.innerHTML) || false;
    return $C({
      ...n,
      plugins: [
        ...n.plugins || [],
        {
          key: "client",
          hooks: {
            "entries:updated": e
          }
        }
      ],
      init: [
        t ? JSON.parse(t) : false,
        ...n.init || []
      ]
    });
  }
  function vA(n, e) {
    let t = 0;
    return () => {
      const i = ++t;
      e(() => {
        t === i && n();
      });
    };
  }
  function yA(n = {}) {
    const e = bA({
      domOptions: {
        render: vA(() => Lp(e), e2)
      },
      ...n
    });
    return e.install = iA(e), e;
  }
  const xA = {
    disableDefaults: true,
    disableCapoSorting: false,
    plugins: [
      JC,
      QC,
      tA,
      KC
    ]
  }, SA = ei({
    name: "nuxt:head",
    enforce: "pre",
    setup(n) {
      const e = yA(xA);
      n.vueApp.use(e);
      {
        let t = true;
        const i = async () => {
          t = false, await Lp(e);
        };
        e.hooks.hook("dom:beforeRender", (r) => {
          r.shouldRender = !t;
        }), n.hooks.hook("page:start", () => {
          t = true;
        }), n.hooks.hook("page:finish", () => {
          n.isHydrating || i();
        }), n.hooks.hook("app:error", i), n.hooks.hook("app:suspense:resolve", i);
      }
    }
  });
  const ho = typeof document < "u";
  function Tv(n) {
    return typeof n == "object" || "displayName" in n || "props" in n || "__vccOpts" in n;
  }
  function EA(n) {
    return n.__esModule || n[Symbol.toStringTag] === "Module" || n.default && Tv(n.default);
  }
  const Qe = Object.assign;
  function hh(n, e) {
    const t = {};
    for (const i in e) {
      const r = e[i];
      t[i] = yi(r) ? r.map(n) : n(r);
    }
    return t;
  }
  const _0 = () => {
  }, yi = Array.isArray, Cv = /#/g, wA = /&/g, MA = /\//g, TA = /=/g, CA = /\?/g, Av = /\+/g, AA = /%5B/g, DA = /%5D/g, Dv = /%5E/g, RA = /%60/g, Rv = /%7B/g, PA = /%7C/g, Pv = /%7D/g, LA = /%20/g;
  function Ip(n) {
    return encodeURI("" + n).replace(PA, "|").replace(AA, "[").replace(DA, "]");
  }
  function IA(n) {
    return Ip(n).replace(Rv, "{").replace(Pv, "}").replace(Dv, "^");
  }
  function g4(n) {
    return Ip(n).replace(Av, "%2B").replace(LA, "+").replace(Cv, "%23").replace(wA, "%26").replace(RA, "`").replace(Rv, "{").replace(Pv, "}").replace(Dv, "^");
  }
  function FA(n) {
    return g4(n).replace(TA, "%3D");
  }
  function OA(n) {
    return Ip(n).replace(Cv, "%23").replace(CA, "%3F");
  }
  function kA(n) {
    return n == null ? "" : OA(n).replace(MA, "%2F");
  }
  function Y0(n) {
    try {
      return decodeURIComponent("" + n);
    } catch {
    }
    return "" + n;
  }
  const NA = /\/$/, UA = (n) => n.replace(NA, "");
  function dh(n, e, t = "/") {
    let i, r = {}, s = "", o = "";
    const a = e.indexOf("#");
    let l = e.indexOf("?");
    return a < l && a >= 0 && (l = -1), l > -1 && (i = e.slice(0, l), s = e.slice(l + 1, a > -1 ? a : e.length), r = n(s)), a > -1 && (i = i || e.slice(0, a), o = e.slice(a, e.length)), i = VA(i ?? e, t), {
      fullPath: i + (s && "?") + s + o,
      path: i,
      query: r,
      hash: Y0(o)
    };
  }
  function BA(n, e) {
    const t = e.query ? n(e.query) : "";
    return e.path + (t && "?") + t + (e.hash || "");
  }
  function Q5(n, e) {
    return !e || !n.toLowerCase().startsWith(e.toLowerCase()) ? n : n.slice(e.length) || "/";
  }
  function HA(n, e, t) {
    const i = e.matched.length - 1, r = t.matched.length - 1;
    return i > -1 && i === r && Zo(e.matched[i], t.matched[r]) && Lv(e.params, t.params) && n(e.query) === n(t.query) && e.hash === t.hash;
  }
  function Zo(n, e) {
    return (n.aliasOf || n) === (e.aliasOf || e);
  }
  function Lv(n, e) {
    if (Object.keys(n).length !== Object.keys(e).length) return false;
    for (const t in n) if (!zA(n[t], e[t])) return false;
    return true;
  }
  function zA(n, e) {
    return yi(n) ? Z5(n, e) : yi(e) ? Z5(e, n) : n === e;
  }
  function Z5(n, e) {
    return yi(e) ? n.length === e.length && n.every((t, i) => t === e[i]) : n.length === 1 && n[0] === e;
  }
  function VA(n, e) {
    if (n.startsWith("/")) return n;
    if (!n) return e;
    const t = e.split("/"), i = n.split("/"), r = i[i.length - 1];
    (r === ".." || r === ".") && i.push("");
    let s = t.length - 1, o, a;
    for (o = 0; o < i.length; o++) if (a = i[o], a !== ".") if (a === "..") s > 1 && s--;
    else break;
    return t.slice(0, s).join("/") + "/" + i.slice(o).join("/");
  }
  const ai = {
    path: "/",
    name: void 0,
    params: {},
    query: {},
    hash: "",
    fullPath: "/",
    matched: [],
    meta: {},
    redirectedFrom: void 0
  };
  var K0;
  (function(n) {
    n.pop = "pop", n.push = "push";
  })(K0 || (K0 = {}));
  var b0;
  (function(n) {
    n.back = "back", n.forward = "forward", n.unknown = "";
  })(b0 || (b0 = {}));
  function GA(n) {
    if (!n) if (ho) {
      const e = document.querySelector("base");
      n = e && e.getAttribute("href") || "/", n = n.replace(/^\w+:\/\/[^\/]+/, "");
    } else n = "/";
    return n[0] !== "/" && n[0] !== "#" && (n = "/" + n), UA(n);
  }
  const WA = /^[^#]+#/;
  function jA(n, e) {
    return n.replace(WA, "#") + e;
  }
  function XA(n, e) {
    const t = document.documentElement.getBoundingClientRect(), i = n.getBoundingClientRect();
    return {
      behavior: e.behavior,
      left: i.left - t.left - (e.left || 0),
      top: i.top - t.top - (e.top || 0)
    };
  }
  const wf = () => ({
    left: window.scrollX,
    top: window.scrollY
  });
  function $A(n) {
    let e;
    if ("el" in n) {
      const t = n.el, i = typeof t == "string" && t.startsWith("#"), r = typeof t == "string" ? i ? document.getElementById(t.slice(1)) : document.querySelector(t) : t;
      if (!r) return;
      e = XA(r, n);
    } else e = n;
    "scrollBehavior" in document.documentElement.style ? window.scrollTo(e) : window.scrollTo(e.left != null ? e.left : window.scrollX, e.top != null ? e.top : window.scrollY);
  }
  function em(n, e) {
    return (history.state ? history.state.position - e : -1) + n;
  }
  const _4 = /* @__PURE__ */ new Map();
  function qA(n, e) {
    _4.set(n, e);
  }
  function YA(n) {
    const e = _4.get(n);
    return _4.delete(n), e;
  }
  let KA = () => location.protocol + "//" + location.host;
  function Iv(n, e) {
    const { pathname: t, search: i, hash: r } = e, s = n.indexOf("#");
    if (s > -1) {
      let a = r.includes(n.slice(s)) ? n.slice(s).length : 1, l = r.slice(a);
      return l[0] !== "/" && (l = "/" + l), Q5(l, "");
    }
    return Q5(t, n) + i + r;
  }
  function JA(n, e, t, i) {
    let r = [], s = [], o = null;
    const a = ({ state: d }) => {
      const f = Iv(n, location), m = t.value, _ = e.value;
      let p = 0;
      if (d) {
        if (t.value = f, e.value = d, o && o === m) {
          o = null;
          return;
        }
        p = _ ? d.position - _.position : 0;
      } else i(f);
      r.forEach((g) => {
        g(t.value, m, {
          delta: p,
          type: K0.pop,
          direction: p ? p > 0 ? b0.forward : b0.back : b0.unknown
        });
      });
    };
    function l() {
      o = t.value;
    }
    function c(d) {
      r.push(d);
      const f = () => {
        const m = r.indexOf(d);
        m > -1 && r.splice(m, 1);
      };
      return s.push(f), f;
    }
    function u() {
      const { history: d } = window;
      d.state && d.replaceState(Qe({}, d.state, {
        scroll: wf()
      }), "");
    }
    function h() {
      for (const d of s) d();
      s = [], window.removeEventListener("popstate", a), window.removeEventListener("beforeunload", u);
    }
    return window.addEventListener("popstate", a), window.addEventListener("beforeunload", u, {
      passive: true
    }), {
      pauseListeners: l,
      listen: c,
      destroy: h
    };
  }
  function tm(n, e, t, i = false, r = false) {
    return {
      back: n,
      current: e,
      forward: t,
      replaced: i,
      position: window.history.length,
      scroll: r ? wf() : null
    };
  }
  function QA(n) {
    const { history: e, location: t } = window, i = {
      value: Iv(n, t)
    }, r = {
      value: e.state
    };
    r.value || s(i.value, {
      back: null,
      current: i.value,
      forward: null,
      position: e.length - 1,
      replaced: true,
      scroll: null
    }, true);
    function s(l, c, u) {
      const h = n.indexOf("#"), d = h > -1 ? (t.host && document.querySelector("base") ? n : n.slice(h)) + l : KA() + n + l;
      try {
        e[u ? "replaceState" : "pushState"](c, "", d), r.value = c;
      } catch (f) {
        console.error(f), t[u ? "replace" : "assign"](d);
      }
    }
    function o(l, c) {
      const u = Qe({}, e.state, tm(r.value.back, l, r.value.forward, true), c, {
        position: r.value.position
      });
      s(l, u, true), i.value = l;
    }
    function a(l, c) {
      const u = Qe({}, r.value, e.state, {
        forward: l,
        scroll: wf()
      });
      s(u.current, u, true);
      const h = Qe({}, tm(i.value, l, null), {
        position: u.position + 1
      }, c);
      s(l, h, false), i.value = l;
    }
    return {
      location: i,
      state: r,
      push: a,
      replace: o
    };
  }
  function ZA(n) {
    n = GA(n);
    const e = QA(n), t = JA(n, e.state, e.location, e.replace);
    function i(s, o = true) {
      o || t.pauseListeners(), history.go(s);
    }
    const r = Qe({
      location: "",
      base: n,
      go: i,
      createHref: jA.bind(null, n)
    }, e, t);
    return Object.defineProperty(r, "location", {
      enumerable: true,
      get: () => e.location.value
    }), Object.defineProperty(r, "state", {
      enumerable: true,
      get: () => e.state.value
    }), r;
  }
  function eD(n) {
    return typeof n == "string" || n && typeof n == "object";
  }
  function Fv(n) {
    return typeof n == "string" || typeof n == "symbol";
  }
  const Ov = Symbol("");
  var nm;
  (function(n) {
    n[n.aborted = 4] = "aborted", n[n.cancelled = 8] = "cancelled", n[n.duplicated = 16] = "duplicated";
  })(nm || (nm = {}));
  function ea(n, e) {
    return Qe(new Error(), {
      type: n,
      [Ov]: true
    }, e);
  }
  function n3(n, e) {
    return n instanceof Error && Ov in n && (e == null || !!(n.type & e));
  }
  const im = "[^/]+?", tD = {
    sensitive: false,
    strict: false,
    start: true,
    end: true
  }, nD = /[.+*?^${}()[\]/\\]/g;
  function iD(n, e) {
    const t = Qe({}, tD, e), i = [];
    let r = t.start ? "^" : "";
    const s = [];
    for (const c of n) {
      const u = c.length ? [] : [
        90
      ];
      t.strict && !c.length && (r += "/");
      for (let h = 0; h < c.length; h++) {
        const d = c[h];
        let f = 40 + (t.sensitive ? 0.25 : 0);
        if (d.type === 0) h || (r += "/"), r += d.value.replace(nD, "\\$&"), f += 40;
        else if (d.type === 1) {
          const { value: m, repeatable: _, optional: p, regexp: g } = d;
          s.push({
            name: m,
            repeatable: _,
            optional: p
          });
          const y = g || im;
          if (y !== im) {
            f += 10;
            try {
              new RegExp(`(${y})`);
            } catch (v) {
              throw new Error(`Invalid custom RegExp for param "${m}" (${y}): ` + v.message);
            }
          }
          let b = _ ? `((?:${y})(?:/(?:${y}))*)` : `(${y})`;
          h || (b = p && c.length < 2 ? `(?:/${b})` : "/" + b), p && (b += "?"), r += b, f += 20, p && (f += -8), _ && (f += -20), y === ".*" && (f += -50);
        }
        u.push(f);
      }
      i.push(u);
    }
    if (t.strict && t.end) {
      const c = i.length - 1;
      i[c][i[c].length - 1] += 0.7000000000000001;
    }
    t.strict || (r += "/?"), t.end ? r += "$" : t.strict && !r.endsWith("/") && (r += "(?:/|$)");
    const o = new RegExp(r, t.sensitive ? "" : "i");
    function a(c) {
      const u = c.match(o), h = {};
      if (!u) return null;
      for (let d = 1; d < u.length; d++) {
        const f = u[d] || "", m = s[d - 1];
        h[m.name] = f && m.repeatable ? f.split("/") : f;
      }
      return h;
    }
    function l(c) {
      let u = "", h = false;
      for (const d of n) {
        (!h || !u.endsWith("/")) && (u += "/"), h = false;
        for (const f of d) if (f.type === 0) u += f.value;
        else if (f.type === 1) {
          const { value: m, repeatable: _, optional: p } = f, g = m in c ? c[m] : "";
          if (yi(g) && !_) throw new Error(`Provided param "${m}" is an array but it is not repeatable (* or + modifiers)`);
          const y = yi(g) ? g.join("/") : g;
          if (!y) if (p) d.length < 2 && (u.endsWith("/") ? u = u.slice(0, -1) : h = true);
          else throw new Error(`Missing required param "${m}"`);
          u += y;
        }
      }
      return u || "/";
    }
    return {
      re: o,
      score: i,
      keys: s,
      parse: a,
      stringify: l
    };
  }
  function rD(n, e) {
    let t = 0;
    for (; t < n.length && t < e.length; ) {
      const i = e[t] - n[t];
      if (i) return i;
      t++;
    }
    return n.length < e.length ? n.length === 1 && n[0] === 80 ? -1 : 1 : n.length > e.length ? e.length === 1 && e[0] === 80 ? 1 : -1 : 0;
  }
  function kv(n, e) {
    let t = 0;
    const i = n.score, r = e.score;
    for (; t < i.length && t < r.length; ) {
      const s = rD(i[t], r[t]);
      if (s) return s;
      t++;
    }
    if (Math.abs(r.length - i.length) === 1) {
      if (rm(i)) return 1;
      if (rm(r)) return -1;
    }
    return r.length - i.length;
  }
  function rm(n) {
    const e = n[n.length - 1];
    return n.length > 0 && e[e.length - 1] < 0;
  }
  const sD = {
    type: 0,
    value: ""
  }, oD = /[a-zA-Z0-9_]/;
  function aD(n) {
    if (!n) return [
      []
    ];
    if (n === "/") return [
      [
        sD
      ]
    ];
    if (!n.startsWith("/")) throw new Error(`Invalid path "${n}"`);
    function e(f) {
      throw new Error(`ERR (${t})/"${c}": ${f}`);
    }
    let t = 0, i = t;
    const r = [];
    let s;
    function o() {
      s && r.push(s), s = [];
    }
    let a = 0, l, c = "", u = "";
    function h() {
      c && (t === 0 ? s.push({
        type: 0,
        value: c
      }) : t === 1 || t === 2 || t === 3 ? (s.length > 1 && (l === "*" || l === "+") && e(`A repeatable param (${c}) must be alone in its segment. eg: '/:ids+.`), s.push({
        type: 1,
        value: c,
        regexp: u,
        repeatable: l === "*" || l === "+",
        optional: l === "*" || l === "?"
      })) : e("Invalid state to consume buffer"), c = "");
    }
    function d() {
      c += l;
    }
    for (; a < n.length; ) {
      if (l = n[a++], l === "\\" && t !== 2) {
        i = t, t = 4;
        continue;
      }
      switch (t) {
        case 0:
          l === "/" ? (c && h(), o()) : l === ":" ? (h(), t = 1) : d();
          break;
        case 4:
          d(), t = i;
          break;
        case 1:
          l === "(" ? t = 2 : oD.test(l) ? d() : (h(), t = 0, l !== "*" && l !== "?" && l !== "+" && a--);
          break;
        case 2:
          l === ")" ? u[u.length - 1] == "\\" ? u = u.slice(0, -1) + l : t = 3 : u += l;
          break;
        case 3:
          h(), t = 0, l !== "*" && l !== "?" && l !== "+" && a--, u = "";
          break;
        default:
          e("Unknown state");
          break;
      }
    }
    return t === 2 && e(`Unfinished custom RegExp for param "${c}"`), h(), o(), r;
  }
  function lD(n, e, t) {
    const i = iD(aD(n.path), t), r = Qe(i, {
      record: n,
      parent: e,
      children: [],
      alias: []
    });
    return e && !r.record.aliasOf == !e.record.aliasOf && e.children.push(r), r;
  }
  function cD(n, e) {
    const t = [], i = /* @__PURE__ */ new Map();
    e = lm({
      strict: false,
      end: true,
      sensitive: false
    }, e);
    function r(h) {
      return i.get(h);
    }
    function s(h, d, f) {
      const m = !f, _ = om(h);
      _.aliasOf = f && f.record;
      const p = lm(e, h), g = [
        _
      ];
      if ("alias" in h) {
        const v = typeof h.alias == "string" ? [
          h.alias
        ] : h.alias;
        for (const x of v) g.push(om(Qe({}, _, {
          components: f ? f.record.components : _.components,
          path: x,
          aliasOf: f ? f.record : _
        })));
      }
      let y, b;
      for (const v of g) {
        const { path: x } = v;
        if (d && x[0] !== "/") {
          const C = d.record.path, A = C[C.length - 1] === "/" ? "" : "/";
          v.path = d.record.path + (x && A + x);
        }
        if (y = lD(v, d, p), f ? f.alias.push(y) : (b = b || y, b !== y && b.alias.push(y), m && h.name && !am(y) && o(h.name)), Nv(y) && l(y), _.children) {
          const C = _.children;
          for (let A = 0; A < C.length; A++) s(C[A], y, f && f.children[A]);
        }
        f = f || y;
      }
      return b ? () => {
        o(b);
      } : _0;
    }
    function o(h) {
      if (Fv(h)) {
        const d = i.get(h);
        d && (i.delete(h), t.splice(t.indexOf(d), 1), d.children.forEach(o), d.alias.forEach(o));
      } else {
        const d = t.indexOf(h);
        d > -1 && (t.splice(d, 1), h.record.name && i.delete(h.record.name), h.children.forEach(o), h.alias.forEach(o));
      }
    }
    function a() {
      return t;
    }
    function l(h) {
      const d = hD(h, t);
      t.splice(d, 0, h), h.record.name && !am(h) && i.set(h.record.name, h);
    }
    function c(h, d) {
      let f, m = {}, _, p;
      if ("name" in h && h.name) {
        if (f = i.get(h.name), !f) throw ea(1, {
          location: h
        });
        p = f.record.name, m = Qe(sm(d.params, f.keys.filter((b) => !b.optional).concat(f.parent ? f.parent.keys.filter((b) => b.optional) : []).map((b) => b.name)), h.params && sm(h.params, f.keys.map((b) => b.name))), _ = f.stringify(m);
      } else if (h.path != null) _ = h.path, f = t.find((b) => b.re.test(_)), f && (m = f.parse(_), p = f.record.name);
      else {
        if (f = d.name ? i.get(d.name) : t.find((b) => b.re.test(d.path)), !f) throw ea(1, {
          location: h,
          currentLocation: d
        });
        p = f.record.name, m = Qe({}, d.params, h.params), _ = f.stringify(m);
      }
      const g = [];
      let y = f;
      for (; y; ) g.unshift(y.record), y = y.parent;
      return {
        name: p,
        path: _,
        params: m,
        matched: g,
        meta: fD(g)
      };
    }
    n.forEach((h) => s(h));
    function u() {
      t.length = 0, i.clear();
    }
    return {
      addRoute: s,
      resolve: c,
      removeRoute: o,
      clearRoutes: u,
      getRoutes: a,
      getRecordMatcher: r
    };
  }
  function sm(n, e) {
    const t = {};
    for (const i of e) i in n && (t[i] = n[i]);
    return t;
  }
  function om(n) {
    const e = {
      path: n.path,
      redirect: n.redirect,
      name: n.name,
      meta: n.meta || {},
      aliasOf: n.aliasOf,
      beforeEnter: n.beforeEnter,
      props: uD(n),
      children: n.children || [],
      instances: {},
      leaveGuards: /* @__PURE__ */ new Set(),
      updateGuards: /* @__PURE__ */ new Set(),
      enterCallbacks: {},
      components: "components" in n ? n.components || null : n.component && {
        default: n.component
      }
    };
    return Object.defineProperty(e, "mods", {
      value: {}
    }), e;
  }
  function uD(n) {
    const e = {}, t = n.props || false;
    if ("component" in n) e.default = t;
    else for (const i in n.components) e[i] = typeof t == "object" ? t[i] : t;
    return e;
  }
  function am(n) {
    for (; n; ) {
      if (n.record.aliasOf) return true;
      n = n.parent;
    }
    return false;
  }
  function fD(n) {
    return n.reduce((e, t) => Qe(e, t.meta), {});
  }
  function lm(n, e) {
    const t = {};
    for (const i in n) t[i] = i in e ? e[i] : n[i];
    return t;
  }
  function hD(n, e) {
    let t = 0, i = e.length;
    for (; t !== i; ) {
      const s = t + i >> 1;
      kv(n, e[s]) < 0 ? i = s : t = s + 1;
    }
    const r = dD(n);
    return r && (i = e.lastIndexOf(r, i - 1)), i;
  }
  function dD(n) {
    let e = n;
    for (; e = e.parent; ) if (Nv(e) && kv(n, e) === 0) return e;
  }
  function Nv({ record: n }) {
    return !!(n.name || n.components && Object.keys(n.components).length || n.redirect);
  }
  function pD(n) {
    const e = {};
    if (n === "" || n === "?") return e;
    const i = (n[0] === "?" ? n.slice(1) : n).split("&");
    for (let r = 0; r < i.length; ++r) {
      const s = i[r].replace(Av, " "), o = s.indexOf("="), a = Y0(o < 0 ? s : s.slice(0, o)), l = o < 0 ? null : Y0(s.slice(o + 1));
      if (a in e) {
        let c = e[a];
        yi(c) || (c = e[a] = [
          c
        ]), c.push(l);
      } else e[a] = l;
    }
    return e;
  }
  function cm(n) {
    let e = "";
    for (let t in n) {
      const i = n[t];
      if (t = FA(t), i == null) {
        i !== void 0 && (e += (e.length ? "&" : "") + t);
        continue;
      }
      (yi(i) ? i.map((s) => s && g4(s)) : [
        i && g4(i)
      ]).forEach((s) => {
        s !== void 0 && (e += (e.length ? "&" : "") + t, s != null && (e += "=" + s));
      });
    }
    return e;
  }
  function mD(n) {
    const e = {};
    for (const t in n) {
      const i = n[t];
      i !== void 0 && (e[t] = yi(i) ? i.map((r) => r == null ? null : "" + r) : i == null ? i : "" + i);
    }
    return e;
  }
  const gD = Symbol(""), um = Symbol(""), Fp = Symbol(""), Op = Symbol(""), b4 = Symbol("");
  function La() {
    let n = [];
    function e(i) {
      return n.push(i), () => {
        const r = n.indexOf(i);
        r > -1 && n.splice(r, 1);
      };
    }
    function t() {
      n = [];
    }
    return {
      add: e,
      list: () => n.slice(),
      reset: t
    };
  }
  function tr(n, e, t, i, r, s = (o) => o()) {
    const o = i && (i.enterCallbacks[r] = i.enterCallbacks[r] || []);
    return () => new Promise((a, l) => {
      const c = (d) => {
        d === false ? l(ea(4, {
          from: t,
          to: e
        })) : d instanceof Error ? l(d) : eD(d) ? l(ea(2, {
          from: e,
          to: d
        })) : (o && i.enterCallbacks[r] === o && typeof d == "function" && o.push(d), a());
      }, u = s(() => n.call(i && i.instances[r], e, t, c));
      let h = Promise.resolve(u);
      n.length < 3 && (h = h.then(c)), h.catch((d) => l(d));
    });
  }
  function ph(n, e, t, i, r = (s) => s()) {
    const s = [];
    for (const o of n) for (const a in o.components) {
      let l = o.components[a];
      if (!(e !== "beforeRouteEnter" && !o.instances[a])) if (Tv(l)) {
        const u = (l.__vccOpts || l)[e];
        u && s.push(tr(u, t, i, o, a, r));
      } else {
        let c = l();
        s.push(() => c.then((u) => {
          if (!u) throw new Error(`Couldn't resolve component "${a}" at "${o.path}"`);
          const h = EA(u) ? u.default : u;
          o.mods[a] = u, o.components[a] = h;
          const f = (h.__vccOpts || h)[e];
          return f && tr(f, t, i, o, a, r)();
        }));
      }
    }
    return s;
  }
  function fm(n) {
    const e = fn(Fp), t = fn(Op), i = qe(() => {
      const l = Pe(n.to);
      return e.resolve(l);
    }), r = qe(() => {
      const { matched: l } = i.value, { length: c } = l, u = l[c - 1], h = t.matched;
      if (!u || !h.length) return -1;
      const d = h.findIndex(Zo.bind(null, u));
      if (d > -1) return d;
      const f = hm(l[c - 2]);
      return c > 1 && hm(u) === f && h[h.length - 1].path !== f ? h.findIndex(Zo.bind(null, l[c - 2])) : d;
    }), s = qe(() => r.value > -1 && xD(t.params, i.value.params)), o = qe(() => r.value > -1 && r.value === t.matched.length - 1 && Lv(t.params, i.value.params));
    function a(l = {}) {
      if (yD(l)) {
        const c = e[Pe(n.replace) ? "replace" : "push"](Pe(n.to)).catch(_0);
        return n.viewTransition && typeof document < "u" && "startViewTransition" in document && document.startViewTransition(() => c), c;
      }
      return Promise.resolve();
    }
    return {
      route: i,
      href: qe(() => i.value.href),
      isActive: s,
      isExactActive: o,
      navigate: a
    };
  }
  function _D(n) {
    return n.length === 1 ? n[0] : n;
  }
  const bD = xi({
    name: "RouterLink",
    compatConfig: {
      MODE: 3
    },
    props: {
      to: {
        type: [
          String,
          Object
        ],
        required: true
      },
      replace: Boolean,
      activeClass: String,
      exactActiveClass: String,
      custom: Boolean,
      ariaCurrentValue: {
        type: String,
        default: "page"
      }
    },
    useLink: fm,
    setup(n, { slots: e }) {
      const t = k2(fm(n)), { options: i } = fn(Fp), r = qe(() => ({
        [dm(n.activeClass, i.linkActiveClass, "router-link-active")]: t.isActive,
        [dm(n.exactActiveClass, i.linkExactActiveClass, "router-link-exact-active")]: t.isExactActive
      }));
      return () => {
        const s = e.default && _D(e.default(t));
        return n.custom ? s : Xt("a", {
          "aria-current": t.isExactActive ? n.ariaCurrentValue : null,
          href: t.href,
          onClick: t.navigate,
          class: r.value
        }, s);
      };
    }
  }), vD = bD;
  function yD(n) {
    if (!(n.metaKey || n.altKey || n.ctrlKey || n.shiftKey) && !n.defaultPrevented && !(n.button !== void 0 && n.button !== 0)) {
      if (n.currentTarget && n.currentTarget.getAttribute) {
        const e = n.currentTarget.getAttribute("target");
        if (/\b_blank\b/i.test(e)) return;
      }
      return n.preventDefault && n.preventDefault(), true;
    }
  }
  function xD(n, e) {
    for (const t in e) {
      const i = e[t], r = n[t];
      if (typeof i == "string") {
        if (i !== r) return false;
      } else if (!yi(r) || r.length !== i.length || i.some((s, o) => s !== r[o])) return false;
    }
    return true;
  }
  function hm(n) {
    return n ? n.aliasOf ? n.aliasOf.path : n.path : "";
  }
  const dm = (n, e, t) => n ?? e ?? t, SD = xi({
    name: "RouterView",
    inheritAttrs: false,
    props: {
      name: {
        type: String,
        default: "default"
      },
      route: Object
    },
    compatConfig: {
      MODE: 3
    },
    setup(n, { attrs: e, slots: t }) {
      const i = fn(b4), r = qe(() => n.route || i.value), s = fn(um, 0), o = qe(() => {
        let c = Pe(s);
        const { matched: u } = r.value;
        let h;
        for (; (h = u[c]) && !h.components; ) c++;
        return c;
      }), a = qe(() => r.value.matched[o.value]);
      gr(um, qe(() => o.value + 1)), gr(gD, a), gr(b4, r);
      const l = vn();
      return je(() => [
        l.value,
        a.value,
        n.name
      ], ([c, u, h], [d, f, m]) => {
        u && (u.instances[h] = c, f && f !== u && c && c === d && (u.leaveGuards.size || (u.leaveGuards = f.leaveGuards), u.updateGuards.size || (u.updateGuards = f.updateGuards))), c && u && (!f || !Zo(u, f) || !d) && (u.enterCallbacks[h] || []).forEach((_) => _(c));
      }, {
        flush: "post"
      }), () => {
        const c = r.value, u = n.name, h = a.value, d = h && h.components[u];
        if (!d) return pm(t.default, {
          Component: d,
          route: c
        });
        const f = h.props[u], m = f ? f === true ? c.params : typeof f == "function" ? f(c) : f : null, p = Xt(d, Qe({}, m, e, {
          onVnodeUnmounted: (g) => {
            g.component.isUnmounted && (h.instances[u] = null);
          },
          ref: l
        }));
        return pm(t.default, {
          Component: p,
          route: c
        }) || p;
      };
    }
  });
  function pm(n, e) {
    if (!n) return null;
    const t = n(e);
    return t.length === 1 ? t[0] : t;
  }
  const Uv = SD;
  function ED(n) {
    const e = cD(n.routes, n), t = n.parseQuery || pD, i = n.stringifyQuery || cm, r = n.history, s = La(), o = La(), a = La(), l = pe(ai);
    let c = ai;
    ho && n.scrollBehavior && "scrollRestoration" in history && (history.scrollRestoration = "manual");
    const u = hh.bind(null, (W) => "" + W), h = hh.bind(null, kA), d = hh.bind(null, Y0);
    function f(W, r1) {
      let v1, S1;
      return Fv(W) ? (v1 = e.getRecordMatcher(W), S1 = r1) : S1 = W, e.addRoute(S1, v1);
    }
    function m(W) {
      const r1 = e.getRecordMatcher(W);
      r1 && e.removeRoute(r1);
    }
    function _() {
      return e.getRoutes().map((W) => W.record);
    }
    function p(W) {
      return !!e.getRecordMatcher(W);
    }
    function g(W, r1) {
      if (r1 = Qe({}, r1 || l.value), typeof W == "string") {
        const T = dh(t, W, r1.path), e1 = e.resolve({
          path: T.path
        }, r1), _1 = r.createHref(T.fullPath);
        return Qe(T, e1, {
          params: d(e1.params),
          hash: Y0(T.hash),
          redirectedFrom: void 0,
          href: _1
        });
      }
      let v1;
      if (W.path != null) v1 = Qe({}, W, {
        path: dh(t, W.path, r1.path).path
      });
      else {
        const T = Qe({}, W.params);
        for (const e1 in T) T[e1] == null && delete T[e1];
        v1 = Qe({}, W, {
          params: h(T)
        }), r1.params = h(r1.params);
      }
      const S1 = e.resolve(v1, r1), z1 = W.hash || "";
      S1.params = u(d(S1.params));
      const Z1 = BA(i, Qe({}, W, {
        hash: IA(z1),
        path: S1.path
      })), F = r.createHref(Z1);
      return Qe({
        fullPath: Z1,
        hash: z1,
        query: i === cm ? mD(W.query) : W.query || {}
      }, S1, {
        redirectedFrom: void 0,
        href: F
      });
    }
    function y(W) {
      return typeof W == "string" ? dh(t, W, l.value.path) : Qe({}, W);
    }
    function b(W, r1) {
      if (c !== W) return ea(8, {
        from: r1,
        to: W
      });
    }
    function v(W) {
      return A(W);
    }
    function x(W) {
      return v(Qe(y(W), {
        replace: true
      }));
    }
    function C(W) {
      const r1 = W.matched[W.matched.length - 1];
      if (r1 && r1.redirect) {
        const { redirect: v1 } = r1;
        let S1 = typeof v1 == "function" ? v1(W) : v1;
        return typeof S1 == "string" && (S1 = S1.includes("?") || S1.includes("#") ? S1 = y(S1) : {
          path: S1
        }, S1.params = {}), Qe({
          query: W.query,
          hash: W.hash,
          params: S1.path != null ? {} : W.params
        }, S1);
      }
    }
    function A(W, r1) {
      const v1 = c = g(W), S1 = l.value, z1 = W.state, Z1 = W.force, F = W.replace === true, T = C(v1);
      if (T) return A(Qe(y(T), {
        state: typeof T == "object" ? Qe({}, z1, T.state) : z1,
        force: Z1,
        replace: F
      }), r1 || v1);
      const e1 = v1;
      e1.redirectedFrom = r1;
      let _1;
      return !Z1 && HA(i, S1, v1) && (_1 = ea(16, {
        to: e1,
        from: S1
      }), w1(S1, S1, true, false)), (_1 ? Promise.resolve(_1) : E(e1, S1)).catch((B) => n3(B) ? n3(B, 2) ? B : V(B) : G(B, e1, S1)).then((B) => {
        if (B) {
          if (n3(B, 2)) return A(Qe({
            replace: F
          }, y(B.to), {
            state: typeof B.to == "object" ? Qe({}, z1, B.to.state) : z1,
            force: Z1
          }), r1 || e1);
        } else B = k(e1, S1, true, F, z1);
        return I(e1, S1, B), B;
      });
    }
    function P(W, r1) {
      const v1 = b(W, r1);
      return v1 ? Promise.reject(v1) : Promise.resolve();
    }
    function M(W) {
      const r1 = Z.values().next().value;
      return r1 && typeof r1.runWithContext == "function" ? r1.runWithContext(W) : W();
    }
    function E(W, r1) {
      let v1;
      const [S1, z1, Z1] = wD(W, r1);
      v1 = ph(S1.reverse(), "beforeRouteLeave", W, r1);
      for (const T of S1) T.leaveGuards.forEach((e1) => {
        v1.push(tr(e1, W, r1));
      });
      const F = P.bind(null, W, r1);
      return v1.push(F), M1(v1).then(() => {
        v1 = [];
        for (const T of s.list()) v1.push(tr(T, W, r1));
        return v1.push(F), M1(v1);
      }).then(() => {
        v1 = ph(z1, "beforeRouteUpdate", W, r1);
        for (const T of z1) T.updateGuards.forEach((e1) => {
          v1.push(tr(e1, W, r1));
        });
        return v1.push(F), M1(v1);
      }).then(() => {
        v1 = [];
        for (const T of Z1) if (T.beforeEnter) if (yi(T.beforeEnter)) for (const e1 of T.beforeEnter) v1.push(tr(e1, W, r1));
        else v1.push(tr(T.beforeEnter, W, r1));
        return v1.push(F), M1(v1);
      }).then(() => (W.matched.forEach((T) => T.enterCallbacks = {}), v1 = ph(Z1, "beforeRouteEnter", W, r1, M), v1.push(F), M1(v1))).then(() => {
        v1 = [];
        for (const T of o.list()) v1.push(tr(T, W, r1));
        return v1.push(F), M1(v1);
      }).catch((T) => n3(T, 8) ? T : Promise.reject(T));
    }
    function I(W, r1, v1) {
      a.list().forEach((S1) => M(() => S1(W, r1, v1)));
    }
    function k(W, r1, v1, S1, z1) {
      const Z1 = b(W, r1);
      if (Z1) return Z1;
      const F = r1 === ai, T = ho ? history.state : {};
      v1 && (S1 || F ? r.replace(W.fullPath, Qe({
        scroll: F && T && T.scroll
      }, z1)) : r.push(W.fullPath, z1)), l.value = W, w1(W, r1, v1, F), V();
    }
    let H;
    function K() {
      H || (H = r.listen((W, r1, v1) => {
        if (!f1.listening) return;
        const S1 = g(W), z1 = C(S1);
        if (z1) {
          A(Qe(z1, {
            replace: true,
            force: true
          }), S1).catch(_0);
          return;
        }
        c = S1;
        const Z1 = l.value;
        ho && qA(em(Z1.fullPath, v1.delta), wf()), E(S1, Z1).catch((F) => n3(F, 12) ? F : n3(F, 2) ? (A(Qe(y(F.to), {
          force: true
        }), S1).then((T) => {
          n3(T, 20) && !v1.delta && v1.type === K0.pop && r.go(-1, false);
        }).catch(_0), Promise.reject()) : (v1.delta && r.go(-v1.delta, false), G(F, S1, Z1))).then((F) => {
          F = F || k(S1, Z1, false), F && (v1.delta && !n3(F, 8) ? r.go(-v1.delta, false) : v1.type === K0.pop && n3(F, 20) && r.go(-1, false)), I(S1, Z1, F);
        }).catch(_0);
      }));
    }
    let J = La(), z = La(), $;
    function G(W, r1, v1) {
      V(W);
      const S1 = z.list();
      return S1.length ? S1.forEach((z1) => z1(W, r1, v1)) : console.error(W), Promise.reject(W);
    }
    function Q() {
      return $ && l.value !== ai ? Promise.resolve() : new Promise((W, r1) => {
        J.add([
          W,
          r1
        ]);
      });
    }
    function V(W) {
      return $ || ($ = !W, K(), J.list().forEach(([r1, v1]) => W ? v1(W) : r1()), J.reset()), W;
    }
    function w1(W, r1, v1, S1) {
      const { scrollBehavior: z1 } = n;
      if (!ho || !z1) return Promise.resolve();
      const Z1 = !v1 && YA(em(W.fullPath, 0)) || (S1 || !v1) && history.state && history.state.scroll || null;
      return e2().then(() => z1(W, r1, Z1)).then((F) => F && $A(F)).catch((F) => G(F, W, r1));
    }
    const m1 = (W) => r.go(W);
    let I1;
    const Z = /* @__PURE__ */ new Set(), f1 = {
      currentRoute: l,
      listening: true,
      addRoute: f,
      removeRoute: m,
      clearRoutes: e.clearRoutes,
      hasRoute: p,
      getRoutes: _,
      resolve: g,
      options: n,
      push: v,
      replace: x,
      go: m1,
      back: () => m1(-1),
      forward: () => m1(1),
      beforeEach: s.add,
      beforeResolve: o.add,
      afterEach: a.add,
      onError: z.add,
      isReady: Q,
      install(W) {
        const r1 = this;
        W.component("RouterLink", vD), W.component("RouterView", Uv), W.config.globalProperties.$router = r1, Object.defineProperty(W.config.globalProperties, "$route", {
          enumerable: true,
          get: () => Pe(l)
        }), ho && !I1 && l.value === ai && (I1 = true, v(r.location).catch((z1) => {
        }));
        const v1 = {};
        for (const z1 in ai) Object.defineProperty(v1, z1, {
          get: () => l.value[z1],
          enumerable: true
        });
        W.provide(Fp, r1), W.provide(Op, y3(v1)), W.provide(b4, l);
        const S1 = W.unmount;
        Z.add(W), W.unmount = function() {
          Z.delete(W), Z.size < 1 && (c = ai, H && H(), H = null, l.value = ai, I1 = false, $ = false), S1();
        };
      }
    };
    function M1(W) {
      return W.reduce((r1, v1) => r1.then(() => M(v1)), Promise.resolve());
    }
    return f1;
  }
  function wD(n, e) {
    const t = [], i = [], r = [], s = Math.max(e.matched.length, n.matched.length);
    for (let o = 0; o < s; o++) {
      const a = e.matched[o];
      a && (n.matched.find((c) => Zo(c, a)) ? i.push(a) : t.push(a));
      const l = n.matched[o];
      l && (e.matched.find((c) => Zo(c, l)) || r.push(l));
    }
    return [
      t,
      i,
      r
    ];
  }
  function MD(n) {
    return fn(Op);
  }
  const TD = /(:\w+)\([^)]+\)/g, CD = /(:\w+)[?+*]/g, AD = /:\w+/g, DD = (n, e) => e.path.replace(TD, "$1").replace(CD, "$1").replace(AD, (t) => {
    var _a2;
    return ((_a2 = n.params[t.slice(1)]) == null ? void 0 : _a2.toString()) || "";
  }), v4 = (n, e) => {
    const t = n.route.matched.find((r) => {
      var _a2;
      return ((_a2 = r.components) == null ? void 0 : _a2.default) === n.Component.type;
    }), i = e ?? (t == null ? void 0 : t.meta.key) ?? (t && DD(n.route, t));
    return typeof i == "function" ? i(n.route) : i;
  }, RD = (n, e) => ({
    default: () => n ? Xt(xw, n === true ? {} : n, e) : e
  });
  function kp(n) {
    return Array.isArray(n) ? n : [
      n
    ];
  }
  const mh = [
    {
      name: "index",
      path: "/",
      component: () => Gt(() => import("./Ce9-8Jfa.js").then(async (m) => {
        await m.__tla;
        return m;
      }).then((n) => n.i), __vite__mapDeps([0,1,2,3,4,5,6,7,8,9]), import.meta.url)
    },
    {
      name: "baloon",
      path: "/baloon",
      component: () => Gt(() => import("./BgOK5k-N.js").then(async (m) => {
        await m.__tla;
        return m;
      }), __vite__mapDeps([10,1,3,11]), import.meta.url)
    },
    {
      name: "circle",
      path: "/circle",
      component: () => Gt(() => import("./D44WRN35.js"), __vite__mapDeps([12,5,1,3,6]), import.meta.url)
    },
    {
      name: "asterisk",
      path: "/asterisk",
      component: () => Gt(() => import("./CnW5UN0w.js").then(async (m) => {
        await m.__tla;
        return m;
      }), __vite__mapDeps([13,1,3,14]), import.meta.url)
    },
    {
      name: "attraction",
      path: "/attraction",
      component: () => Gt(() => import("./ihraz-Rx.js"), __vite__mapDeps([15,16]), import.meta.url)
    },
    {
      name: "baloon-offscreen",
      path: "/baloon-offscreen",
      component: () => Gt(() => import("./DIHJwgKc.js"), __vite__mapDeps([17,7,3,8]), import.meta.url)
    },
    {
      name: "asterisk-offscreen",
      path: "/asterisk-offscreen",
      component: () => Gt(() => import("./BsgAUN5Y.js"), __vite__mapDeps([18,2,3,4]), import.meta.url)
    }
  ], Bv = (n, e) => ({
    default: () => {
      var _a2;
      return n ? Xt(wp, n === true ? {} : n, e) : (_a2 = e.default) == null ? void 0 : _a2.call(e);
    }
  }), PD = /(:\w+)\([^)]+\)/g, LD = /(:\w+)[?+*]/g, ID = /:\w+/g;
  function mm(n) {
    const e = (n == null ? void 0 : n.meta.key) ?? n.path.replace(PD, "$1").replace(LD, "$1").replace(ID, (t) => {
      var _a2;
      return ((_a2 = n.params[t.slice(1)]) == null ? void 0 : _a2.toString()) || "";
    });
    return typeof e == "function" ? e(n) : e;
  }
  function FD(n, e) {
    return n === e || e === ai ? false : mm(n) !== mm(e) ? true : !n.matched.every((i, r) => {
      var _a2, _b2;
      return i.components && i.components.default === ((_b2 = (_a2 = e.matched[r]) == null ? void 0 : _a2.components) == null ? void 0 : _b2.default);
    });
  }
  const OD = {
    scrollBehavior(n, e, t) {
      var _a2;
      const i = At(), r = ((_a2 = On().options) == null ? void 0 : _a2.scrollBehaviorType) ?? "auto";
      let s = t || void 0;
      const o = typeof n.meta.scrollToTop == "function" ? n.meta.scrollToTop(n, e) : n.meta.scrollToTop;
      if (!s && e && n && o !== false && FD(n, e) && (s = {
        left: 0,
        top: 0
      }), n.path === e.path) return e.hash && !n.hash ? {
        left: 0,
        top: 0
      } : n.hash ? {
        el: n.hash,
        top: Hv(n.hash),
        behavior: r
      } : false;
      const a = (c) => !!(c.meta.pageTransition ?? a4), l = a(e) && a(n) ? "page:transition:finish" : "page:loading:end";
      return new Promise((c) => {
        i.hooks.hookOnce(l, () => {
          requestAnimationFrame(() => c(kD(n, "instant", s)));
        });
      });
    }
  };
  function Hv(n) {
    try {
      const e = document.querySelector(n);
      if (e) return (Number.parseFloat(getComputedStyle(e).scrollMarginTop) || 0) + (Number.parseFloat(getComputedStyle(document.documentElement).scrollPaddingTop) || 0);
    } catch {
    }
    return 0;
  }
  function kD(n, e, t) {
    return t || (n.hash ? {
      el: n.hash,
      top: Hv(n.hash),
      behavior: e
    } : {
      left: 0,
      top: 0,
      behavior: e
    });
  }
  const ND = {
    hashMode: false,
    scrollBehaviorType: "auto"
  }, wi = {
    ...ND,
    ...OD
  }, UD = async (n) => {
    var _a2;
    let e, t;
    if (!((_a2 = n.meta) == null ? void 0 : _a2.validate)) return;
    const i = At(), r = On(), s = ([e, t] = Io(() => Promise.resolve(n.meta.validate(n))), e = await e, t(), e);
    if (s === true) return;
    const o = Sf({
      statusCode: s && s.statusCode || 404,
      statusMessage: s && s.statusMessage || `Page Not Found: ${n.fullPath}`,
      data: {
        path: n.fullPath
      }
    }), a = r.beforeResolve((l) => {
      if (a(), l === n) {
        const c = r.afterEach(async () => {
          c(), await i.runWithContext(() => Z3(o)), window == null ? void 0 : window.history.pushState({}, "", n.fullPath);
        });
        return false;
      }
    });
  }, BD = async (n) => {
    let e, t;
    const i = ([e, t] = Io(() => Pp({
      path: n.path
    })), e = await e, t(), e);
    if (i.redirect) return k3(i.redirect, {
      acceptRelative: true
    }) ? (window.location.href = i.redirect, false) : i.redirect;
  }, HD = [
    UD,
    BD
  ], y4 = {};
  function zD(n, e, t) {
    const { pathname: i, search: r, hash: s } = e, o = n.indexOf("#");
    if (o > -1) {
      const c = s.includes(n.slice(o)) ? n.slice(o).length : 1;
      let u = s.slice(c);
      return u[0] !== "/" && (u = "/" + u), L5(u, "");
    }
    const a = L5(i, n), l = !t || yT(a, t, {
      trailingSlash: true
    }) ? a : t;
    return l + (l.includes("?") ? "" : r) + s;
  }
  const VD = ei({
    name: "nuxt:router",
    enforce: "pre",
    async setup(n) {
      var _a2;
      let e, t, i = Ns().app.baseURL;
      const r = ((_a2 = wi.history) == null ? void 0 : _a2.call(wi, i)) ?? ZA(i), s = wi.routes ? ([e, t] = Io(() => wi.routes(mh)), e = await e, t(), e ?? mh) : mh;
      let o;
      const a = ED({
        ...wi,
        scrollBehavior: (p, g, y) => {
          if (g === ai) {
            o = y;
            return;
          }
          if (wi.scrollBehavior) {
            if (a.options.scrollBehavior = wi.scrollBehavior, "scrollRestoration" in window.history) {
              const b = a.beforeEach(() => {
                b(), window.history.scrollRestoration = "manual";
              });
            }
            return wi.scrollBehavior(p, ai, o || y);
          }
        },
        history: r,
        routes: s
      });
      wi.routes && wi.routes, "scrollRestoration" in window.history && (window.history.scrollRestoration = "auto"), n.vueApp.use(a);
      const l = pe(a.currentRoute.value);
      a.afterEach((p, g) => {
        l.value = g;
      }), Object.defineProperty(n.vueApp.config.globalProperties, "previousRoute", {
        get: () => l.value
      });
      const c = zD(i, window.location, n.payload.path), u = pe(a.currentRoute.value), h = () => {
        u.value = a.currentRoute.value;
      };
      n.hook("page:finish", h), a.afterEach((p, g) => {
        var _a3, _b2, _c2, _d2;
        ((_b2 = (_a3 = p.matched[0]) == null ? void 0 : _a3.components) == null ? void 0 : _b2.default) === ((_d2 = (_c2 = g.matched[0]) == null ? void 0 : _c2.components) == null ? void 0 : _d2.default) && h();
      });
      const d = {};
      for (const p in u.value) Object.defineProperty(d, p, {
        get: () => u.value[p],
        enumerable: true
      });
      n._route = y3(d), n._middleware || (n._middleware = {
        global: [],
        named: {}
      });
      const f = xf();
      a.afterEach(async (p, g, y) => {
        delete n._processingMiddleware, !n.isHydrating && f.value && await n.runWithContext(gC), y && await n.callHook("page:loading:end");
      });
      try {
        [e, t] = Io(() => a.isReady()), await e, t();
      } catch (p) {
        [e, t] = Io(() => n.runWithContext(() => Z3(p))), await e, t();
      }
      const m = c !== a.currentRoute.value.fullPath ? a.resolve(c) : a.currentRoute.value;
      h();
      const _ = n.payload.state._layout;
      return a.beforeEach(async (p, g) => {
        var _a3;
        await n.callHook("page:loading:start"), p.meta = k2(p.meta), n.isHydrating && _ && !Er(p.meta.layout) && (p.meta.layout = _), n._processingMiddleware = true;
        {
          const y = /* @__PURE__ */ new Set([
            ...HD,
            ...n._middleware.global
          ]);
          for (const b of p.matched) {
            const v = b.meta.middleware;
            if (v) for (const x of kp(v)) y.add(x);
          }
          {
            const b = await n.runWithContext(() => Pp({
              path: p.path
            }));
            if (b.appMiddleware) for (const v in b.appMiddleware) b.appMiddleware[v] ? y.add(v) : y.delete(v);
          }
          for (const b of y) {
            const v = typeof b == "string" ? n._middleware.named[b] || await ((_a3 = y4[b]) == null ? void 0 : _a3.call(y4).then((x) => x.default || x)) : b;
            if (!v) throw new Error(`Unknown route middleware: '${b}'.`);
            try {
              const x = await n.runWithContext(() => v(p, g));
              if (!n.payload.serverRendered && n.isHydrating && (x === false || x instanceof Error)) {
                const C = x || zc({
                  statusCode: 404,
                  statusMessage: `Page Not Found: ${c}`
                });
                return await n.runWithContext(() => Z3(C)), false;
              }
              if (x === true) continue;
              if (x === false) return x;
              if (x) return mv(x) && x.fatal && await n.runWithContext(() => Z3(x)), x;
            } catch (x) {
              const C = zc(x);
              return C.fatal && await n.runWithContext(() => Z3(C)), C;
            }
          }
        }
      }), a.onError(async () => {
        delete n._processingMiddleware, await n.callHook("page:loading:end");
      }), a.afterEach(async (p, g) => {
        p.matched.length === 0 && await n.runWithContext(() => Z3(zc({
          statusCode: 404,
          fatal: false,
          statusMessage: `Page not found: ${p.fullPath}`,
          data: {
            path: p.fullPath
          }
        })));
      }), n.hooks.hookOnce("app:created", async () => {
        try {
          "name" in m && (m.name = void 0), await a.replace({
            ...m,
            force: true
          }), a.options.scrollBehavior = wi.scrollBehavior;
        } catch (p) {
          await n.runWithContext(() => Z3(p));
        }
      }), {
        provide: {
          router: a
        }
      };
    }
  }), x4 = globalThis.requestIdleCallback || ((n) => {
    const e = Date.now(), t = {
      didTimeout: false,
      timeRemaining: () => Math.max(0, 50 - (Date.now() - e))
    };
    return setTimeout(() => {
      n(t);
    }, 1);
  }), GD = globalThis.cancelIdleCallback || ((n) => {
    clearTimeout(n);
  }), Mf = (n) => {
    const e = At();
    e.isHydrating ? e.hooks.hookOnce("app:suspense:resolve", () => {
      x4(() => n());
    }) : x4(() => n());
  }, WD = ei({
    name: "nuxt:payload",
    setup(n) {
      const e = /* @__PURE__ */ new Set();
      On().beforeResolve(async (t, i) => {
        if (t.path === i.path) return;
        const r = await J5(t.path);
        if (r) {
          for (const s of e) delete n.static.data[s];
          for (const s in r.data) s in n.static.data || e.add(s), n.static.data[s] = r.data[s];
        }
      }), Mf(() => {
        var _a2;
        n.hooks.hook("link:prefetch", async (t) => {
          const { hostname: i } = new URL(t, window.location.href);
          i === window.location.hostname && await J5(t).catch(() => {
            console.warn("[nuxt] Error preloading payload for", t);
          });
        }), ((_a2 = navigator.connection) == null ? void 0 : _a2.effectiveType) !== "slow-2g" && setTimeout(Ef, 1e3);
      });
    }
  }), jD = ei(() => {
    const n = On();
    Mf(() => {
      n.beforeResolve(async () => {
        await new Promise((e) => {
          setTimeout(e, 100), requestAnimationFrame(() => {
            setTimeout(e, 0);
          });
        });
      });
    });
  }), XD = ei((n) => {
    let e;
    async function t() {
      const i = await Ef();
      e && clearTimeout(e), e = setTimeout(t, N5);
      try {
        const r = await $fetch(Cp("builds/latest.json") + `?${Date.now()}`);
        r.id !== i.id && n.hooks.callHook("app:manifest:update", r);
      } catch {
      }
    }
    Mf(() => {
      e = setTimeout(t, N5);
    });
  });
  function $D(n = {}) {
    const e = n.path || window.location.pathname;
    let t = {};
    try {
      t = wu(sessionStorage.getItem("nuxt:reload") || "{}");
    } catch {
    }
    if (n.force || (t == null ? void 0 : t.path) !== e || (t == null ? void 0 : t.expires) < Date.now()) {
      try {
        sessionStorage.setItem("nuxt:reload", JSON.stringify({
          path: e,
          expires: Date.now() + (n.ttl ?? 1e4)
        }));
      } catch {
      }
      if (n.persistState) try {
        sessionStorage.setItem("nuxt:reload:state", JSON.stringify({
          state: At().payload.state
        }));
      } catch {
      }
      window.location.pathname !== e ? window.location.href = e : window.location.reload();
    }
  }
  const qD = ei({
    name: "nuxt:chunk-reload",
    setup(n) {
      const e = On(), t = Ns(), i = /* @__PURE__ */ new Set();
      e.beforeEach(() => {
        i.clear();
      }), n.hook("app:chunkError", ({ error: s }) => {
        i.add(s);
      });
      function r(s) {
        const a = "href" in s && s.href[0] === "#" ? t.app.baseURL + s.href : yf(t.app.baseURL, s.fullPath);
        $D({
          path: a,
          persistState: true
        });
      }
      n.hook("app:manifest:update", () => {
        e.beforeResolve(r);
      }), e.onError((s, o) => {
        i.has(s) && r(o);
      });
    }
  });
  async function zv(n, e = On()) {
    const { path: t, matched: i } = e.resolve(n);
    if (!i.length || (e._routePreloaded || (e._routePreloaded = /* @__PURE__ */ new Set()), e._routePreloaded.has(t))) return;
    const r = e._preloadPromises || (e._preloadPromises = []);
    if (r.length > 4) return Promise.all(r).then(() => zv(n, e));
    e._routePreloaded.add(t);
    const s = i.map((o) => {
      var _a2;
      return (_a2 = o.components) == null ? void 0 : _a2.default;
    }).filter((o) => typeof o == "function");
    for (const o of s) {
      const a = Promise.resolve(o()).catch(() => {
      }).finally(() => r.splice(r.indexOf(a)));
      r.push(a);
    }
    await Promise.all(r);
  }
  const YD = (...n) => n.find((e) => e !== void 0);
  function KD(n) {
    const e = n.componentName || "NuxtLink";
    function t(s) {
      return typeof s == "string" && s.startsWith("#");
    }
    function i(s, o) {
      if (!s || n.trailingSlash !== "append" && n.trailingSlash !== "remove") return s;
      if (typeof s == "string") return gm(s, n.trailingSlash);
      const a = "path" in s && s.path !== void 0 ? s.path : o(s).path;
      return {
        ...s,
        name: void 0,
        path: gm(a, n.trailingSlash)
      };
    }
    function r(s) {
      const o = On(), a = Ns(), l = qe(() => !!s.target && s.target !== "_self"), c = qe(() => {
        const p = s.to || s.href || "";
        return typeof p == "string" && k3(p, {
          acceptRelative: true
        });
      }), u = t5("RouterLink"), h = typeof u != "string" ? u.useLink : void 0, d = qe(() => {
        if (s.external) return true;
        const p = s.to || s.href || "";
        return typeof p == "object" ? false : p === "" || c.value;
      }), f = qe(() => {
        const p = s.to || s.href || "";
        return d.value ? p : i(p, o.resolve);
      }), m = d.value ? void 0 : h == null ? void 0 : h({
        ...s,
        to: f
      }), _ = qe(() => {
        var _a2;
        if (!f.value || c.value || t(f.value)) return f.value;
        if (d.value) {
          const p = typeof f.value == "object" && "path" in f.value ? u4(f.value) : f.value, g = typeof p == "object" ? o.resolve(p).href : p;
          return i(g, o.resolve);
        }
        return typeof f.value == "object" ? ((_a2 = o.resolve(f.value)) == null ? void 0 : _a2.href) ?? null : i(yf(a.app.baseURL, f.value), o.resolve);
      });
      return {
        to: f,
        hasTarget: l,
        isAbsoluteUrl: c,
        isExternal: d,
        href: _,
        isActive: (m == null ? void 0 : m.isActive) ?? qe(() => f.value === o.currentRoute.value.path),
        isExactActive: (m == null ? void 0 : m.isExactActive) ?? qe(() => f.value === o.currentRoute.value.path),
        route: (m == null ? void 0 : m.route) ?? qe(() => o.resolve(f.value)),
        async navigate(p) {
          await mC(_.value, {
            replace: s.replace,
            external: d.value || l.value
          });
        }
      };
    }
    return xi({
      name: e,
      props: {
        to: {
          type: [
            String,
            Object
          ],
          default: void 0,
          required: false
        },
        href: {
          type: [
            String,
            Object
          ],
          default: void 0,
          required: false
        },
        target: {
          type: String,
          default: void 0,
          required: false
        },
        rel: {
          type: String,
          default: void 0,
          required: false
        },
        noRel: {
          type: Boolean,
          default: void 0,
          required: false
        },
        prefetch: {
          type: Boolean,
          default: void 0,
          required: false
        },
        prefetchOn: {
          type: [
            String,
            Object
          ],
          default: void 0,
          required: false
        },
        noPrefetch: {
          type: Boolean,
          default: void 0,
          required: false
        },
        activeClass: {
          type: String,
          default: void 0,
          required: false
        },
        exactActiveClass: {
          type: String,
          default: void 0,
          required: false
        },
        prefetchedClass: {
          type: String,
          default: void 0,
          required: false
        },
        replace: {
          type: Boolean,
          default: void 0,
          required: false
        },
        ariaCurrentValue: {
          type: String,
          default: void 0,
          required: false
        },
        external: {
          type: Boolean,
          default: void 0,
          required: false
        },
        custom: {
          type: Boolean,
          default: void 0,
          required: false
        }
      },
      useLink: r,
      setup(s, { slots: o }) {
        const a = On(), { to: l, href: c, navigate: u, isExternal: h, hasTarget: d, isAbsoluteUrl: f } = r(s), m = vn(false), _ = vn(null), p = (b) => {
          var _a2;
          _.value = s.custom ? (_a2 = b == null ? void 0 : b.$el) == null ? void 0 : _a2.nextElementSibling : b == null ? void 0 : b.$el;
        };
        function g(b) {
          var _a2, _b2;
          return !m.value && (typeof s.prefetchOn == "string" ? s.prefetchOn === b : ((_a2 = s.prefetchOn) == null ? void 0 : _a2[b]) ?? ((_b2 = n.prefetchOn) == null ? void 0 : _b2[b])) && (s.prefetch ?? n.prefetch) !== false && s.noPrefetch !== true && s.target !== "_blank" && !eR();
        }
        async function y(b = At()) {
          if (m.value) return;
          m.value = true;
          const v = typeof l.value == "string" ? l.value : h.value ? u4(l.value) : a.resolve(l.value).fullPath, x = h.value ? new URL(v, window.location.href).href : v;
          await Promise.all([
            b.hooks.callHook("link:prefetch", x).catch(() => {
            }),
            !h.value && !d.value && zv(l.value, a).catch(() => {
            })
          ]);
        }
        if (g("visibility")) {
          const b = At();
          let v, x = null;
          v2(() => {
            const C = QD();
            Mf(() => {
              v = x4(() => {
                var _a2;
                ((_a2 = _ == null ? void 0 : _.value) == null ? void 0 : _a2.tagName) && (x = C.observe(_.value, async () => {
                  x == null ? void 0 : x(), x = null, await y(b);
                }));
              });
            });
          }), Os(() => {
            v && GD(v), x == null ? void 0 : x(), x = null;
          });
        }
        return () => {
          var _a2;
          if (!h.value && !d.value && !t(l.value)) {
            const x = {
              ref: p,
              to: l.value,
              activeClass: s.activeClass || n.activeClass,
              exactActiveClass: s.exactActiveClass || n.exactActiveClass,
              replace: s.replace,
              ariaCurrentValue: s.ariaCurrentValue,
              custom: s.custom
            };
            return s.custom || (g("interaction") && (x.onPointerenter = y.bind(null, void 0), x.onFocus = y.bind(null, void 0)), m.value && (x.class = s.prefetchedClass || n.prefetchedClass), x.rel = s.rel || void 0), Xt(t5("RouterLink"), x, o.default);
          }
          const b = s.target || null, v = YD(s.noRel ? "" : s.rel, n.externalRelAttribute, f.value || d.value ? "noopener noreferrer" : "") || null;
          return s.custom ? o.default ? o.default({
            href: c.value,
            navigate: u,
            prefetch: y,
            get route() {
              if (!c.value) return;
              const x = new URL(c.value, window.location.href);
              return {
                path: x.pathname,
                fullPath: x.pathname,
                get query() {
                  return Tp(x.search);
                },
                hash: x.hash,
                params: {},
                name: void 0,
                matched: [],
                redirectedFrom: void 0,
                meta: {},
                href: c.value
              };
            },
            rel: v,
            target: b,
            isExternal: h.value || d.value,
            isActive: false,
            isExactActive: false
          }) : null : Xt("a", {
            ref: _,
            href: c.value || null,
            rel: v,
            target: b
          }, (_a2 = o.default) == null ? void 0 : _a2.call(o));
        };
      }
    });
  }
  JD = KD(QT);
  function gm(n, e) {
    const t = e === "append" ? Tu : vf;
    return k3(n) && !n.startsWith("http") ? n : t(n, true);
  }
  function QD() {
    const n = At();
    if (n._observer) return n._observer;
    let e = null;
    const t = /* @__PURE__ */ new Map(), i = (s, o) => (e || (e = new IntersectionObserver((a) => {
      for (const l of a) {
        const c = t.get(l.target);
        (l.isIntersecting || l.intersectionRatio > 0) && c && c();
      }
    })), t.set(s, o), e.observe(s), () => {
      t.delete(s), e == null ? void 0 : e.unobserve(s), t.size === 0 && (e == null ? void 0 : e.disconnect(), e = null);
    });
    return n._observer = {
      observe: i
    };
  }
  const ZD = /2g/;
  function eR() {
    const n = navigator.connection;
    return !!(n && (n.saveData || ZD.test(n.effectiveType)));
  }
  const tR = ei({
    name: "pinia",
    setup(n) {
      const e = _C();
      return n.vueApp.use(e), Ml(e), n.payload && n.payload.pinia && (e.state.value = n.payload.pinia), {
        provide: {
          pinia: e
        }
      };
    }
  }), nR = Q2(() => Gt(() => import("./CxVmN9ol.js"), __vite__mapDeps([19,20]), import.meta.url).then((n) => n.default || n.default || n)), iR = Q2(() => Gt(() => Promise.resolve().then(() => yR), void 0, import.meta.url).then((n) => n.default || n.default || n)), rR = Q2(() => Gt(() => Promise.resolve().then(() => SR), void 0, import.meta.url).then((n) => n.default || n.default || n)), sR = Q2(() => Gt(() => import("./6hDYC-wr.js"), [], import.meta.url).then((n) => n.default || n.default || n)), oR = Q2(() => Gt(() => import("./BxRX0Qpb.js"), [], import.meta.url).then((n) => n.default || n.default || n)), aR = Q2(() => Gt(() => Promise.resolve().then(() => lV), void 0, import.meta.url).then((n) => n.default || n.default || n)), lR = Q2(() => Gt(() => import("./EOBYE-xC.js"), __vite__mapDeps([21,22]), import.meta.url).then((n) => n.default || n.default || n)), cR = Q2(() => Gt(() => Promise.resolve().then(() => Gz), void 0, import.meta.url).then((n) => n.default || n.default || n)), uR = [
    [
      "AudioButton",
      nR
    ],
    [
      "ButtonBrackets",
      iR
    ],
    [
      "Container",
      rR
    ],
    [
      "FpsCounter",
      sR
    ],
    [
      "KodeLogo",
      oR
    ],
    [
      "MouseCursor",
      aR
    ],
    [
      "MouseTrail",
      lR
    ],
    [
      "Preloader",
      cR
    ]
  ], fR = ei({
    name: "nuxt:global-components",
    setup(n) {
      for (const [e, t] of uR) n.vueApp.component(e, t), n.vueApp.component("Lazy" + e, t);
    }
  }), or = {
    default: Q2(() => Gt(() => import("./DWwIJlc8.js"), __vite__mapDeps([23,21,22,19,20,24,3,16,25,26]), import.meta.url).then((n) => n.default || n)),
    holding: Q2(() => Gt(() => import("./D2tYX_dy.js"), __vite__mapDeps([27,21,22,19,20,24,3,25,28]), import.meta.url).then((n) => n.default || n))
  }, hR = ei({
    name: "nuxt:prefetch",
    setup(n) {
      const e = On();
      n.hooks.hook("app:mounted", () => {
        e.beforeEach(async (t) => {
          var _a2;
          const i = (_a2 = t == null ? void 0 : t.meta) == null ? void 0 : _a2.layout;
          i && typeof or[i] == "function" && await or[i]();
        });
      }), n.hooks.hook("link:prefetch", (t) => {
        if (k3(t)) return;
        const i = e.resolve(t);
        if (!i) return;
        const r = i.meta.layout;
        let s = kp(i.meta.middleware);
        s = s.filter((o) => typeof o == "string");
        for (const o of s) typeof y4[o] == "function" && y4[o]();
        r && typeof or[r] == "function" && or[r]();
      });
    }
  });
  function gh(...n) {
    var _a2;
    (_a2 = window.dataLayer) == null ? void 0 : _a2.push(arguments);
  }
  function dR({ tags: n }) {
    window.dataLayer = window.dataLayer || [];
    for (const e of n) for (const t of e.initCommands ?? []) gh(...t);
    gh("js", /* @__PURE__ */ new Date());
    for (const e of n) gh("config", e.id, e.config ?? {});
  }
  function pR(n) {
    const e = We(n), t = e.tags.filter(Boolean).map((i) => typeof i == "string" ? {
      id: i
    } : i);
    if (e.id) {
      const { id: i, config: r, initCommands: s } = e;
      t.unshift({
        id: i,
        config: r,
        initCommands: s
      });
    }
    return t;
  }
  const mR = ei({
    parallel: true,
    setup() {
      const n = Ns().public.gtag, e = pR(n);
      if (!e.length || (dR({
        tags: e
      }), n.initMode === "manual")) return;
      const t = n.loadingStrategy === "async" ? "async" : "defer";
      lA({
        link: [
          {
            rel: "preload",
            as: "script",
            href: Cu(n.url, {
              id: e[0].id
            })
          }
        ],
        script: [
          {
            src: Cu(n.url, {
              id: e[0].id
            }),
            [t]: true,
            "data-gtag": ""
          }
        ]
      });
    }
  }), gR = [
    mA,
    _A,
    SA,
    VD,
    WD,
    jD,
    XD,
    qD,
    tR,
    fR,
    hR,
    mR
  ];
  function _R(n) {
    return {
      all: n = n || /* @__PURE__ */ new Map(),
      on: function(e, t) {
        var i = n.get(e);
        i ? i.push(t) : n.set(e, [
          t
        ]);
      },
      off: function(e, t) {
        var i = n.get(e);
        i && (t ? i.splice(i.indexOf(t) >>> 0, 1) : n.set(e, []));
      },
      emit: function(e, t) {
        var i = n.get(e);
        i && i.slice().map(function(r) {
          r(t);
        }), (i = n.get("*")) && i.slice().map(function(r) {
          r(e, t);
        });
      }
    };
  }
  Et = _R();
  Et.once = (n, e) => {
    const t = (i) => {
      Et.off(n, t), e(i);
    };
    Et.on(n, t), e._ = t;
  };
  let bR, vR, yR, xR, SR;
  Bt = Object.freeze({
    SCROLL_TOP: "scroll-top",
    SCROLL_TO: "scroll-to",
    START_ANIMATE_IN: "start-animate-in",
    BG_SOUND_LOADED: "bg-sound-loaded",
    BG_SWITCH_TO_DEFAULT: "bg-switch-to-default",
    BG_SWITCH_TO_FILTERED: "bg-switch-to-filtered",
    PLAY_RANDOM_SHATTER_SFX: "play-random-shatter-sfx",
    PLAY_ASTERISK_SFX: "play-asterisk-sfx",
    STOP_ASTERISK_SFX: "stop-asterisk-sfx",
    PLAY_CIRCLE_SFX: "play-circle-sfx",
    STOP_CIRCLE_SFX: "stop-circle-sfx",
    BUTTON_HOVER: "button-hover",
    PLAY_BALOON_SFX: "play-baloon-sfx",
    STOP_BALOON_SFX: "stop-baloon-sfx",
    PLAY_FOOTER_SFX: "play-footer-sfx",
    WORKER_MODEL_LOADED: "worker-model-loaded"
  });
  Tf = (n, e) => {
    const t = n.__vccOpts || n;
    for (const [i, r] of e) t[i] = r;
    return t;
  };
  bR = {
    class: "col-start-2 row-start-1"
  };
  vR = {
    __name: "ButtonBrackets",
    props: {
      theme: {
        type: String,
        default: "default",
        validator: (n) => [
          "default",
          "red",
          "white",
          "black"
        ].includes(n)
      },
      to: {
        type: String,
        default: null
      }
    },
    setup(n) {
      const e = n, t = qe(() => e.to ? JD : "button");
      function i() {
        Et.emit(Bt.BUTTON_HOVER);
      }
      return (r, s) => (jt(), C2(_p(Pe(t)), {
        to: n.to,
        class: "button-brackets",
        "data-theme": n.theme,
        onPointerenter: i
      }, {
        default: Wi(() => [
          s[0] || (s[0] = u2("span", {
            class: "bracket bracket-left | col-start-1"
          }, "[", -1)),
          u2("span", bR, [
            gb(r.$slots, "default", {}, void 0, true)
          ]),
          s[1] || (s[1] = u2("span", {
            class: "bracket bracket-right | col-start-3"
          }, "]", -1))
        ]),
        _: 3
      }, 40, [
        "to",
        "data-theme"
      ]));
    }
  };
  Vv = Tf(vR, [
    [
      "__scopeId",
      "data-v-f7466403"
    ]
  ]);
  yR = Object.freeze(Object.defineProperty({
    __proto__: null,
    default: Vv
  }, Symbol.toStringTag, {
    value: "Module"
  }));
  xR = {
    class: "site-grid | w-full mx-auto"
  };
  Gv = {
    __name: "Container",
    props: {
      tag: {
        type: String,
        default: "section",
        validator: (n) => [
          "section",
          "div",
          "header",
          "footer",
          "nav"
        ].includes(n)
      }
    },
    setup(n) {
      return (e, t) => (jt(), C2(_p(n.tag), {
        class: "site-container | flex px-[0.625rem] md:px-[1.375rem]"
      }, {
        default: Wi(() => [
          u2("div", xR, [
            gb(e.$slots, "default")
          ])
        ]),
        _: 3
      }));
    }
  };
  SR = Object.freeze(Object.defineProperty({
    __proto__: null,
    default: Gv
  }, Symbol.toStringTag, {
    value: "Module"
  }));
  var ER = Object.defineProperty, wR = (n, e, t) => e in n ? ER(n, e, {
    enumerable: true,
    configurable: true,
    writable: true,
    value: t
  }) : n[e] = t, Ce = (n, e, t) => wR(n, typeof e != "symbol" ? e + "" : e, t), MR = class {
    requestAnimationFrame(n) {
      return requestAnimationFrame(n);
    }
    cancelAnimationFrame(n) {
      cancelAnimationFrame(n);
    }
  }, TR = class {
    constructor() {
      Ce(this, "_lastHandleId", 0), Ce(this, "_lastImmediate", null);
    }
    requestAnimationFrame(n) {
      return this._lastHandleId >= Number.MAX_SAFE_INTEGER && (this._lastHandleId = 0), this._lastHandleId += 1, this._lastImmediate = setImmediate(() => {
        n(Date.now());
      }), this._lastHandleId;
    }
    cancelAnimationFrame(n) {
      this._lastImmediate && clearImmediate(this._lastImmediate);
    }
  }, CR = class {
    constructor() {
      Ce(this, "_strategy"), this._strategy = typeof requestAnimationFrame == "function" ? new MR() : new TR();
    }
    requestAnimationFrame(n) {
      return this._strategy.requestAnimationFrame(n);
    }
    cancelAnimationFrame(n) {
      this._strategy.cancelAnimationFrame(n);
    }
  }, Mn = typeof window < "u" && typeof window.document < "u", _h = new Uint8Array([
    80,
    75,
    3,
    4
  ]), AR = [
    "v",
    "ip",
    "op",
    "layers",
    "fr",
    "w",
    "h"
  ], Wv = "0.45.0", jv = "@lottiefiles/dotlottie-web", DR = 0.75, RR = async function(n = {}) {
    var e, t = n, i, r, s = new Promise((w, S) => {
      i = w, r = S;
    }), o = "./this.program", a = import.meta.url, l = "", c;
    try {
      l = new URL(".", a).href;
    } catch {
    }
    c = async (w) => {
      if (w = await fetch(w, {
        credentials: "same-origin"
      }), w.ok) return w.arrayBuffer();
      throw Error(w.status + " : " + w.url);
    };
    var u = console.log.bind(console), h = console.error.bind(console), d, f, m = false, _, p, g, y, b, v, x, C, A, P, M;
    function E() {
      var w = f.buffer;
      p = new Int8Array(w), y = new Int16Array(w), g = new Uint8Array(w), b = new Uint16Array(w), v = new Int32Array(w), x = new Uint32Array(w), C = new Float32Array(w), M = new Float64Array(w), A = new BigInt64Array(w), P = new BigUint64Array(w);
    }
    var I = 0, k = null;
    function H(w) {
      var _a2;
      throw (_a2 = t.onAbort) == null ? void 0 : _a2.call(t, w), w = "Aborted(" + w + ")", h(w), m = true, w = new WebAssembly.RuntimeError(w + ". Build with -sASSERTIONS for more info."), r(w), w;
    }
    var K;
    async function J(w) {
      if (!d) try {
        var S = await c(w);
        return new Uint8Array(S);
      } catch {
      }
      if (w == K && d) w = new Uint8Array(d);
      else throw "both async and sync fetching of the wasm failed";
      return w;
    }
    async function z(w, S) {
      try {
        var R = await J(w);
        return await WebAssembly.instantiate(R, S);
      } catch (L) {
        h(`failed to asynchronously prepare wasm: ${L}`), H(L);
      }
    }
    async function $(w) {
      var S = K;
      if (!d && typeof WebAssembly.instantiateStreaming == "function") try {
        var R = fetch(S, {
          credentials: "same-origin"
        });
        return await WebAssembly.instantiateStreaming(R, w);
      } catch (L) {
        h(`wasm streaming compile failed: ${L}`), h("falling back to ArrayBuffer instantiation");
      }
      return z(S, w);
    }
    class G {
      constructor(S) {
        Ce(this, "name", "ExitStatus"), this.message = `Program terminated with exit(${S})`, this.status = S;
      }
    }
    var Q = (w) => {
      for (; 0 < w.length; ) w.shift()(t);
    }, V = [], w1 = [], m1 = () => {
      var w = t.preRun.shift();
      w1.push(w);
    }, I1 = true, Z = typeof TextDecoder < "u" ? new TextDecoder() : void 0, f1 = (w, S = 0, R = NaN) => {
      var L = S + R;
      for (R = S; w[R] && !(R >= L); ) ++R;
      if (16 < R - S && w.buffer && Z) return Z.decode(w.subarray(S, R));
      for (L = ""; S < R; ) {
        var U = w[S++];
        if (U & 128) {
          var Y = w[S++] & 63;
          if ((U & 224) == 192) L += String.fromCharCode((U & 31) << 6 | Y);
          else {
            var n1 = w[S++] & 63;
            U = (U & 240) == 224 ? (U & 15) << 12 | Y << 6 | n1 : (U & 7) << 18 | Y << 12 | n1 << 6 | w[S++] & 63, 65536 > U ? L += String.fromCharCode(U) : (U -= 65536, L += String.fromCharCode(55296 | U >> 10, 56320 | U & 1023));
          }
        } else L += String.fromCharCode(U);
      }
      return L;
    }, M1 = [], W = 0, r1 = 0;
    class v1 {
      constructor(S) {
        this.ac = S, this.Ab = S - 24;
      }
    }
    var S1 = (w) => {
      var S = r1;
      if (!S) return Il(0), 0;
      var R = new v1(S);
      x[R.Ab + 16 >> 2] = S;
      var L = x[R.Ab + 4 >> 2];
      if (!L) return Il(0), S;
      for (var U of w) {
        if (U === 0 || U === L) break;
        if (uS(U, L, R.Ab + 16)) return Il(U), S;
      }
      return Il(L), S;
    }, z1 = (w, S) => Object.defineProperty(S, "name", {
      value: w
    }), Z1 = [], F = [], T = t.BindingError = class extends Error {
      constructor(w) {
        super(w), this.name = "BindingError";
      }
    }, e1 = (w) => {
      throw new T(w);
    }, _1 = (w) => {
      if (!w) throw new T(`Cannot use deleted val. handle = ${w}`);
      return F[w];
    }, B = (w) => {
      switch (w) {
        case void 0:
          return 2;
        case null:
          return 4;
        case true:
          return 6;
        case false:
          return 8;
        default:
          let S = Z1.pop() || F.length;
          return F[S] = w, F[S + 1] = 1, S;
      }
    };
    class l1 extends Error {
    }
    var D1, p1 = (w) => {
      for (var S = ""; g[w]; ) S += D1[g[w++]];
      return S;
    }, o1 = {}, E1 = (w, S) => {
      if (S === void 0) throw new T("ptr should not be undefined");
      for (; w.Eb; ) S = w.Pb(S), w = w.Eb;
      return S;
    }, N = {}, D = (w) => {
      w = oS(w);
      var S = p1(w);
      return Or(w), S;
    }, q = (w, S) => {
      var R = N[w];
      if (R === void 0) throw w = `${S} has unknown type ${D(w)}`, new T(w);
      return R;
    }, c1 = () => {
    }, h1 = false, d1 = (w) => typeof FinalizationRegistry > "u" ? (d1 = (S) => S, w) : (h1 = new FinalizationRegistry((S) => {
      S = S.zb, --S.count.value, S.count.value === 0 && (S.Fb ? S.Ib.Jb(S.Fb) : S.Cb.Bb.Jb(S.Ab));
    }), d1 = (S) => {
      var R = S.zb;
      return R.Fb && h1.register(S, {
        zb: R
      }, S), S;
    }, c1 = (S) => {
      h1.unregister(S);
    }, d1(w)), U1 = {}, B1 = (w) => {
      for (; w.length; ) {
        var S = w.pop();
        w.pop()(S);
      }
    };
    function j1(w) {
      return this.fromWireType(x[w >> 2]);
    }
    var G1 = {}, A1 = {}, $1 = t.InternalError = class extends Error {
      constructor(w) {
        super(w), this.name = "InternalError";
      }
    }, ne = (w, S, R) => {
      function L(s1) {
        if (s1 = R(s1), s1.length !== w.length) throw new $1("Mismatched type converter count");
        for (var k1 = 0; k1 < w.length; ++k1) ie(w[k1], s1[k1]);
      }
      w.forEach((s1) => A1[s1] = S);
      var U = Array(S.length), Y = [], n1 = 0;
      S.forEach((s1, k1) => {
        N.hasOwnProperty(s1) ? U[k1] = N[s1] : (Y.push(s1), G1.hasOwnProperty(s1) || (G1[s1] = []), G1[s1].push(() => {
          U[k1] = N[s1], ++n1, n1 === Y.length && L(U);
        }));
      }), Y.length === 0 && L(U);
    }, K1 = (w) => {
      if (w === null) return "null";
      var S = typeof w;
      return S === "object" || S === "array" || S === "function" ? w.toString() : "" + w;
    };
    function V1(w, S, R = {}) {
      var L = S.name;
      if (!w) throw new T(`type "${L}" must have a positive integer typeid pointer`);
      if (N.hasOwnProperty(w)) {
        if (R.ic) return;
        throw new T(`Cannot register type '${L}' twice`);
      }
      N[w] = S, delete A1[w], G1.hasOwnProperty(w) && (S = G1[w], delete G1[w], S.forEach((U) => U()));
    }
    function ie(w, S, R = {}) {
      return V1(w, S, R);
    }
    var X = (w, S, R) => {
      switch (S) {
        case 1:
          return R ? (L) => p[L] : (L) => g[L];
        case 2:
          return R ? (L) => y[L >> 1] : (L) => b[L >> 1];
        case 4:
          return R ? (L) => v[L >> 2] : (L) => x[L >> 2];
        case 8:
          return R ? (L) => A[L >> 3] : (L) => P[L >> 3];
        default:
          throw new TypeError(`invalid integer width (${S}): ${w}`);
      }
    }, X1 = (w) => {
      throw new T(w.zb.Cb.Bb.name + " instance already deleted");
    };
    function P1() {
    }
    var Y1 = {}, N1 = (w, S, R) => {
      if (w[S].Db === void 0) {
        var L = w[S];
        w[S] = function(...U) {
          if (!w[S].Db.hasOwnProperty(U.length)) throw new T(`Function '${R}' called with an invalid number of arguments (${U.length}) - expects one of (${w[S].Db})!`);
          return w[S].Db[U.length].apply(this, U);
        }, w[S].Db = [], w[S].Db[L.Lb] = L;
      }
    }, L1 = (w, S, R) => {
      if (t.hasOwnProperty(w)) {
        if (R === void 0 || t[w].Db !== void 0 && t[w].Db[R] !== void 0) throw new T(`Cannot register public name '${w}' twice`);
        if (N1(t, w, w), t[w].Db.hasOwnProperty(R)) throw new T(`Cannot register multiple overloads of a function with the same number of arguments (${R})!`);
        t[w].Db[R] = S;
      } else t[w] = S, t[w].Lb = R;
    }, R1 = (w) => {
      w = w.replace(/[^a-zA-Z0-9_]/g, "$");
      var S = w.charCodeAt(0);
      return 48 <= S && 57 >= S ? `_${w}` : w;
    };
    function j(w, S, R, L, U, Y, n1, s1) {
      this.name = w, this.constructor = S, this.Kb = R, this.Jb = L, this.Eb = U, this.cc = Y, this.Pb = n1, this.$b = s1, this.Xb = [];
    }
    var T1 = (w, S, R) => {
      for (; S !== R; ) {
        if (!S.Pb) throw new T(`Expected null or instance of ${R.name}, got an instance of ${S.name}`);
        w = S.Pb(w), S = S.Eb;
      }
      return w;
    };
    function t1(w, S) {
      if (S === null) {
        if (this.Tb) throw new T(`null is not a valid ${this.name}`);
        return 0;
      }
      if (!S.zb) throw new T(`Cannot pass "${K1(S)}" as a ${this.name}`);
      if (!S.zb.Ab) throw new T(`Cannot pass deleted object as a pointer of type ${this.name}`);
      return T1(S.zb.Ab, S.zb.Cb.Bb, this.Bb);
    }
    function b1(w, S) {
      if (S === null) {
        if (this.Tb) throw new T(`null is not a valid ${this.name}`);
        if (this.Sb) {
          var R = this.Ub();
          return w !== null && w.push(this.Jb, R), R;
        }
        return 0;
      }
      if (!S || !S.zb) throw new T(`Cannot pass "${K1(S)}" as a ${this.name}`);
      if (!S.zb.Ab) throw new T(`Cannot pass deleted object as a pointer of type ${this.name}`);
      if (!this.Rb && S.zb.Cb.Rb) throw new T(`Cannot convert argument of type ${S.zb.Ib ? S.zb.Ib.name : S.zb.Cb.name} to parameter type ${this.name}`);
      if (R = T1(S.zb.Ab, S.zb.Cb.Bb, this.Bb), this.Sb) {
        if (S.zb.Fb === void 0) throw new T("Passing raw pointer to smart pointer is illegal");
        switch (this.pc) {
          case 0:
            if (S.zb.Ib === this) R = S.zb.Fb;
            else throw new T(`Cannot convert argument of type ${S.zb.Ib ? S.zb.Ib.name : S.zb.Cb.name} to parameter type ${this.name}`);
            break;
          case 1:
            R = S.zb.Fb;
            break;
          case 2:
            if (S.zb.Ib === this) R = S.zb.Fb;
            else {
              var L = S.clone();
              R = this.lc(R, B(() => L.delete())), w !== null && w.push(this.Jb, R);
            }
            break;
          default:
            throw new T("Unsupporting sharing policy");
        }
      }
      return R;
    }
    function O1(w, S) {
      if (S === null) {
        if (this.Tb) throw new T(`null is not a valid ${this.name}`);
        return 0;
      }
      if (!S.zb) throw new T(`Cannot pass "${K1(S)}" as a ${this.name}`);
      if (!S.zb.Ab) throw new T(`Cannot pass deleted object as a pointer of type ${this.name}`);
      if (S.zb.Cb.Rb) throw new T(`Cannot convert argument of type ${S.zb.Cb.name} to parameter type ${this.name}`);
      return T1(S.zb.Ab, S.zb.Cb.Bb, this.Bb);
    }
    var x1 = (w, S, R) => S === R ? w : R.Eb === void 0 ? null : (w = x1(w, S, R.Eb), w === null ? null : R.$b(w)), q1 = (w, S) => (S = E1(w, S), o1[S]), F1 = (w, S) => {
      if (!S.Cb || !S.Ab) throw new $1("makeClassHandle requires ptr and ptrType");
      if (!!S.Ib != !!S.Fb) throw new $1("Both smartPtrType and smartPtr must be specified");
      return S.count = {
        value: 1
      }, d1(Object.create(w, {
        zb: {
          value: S,
          writable: true
        }
      }));
    };
    function J1(w, S, R, L, U, Y, n1, s1, k1, W1, Q1) {
      this.name = w, this.Bb = S, this.Tb = R, this.Rb = L, this.Sb = U, this.kc = Y, this.pc = n1, this.Yb = s1, this.Ub = k1, this.lc = W1, this.Jb = Q1, U || S.Eb !== void 0 ? this.toWireType = b1 : (this.toWireType = L ? t1 : O1, this.Gb = null);
    }
    var de = (w, S, R) => {
      if (!t.hasOwnProperty(w)) throw new $1("Replacing nonexistent public symbol");
      t[w].Db !== void 0 && R !== void 0 ? t[w].Db[R] = S : (t[w] = S, t[w].Lb = R);
    }, C1, oe = (w, S) => {
      w = p1(w);
      var R = C1.get(S);
      if (typeof R != "function") throw new T(`unknown function pointer with signature ${w}: ${S}`);
      return R;
    };
    class Le extends Error {
    }
    var we = (w, S) => {
      function R(Y) {
        U[Y] || N[Y] || (A1[Y] ? A1[Y].forEach(R) : (L.push(Y), U[Y] = true));
      }
      var L = [], U = {};
      throw S.forEach(R), new Le(`${w}: ` + L.map(D).join([
        ", "
      ]));
    };
    function Me(w) {
      for (var S = 1; S < w.length; ++S) if (w[S] !== null && w[S].Gb === void 0) return true;
      return false;
    }
    function Se(w, S, R, L, U, Y) {
      var n1 = S.length;
      if (2 > n1) throw new T("argTypes array size mismatch! Must at least get return value and 'this' types!");
      var s1 = S[1] !== null && R !== null, k1 = Me(S);
      for (R = S[0].name !== "void", L = [
        w,
        e1,
        L,
        U,
        B1,
        S[0],
        S[1]
      ], U = 0; U < n1 - 2; ++U) L.push(S[U + 2]);
      if (!k1) for (U = s1 ? 1 : 2; U < S.length; ++U) S[U].Gb !== null && L.push(S[U].Gb);
      k1 = Me(S), U = S.length - 2;
      var W1 = [], Q1 = [
        "fn"
      ];
      for (s1 && Q1.push("thisWired"), n1 = 0; n1 < U; ++n1) W1.push(`arg${n1}`), Q1.push(`arg${n1}Wired`);
      W1 = W1.join(","), Q1 = Q1.join(","), W1 = `return function (${W1}) {
`, k1 && (W1 += `var destructors = [];
`);
      var De = k1 ? "destructors" : "null", He = "humanName throwBindingError invoker fn runDestructors retType classParam".split(" ");
      for (s1 && (W1 += `var thisWired = classParam['toWireType'](${De}, this);
`), n1 = 0; n1 < U; ++n1) W1 += `var arg${n1}Wired = argType${n1}['toWireType'](${De}, arg${n1});
`, He.push(`argType${n1}`);
      if (W1 += (R || Y ? "var rv = " : "") + `invoker(${Q1});
`, k1) W1 += `runDestructors(destructors);
`;
      else for (n1 = s1 ? 1 : 2; n1 < S.length; ++n1) Y = n1 === 1 ? "thisWired" : "arg" + (n1 - 2) + "Wired", S[n1].Gb !== null && (W1 += `${Y}_dtor(${Y});
`, He.push(`${Y}_dtor`));
      R && (W1 += `var ret = retType['fromWireType'](rv);
return ret;
`);
      let [gt, _t] = [
        He,
        W1 + `}
`
      ];
      return S = new Function(...gt, _t)(...L), z1(w, S);
    }
    var Be = (w, S) => {
      for (var R = [], L = 0; L < w; L++) R.push(x[S + 4 * L >> 2]);
      return R;
    }, _e = (w) => {
      w = w.trim();
      let S = w.indexOf("(");
      return S === -1 ? w : w.slice(0, S);
    }, xt = (w) => {
      9 < w && --F[w + 1] === 0 && (F[w] = void 0, Z1.push(w));
    }, it = {
      name: "emscripten::val",
      fromWireType: (w) => {
        var S = _1(w);
        return xt(w), S;
      },
      toWireType: (w, S) => B(S),
      Hb: 8,
      readValueFromPointer: j1,
      Gb: null
    }, Rt = (w, S, R) => {
      switch (S) {
        case 1:
          return R ? function(L) {
            return this.fromWireType(p[L]);
          } : function(L) {
            return this.fromWireType(g[L]);
          };
        case 2:
          return R ? function(L) {
            return this.fromWireType(y[L >> 1]);
          } : function(L) {
            return this.fromWireType(b[L >> 1]);
          };
        case 4:
          return R ? function(L) {
            return this.fromWireType(v[L >> 2]);
          } : function(L) {
            return this.fromWireType(x[L >> 2]);
          };
        default:
          throw new TypeError(`invalid integer width (${S}): ${w}`);
      }
    }, Pt = (w, S) => {
      switch (S) {
        case 4:
          return function(R) {
            return this.fromWireType(C[R >> 2]);
          };
        case 8:
          return function(R) {
            return this.fromWireType(M[R >> 3]);
          };
        default:
          throw new TypeError(`invalid float width (${S}): ${w}`);
      }
    }, O = Object.assign({
      optional: true
    }, it), a1 = (w, S, R) => {
      var L = g;
      if (!(0 < R)) return 0;
      var U = S;
      R = S + R - 1;
      for (var Y = 0; Y < w.length; ++Y) {
        var n1 = w.charCodeAt(Y);
        if (55296 <= n1 && 57343 >= n1) {
          var s1 = w.charCodeAt(++Y);
          n1 = 65536 + ((n1 & 1023) << 10) | s1 & 1023;
        }
        if (127 >= n1) {
          if (S >= R) break;
          L[S++] = n1;
        } else {
          if (2047 >= n1) {
            if (S + 1 >= R) break;
            L[S++] = 192 | n1 >> 6;
          } else {
            if (65535 >= n1) {
              if (S + 2 >= R) break;
              L[S++] = 224 | n1 >> 12;
            } else {
              if (S + 3 >= R) break;
              L[S++] = 240 | n1 >> 18, L[S++] = 128 | n1 >> 12 & 63;
            }
            L[S++] = 128 | n1 >> 6 & 63;
          }
          L[S++] = 128 | n1 & 63;
        }
      }
      return L[S] = 0, S - U;
    }, y1 = (w) => {
      for (var S = 0, R = 0; R < w.length; ++R) {
        var L = w.charCodeAt(R);
        127 >= L ? S++ : 2047 >= L ? S += 2 : 55296 <= L && 57343 >= L ? (S += 4, ++R) : S += 3;
      }
      return S;
    }, g1 = typeof TextDecoder < "u" ? new TextDecoder("utf-16le") : void 0, i1 = (w, S) => {
      for (var R = w >> 1, L = R + S / 2; !(R >= L) && b[R]; ) ++R;
      if (R <<= 1, 32 < R - w && g1) return g1.decode(g.subarray(w, R));
      for (R = "", L = 0; !(L >= S / 2); ++L) {
        var U = y[w + 2 * L >> 1];
        if (U == 0) break;
        R += String.fromCharCode(U);
      }
      return R;
    }, H1 = (w, S, R) => {
      if (R ?? (R = 2147483647), 2 > R) return 0;
      R -= 2;
      var L = S;
      R = R < 2 * w.length ? R / 2 : w.length;
      for (var U = 0; U < R; ++U) y[S >> 1] = w.charCodeAt(U), S += 2;
      return y[S >> 1] = 0, S - L;
    }, ee = (w) => 2 * w.length, se = (w, S) => {
      for (var R = 0, L = ""; !(R >= S / 4); ) {
        var U = v[w + 4 * R >> 2];
        if (U == 0) break;
        ++R, 65536 <= U ? (U -= 65536, L += String.fromCharCode(55296 | U >> 10, 56320 | U & 1023)) : L += String.fromCharCode(U);
      }
      return L;
    }, re = (w, S, R) => {
      if (R ?? (R = 2147483647), 4 > R) return 0;
      var L = S;
      R = L + R - 4;
      for (var U = 0; U < w.length; ++U) {
        var Y = w.charCodeAt(U);
        if (55296 <= Y && 57343 >= Y) {
          var n1 = w.charCodeAt(++U);
          Y = 65536 + ((Y & 1023) << 10) | n1 & 1023;
        }
        if (v[S >> 2] = Y, S += 4, S + 4 > R) break;
      }
      return v[S >> 2] = 0, S - L;
    }, he = (w) => {
      for (var S = 0, R = 0; R < w.length; ++R) {
        var L = w.charCodeAt(R);
        55296 <= L && 57343 >= L && ++R, S += 4;
      }
      return S;
    }, me = 0, ce = (w, S, R) => {
      var L = [];
      return w = w.toWireType(L, R), L.length && (x[S >> 2] = B(L)), w;
    }, ye = [], Ke = {}, ft = (w) => {
      var S = ye.length;
      return ye.push(w), S;
    }, mt = (w, S) => {
      for (var R = Array(w), L = 0; L < w; ++L) R[L] = q(x[S + 4 * L >> 2], `parameter ${L}`);
      return R;
    }, Ie = {}, ge = (w) => {
      if (!(w instanceof G || w == "unwind")) throw w;
    }, Ot = (w) => {
      var _a2;
      throw _ = w, I1 || 0 < me || ((_a2 = t.onExit) == null ? void 0 : _a2.call(t, w), m = true), new G(w);
    }, $e = (w) => {
      if (!m) try {
        if (w(), !(I1 || 0 < me)) try {
          _ = w = _, Ot(w);
        } catch (S) {
          ge(S);
        }
      } catch (S) {
        ge(S);
      }
    }, Nn = {}, Qi = () => {
      if (!mn) {
        var w = {
          USER: "web_user",
          LOGNAME: "web_user",
          PATH: "/",
          PWD: "/",
          HOME: "/home/web_user",
          LANG: (typeof navigator == "object" && navigator.languages && navigator.languages[0] || "C").replace("-", "_") + ".UTF-8",
          _: o || "./this.program"
        }, S;
        for (S in Nn) Nn[S] === void 0 ? delete w[S] : w[S] = Nn[S];
        var R = [];
        for (S in w) R.push(`${S}=${w[S]}`);
        mn = R;
      }
      return mn;
    }, mn, Fr = [
      null,
      [],
      []
    ], lt = () => (w) => crypto.getRandomValues(w), Un = (w) => {
      (Un = lt())(w);
    };
    F.push(0, 1, void 0, 1, null, 1, true, 1, false, 1), t.count_emval_handles = () => F.length / 2 - 5 - Z1.length;
    for (var Bn = Array(256), kt = 0; 256 > kt; ++kt) Bn[kt] = String.fromCharCode(kt);
    D1 = Bn, (() => {
      let w = P1.prototype;
      Object.assign(w, {
        isAliasOf: function(R) {
          if (!(this instanceof P1 && R instanceof P1)) return false;
          var L = this.zb.Cb.Bb, U = this.zb.Ab;
          R.zb = R.zb;
          var Y = R.zb.Cb.Bb;
          for (R = R.zb.Ab; L.Eb; ) U = L.Pb(U), L = L.Eb;
          for (; Y.Eb; ) R = Y.Pb(R), Y = Y.Eb;
          return L === Y && U === R;
        },
        clone: function() {
          if (this.zb.Ab || X1(this), this.zb.Nb) return this.zb.count.value += 1, this;
          var R = d1, L = Object, U = L.create, Y = Object.getPrototypeOf(this), n1 = this.zb;
          return R = R(U.call(L, Y, {
            zb: {
              value: {
                count: n1.count,
                Ob: n1.Ob,
                Nb: n1.Nb,
                Ab: n1.Ab,
                Cb: n1.Cb,
                Fb: n1.Fb,
                Ib: n1.Ib
              }
            }
          })), R.zb.count.value += 1, R.zb.Ob = false, R;
        },
        delete() {
          if (this.zb.Ab || X1(this), this.zb.Ob && !this.zb.Nb) throw new T("Object already scheduled for deletion");
          c1(this);
          var R = this.zb;
          --R.count.value, R.count.value === 0 && (R.Fb ? R.Ib.Jb(R.Fb) : R.Cb.Bb.Jb(R.Ab)), this.zb.Nb || (this.zb.Fb = void 0, this.zb.Ab = void 0);
        },
        isDeleted: function() {
          return !this.zb.Ab;
        },
        deleteLater: function() {
          if (this.zb.Ab || X1(this), this.zb.Ob && !this.zb.Nb) throw new T("Object already scheduled for deletion");
          return this.zb.Ob = true, this;
        }
      });
      let S = Symbol.dispose;
      S && (w[S] = w.delete);
    })(), Object.assign(J1.prototype, {
      dc(w) {
        return this.Yb && (w = this.Yb(w)), w;
      },
      Vb(w) {
        var _a2;
        (_a2 = this.Jb) == null ? void 0 : _a2.call(this, w);
      },
      Hb: 8,
      readValueFromPointer: j1,
      fromWireType: function(w) {
        function S() {
          return this.Sb ? F1(this.Bb.Kb, {
            Cb: this.kc,
            Ab: R,
            Ib: this,
            Fb: w
          }) : F1(this.Bb.Kb, {
            Cb: this,
            Ab: w
          });
        }
        var R = this.dc(w);
        if (!R) return this.Vb(w), null;
        var L = q1(this.Bb, R);
        if (L !== void 0) return L.zb.count.value === 0 ? (L.zb.Ab = R, L.zb.Fb = w, L.clone()) : (L = L.clone(), this.Vb(w), L);
        if (L = this.Bb.cc(R), L = Y1[L], !L) return S.call(this);
        L = this.Rb ? L.Zb : L.pointerType;
        var U = x1(R, this.Bb, L.Bb);
        return U === null ? S.call(this) : this.Sb ? F1(L.Bb.Kb, {
          Cb: L,
          Ab: U,
          Ib: this,
          Fb: w
        }) : F1(L.Bb.Kb, {
          Cb: L,
          Ab: U
        });
      }
    }), t.noExitRuntime && (I1 = t.noExitRuntime), t.print && (u = t.print), t.printErr && (h = t.printErr), t.wasmBinary && (d = t.wasmBinary), t.thisProgram && (o = t.thisProgram);
    var yn = {
      l: (w, S, R, L) => H(`Assertion failed: ${w ? f1(g, w) : ""}, at: ` + [
        S ? S ? f1(g, S) : "" : "unknown filename",
        R,
        L ? L ? f1(g, L) : "" : "unknown function"
      ]),
      xa: (w) => {
        var S = new v1(w);
        return p[S.Ab + 12] == 0 && (p[S.Ab + 12] = 1, W--), p[S.Ab + 13] = 0, M1.push(S), cS(w), fS(w);
      },
      wa: () => {
        le(0, 0);
        var w = M1.pop();
        lS(w.ac), r1 = 0;
      },
      b: () => S1([]),
      o: (w, S) => S1([
        w,
        S
      ]),
      u: (w, S, R) => {
        var L = new v1(w);
        throw x[L.Ab + 16 >> 2] = 0, x[L.Ab + 4 >> 2] = S, x[L.Ab + 8 >> 2] = R, r1 = w, W++, r1;
      },
      d: (w) => {
        throw r1 || (r1 = w), r1;
      },
      cb: () => {
      },
      ab: () => {
      },
      bb: () => {
      },
      eb: function() {
      },
      gb: () => H(""),
      sa: (w, S, R) => {
        w = p1(w), S = q(S, "wrapper"), R = _1(R);
        var L = S.Bb, U = L.Kb, Y = L.Eb.Kb, n1 = L.Eb.constructor;
        return w = z1(w, function(...s1) {
          L.Eb.Xb.forEach((function(k1) {
            if (this[k1] === Y[k1]) throw new l1(`Pure virtual function ${k1} must be implemented in JavaScript`);
          }).bind(this)), Object.defineProperty(this, "__parent", {
            value: U
          }), this.__construct(...s1);
        }), U.__construct = function(...s1) {
          if (this === U) throw new T("Pass correct 'this' to __construct");
          s1 = n1.implement(this, ...s1), c1(s1);
          var k1 = s1.zb;
          if (s1.notifyOnDestruction(), k1.Nb = true, Object.defineProperties(this, {
            zb: {
              value: k1
            }
          }), d1(this), s1 = k1.Ab, s1 = E1(L, s1), o1.hasOwnProperty(s1)) throw new T(`Tried to register registered instance: ${s1}`);
          o1[s1] = this;
        }, U.__destruct = function() {
          if (this === U) throw new T("Pass correct 'this' to __destruct");
          c1(this);
          var s1 = this.zb.Ab;
          if (s1 = E1(L, s1), o1.hasOwnProperty(s1)) delete o1[s1];
          else throw new T(`Tried to unregister unregistered instance: ${s1}`);
        }, w.prototype = Object.create(U), Object.assign(w.prototype, R), B(w);
      },
      R: (w) => {
        var S = U1[w];
        delete U1[w];
        var R = S.Ub, L = S.Jb, U = S.Wb, Y = U.map((n1) => n1.hc).concat(U.map((n1) => n1.nc));
        ne([
          w
        ], Y, (n1) => {
          var s1 = {};
          return U.forEach((k1, W1) => {
            var Q1 = n1[W1], De = k1.ec, He = k1.fc, gt = n1[W1 + U.length], _t = k1.mc, U2 = k1.oc;
            s1[k1.bc] = {
              read: (Zi) => Q1.fromWireType(De(He, Zi)),
              write: (Zi, Ta) => {
                var y2 = [];
                _t(U2, Zi, gt.toWireType(y2, Ta)), B1(y2);
              },
              optional: n1[W1].optional
            };
          }), [
            {
              name: S.name,
              fromWireType: (k1) => {
                var W1 = {}, Q1;
                for (Q1 in s1) W1[Q1] = s1[Q1].read(k1);
                return L(k1), W1;
              },
              toWireType: (k1, W1) => {
                for (var Q1 in s1) if (!(Q1 in W1 || s1[Q1].optional)) throw new TypeError(`Missing field: "${Q1}"`);
                var De = R();
                for (Q1 in s1) s1[Q1].write(De, W1[Q1]);
                return k1 !== null && k1.push(L, De), De;
              },
              Hb: 8,
              readValueFromPointer: j1,
              Gb: L
            }
          ];
        });
      },
      qa: (w, S, R) => {
        S = p1(S), ie(w, {
          name: S,
          fromWireType: (L) => L,
          toWireType: function(L, U) {
            if (typeof U != "bigint" && typeof U != "number") throw new TypeError(`Cannot convert "${K1(U)}" to ${this.name}`);
            return typeof U == "number" && (U = BigInt(U)), U;
          },
          Hb: 8,
          readValueFromPointer: X(S, R, S.indexOf("u") == -1),
          Gb: null
        });
      },
      Qa: (w, S, R, L) => {
        S = p1(S), ie(w, {
          name: S,
          fromWireType: function(U) {
            return !!U;
          },
          toWireType: function(U, Y) {
            return Y ? R : L;
          },
          Hb: 8,
          readValueFromPointer: function(U) {
            return this.fromWireType(g[U]);
          },
          Gb: null
        });
      },
      D: (w, S, R, L, U, Y, n1, s1, k1, W1, Q1, De, He) => {
        Q1 = p1(Q1), Y = oe(U, Y), s1 && (s1 = oe(n1, s1)), W1 && (W1 = oe(k1, W1)), He = oe(De, He);
        var gt = R1(Q1);
        L1(gt, function() {
          we(`Cannot construct ${Q1} due to unbound types`, [
            L
          ]);
        }), ne([
          w,
          S,
          R
        ], L ? [
          L
        ] : [], (_t) => {
          if (_t = _t[0], L) var U2 = _t.Bb, Zi = U2.Kb;
          else Zi = P1.prototype;
          _t = z1(Q1, function(...Xf) {
            if (Object.getPrototypeOf(this) !== Ta) throw new T(`Use 'new' to construct ${Q1}`);
            if (y2.Mb === void 0) throw new T(`${Q1} has no accessible constructor`);
            var W6 = y2.Mb[Xf.length];
            if (W6 === void 0) throw new T(`Tried to invoke ctor of ${Q1} with invalid number of parameters (${Xf.length}) - expected (${Object.keys(y2.Mb).toString()}) parameters instead!`);
            return W6.apply(this, Xf);
          });
          var Ta = Object.create(Zi, {
            constructor: {
              value: _t
            }
          });
          _t.prototype = Ta;
          var y2 = new j(Q1, _t, Ta, He, U2, Y, s1, W1);
          if (y2.Eb) {
            var Ca;
            (Ca = y2.Eb).Qb ?? (Ca.Qb = []), y2.Eb.Qb.push(y2);
          }
          return U2 = new J1(Q1, y2, true, false, false), Ca = new J1(Q1 + "*", y2, false, false, false), Zi = new J1(Q1 + " const*", y2, false, true, false), Y1[w] = {
            pointerType: Ca,
            Zb: Zi
          }, de(gt, _t), [
            U2,
            Ca,
            Zi
          ];
        });
      },
      P: (w, S, R, L, U, Y, n1, s1) => {
        var k1 = Be(R, L);
        S = p1(S), S = _e(S), Y = oe(U, Y), ne([], [
          w
        ], (W1) => {
          function Q1() {
            we(`Cannot call ${De} due to unbound types`, k1);
          }
          W1 = W1[0];
          var De = `${W1.name}.${S}`;
          S.startsWith("@@") && (S = Symbol[S.substring(2)]);
          var He = W1.Bb.constructor;
          return He[S] === void 0 ? (Q1.Lb = R - 1, He[S] = Q1) : (N1(He, S, De), He[S].Db[R - 1] = Q1), ne([], k1, (gt) => {
            if (gt = Se(De, [
              gt[0],
              null
            ].concat(gt.slice(1)), null, Y, n1, s1), He[S].Db === void 0 ? (gt.Lb = R - 1, He[S] = gt) : He[S].Db[R - 1] = gt, W1.Bb.Qb) for (let _t of W1.Bb.Qb) _t.constructor.hasOwnProperty(S) || (_t.constructor[S] = gt);
            return [];
          }), [];
        });
      },
      O: (w, S, R, L, U, Y) => {
        var n1 = Be(S, R);
        U = oe(L, U), ne([], [
          w
        ], (s1) => {
          s1 = s1[0];
          var k1 = `constructor ${s1.name}`;
          if (s1.Bb.Mb === void 0 && (s1.Bb.Mb = []), s1.Bb.Mb[S - 1] !== void 0) throw new T(`Cannot register multiple constructors with identical number of parameters (${S - 1}) for class '${s1.name}'! Overload resolution is currently only performed using the parameter count, not actual type info!`);
          return s1.Bb.Mb[S - 1] = () => {
            we(`Cannot construct ${s1.name} due to unbound types`, n1);
          }, ne([], n1, (W1) => (W1.splice(1, 0, null), s1.Bb.Mb[S - 1] = Se(k1, W1, null, U, Y), [])), [];
        });
      },
      m: (w, S, R, L, U, Y, n1, s1, k1) => {
        var W1 = Be(R, L);
        S = p1(S), S = _e(S), Y = oe(U, Y), ne([], [
          w
        ], (Q1) => {
          function De() {
            we(`Cannot call ${He} due to unbound types`, W1);
          }
          Q1 = Q1[0];
          var He = `${Q1.name}.${S}`;
          S.startsWith("@@") && (S = Symbol[S.substring(2)]), s1 && Q1.Bb.Xb.push(S);
          var gt = Q1.Bb.Kb, _t = gt[S];
          return _t === void 0 || _t.Db === void 0 && _t.className !== Q1.name && _t.Lb === R - 2 ? (De.Lb = R - 2, De.className = Q1.name, gt[S] = De) : (N1(gt, S, He), gt[S].Db[R - 2] = De), ne([], W1, (U2) => (U2 = Se(He, U2, Q1, Y, n1, k1), gt[S].Db === void 0 ? (U2.Lb = R - 2, gt[S] = U2) : gt[S].Db[R - 2] = U2, [])), [];
        });
      },
      Oa: (w) => ie(w, it),
      U: (w, S, R, L) => {
        function U() {
        }
        S = p1(S), U.values = {}, ie(w, {
          name: S,
          constructor: U,
          fromWireType: function(Y) {
            return this.constructor.values[Y];
          },
          toWireType: (Y, n1) => n1.value,
          Hb: 8,
          readValueFromPointer: Rt(S, R, L),
          Gb: null
        }), L1(S, U);
      },
      v: (w, S, R) => {
        var L = q(w, "enum");
        S = p1(S), w = L.constructor, L = Object.create(L.constructor.prototype, {
          value: {
            value: R
          },
          constructor: {
            value: z1(`${L.name}_${S}`, function() {
            })
          }
        }), w.values[R] = L, w[S] = L;
      },
      pa: (w, S, R) => {
        S = p1(S), ie(w, {
          name: S,
          fromWireType: (L) => L,
          toWireType: (L, U) => U,
          Hb: 8,
          readValueFromPointer: Pt(S, R),
          Gb: null
        });
      },
      Q: (w, S, R, L, U, Y, n1) => {
        var s1 = Be(S, R);
        w = p1(w), w = _e(w), U = oe(L, U), L1(w, function() {
          we(`Cannot call ${w} due to unbound types`, s1);
        }, S - 1), ne([], s1, (k1) => (de(w, Se(w, [
          k1[0],
          null
        ].concat(k1.slice(1)), null, U, Y, n1), S - 1), []));
      },
      A: (w, S, R, L, U) => {
        if (S = p1(S), U === -1 && (U = 4294967295), U = (s1) => s1, L === 0) {
          var Y = 32 - 8 * R;
          U = (s1) => s1 << Y >>> Y;
        }
        var n1 = S.includes("unsigned") ? function(s1, k1) {
          return k1 >>> 0;
        } : function(s1, k1) {
          return k1;
        };
        ie(w, {
          name: S,
          fromWireType: U,
          toWireType: n1,
          Hb: 8,
          readValueFromPointer: X(S, R, L !== 0),
          Gb: null
        });
      },
      r: (w, S, R) => {
        function L(Y) {
          return new U(p.buffer, x[Y + 4 >> 2], x[Y >> 2]);
        }
        var U = [
          Int8Array,
          Uint8Array,
          Int16Array,
          Uint16Array,
          Int32Array,
          Uint32Array,
          Float32Array,
          Float64Array,
          BigInt64Array,
          BigUint64Array
        ][S];
        R = p1(R), ie(w, {
          name: R,
          fromWireType: L,
          Hb: 8,
          readValueFromPointer: L
        }, {
          ic: true
        });
      },
      S: (w) => {
        ie(w, O);
      },
      Z: (w, S, R, L, U, Y, n1, s1, k1, W1, Q1, De) => {
        R = p1(R), Y = oe(U, Y), s1 = oe(n1, s1), W1 = oe(k1, W1), De = oe(Q1, De), ne([
          w
        ], [
          S
        ], (He) => (He = He[0], [
          new J1(R, He.Bb, false, false, true, He, L, Y, s1, W1, De)
        ]));
      },
      Pa: (w, S) => {
        S = p1(S), ie(w, {
          name: S,
          fromWireType: function(R) {
            for (var L = x[R >> 2], U = R + 4, Y, n1 = U, s1 = 0; s1 <= L; ++s1) {
              var k1 = U + s1;
              (s1 == L || g[k1] == 0) && (n1 = n1 ? f1(g, n1, k1 - n1) : "", Y === void 0 ? Y = n1 : (Y += "\0", Y += n1), n1 = k1 + 1);
            }
            return Or(R), Y;
          },
          toWireType: function(R, L) {
            L instanceof ArrayBuffer && (L = new Uint8Array(L));
            var U = typeof L == "string";
            if (!(U || ArrayBuffer.isView(L) && L.BYTES_PER_ELEMENT == 1)) throw new T("Cannot pass non-string to std::string");
            var Y = U ? y1(L) : L.length, n1 = Ei(4 + Y + 1), s1 = n1 + 4;
            return x[n1 >> 2] = Y, U ? a1(L, s1, Y + 1) : g.set(L, s1), R !== null && R.push(Or, n1), n1;
          },
          Hb: 8,
          readValueFromPointer: j1,
          Gb(R) {
            Or(R);
          }
        });
      },
      Y: (w, S, R) => {
        if (R = p1(R), S === 2) var L = i1, U = H1, Y = ee, n1 = (s1) => b[s1 >> 1];
        else S === 4 && (L = se, U = re, Y = he, n1 = (s1) => x[s1 >> 2]);
        ie(w, {
          name: R,
          fromWireType: (s1) => {
            for (var k1 = x[s1 >> 2], W1, Q1 = s1 + 4, De = 0; De <= k1; ++De) {
              var He = s1 + 4 + De * S;
              (De == k1 || n1(He) == 0) && (Q1 = L(Q1, He - Q1), W1 === void 0 ? W1 = Q1 : (W1 += "\0", W1 += Q1), Q1 = He + S);
            }
            return Or(s1), W1;
          },
          toWireType: (s1, k1) => {
            if (typeof k1 != "string") throw new T(`Cannot pass non-string to C++ string type ${R}`);
            var W1 = Y(k1), Q1 = Ei(4 + W1 + S);
            return x[Q1 >> 2] = W1 / S, U(k1, Q1 + 4, W1 + S), s1 !== null && s1.push(Or, Q1), Q1;
          },
          Hb: 8,
          readValueFromPointer: j1,
          Gb(s1) {
            Or(s1);
          }
        });
      },
      K: (w, S, R, L, U, Y) => {
        U1[w] = {
          name: p1(S),
          Ub: oe(R, L),
          Jb: oe(U, Y),
          Wb: []
        };
      },
      x: (w, S, R, L, U, Y, n1, s1, k1, W1) => {
        U1[w].Wb.push({
          bc: p1(S),
          hc: R,
          ec: oe(L, U),
          fc: Y,
          nc: n1,
          mc: oe(s1, k1),
          oc: W1
        });
      },
      Ra: (w, S) => {
        S = p1(S), ie(w, {
          jc: true,
          name: S,
          Hb: 0,
          fromWireType: () => {
          },
          toWireType: () => {
          }
        });
      },
      ya: function() {
        return Date.now();
      },
      _a: () => {
        I1 = false, me = 0;
      },
      Va: () => {
        throw 1 / 0;
      },
      ra: (w, S, R) => (w = _1(w), S = q(S, "emval::as"), ce(S, R, w)),
      Ta: (w, S, R, L) => (w = ye[w], S = _1(S), w(null, S, R, L)),
      E: (w, S, R, L, U) => {
        w = ye[w], S = _1(S);
        var Y = Ke[R];
        return R = Y === void 0 ? p1(R) : Y, w(S, S[R], L, U);
      },
      Ka: xt,
      B: (w, S, R) => {
        S = mt(w, S);
        var L = S.shift();
        w--;
        var U = `return function (obj, func, destructorsRef, args) {
`, Y = 0, n1 = [];
        R === 0 && n1.push("obj");
        for (var s1 = [
          "retType"
        ], k1 = [
          L
        ], W1 = 0; W1 < w; ++W1) n1.push(`arg${W1}`), s1.push(`argType${W1}`), k1.push(S[W1]), U += `  var arg${W1} = argType${W1}.readValueFromPointer(args${Y ? "+" + Y : ""});
`, Y += S[W1].Hb;
        return U += `  var rv = ${R === 1 ? "new func" : "func.call"}(${n1.join(", ")});
`, L.jc || (s1.push("emval_returnValue"), k1.push(ce), U += `  return emval_returnValue(retType, destructorsRef, rv);
`), w = new Function(...s1, U + `};
`)(...k1), R = `methodCaller<(${S.map((Q1) => Q1.name).join(", ")}) => ${L.name}>`, ft(z1(R, w));
      },
      Ua: (w) => {
        9 < w && (F[w + 1] += 1);
      },
      Sa: (w) => {
        var S = _1(w);
        B1(S), xt(w);
      },
      J: (w, S) => (w = q(w, "_emval_take_value"), w = w.readValueFromPointer(S), B(w)),
      Xa: (w, S) => {
        if (Ie[w] && (clearTimeout(Ie[w].id), delete Ie[w]), !S) return 0;
        var R = setTimeout(() => {
          delete Ie[w], $e(() => aS(w, performance.now()));
        }, S);
        return Ie[w] = {
          id: R,
          qc: S
        }, 0;
      },
      Ya: (w, S, R, L) => {
        var U = (/* @__PURE__ */ new Date()).getFullYear(), Y = new Date(U, 0, 1).getTimezoneOffset();
        U = new Date(U, 6, 1).getTimezoneOffset(), x[w >> 2] = 60 * Math.max(Y, U), v[S >> 2] = +(Y != U), S = (n1) => {
          var s1 = Math.abs(n1);
          return `UTC${0 <= n1 ? "-" : "+"}${String(Math.floor(s1 / 60)).padStart(2, "0")}${String(s1 % 60).padStart(2, "0")}`;
        }, w = S(Y), S = S(U), U < Y ? (a1(w, R, 17), a1(S, L, 17)) : (a1(w, L, 17), a1(S, R, 17));
      },
      Za: (w) => {
        var S = g.length;
        if (w >>>= 0, 2147483648 < w) return false;
        for (var R = 1; 4 >= R; R *= 2) {
          var L = S * (1 + 0.2 / R);
          L = Math.min(L, w + 100663296);
          e: {
            L = (Math.min(2147483648, 65536 * Math.ceil(Math.max(w, L) / 65536)) - f.buffer.byteLength + 65535) / 65536 | 0;
            try {
              f.grow(L), E();
              var U = 1;
              break e;
            } catch {
            }
            U = void 0;
          }
          if (U) return true;
        }
        return false;
      },
      ib: (w, S) => {
        var R = 0, L = 0, U;
        for (U of Qi()) {
          var Y = S + R;
          x[w + L >> 2] = Y, R += a1(U, Y, 1 / 0) + 1, L += 4;
        }
        return 0;
      },
      jb: (w, S) => {
        var R = Qi();
        x[w >> 2] = R.length, w = 0;
        for (var L of R) w += y1(L) + 1;
        return x[S >> 2] = w, 0;
      },
      fb: () => 52,
      db: () => 52,
      ta: (w, S, R, L) => {
        for (var U = 0, Y = 0; Y < R; Y++) {
          var n1 = x[S >> 2], s1 = x[S + 4 >> 2];
          S += 8;
          for (var k1 = 0; k1 < s1; k1++) {
            var W1 = w, Q1 = g[n1 + k1], De = Fr[W1];
            Q1 === 0 || Q1 === 10 ? ((W1 === 1 ? u : h)(f1(De)), De.length = 0) : De.push(Q1);
          }
          U += s1;
        }
        return x[L >> 2] = U, 0;
      },
      ua: bE,
      va: _E,
      Wa: vE,
      Fa: tE,
      n: wS,
      na: vS,
      La: FS,
      g: gS,
      w: MS,
      X: xS,
      I: PS,
      N: RS,
      f: _S,
      la: OS,
      h: TS,
      Ma: DS,
      k: LS,
      W: IS,
      t: SS,
      Ha: GS,
      $: mE,
      aa: dE,
      ba: hE,
      L: ZS,
      Ia: US,
      ma: yS,
      oa: bS,
      V: zS,
      Ga: JS,
      ha: YS,
      a: pS,
      C: jS,
      G: ES,
      da: sE,
      c: hS,
      Na: CS,
      Da: oE,
      Ea: nE,
      e: dS,
      ea: iE,
      T: aE,
      j: mS,
      y: rE,
      i: AS,
      p: BS,
      s: VS,
      ka: WS,
      Ba: uE,
      Aa: fE,
      fa: eE,
      ca: lE,
      Ca: cE,
      M: QS,
      z: NS,
      H: HS,
      za: pE,
      ia: qS,
      ja: XS,
      F: $S,
      Ja: kS,
      _: gE,
      ga: KS,
      q: (w) => w,
      hb: Ot,
      $a: (w, S) => (Un(g.subarray(w, w + S)), 0)
    }, Lt = await async function() {
      var _a2;
      function w(L) {
        var _a3;
        return Lt = L.exports, f = Lt.kb, E(), C1 = Lt.pb, I--, (_a3 = t.monitorRunDependencies) == null ? void 0 : _a3.call(t, I), I == 0 && k && (L = k, k = null, L()), Lt;
      }
      I++, (_a2 = t.monitorRunDependencies) == null ? void 0 : _a2.call(t, I);
      var S = {
        a: yn
      };
      if (t.instantiateWasm) return new Promise((L) => {
        t.instantiateWasm(S, (U, Y) => {
          L(w(U));
        });
      });
      K ?? (K = t.locateFile ? t.locateFile ? t.locateFile("dotlottie-player.wasm", l) : l + "dotlottie-player.wasm" : "");
      try {
        var R = await $(S);
        return w(R.instance);
      } catch (L) {
        return r(L), Promise.reject(L);
      }
    }(), Ei = Lt.mb, oS = Lt.nb, Or = Lt.ob, aS = Lt.qb, le = Lt.rb, Il = Lt.sb, ue = Lt.tb, fe = Lt.ub, lS = Lt.vb, cS = Lt.wb, uS = Lt.xb, fS = Lt.yb;
    function hS(w, S, R) {
      var L = fe();
      try {
        C1.get(w)(S, R);
      } catch (U) {
        if (ue(L), U !== U + 0) throw U;
        le(1, 0);
      }
    }
    function dS(w, S, R, L) {
      var U = fe();
      try {
        C1.get(w)(S, R, L);
      } catch (Y) {
        if (ue(U), Y !== Y + 0) throw Y;
        le(1, 0);
      }
    }
    function pS(w, S) {
      var R = fe();
      try {
        C1.get(w)(S);
      } catch (L) {
        if (ue(R), L !== L + 0) throw L;
        le(1, 0);
      }
    }
    function mS(w, S, R, L, U) {
      var Y = fe();
      try {
        C1.get(w)(S, R, L, U);
      } catch (n1) {
        if (ue(Y), n1 !== n1 + 0) throw n1;
        le(1, 0);
      }
    }
    function gS(w, S) {
      var R = fe();
      try {
        return C1.get(w)(S);
      } catch (L) {
        if (ue(R), L !== L + 0) throw L;
        le(1, 0);
      }
    }
    function _S(w, S, R) {
      var L = fe();
      try {
        return C1.get(w)(S, R);
      } catch (U) {
        if (ue(L), U !== U + 0) throw U;
        le(1, 0);
      }
    }
    function bS(w, S, R) {
      var L = fe();
      try {
        return C1.get(w)(S, R);
      } catch (U) {
        if (ue(L), U !== U + 0) throw U;
        return le(1, 0), 0n;
      }
    }
    function vS(w, S, R) {
      var L = fe();
      try {
        return C1.get(w)(S, R);
      } catch (U) {
        if (ue(L), U !== U + 0) throw U;
        le(1, 0);
      }
    }
    function yS(w, S) {
      var R = fe();
      try {
        return C1.get(w)(S);
      } catch (L) {
        if (ue(R), L !== L + 0) throw L;
        return le(1, 0), 0n;
      }
    }
    function xS(w, S, R, L) {
      var U = fe();
      try {
        return C1.get(w)(S, R, L);
      } catch (Y) {
        if (ue(U), Y !== Y + 0) throw Y;
        le(1, 0);
      }
    }
    function SS(w, S, R, L, U, Y) {
      var n1 = fe();
      try {
        return C1.get(w)(S, R, L, U, Y);
      } catch (s1) {
        if (ue(n1), s1 !== s1 + 0) throw s1;
        le(1, 0);
      }
    }
    function ES(w, S, R) {
      var L = fe();
      try {
        C1.get(w)(S, R);
      } catch (U) {
        if (ue(L), U !== U + 0) throw U;
        le(1, 0);
      }
    }
    function wS(w, S) {
      var R = fe();
      try {
        return C1.get(w)(S);
      } catch (L) {
        if (ue(R), L !== L + 0) throw L;
        le(1, 0);
      }
    }
    function MS(w, S, R) {
      var L = fe();
      try {
        return C1.get(w)(S, R);
      } catch (U) {
        if (ue(L), U !== U + 0) throw U;
        le(1, 0);
      }
    }
    function TS(w, S, R, L) {
      var U = fe();
      try {
        return C1.get(w)(S, R, L);
      } catch (Y) {
        if (ue(U), Y !== Y + 0) throw Y;
        le(1, 0);
      }
    }
    function CS(w, S, R, L, U) {
      var Y = fe();
      try {
        C1.get(w)(S, R, L, U);
      } catch (n1) {
        if (ue(Y), n1 !== n1 + 0) throw n1;
        le(1, 0);
      }
    }
    function AS(w, S, R, L, U, Y) {
      var n1 = fe();
      try {
        C1.get(w)(S, R, L, U, Y);
      } catch (s1) {
        if (ue(n1), s1 !== s1 + 0) throw s1;
        le(1, 0);
      }
    }
    function DS(w, S, R, L, U) {
      var Y = fe();
      try {
        return C1.get(w)(S, R, L, U);
      } catch (n1) {
        if (ue(Y), n1 !== n1 + 0) throw n1;
        le(1, 0);
      }
    }
    function RS(w, S, R, L, U, Y) {
      var n1 = fe();
      try {
        return C1.get(w)(S, R, L, U, Y);
      } catch (s1) {
        if (ue(n1), s1 !== s1 + 0) throw s1;
        le(1, 0);
      }
    }
    function PS(w, S, R, L, U, Y) {
      var n1 = fe();
      try {
        return C1.get(w)(S, R, L, U, Y);
      } catch (s1) {
        if (ue(n1), s1 !== s1 + 0) throw s1;
        le(1, 0);
      }
    }
    function LS(w, S, R, L, U) {
      var Y = fe();
      try {
        return C1.get(w)(S, R, L, U);
      } catch (n1) {
        if (ue(Y), n1 !== n1 + 0) throw n1;
        le(1, 0);
      }
    }
    function IS(w, S, R, L, U, Y, n1) {
      var s1 = fe();
      try {
        return C1.get(w)(S, R, L, U, Y, n1);
      } catch (k1) {
        if (ue(s1), k1 !== k1 + 0) throw k1;
        le(1, 0);
      }
    }
    function FS(w, S, R, L) {
      var U = fe();
      try {
        return C1.get(w)(S, R, L);
      } catch (Y) {
        if (ue(U), Y !== Y + 0) throw Y;
        le(1, 0);
      }
    }
    function OS(w, S, R, L) {
      var U = fe();
      try {
        return C1.get(w)(S, R, L);
      } catch (Y) {
        if (ue(U), Y !== Y + 0) throw Y;
        le(1, 0);
      }
    }
    function kS(w, S, R, L) {
      var U = fe();
      try {
        C1.get(w)(S, R, L);
      } catch (Y) {
        if (ue(U), Y !== Y + 0) throw Y;
        le(1, 0);
      }
    }
    function NS(w, S, R, L, U) {
      var Y = fe();
      try {
        C1.get(w)(S, R, L, U);
      } catch (n1) {
        if (ue(Y), n1 !== n1 + 0) throw n1;
        le(1, 0);
      }
    }
    function US(w, S, R) {
      var L = fe();
      try {
        return C1.get(w)(S, R);
      } catch (U) {
        if (ue(L), U !== U + 0) throw U;
        le(1, 0);
      }
    }
    function BS(w, S, R, L, U, Y, n1) {
      var s1 = fe();
      try {
        C1.get(w)(S, R, L, U, Y, n1);
      } catch (k1) {
        if (ue(s1), k1 !== k1 + 0) throw k1;
        le(1, 0);
      }
    }
    function HS(w, S, R, L, U, Y) {
      var n1 = fe();
      try {
        C1.get(w)(S, R, L, U, Y);
      } catch (s1) {
        if (ue(n1), s1 !== s1 + 0) throw s1;
        le(1, 0);
      }
    }
    function zS(w, S, R, L) {
      var U = fe();
      try {
        return C1.get(w)(S, R, L);
      } catch (Y) {
        if (ue(U), Y !== Y + 0) throw Y;
        return le(1, 0), 0n;
      }
    }
    function VS(w, S, R, L, U, Y, n1, s1) {
      var k1 = fe();
      try {
        C1.get(w)(S, R, L, U, Y, n1, s1);
      } catch (W1) {
        if (ue(k1), W1 !== W1 + 0) throw W1;
        le(1, 0);
      }
    }
    function GS(w, S, R, L, U, Y, n1) {
      var s1 = fe();
      try {
        return C1.get(w)(S, R, L, U, Y, n1);
      } catch (k1) {
        if (ue(s1), k1 !== k1 + 0) throw k1;
        le(1, 0);
      }
    }
    function WS(w, S, R, L, U, Y, n1, s1, k1) {
      var W1 = fe();
      try {
        C1.get(w)(S, R, L, U, Y, n1, s1, k1);
      } catch (Q1) {
        if (ue(W1), Q1 !== Q1 + 0) throw Q1;
        le(1, 0);
      }
    }
    function jS(w, S, R, L) {
      var U = fe();
      try {
        C1.get(w)(S, R, L);
      } catch (Y) {
        if (ue(U), Y !== Y + 0) throw Y;
        le(1, 0);
      }
    }
    function XS(w, S, R, L, U, Y) {
      var n1 = fe();
      try {
        C1.get(w)(S, R, L, U, Y);
      } catch (s1) {
        if (ue(n1), s1 !== s1 + 0) throw s1;
        le(1, 0);
      }
    }
    function $S(w, S, R) {
      var L = fe();
      try {
        C1.get(w)(S, R);
      } catch (U) {
        if (ue(L), U !== U + 0) throw U;
        le(1, 0);
      }
    }
    function qS(w, S, R, L, U) {
      var Y = fe();
      try {
        C1.get(w)(S, R, L, U);
      } catch (n1) {
        if (ue(Y), n1 !== n1 + 0) throw n1;
        le(1, 0);
      }
    }
    function YS(w) {
      var S = fe();
      try {
        C1.get(w)();
      } catch (R) {
        if (ue(S), R !== R + 0) throw R;
        le(1, 0);
      }
    }
    function KS(w, S, R, L, U) {
      var Y = fe();
      try {
        C1.get(w)(S, R, L, U);
      } catch (n1) {
        if (ue(Y), n1 !== n1 + 0) throw n1;
        le(1, 0);
      }
    }
    function JS(w, S, R, L) {
      var U = fe();
      try {
        return C1.get(w)(S, R, L);
      } catch (Y) {
        if (ue(U), Y !== Y + 0) throw Y;
        return le(1, 0), 0n;
      }
    }
    function QS(w, S, R, L) {
      var U = fe();
      try {
        C1.get(w)(S, R, L);
      } catch (Y) {
        if (ue(U), Y !== Y + 0) throw Y;
        le(1, 0);
      }
    }
    function ZS(w, S, R, L, U, Y) {
      var n1 = fe();
      try {
        return C1.get(w)(S, R, L, U, Y);
      } catch (s1) {
        if (ue(n1), s1 !== s1 + 0) throw s1;
        le(1, 0);
      }
    }
    function eE(w, S, R, L, U) {
      var Y = fe();
      try {
        C1.get(w)(S, R, L, U);
      } catch (n1) {
        if (ue(Y), n1 !== n1 + 0) throw n1;
        le(1, 0);
      }
    }
    function tE(w, S, R, L) {
      var U = fe();
      try {
        return C1.get(w)(S, R, L);
      } catch (Y) {
        if (ue(U), Y !== Y + 0) throw Y;
        le(1, 0);
      }
    }
    function nE(w, S, R, L, U, Y, n1) {
      var s1 = fe();
      try {
        C1.get(w)(S, R, L, U, Y, n1);
      } catch (k1) {
        if (ue(s1), k1 !== k1 + 0) throw k1;
        le(1, 0);
      }
    }
    function iE(w, S, R, L, U) {
      var Y = fe();
      try {
        C1.get(w)(S, R, L, U);
      } catch (n1) {
        if (ue(Y), n1 !== n1 + 0) throw n1;
        le(1, 0);
      }
    }
    function rE(w, S, R, L, U, Y, n1, s1) {
      var k1 = fe();
      try {
        C1.get(w)(S, R, L, U, Y, n1, s1);
      } catch (W1) {
        if (ue(k1), W1 !== W1 + 0) throw W1;
        le(1, 0);
      }
    }
    function sE(w, S, R, L) {
      var U = fe();
      try {
        C1.get(w)(S, R, L);
      } catch (Y) {
        if (ue(U), Y !== Y + 0) throw Y;
        le(1, 0);
      }
    }
    function oE(w, S, R, L, U, Y, n1) {
      var s1 = fe();
      try {
        C1.get(w)(S, R, L, U, Y, n1);
      } catch (k1) {
        if (ue(s1), k1 !== k1 + 0) throw k1;
        le(1, 0);
      }
    }
    function aE(w, S, R, L, U, Y) {
      var n1 = fe();
      try {
        C1.get(w)(S, R, L, U, Y);
      } catch (s1) {
        if (ue(n1), s1 !== s1 + 0) throw s1;
        le(1, 0);
      }
    }
    function lE(w, S, R, L, U, Y) {
      var n1 = fe();
      try {
        C1.get(w)(S, R, L, U, Y);
      } catch (s1) {
        if (ue(n1), s1 !== s1 + 0) throw s1;
        le(1, 0);
      }
    }
    function cE(w, S, R, L, U, Y) {
      var n1 = fe();
      try {
        C1.get(w)(S, R, L, U, Y);
      } catch (s1) {
        if (ue(n1), s1 !== s1 + 0) throw s1;
        le(1, 0);
      }
    }
    function uE(w, S, R, L, U, Y, n1, s1, k1, W1, Q1) {
      var De = fe();
      try {
        C1.get(w)(S, R, L, U, Y, n1, s1, k1, W1, Q1);
      } catch (He) {
        if (ue(De), He !== He + 0) throw He;
        le(1, 0);
      }
    }
    function fE(w, S, R, L, U, Y, n1, s1, k1, W1, Q1, De, He) {
      var gt = fe();
      try {
        C1.get(w)(S, R, L, U, Y, n1, s1, k1, W1, Q1, De, He);
      } catch (_t) {
        if (ue(gt), _t !== _t + 0) throw _t;
        le(1, 0);
      }
    }
    function hE(w, S, R, L, U, Y, n1, s1, k1, W1) {
      var Q1 = fe();
      try {
        return C1.get(w)(S, R, L, U, Y, n1, s1, k1, W1);
      } catch (De) {
        if (ue(Q1), De !== De + 0) throw De;
        le(1, 0);
      }
    }
    function dE(w, S, R, L, U, Y, n1, s1, k1) {
      var W1 = fe();
      try {
        return C1.get(w)(S, R, L, U, Y, n1, s1, k1);
      } catch (Q1) {
        if (ue(W1), Q1 !== Q1 + 0) throw Q1;
        le(1, 0);
      }
    }
    function pE(w, S, R, L, U, Y, n1) {
      var s1 = fe();
      try {
        C1.get(w)(S, R, L, U, Y, n1);
      } catch (k1) {
        if (ue(s1), k1 !== k1 + 0) throw k1;
        le(1, 0);
      }
    }
    function mE(w, S, R, L, U, Y, n1, s1) {
      var k1 = fe();
      try {
        return C1.get(w)(S, R, L, U, Y, n1, s1);
      } catch (W1) {
        if (ue(k1), W1 !== W1 + 0) throw W1;
        le(1, 0);
      }
    }
    function gE(w, S, R, L, U, Y) {
      var n1 = fe();
      try {
        C1.get(w)(S, R, L, U, Y);
      } catch (s1) {
        if (ue(n1), s1 !== s1 + 0) throw s1;
        le(1, 0);
      }
    }
    function _E(w, S, R, L) {
      var U = fe();
      try {
        return C1.get(w)(S, R, L);
      } catch (Y) {
        if (ue(U), Y !== Y + 0) throw Y;
        le(1, 0);
      }
    }
    function bE(w, S) {
      var R = fe();
      try {
        return C1.get(w)(S);
      } catch (L) {
        if (ue(R), L !== L + 0) throw L;
        le(1, 0);
      }
    }
    function vE(w, S, R) {
      var L = fe();
      try {
        return C1.get(w)(S, R);
      } catch (U) {
        if (ue(L), U !== U + 0) throw U;
        le(1, 0);
      }
    }
    function jf() {
      function w() {
        var _a2;
        if (t.calledRun = true, !m) {
          if (Lt.lb(), i(t), (_a2 = t.onRuntimeInitialized) == null ? void 0 : _a2.call(t), t.postRun) for (typeof t.postRun == "function" && (t.postRun = [
            t.postRun
          ]); t.postRun.length; ) {
            var S = t.postRun.shift();
            V.push(S);
          }
          Q(V);
        }
      }
      if (0 < I) k = jf;
      else {
        if (t.preRun) for (typeof t.preRun == "function" && (t.preRun = [
          t.preRun
        ]); t.preRun.length; ) m1();
        Q(w1), 0 < I ? k = jf : t.setStatus ? (t.setStatus("Running..."), setTimeout(() => {
          setTimeout(() => t.setStatus(""), 1), w();
        }, 1)) : w();
      }
    }
    if (t.preInit) for (typeof t.preInit == "function" && (t.preInit = [
      t.preInit
    ]); 0 < t.preInit.length; ) t.preInit.shift()();
    return jf(), e = s, e;
  }, PR = RR, Lu = class {
    constructor() {
      throw new Error("RendererLoader is a static class and cannot be instantiated.");
    }
    static async _tryLoad(n) {
      return await PR({
        locateFile: () => n
      });
    }
    static async _loadWithBackup() {
      return this._ModulePromise || (this._ModulePromise = this._tryLoad(this._wasmURL).catch(async (n) => {
        let e = `https://unpkg.com/${jv}@${Wv}/dist/dotlottie-player.wasm`;
        console.warn(`Primary WASM load failed from ${this._wasmURL}. Error: ${n.message}`), console.warn(`Attempting to load WASM from backup URL: ${e}`);
        try {
          return await this._tryLoad(e);
        } catch (t) {
          throw console.error(`Primary WASM URL failed: ${n.message}`), console.error(`Backup WASM URL failed: ${t.message}`), new Error("WASM loading failed from all sources.");
        }
      })), this._ModulePromise;
    }
    static async load() {
      return this._loadWithBackup();
    }
    static setWasmUrl(n) {
      n !== this._wasmURL && (this._wasmURL = n, this._ModulePromise = null);
    }
  };
  Ce(Lu, "_ModulePromise", null), Ce(Lu, "_wasmURL", `https://cdn.jsdelivr.net/npm/${jv}@${Wv}/dist/dotlottie-player.wasm`);
  var Xv = class {
    constructor() {
      Ce(this, "_eventListeners", /* @__PURE__ */ new Map());
    }
    addEventListener(n, e) {
      let t = this._eventListeners.get(n);
      t || (t = /* @__PURE__ */ new Set(), this._eventListeners.set(n, t)), t.add(e);
    }
    removeEventListener(n, e) {
      let t = this._eventListeners.get(n);
      t && (e ? (t.delete(e), t.size === 0 && this._eventListeners.delete(n)) : this._eventListeners.delete(n));
    }
    dispatch(n) {
      var _a2;
      (_a2 = this._eventListeners.get(n.type)) == null ? void 0 : _a2.forEach((e) => e(n));
    }
    removeAllEventListeners() {
      this._eventListeners.clear();
    }
  }, Ni = class {
    static _initializeObserver() {
      if (this._observer) return;
      let n = (e) => {
        e.forEach((t) => {
          let i = this._observedCanvases.get(t.target);
          i && (t.isIntersecting ? i.unfreeze() : i.freeze());
        });
      };
      this._observer = new IntersectionObserver(n, {
        threshold: 0
      });
    }
    static observe(n, e) {
      var _a2;
      this._initializeObserver(), !this._observedCanvases.has(n) && (this._observedCanvases.set(n, e), (_a2 = this._observer) == null ? void 0 : _a2.observe(n));
    }
    static unobserve(n) {
      var _a2, _b2;
      (_a2 = this._observer) == null ? void 0 : _a2.unobserve(n), this._observedCanvases.delete(n), this._observedCanvases.size === 0 && ((_b2 = this._observer) == null ? void 0 : _b2.disconnect(), this._observer = null);
    }
  };
  Ce(Ni, "_observer", null), Ce(Ni, "_observedCanvases", /* @__PURE__ */ new Map());
  var Ui = class {
    static _initializeObserver() {
      if (this._observer) return;
      let n = (e) => {
        e.forEach((t) => {
          let i = this._observedCanvases.get(t.target);
          if (!i) return;
          let [r, s] = i;
          clearTimeout(s);
          let o = setTimeout(() => {
            r.resize();
          }, 100);
          this._observedCanvases.set(t.target, [
            r,
            o
          ]);
        });
      };
      this._observer = new ResizeObserver(n);
    }
    static observe(n, e) {
      var _a2;
      this._initializeObserver(), !this._observedCanvases.has(n) && (this._observedCanvases.set(n, [
        e,
        0
      ]), (_a2 = this._observer) == null ? void 0 : _a2.observe(n));
    }
    static unobserve(n) {
      var _a2;
      let e = this._observedCanvases.get(n);
      if (e) {
        let t = e[1];
        t && clearTimeout(t);
      }
      (_a2 = this._observer) == null ? void 0 : _a2.unobserve(n), this._observedCanvases.delete(n), !this._observedCanvases.size && this._observer && (this._observer.disconnect(), this._observer = null);
    }
  };
  Ce(Ui, "_observer", null), Ce(Ui, "_observedCanvases", /* @__PURE__ */ new Map());
  function LR(n) {
    return /^#([\da-f]{6}|[\da-f]{8})$/iu.test(n);
  }
  function IR(n) {
    if (!LR(n)) return 0;
    let e = n.replace("#", "");
    return e = e.length === 6 ? `${e}ff` : e, parseInt(e, 16);
  }
  function _m(n) {
    if (n.byteLength < 4) return false;
    let e = new Uint8Array(n.slice(0, _h.byteLength));
    for (let t = 0; t < _h.length; t += 1) if (_h[t] !== e[t]) return false;
    return true;
  }
  function bm(n) {
    return AR.every((e) => Object.prototype.hasOwnProperty.call(n, e));
  }
  function vm(n) {
    if (typeof n == "string") try {
      return bm(JSON.parse(n));
    } catch {
      return false;
    }
    else return bm(n);
  }
  function ss() {
    return 1 + ((Mn ? window.devicePixelRatio : 1) - 1) * DR;
  }
  function $v(n) {
    let e = n.getBoundingClientRect();
    return e.top >= 0 && e.left >= 0 && e.bottom <= (window.innerHeight || document.documentElement.clientHeight) && e.right <= (window.innerWidth || document.documentElement.clientWidth);
  }
  var bh = (n, e) => n === "reverse" ? e.Mode.Reverse : n === "bounce" ? e.Mode.Bounce : n === "reverse-bounce" ? e.Mode.ReverseBounce : e.Mode.Forward, FR = (n, e) => n === "contain" ? e.Fit.Contain : n === "cover" ? e.Fit.Cover : n === "fill" ? e.Fit.Fill : n === "fit-height" ? e.Fit.FitHeight : n === "fit-width" ? e.Fit.FitWidth : e.Fit.None, OR = (n, e) => {
    let t = new e.VectorFloat();
    return t.push_back(n[0]), t.push_back(n[1]), t;
  }, vh = (n, e) => {
    let t = new e.VectorFloat();
    return n.length !== 2 || (t.push_back(n[0]), t.push_back(n[1])), t;
  }, yh = (n, e) => n ? {
    align: OR(n.align ?? [
      0.5,
      0.5
    ], e),
    fit: FR(n.fit ?? "contain", e)
  } : e.createDefaultLayout(), qv = class bt {
    constructor(e) {
      var _a2, _b2;
      Ce(this, "_canvas"), Ce(this, "_context", null), Ce(this, "_eventManager"), Ce(this, "_animationFrameId", null), Ce(this, "_frameManager"), Ce(this, "_dotLottieCore", null), Ce(this, "_renderConfig", {}), Ce(this, "_isFrozen", false), Ce(this, "_backgroundColor", null), Ce(this, "_pointerUpMethod"), Ce(this, "_pointerDownMethod"), Ce(this, "_pointerMoveMethod"), Ce(this, "_pointerEnterMethod"), Ce(this, "_pointerExitMethod"), this._canvas = e.canvas, this._eventManager = new Xv(), this._frameManager = new CR(), this._renderConfig = {
        ...e.renderConfig,
        devicePixelRatio: ((_a2 = e.renderConfig) == null ? void 0 : _a2.devicePixelRatio) || ss(),
        freezeOnOffscreen: ((_b2 = e.renderConfig) == null ? void 0 : _b2.freezeOnOffscreen) ?? true
      }, Lu.load().then((t) => {
        bt._wasmModule = t, this._dotLottieCore = new t.DotLottiePlayer({
          animationId: e.animationId ?? "",
          themeId: e.themeId ?? "",
          stateMachineId: "",
          autoplay: e.autoplay ?? false,
          backgroundColor: 0,
          loopAnimation: e.loop ?? false,
          mode: bh(e.mode ?? "forward", t),
          segment: vh(e.segment ?? [], t),
          speed: e.speed ?? 1,
          useFrameInterpolation: e.useFrameInterpolation ?? true,
          marker: e.marker ?? "",
          layout: yh(e.layout, t)
        }), this._eventManager.dispatch({
          type: "ready"
        }), e.data ? this._loadFromData(e.data) : e.src && this._loadFromSrc(e.src), e.backgroundColor && this.setBackgroundColor(e.backgroundColor);
      }).catch((t) => {
        this._eventManager.dispatch({
          type: "loadError",
          error: new Error(`Failed to load wasm module: ${t}`)
        });
      }), this._pointerUpMethod = this._onPointerUp.bind(this), this._pointerDownMethod = this._onPointerDown.bind(this), this._pointerMoveMethod = this._onPointerMove.bind(this), this._pointerEnterMethod = this._onPointerEnter.bind(this), this._pointerExitMethod = this._onPointerLeave.bind(this);
    }
    _dispatchError(e) {
      console.error(e), this._eventManager.dispatch({
        type: "loadError",
        error: new Error(e)
      });
    }
    async _fetchData(e) {
      let t = await fetch(e);
      if (!t.ok) throw new Error(`Failed to fetch animation data from URL: ${e}. ${t.status}: ${t.statusText}`);
      let i = await t.arrayBuffer();
      return _m(i) ? i : new TextDecoder().decode(i);
    }
    _loadFromData(e) {
      if (this._dotLottieCore === null) return;
      let t = this._canvas.width, i = this._canvas.height, r = false;
      if (typeof e == "string") {
        if (!vm(e)) {
          this._dispatchError("Invalid Lottie JSON string: The provided string does not conform to the Lottie JSON format.");
          return;
        }
        r = this._dotLottieCore.loadAnimationData(e, t, i);
      } else if (e instanceof ArrayBuffer) {
        if (!_m(e)) {
          this._dispatchError("Invalid dotLottie ArrayBuffer: The provided ArrayBuffer does not conform to the dotLottie format.");
          return;
        }
        r = this._dotLottieCore.loadDotLottieData(e, t, i);
      } else if (typeof e == "object") {
        if (!vm(e)) {
          this._dispatchError("Invalid Lottie JSON object: The provided object does not conform to the Lottie JSON format.");
          return;
        }
        r = this._dotLottieCore.loadAnimationData(JSON.stringify(e), t, i);
      } else {
        this._dispatchError(`Unsupported data type for animation data. Expected: 
          - string (Lottie JSON),
          - ArrayBuffer (dotLottie),
          - object (Lottie JSON). 
          Received: ${typeof e}`);
        return;
      }
      r ? (this._eventManager.dispatch({
        type: "load"
      }), Mn && this.resize(), this._eventManager.dispatch({
        type: "frame",
        currentFrame: this.currentFrame
      }), this._render(), this._dotLottieCore.config().autoplay && (this._dotLottieCore.play(), this._dotLottieCore.isPlaying() ? (this._eventManager.dispatch({
        type: "play"
      }), this._animationFrameId = this._frameManager.requestAnimationFrame(this._draw.bind(this))) : console.error("something went wrong, the animation was suppose to autoplay")), Mn && this._canvas instanceof HTMLCanvasElement && (this._renderConfig.freezeOnOffscreen && Ni.observe(this._canvas, this), this._renderConfig.autoResize && Ui.observe(this._canvas, this))) : this._dispatchError("Failed to load animation data");
    }
    _loadFromSrc(e) {
      this._fetchData(e).then((t) => this._loadFromData(t)).catch((t) => this._dispatchError(`Failed to load animation data from URL: ${e}. ${t}`));
    }
    get buffer() {
      return this._dotLottieCore ? this._dotLottieCore.buffer() : null;
    }
    get activeAnimationId() {
      var _a2;
      return (_a2 = this._dotLottieCore) == null ? void 0 : _a2.activeAnimationId();
    }
    get activeThemeId() {
      var _a2;
      return (_a2 = this._dotLottieCore) == null ? void 0 : _a2.activeThemeId();
    }
    get layout() {
      var _a2;
      let e = (_a2 = this._dotLottieCore) == null ? void 0 : _a2.config().layout;
      if (e) return {
        align: [
          e.align.get(0),
          e.align.get(1)
        ],
        fit: (() => {
          var _a3, _b2, _c2, _d2, _e, _f2;
          switch (e.fit) {
            case ((_a3 = bt._wasmModule) == null ? void 0 : _a3.Fit.Contain):
              return "contain";
            case ((_b2 = bt._wasmModule) == null ? void 0 : _b2.Fit.Cover):
              return "cover";
            case ((_c2 = bt._wasmModule) == null ? void 0 : _c2.Fit.Fill):
              return "fill";
            case ((_d2 = bt._wasmModule) == null ? void 0 : _d2.Fit.FitHeight):
              return "fit-height";
            case ((_e = bt._wasmModule) == null ? void 0 : _e.Fit.FitWidth):
              return "fit-width";
            case ((_f2 = bt._wasmModule) == null ? void 0 : _f2.Fit.None):
              return "none";
            default:
              return "contain";
          }
        })()
      };
    }
    get marker() {
      var _a2;
      return (_a2 = this._dotLottieCore) == null ? void 0 : _a2.config().marker;
    }
    get manifest() {
      var _a2;
      try {
        let e = (_a2 = this._dotLottieCore) == null ? void 0 : _a2.manifestString();
        if (this._dotLottieCore === null || !e) return null;
        let t = JSON.parse(e);
        return Object.keys(t).length === 0 ? null : t;
      } catch {
        return null;
      }
    }
    get renderConfig() {
      return this._renderConfig;
    }
    get segment() {
      var _a2;
      let e = (_a2 = this._dotLottieCore) == null ? void 0 : _a2.config().segment;
      if (e && e.size() === 2) return [
        e.get(0),
        e.get(1)
      ];
    }
    get loop() {
      var _a2;
      return ((_a2 = this._dotLottieCore) == null ? void 0 : _a2.config().loopAnimation) ?? false;
    }
    get mode() {
      var _a2, _b2, _c2, _d2;
      let e = (_a2 = this._dotLottieCore) == null ? void 0 : _a2.config().mode;
      return e === ((_b2 = bt._wasmModule) == null ? void 0 : _b2.Mode.Reverse) ? "reverse" : e === ((_c2 = bt._wasmModule) == null ? void 0 : _c2.Mode.Bounce) ? "bounce" : e === ((_d2 = bt._wasmModule) == null ? void 0 : _d2.Mode.ReverseBounce) ? "reverse-bounce" : "forward";
    }
    get isFrozen() {
      return this._isFrozen;
    }
    get backgroundColor() {
      return this._backgroundColor ?? "";
    }
    get autoplay() {
      var _a2;
      return ((_a2 = this._dotLottieCore) == null ? void 0 : _a2.config().autoplay) ?? false;
    }
    get useFrameInterpolation() {
      var _a2;
      return ((_a2 = this._dotLottieCore) == null ? void 0 : _a2.config().useFrameInterpolation) ?? false;
    }
    get speed() {
      var _a2;
      return ((_a2 = this._dotLottieCore) == null ? void 0 : _a2.config().speed) ?? 0;
    }
    get isReady() {
      return this._dotLottieCore !== null;
    }
    get isLoaded() {
      var _a2;
      return ((_a2 = this._dotLottieCore) == null ? void 0 : _a2.isLoaded()) ?? false;
    }
    get isPlaying() {
      var _a2;
      return ((_a2 = this._dotLottieCore) == null ? void 0 : _a2.isPlaying()) ?? false;
    }
    get isPaused() {
      var _a2;
      return ((_a2 = this._dotLottieCore) == null ? void 0 : _a2.isPaused()) ?? false;
    }
    get isStopped() {
      var _a2;
      return ((_a2 = this._dotLottieCore) == null ? void 0 : _a2.isStopped()) ?? false;
    }
    get currentFrame() {
      return this._dotLottieCore ? Math.round(this._dotLottieCore.currentFrame() * 100) / 100 : 0;
    }
    get loopCount() {
      var _a2;
      return ((_a2 = this._dotLottieCore) == null ? void 0 : _a2.loopCount()) ?? 0;
    }
    get totalFrames() {
      var _a2;
      return ((_a2 = this._dotLottieCore) == null ? void 0 : _a2.totalFrames()) ?? 0;
    }
    get duration() {
      var _a2;
      return ((_a2 = this._dotLottieCore) == null ? void 0 : _a2.duration()) ?? 0;
    }
    get segmentDuration() {
      var _a2;
      return ((_a2 = this._dotLottieCore) == null ? void 0 : _a2.segmentDuration()) ?? 0;
    }
    get canvas() {
      return this._canvas;
    }
    load(e) {
      this._dotLottieCore === null || bt._wasmModule === null || (this._animationFrameId !== null && (this._frameManager.cancelAnimationFrame(this._animationFrameId), this._animationFrameId = null), this._isFrozen = false, this._dotLottieCore.setConfig({
        animationId: e.animationId ?? "",
        themeId: e.themeId ?? "",
        stateMachineId: "",
        autoplay: e.autoplay ?? false,
        backgroundColor: 0,
        loopAnimation: e.loop ?? false,
        mode: bh(e.mode ?? "forward", bt._wasmModule),
        segment: vh(e.segment ?? [], bt._wasmModule),
        speed: e.speed ?? 1,
        useFrameInterpolation: e.useFrameInterpolation ?? true,
        marker: e.marker ?? "",
        layout: yh(e.layout, bt._wasmModule)
      }), e.data ? this._loadFromData(e.data) : e.src && this._loadFromSrc(e.src), this.setBackgroundColor(e.backgroundColor ?? ""));
    }
    _render() {
      if (this._dotLottieCore === null) return false;
      if (!this._context && "getContext" in this._canvas && typeof this._canvas.getContext == "function" && (this._context = this._canvas.getContext("2d")), this._dotLottieCore.render()) {
        if (this._context) {
          let e = this._dotLottieCore.buffer(), t = new Uint8ClampedArray(e, 0, this._canvas.width * this._canvas.height * 4), i = null;
          typeof ImageData > "u" ? (i = this._context.createImageData(this._canvas.width, this._canvas.height), i.data.set(t)) : i = new ImageData(t, this._canvas.width, this._canvas.height), this._context.putImageData(i, 0, 0);
        }
        return this._eventManager.dispatch({
          type: "render",
          currentFrame: this.currentFrame
        }), true;
      }
      return false;
    }
    _draw() {
      if (!(this._dotLottieCore === null || !this._dotLottieCore.isPlaying())) try {
        let e = Math.round(this._dotLottieCore.requestFrame() * 1e3) / 1e3;
        if (this._dotLottieCore.setFrame(e) && (this._eventManager.dispatch({
          type: "frame",
          currentFrame: this.currentFrame
        }), this._render() && this._dotLottieCore.isComplete())) if (this._dotLottieCore.config().loopAnimation) this._eventManager.dispatch({
          type: "loop",
          loopCount: this._dotLottieCore.loopCount()
        });
        else {
          this._eventManager.dispatch({
            type: "complete"
          });
          return;
        }
        this._animationFrameId = this._frameManager.requestAnimationFrame(this._draw.bind(this));
      } catch (e) {
        console.error("Error in animation frame:", e), this._eventManager.dispatch({
          type: "renderError",
          error: e
        }), e instanceof WebAssembly.RuntimeError && this.destroy();
      }
    }
    play() {
      this._dotLottieCore !== null && (this._animationFrameId !== null && (this._frameManager.cancelAnimationFrame(this._animationFrameId), this._animationFrameId = null), (this._dotLottieCore.play() || this._dotLottieCore.isPlaying()) && (this._isFrozen = false, this._eventManager.dispatch({
        type: "play"
      }), this._animationFrameId = this._frameManager.requestAnimationFrame(this._draw.bind(this))), Mn && this._canvas instanceof HTMLCanvasElement && this._renderConfig.freezeOnOffscreen && !$v(this._canvas) && this.freeze());
    }
    pause() {
      this._dotLottieCore !== null && (this._dotLottieCore.pause() || this._dotLottieCore.isPaused()) && this._eventManager.dispatch({
        type: "pause"
      });
    }
    stop() {
      this._dotLottieCore !== null && this._dotLottieCore.stop() && (this._eventManager.dispatch({
        type: "frame",
        currentFrame: this.currentFrame
      }), this._render(), this._eventManager.dispatch({
        type: "stop"
      }));
    }
    setFrame(e) {
      this._dotLottieCore === null || e < 0 || e > this._dotLottieCore.totalFrames() || this._dotLottieCore.seek(e) && (this._eventManager.dispatch({
        type: "frame",
        currentFrame: this.currentFrame
      }), this._render());
    }
    setSpeed(e) {
      this._dotLottieCore !== null && this._dotLottieCore.setConfig({
        ...this._dotLottieCore.config(),
        speed: e
      });
    }
    setBackgroundColor(e) {
      this._dotLottieCore !== null && (Mn && this._canvas instanceof HTMLCanvasElement ? this._canvas.style.backgroundColor = e : this._dotLottieCore.setConfig({
        ...this._dotLottieCore.config(),
        backgroundColor: IR(e)
      }), this._backgroundColor = e);
    }
    setLoop(e) {
      this._dotLottieCore !== null && this._dotLottieCore.setConfig({
        ...this._dotLottieCore.config(),
        loopAnimation: e
      });
    }
    setUseFrameInterpolation(e) {
      this._dotLottieCore !== null && this._dotLottieCore.setConfig({
        ...this._dotLottieCore.config(),
        useFrameInterpolation: e
      });
    }
    addEventListener(e, t) {
      this._eventManager.addEventListener(e, t);
    }
    removeEventListener(e, t) {
      this._eventManager.removeEventListener(e, t);
    }
    destroy() {
      var _a2;
      this._animationFrameId !== null && (this._frameManager.cancelAnimationFrame(this._animationFrameId), this._animationFrameId = null), Mn && this._canvas instanceof HTMLCanvasElement && (Ni.unobserve(this._canvas), Ui.unobserve(this._canvas)), (_a2 = this._dotLottieCore) == null ? void 0 : _a2.delete(), this._dotLottieCore = null, this._context = null, this._eventManager.dispatch({
        type: "destroy"
      }), this._eventManager.removeAllEventListeners(), this._cleanupStateMachineListeners();
    }
    freeze() {
      this._animationFrameId !== null && (this._frameManager.cancelAnimationFrame(this._animationFrameId), this._animationFrameId = null, this._isFrozen = true, this._eventManager.dispatch({
        type: "freeze"
      }));
    }
    unfreeze() {
      this._animationFrameId === null && (this._animationFrameId = this._frameManager.requestAnimationFrame(this._draw.bind(this)), this._isFrozen = false, this._eventManager.dispatch({
        type: "unfreeze"
      }));
    }
    resize() {
      if (!(!this._dotLottieCore || !this.isLoaded)) {
        if (Mn && this._canvas instanceof HTMLCanvasElement) {
          let e = this._renderConfig.devicePixelRatio || window.devicePixelRatio || 1, { height: t, width: i } = this._canvas.getBoundingClientRect();
          t !== 0 && i !== 0 && (this._canvas.width = i * e, this._canvas.height = t * e);
        }
        this._dotLottieCore.resize(this._canvas.width, this._canvas.height) && this._render();
      }
    }
    setSegment(e, t) {
      this._dotLottieCore === null || bt._wasmModule === null || this._dotLottieCore.setConfig({
        ...this._dotLottieCore.config(),
        segment: vh([
          e,
          t
        ], bt._wasmModule)
      });
    }
    setMode(e) {
      this._dotLottieCore === null || bt._wasmModule === null || this._dotLottieCore.setConfig({
        ...this._dotLottieCore.config(),
        mode: bh(e, bt._wasmModule)
      });
    }
    setRenderConfig(e) {
      let { devicePixelRatio: t, freezeOnOffscreen: i, ...r } = e;
      this._renderConfig = {
        ...this._renderConfig,
        ...r,
        devicePixelRatio: t || ss(),
        freezeOnOffscreen: i ?? true
      }, Mn && this._canvas instanceof HTMLCanvasElement && (this._renderConfig.autoResize ? Ui.observe(this._canvas, this) : Ui.unobserve(this._canvas), this._renderConfig.freezeOnOffscreen ? Ni.observe(this._canvas, this) : (Ni.unobserve(this._canvas), this._isFrozen && this.unfreeze()));
    }
    loadAnimation(e) {
      this._dotLottieCore === null || this._dotLottieCore.activeAnimationId() === e || (this._dotLottieCore.loadAnimation(e, this._canvas.width, this._canvas.height) ? (this._eventManager.dispatch({
        type: "load"
      }), this.resize()) : this._eventManager.dispatch({
        type: "loadError",
        error: new Error(`Failed to animation :${e}`)
      }));
    }
    setMarker(e) {
      this._dotLottieCore !== null && this._dotLottieCore.setConfig({
        ...this._dotLottieCore.config(),
        marker: e
      });
    }
    markers() {
      var _a2;
      let e = (_a2 = this._dotLottieCore) == null ? void 0 : _a2.markers();
      if (e) {
        let t = [];
        for (let i = 0; i < e.size(); i += 1) {
          let r = e.get(i);
          t.push({
            name: r.name,
            time: r.time,
            duration: r.duration
          });
        }
        return t;
      }
      return [];
    }
    setTheme(e) {
      if (this._dotLottieCore === null) return false;
      let t = this._dotLottieCore.setTheme(e);
      return this._render(), t;
    }
    resetTheme() {
      return this._dotLottieCore === null ? false : this._dotLottieCore.resetTheme();
    }
    setThemeData(e) {
      if (this._dotLottieCore === null) return false;
      let t = this._dotLottieCore.setThemeData(e);
      return this._render(), t;
    }
    setSlots(e) {
      this._dotLottieCore !== null && this._dotLottieCore.setSlots(e);
    }
    setLayout(e) {
      this._dotLottieCore === null || bt._wasmModule === null || this._dotLottieCore.setConfig({
        ...this._dotLottieCore.config(),
        layout: yh(e, bt._wasmModule)
      });
    }
    setViewport(e, t, i, r) {
      return this._dotLottieCore === null ? false : this._dotLottieCore.setViewport(e, t, i, r);
    }
    static setWasmUrl(e) {
      Lu.setWasmUrl(e);
    }
    loadStateMachine(e) {
      var _a2;
      return ((_a2 = this._dotLottieCore) == null ? void 0 : _a2.stateMachineLoad(e)) ?? false;
    }
    startStateMachine() {
      if (bt._wasmModule === null || this._dotLottieCore === null) return false;
      let e = bt._wasmModule.createDefaultOpenURL(), t = this._dotLottieCore.stateMachineStart(e);
      return t && this._setupStateMachineListeners(), t;
    }
    stopStateMachine() {
      var _a2;
      let e = ((_a2 = this._dotLottieCore) == null ? void 0 : _a2.stateMachineStop()) ?? false;
      return e && this._cleanupStateMachineListeners(), e;
    }
    _getPointerPosition(e) {
      let t = this._canvas.getBoundingClientRect(), i = this._canvas.width / t.width, r = this._canvas.height / t.height, s = this._renderConfig.devicePixelRatio || window.devicePixelRatio || 1, o = (e.clientX - t.left) * i / s, a = (e.clientY - t.top) * r / s;
      return {
        x: o,
        y: a
      };
    }
    _onPointerUp(e) {
      let { x: t, y: i } = this._getPointerPosition(e);
      this.postPointerUpEvent(t, i);
    }
    _onPointerDown(e) {
      let { x: t, y: i } = this._getPointerPosition(e);
      this.postPointerDownEvent(t, i);
    }
    _onPointerMove(e) {
      let { x: t, y: i } = this._getPointerPosition(e);
      this.postPointerMoveEvent(t, i);
    }
    _onPointerEnter(e) {
      let { x: t, y: i } = this._getPointerPosition(e);
      this.postPointerEnterEvent(t, i);
    }
    _onPointerLeave(e) {
      let { x: t, y: i } = this._getPointerPosition(e);
      this.postPointerExitEvent(t, i);
    }
    postPointerUpEvent(e, t) {
      var _a2;
      return (_a2 = this._dotLottieCore) == null ? void 0 : _a2.stateMachinePostPointerUpEvent(e, t);
    }
    postPointerDownEvent(e, t) {
      var _a2;
      return (_a2 = this._dotLottieCore) == null ? void 0 : _a2.stateMachinePostPointerDownEvent(e, t);
    }
    postPointerMoveEvent(e, t) {
      var _a2;
      return (_a2 = this._dotLottieCore) == null ? void 0 : _a2.stateMachinePostPointerMoveEvent(e, t);
    }
    postPointerEnterEvent(e, t) {
      var _a2;
      return (_a2 = this._dotLottieCore) == null ? void 0 : _a2.stateMachinePostPointerEnterEvent(e, t);
    }
    postPointerExitEvent(e, t) {
      var _a2;
      return (_a2 = this._dotLottieCore) == null ? void 0 : _a2.stateMachinePostPointerExitEvent(e, t);
    }
    getStateMachineListeners() {
      if (!this._dotLottieCore) return [];
      let e = this._dotLottieCore.stateMachineFrameworkSetup(), t = [];
      for (let i = 0; i < e.size(); i += 1) t.push(e.get(i));
      return t;
    }
    _setupStateMachineListeners() {
      if (Mn && this._canvas instanceof HTMLCanvasElement && this._dotLottieCore !== null && this.isLoaded) {
        let e = this.getStateMachineListeners();
        e.includes("PointerUp") && this._canvas.addEventListener("pointerup", this._pointerUpMethod), e.includes("PointerDown") && this._canvas.addEventListener("pointerdown", this._pointerDownMethod), e.includes("PointerMove") && this._canvas.addEventListener("pointermove", this._pointerMoveMethod), e.includes("PointerEnter") && this._canvas.addEventListener("pointerenter", this._pointerEnterMethod), e.includes("PointerExit") && this._canvas.addEventListener("pointerleave", this._pointerExitMethod);
      }
    }
    _cleanupStateMachineListeners() {
      Mn && this._canvas instanceof HTMLCanvasElement && (this._canvas.removeEventListener("pointerup", this._pointerUpMethod), this._canvas.removeEventListener("pointerdown", this._pointerDownMethod), this._canvas.removeEventListener("pointermove", this._pointerMoveMethod), this._canvas.removeEventListener("pointerenter", this._pointerEnterMethod), this._canvas.removeEventListener("pointerleave", this._pointerExitMethod));
    }
    loadStateMachineData(e) {
      var _a2;
      return ((_a2 = this._dotLottieCore) == null ? void 0 : _a2.stateMachineLoadData(e)) ?? false;
    }
    animationSize() {
      var _a2, _b2;
      let e = ((_a2 = this._dotLottieCore) == null ? void 0 : _a2.animationSize().get(0)) ?? 0, t = ((_b2 = this._dotLottieCore) == null ? void 0 : _b2.animationSize().get(1)) ?? 0;
      return {
        width: e,
        height: t
      };
    }
    setStateMachineBooleanContext(e, t) {
      var _a2;
      return ((_a2 = this._dotLottieCore) == null ? void 0 : _a2.stateMachineSetBooleanInput(e, t)) ?? false;
    }
    setStateMachineNumericContext(e, t) {
      var _a2;
      return ((_a2 = this._dotLottieCore) == null ? void 0 : _a2.stateMachineSetNumericInput(e, t)) ?? false;
    }
    setStateMachineStringContext(e, t) {
      var _a2;
      return ((_a2 = this._dotLottieCore) == null ? void 0 : _a2.stateMachineSetStringInput(e, t)) ?? false;
    }
    getLayerBoundingBox(e) {
      var _a2;
      let t = (_a2 = this._dotLottieCore) == null ? void 0 : _a2.getLayerBounds(e);
      if (!t || t.size() !== 8) return;
      let i = [];
      for (let r = 0; r < 8; r += 1) i.push(t.get(r));
      return i;
    }
    static transformThemeToLottieSlots(e, t) {
      var _a2;
      return ((_a2 = bt._wasmModule) == null ? void 0 : _a2.transformThemeToLottieSlots(e, t)) ?? "";
    }
  };
  Ce(qv, "_wasmModule", null);
  var kR = qv, NR = class {
    constructor() {
      if (typeof Worker > "u") throw new Error("Worker is not supported in this environment.");
      let n = new Blob([
        new Uint8Array([
          34,
          117,
          115,
          101,
          32,
          115,
          116,
          114,
          105,
          99,
          116,
          34,
          59,
          10,
          40,
          40,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          118,
          97,
          114,
          32,
          95,
          95,
          100,
          101,
          102,
          80,
          114,
          111,
          112,
          32,
          61,
          32,
          79,
          98,
          106,
          101,
          99,
          116,
          46,
          100,
          101,
          102,
          105,
          110,
          101,
          80,
          114,
          111,
          112,
          101,
          114,
          116,
          121,
          59,
          10,
          32,
          32,
          118,
          97,
          114,
          32,
          95,
          95,
          100,
          101,
          102,
          78,
          111,
          114,
          109,
          97,
          108,
          80,
          114,
          111,
          112,
          32,
          61,
          32,
          40,
          111,
          98,
          106,
          44,
          32,
          107,
          101,
          121,
          44,
          32,
          118,
          97,
          108,
          117,
          101,
          41,
          32,
          61,
          62,
          32,
          107,
          101,
          121,
          32,
          105,
          110,
          32,
          111,
          98,
          106,
          32,
          63,
          32,
          95,
          95,
          100,
          101,
          102,
          80,
          114,
          111,
          112,
          40,
          111,
          98,
          106,
          44,
          32,
          107,
          101,
          121,
          44,
          32,
          123,
          32,
          101,
          110,
          117,
          109,
          101,
          114,
          97,
          98,
          108,
          101,
          58,
          32,
          116,
          114,
          117,
          101,
          44,
          32,
          99,
          111,
          110,
          102,
          105,
          103,
          117,
          114,
          97,
          98,
          108,
          101,
          58,
          32,
          116,
          114,
          117,
          101,
          44,
          32,
          119,
          114,
          105,
          116,
          97,
          98,
          108,
          101,
          58,
          32,
          116,
          114,
          117,
          101,
          44,
          32,
          118,
          97,
          108,
          117,
          101,
          32,
          125,
          41,
          32,
          58,
          32,
          111,
          98,
          106,
          91,
          107,
          101,
          121,
          93,
          32,
          61,
          32,
          118,
          97,
          108,
          117,
          101,
          59,
          10,
          32,
          32,
          118,
          97,
          114,
          32,
          95,
          95,
          112,
          117,
          98,
          108,
          105,
          99,
          70,
          105,
          101,
          108,
          100,
          32,
          61,
          32,
          40,
          111,
          98,
          106,
          44,
          32,
          107,
          101,
          121,
          44,
          32,
          118,
          97,
          108,
          117,
          101,
          41,
          32,
          61,
          62,
          32,
          95,
          95,
          100,
          101,
          102,
          78,
          111,
          114,
          109,
          97,
          108,
          80,
          114,
          111,
          112,
          40,
          111,
          98,
          106,
          44,
          32,
          116,
          121,
          112,
          101,
          111,
          102,
          32,
          107,
          101,
          121,
          32,
          33,
          61,
          61,
          32,
          34,
          115,
          121,
          109,
          98,
          111,
          108,
          34,
          32,
          63,
          32,
          107,
          101,
          121,
          32,
          43,
          32,
          34,
          34,
          32,
          58,
          32,
          107,
          101,
          121,
          44,
          32,
          118,
          97,
          108,
          117,
          101,
          41,
          59,
          10,
          10,
          32,
          32,
          47,
          47,
          32,
          115,
          114,
          99,
          47,
          97,
          110,
          105,
          109,
          97,
          116,
          105,
          111,
          110,
          45,
          102,
          114,
          97,
          109,
          101,
          45,
          109,
          97,
          110,
          97,
          103,
          101,
          114,
          46,
          116,
          115,
          10,
          32,
          32,
          118,
          97,
          114,
          32,
          87,
          101,
          98,
          65,
          110,
          105,
          109,
          97,
          116,
          105,
          111,
          110,
          70,
          114,
          97,
          109,
          101,
          83,
          116,
          114,
          97,
          116,
          101,
          103,
          121,
          32,
          61,
          32,
          99,
          108,
          97,
          115,
          115,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          114,
          101,
          113,
          117,
          101,
          115,
          116,
          65,
          110,
          105,
          109,
          97,
          116,
          105,
          111,
          110,
          70,
          114,
          97,
          109,
          101,
          40,
          99,
          97,
          108,
          108,
          98,
          97,
          99,
          107,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          114,
          101,
          113,
          117,
          101,
          115,
          116,
          65,
          110,
          105,
          109,
          97,
          116,
          105,
          111,
          110,
          70,
          114,
          97,
          109,
          101,
          40,
          99,
          97,
          108,
          108,
          98,
          97,
          99,
          107,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          99,
          97,
          110,
          99,
          101,
          108,
          65,
          110,
          105,
          109,
          97,
          116,
          105,
          111,
          110,
          70,
          114,
          97,
          109,
          101,
          40,
          105,
          100,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          97,
          110,
          99,
          101,
          108,
          65,
          110,
          105,
          109,
          97,
          116,
          105,
          111,
          110,
          70,
          114,
          97,
          109,
          101,
          40,
          105,
          100,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          125,
          59,
          10,
          32,
          32,
          118,
          97,
          114,
          32,
          78,
          111,
          100,
          101,
          65,
          110,
          105,
          109,
          97,
          116,
          105,
          111,
          110,
          70,
          114,
          97,
          109,
          101,
          83,
          116,
          114,
          97,
          116,
          101,
          103,
          121,
          32,
          61,
          32,
          99,
          108,
          97,
          115,
          115,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          114,
          117,
          99,
          116,
          111,
          114,
          40,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          95,
          95,
          112,
          117,
          98,
          108,
          105,
          99,
          70,
          105,
          101,
          108,
          100,
          40,
          116,
          104,
          105,
          115,
          44,
          32,
          34,
          95,
          108,
          97,
          115,
          116,
          72,
          97,
          110,
          100,
          108,
          101,
          73,
          100,
          34,
          44,
          32,
          48,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          95,
          95,
          112,
          117,
          98,
          108,
          105,
          99,
          70,
          105,
          101,
          108,
          100,
          40,
          116,
          104,
          105,
          115,
          44,
          32,
          34,
          95,
          108,
          97,
          115,
          116,
          73,
          109,
          109,
          101,
          100,
          105,
          97,
          116,
          101,
          34,
          44,
          32,
          110,
          117,
          108,
          108,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          114,
          101,
          113,
          117,
          101,
          115,
          116,
          65,
          110,
          105,
          109,
          97,
          116,
          105,
          111,
          110,
          70,
          114,
          97,
          109,
          101,
          40,
          99,
          97,
          108,
          108,
          98,
          97,
          99,
          107,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          116,
          104,
          105,
          115,
          46,
          95,
          108,
          97,
          115,
          116,
          72,
          97,
          110,
          100,
          108,
          101,
          73,
          100,
          32,
          62,
          61,
          32,
          78,
          117,
          109,
          98,
          101,
          114,
          46,
          77,
          65,
          88,
          95,
          83,
          65,
          70,
          69,
          95,
          73,
          78,
          84,
          69,
          71,
          69,
          82,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          108,
          97,
          115,
          116,
          72,
          97,
          110,
          100,
          108,
          101,
          73,
          100,
          32,
          61,
          32,
          48,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          108,
          97,
          115,
          116,
          72,
          97,
          110,
          100,
          108,
          101,
          73,
          100,
          32,
          43,
          61,
          32,
          49,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          108,
          97,
          115,
          116,
          73,
          109,
          109,
          101,
          100,
          105,
          97,
          116,
          101,
          32,
          61,
          32,
          115,
          101,
          116,
          73,
          109,
          109,
          101,
          100,
          105,
          97,
          116,
          101,
          40,
          40,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          97,
          108,
          108,
          98,
          97,
          99,
          107,
          40,
          68,
          97,
          116,
          101,
          46,
          110,
          111,
          119,
          40,
          41,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          108,
          97,
          115,
          116,
          72,
          97,
          110,
          100,
          108,
          101,
          73,
          100,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          99,
          97,
          110,
          99,
          101,
          108,
          65,
          110,
          105,
          109,
          97,
          116,
          105,
          111,
          110,
          70,
          114,
          97,
          109,
          101,
          40,
          95,
          105,
          100,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          116,
          104,
          105,
          115,
          46,
          95,
          108,
          97,
          115,
          116,
          73,
          109,
          109,
          101,
          100,
          105,
          97,
          116,
          101,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          108,
          101,
          97,
          114,
          73,
          109,
          109,
          101,
          100,
          105,
          97,
          116,
          101,
          40,
          116,
          104,
          105,
          115,
          46,
          95,
          108,
          97,
          115,
          116,
          73,
          109,
          109,
          101,
          100,
          105,
          97,
          116,
          101,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          125,
          59,
          10,
          32,
          32,
          118,
          97,
          114,
          32,
          65,
          110,
          105,
          109,
          97,
          116,
          105,
          111,
          110,
          70,
          114,
          97,
          109,
          101,
          77,
          97,
          110,
          97,
          103,
          101,
          114,
          32,
          61,
          32,
          99,
          108,
          97,
          115,
          115,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          114,
          117,
          99,
          116,
          111,
          114,
          40,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          95,
          95,
          112,
          117,
          98,
          108,
          105,
          99,
          70,
          105,
          101,
          108,
          100,
          40,
          116,
          104,
          105,
          115,
          44,
          32,
          34,
          95,
          115,
          116,
          114,
          97,
          116,
          101,
          103,
          121,
          34,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          115,
          116,
          114,
          97,
          116,
          101,
          103,
          121,
          32,
          61,
          32,
          116,
          121,
          112,
          101,
          111,
          102,
          32,
          114,
          101,
          113,
          117,
          101,
          115,
          116,
          65,
          110,
          105,
          109,
          97,
          116,
          105,
          111,
          110,
          70,
          114,
          97,
          109,
          101,
          32,
          61,
          61,
          61,
          32,
          34,
          102,
          117,
          110,
          99,
          116,
          105,
          111,
          110,
          34,
          32,
          63,
          32,
          110,
          101,
          119,
          32,
          87,
          101,
          98,
          65,
          110,
          105,
          109,
          97,
          116,
          105,
          111,
          110,
          70,
          114,
          97,
          109,
          101,
          83,
          116,
          114,
          97,
          116,
          101,
          103,
          121,
          40,
          41,
          32,
          58,
          32,
          110,
          101,
          119,
          32,
          78,
          111,
          100,
          101,
          65,
          110,
          105,
          109,
          97,
          116,
          105,
          111,
          110,
          70,
          114,
          97,
          109,
          101,
          83,
          116,
          114,
          97,
          116,
          101,
          103,
          121,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          114,
          101,
          113,
          117,
          101,
          115,
          116,
          65,
          110,
          105,
          109,
          97,
          116,
          105,
          111,
          110,
          70,
          114,
          97,
          109,
          101,
          40,
          99,
          97,
          108,
          108,
          98,
          97,
          99,
          107,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          115,
          116,
          114,
          97,
          116,
          101,
          103,
          121,
          46,
          114,
          101,
          113,
          117,
          101,
          115,
          116,
          65,
          110,
          105,
          109,
          97,
          116,
          105,
          111,
          110,
          70,
          114,
          97,
          109,
          101,
          40,
          99,
          97,
          108,
          108,
          98,
          97,
          99,
          107,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          99,
          97,
          110,
          99,
          101,
          108,
          65,
          110,
          105,
          109,
          97,
          116,
          105,
          111,
          110,
          70,
          114,
          97,
          109,
          101,
          40,
          105,
          100,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          115,
          116,
          114,
          97,
          116,
          101,
          103,
          121,
          46,
          99,
          97,
          110,
          99,
          101,
          108,
          65,
          110,
          105,
          109,
          97,
          116,
          105,
          111,
          110,
          70,
          114,
          97,
          109,
          101,
          40,
          105,
          100,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          125,
          59,
          10,
          10,
          32,
          32,
          47,
          47,
          32,
          115,
          114,
          99,
          47,
          99,
          111,
          110,
          115,
          116,
          97,
          110,
          116,
          115,
          46,
          116,
          115,
          10,
          32,
          32,
          118,
          97,
          114,
          32,
          73,
          83,
          95,
          66,
          82,
          79,
          87,
          83,
          69,
          82,
          32,
          61,
          32,
          116,
          121,
          112,
          101,
          111,
          102,
          32,
          119,
          105,
          110,
          100,
          111,
          119,
          32,
          33,
          61,
          61,
          32,
          34,
          117,
          110,
          100,
          101,
          102,
          105,
          110,
          101,
          100,
          34,
          32,
          38,
          38,
          32,
          116,
          121,
          112,
          101,
          111,
          102,
          32,
          119,
          105,
          110,
          100,
          111,
          119,
          46,
          100,
          111,
          99,
          117,
          109,
          101,
          110,
          116,
          32,
          33,
          61,
          61,
          32,
          34,
          117,
          110,
          100,
          101,
          102,
          105,
          110,
          101,
          100,
          34,
          59,
          10,
          32,
          32,
          118,
          97,
          114,
          32,
          90,
          73,
          80,
          95,
          83,
          73,
          71,
          78,
          65,
          84,
          85,
          82,
          69,
          32,
          61,
          32,
          110,
          101,
          119,
          32,
          85,
          105,
          110,
          116,
          56,
          65,
          114,
          114,
          97,
          121,
          40,
          91,
          56,
          48,
          44,
          32,
          55,
          53,
          44,
          32,
          51,
          44,
          32,
          52,
          93,
          41,
          59,
          10,
          32,
          32,
          118,
          97,
          114,
          32,
          76,
          79,
          84,
          84,
          73,
          69,
          95,
          74,
          83,
          79,
          78,
          95,
          77,
          65,
          78,
          68,
          65,
          84,
          79,
          82,
          89,
          95,
          70,
          73,
          69,
          76,
          68,
          83,
          32,
          61,
          32,
          91,
          34,
          118,
          34,
          44,
          32,
          34,
          105,
          112,
          34,
          44,
          32,
          34,
          111,
          112,
          34,
          44,
          32,
          34,
          108,
          97,
          121,
          101,
          114,
          115,
          34,
          44,
          32,
          34,
          102,
          114,
          34,
          44,
          32,
          34,
          119,
          34,
          44,
          32,
          34,
          104,
          34,
          93,
          59,
          10,
          32,
          32,
          118,
          97,
          114,
          32,
          80,
          65,
          67,
          75,
          65,
          71,
          69,
          95,
          86,
          69,
          82,
          83,
          73,
          79,
          78,
          32,
          61,
          32,
          34,
          48,
          46,
          52,
          53,
          46,
          48,
          34,
          59,
          10,
          32,
          32,
          118,
          97,
          114,
          32,
          80,
          65,
          67,
          75,
          65,
          71,
          69,
          95,
          78,
          65,
          77,
          69,
          32,
          61,
          32,
          34,
          64,
          108,
          111,
          116,
          116,
          105,
          101,
          102,
          105,
          108,
          101,
          115,
          47,
          100,
          111,
          116,
          108,
          111,
          116,
          116,
          105,
          101,
          45,
          119,
          101,
          98,
          34,
          59,
          10,
          32,
          32,
          118,
          97,
          114,
          32,
          68,
          69,
          70,
          65,
          85,
          76,
          84,
          95,
          68,
          80,
          82,
          95,
          70,
          65,
          67,
          84,
          79,
          82,
          32,
          61,
          32,
          48,
          46,
          55,
          53,
          59,
          10,
          10,
          32,
          32,
          47,
          47,
          32,
          115,
          114,
          99,
          47,
          99,
          111,
          114,
          101,
          47,
          100,
          111,
          116,
          108,
          111,
          116,
          116,
          105,
          101,
          45,
          112,
          108,
          97,
          121,
          101,
          114,
          46,
          106,
          115,
          10,
          32,
          32,
          118,
          97,
          114,
          32,
          105,
          109,
          112,
          111,
          114,
          116,
          95,
          109,
          101,
          116,
          97,
          32,
          61,
          32,
          123,
          125,
          59,
          10,
          32,
          32,
          118,
          97,
          114,
          32,
          99,
          114,
          101,
          97,
          116,
          101,
          68,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          80,
          108,
          97,
          121,
          101,
          114,
          77,
          111,
          100,
          117,
          108,
          101,
          32,
          61,
          32,
          47,
          42,
          32,
          64,
          95,
          95,
          80,
          85,
          82,
          69,
          95,
          95,
          32,
          42,
          47,
          32,
          40,
          40,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          97,
          115,
          121,
          110,
          99,
          32,
          102,
          117,
          110,
          99,
          116,
          105,
          111,
          110,
          40,
          109,
          111,
          100,
          117,
          108,
          101,
          65,
          114,
          103,
          32,
          61,
          32,
          123,
          125,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          109,
          111,
          100,
          117,
          108,
          101,
          82,
          116,
          110,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          110,
          32,
          61,
          32,
          109,
          111,
          100,
          117,
          108,
          101,
          65,
          114,
          103,
          44,
          32,
          97,
          97,
          44,
          32,
          98,
          97,
          44,
          32,
          99,
          97,
          32,
          61,
          32,
          110,
          101,
          119,
          32,
          80,
          114,
          111,
          109,
          105,
          115,
          101,
          40,
          40,
          98,
          44,
          32,
          97,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          97,
          97,
          32,
          61,
          32,
          98,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          98,
          97,
          32,
          61,
          32,
          97,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          41,
          44,
          32,
          100,
          97,
          32,
          61,
          32,
          34,
          46,
          47,
          116,
          104,
          105,
          115,
          46,
          112,
          114,
          111,
          103,
          114,
          97,
          109,
          34,
          44,
          32,
          101,
          97,
          32,
          61,
          32,
          105,
          109,
          112,
          111,
          114,
          116,
          95,
          109,
          101,
          116,
          97,
          46,
          117,
          114,
          108,
          44,
          32,
          102,
          97,
          32,
          61,
          32,
          34,
          34,
          44,
          32,
          104,
          97,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          114,
          121,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          97,
          32,
          61,
          32,
          110,
          101,
          119,
          32,
          85,
          82,
          76,
          40,
          34,
          46,
          34,
          44,
          32,
          101,
          97,
          41,
          46,
          104,
          114,
          101,
          102,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          32,
          99,
          97,
          116,
          99,
          104,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          104,
          97,
          32,
          61,
          32,
          97,
          115,
          121,
          110,
          99,
          32,
          40,
          98,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          98,
          32,
          61,
          32,
          97,
          119,
          97,
          105,
          116,
          32,
          102,
          101,
          116,
          99,
          104,
          40,
          98,
          44,
          32,
          123,
          32,
          99,
          114,
          101,
          100,
          101,
          110,
          116,
          105,
          97,
          108,
          115,
          58,
          32,
          34,
          115,
          97,
          109,
          101,
          45,
          111,
          114,
          105,
          103,
          105,
          110,
          34,
          32,
          125,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          98,
          46,
          111,
          107,
          41,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          98,
          46,
          97,
          114,
          114,
          97,
          121,
          66,
          117,
          102,
          102,
          101,
          114,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          69,
          114,
          114,
          111,
          114,
          40,
          98,
          46,
          115,
          116,
          97,
          116,
          117,
          115,
          32,
          43,
          32,
          34,
          32,
          58,
          32,
          34,
          32,
          43,
          32,
          98,
          46,
          117,
          114,
          108,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          105,
          97,
          32,
          61,
          32,
          99,
          111,
          110,
          115,
          111,
          108,
          101,
          46,
          108,
          111,
          103,
          46,
          98,
          105,
          110,
          100,
          40,
          99,
          111,
          110,
          115,
          111,
          108,
          101,
          41,
          44,
          32,
          112,
          32,
          61,
          32,
          99,
          111,
          110,
          115,
          111,
          108,
          101,
          46,
          101,
          114,
          114,
          111,
          114,
          46,
          98,
          105,
          110,
          100,
          40,
          99,
          111,
          110,
          115,
          111,
          108,
          101,
          41,
          44,
          32,
          113,
          44,
          32,
          108,
          97,
          44,
          32,
          109,
          97,
          32,
          61,
          32,
          102,
          97,
          108,
          115,
          101,
          44,
          32,
          110,
          97,
          44,
          32,
          114,
          44,
          32,
          116,
          44,
          32,
          118,
          44,
          32,
          120,
          44,
          32,
          65,
          44,
          32,
          66,
          44,
          32,
          111,
          97,
          44,
          32,
          112,
          97,
          44,
          32,
          113,
          97,
          44,
          32,
          114,
          97,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          117,
          110,
          99,
          116,
          105,
          111,
          110,
          32,
          115,
          97,
          40,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          98,
          32,
          61,
          32,
          108,
          97,
          46,
          98,
          117,
          102,
          102,
          101,
          114,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          32,
          61,
          32,
          110,
          101,
          119,
          32,
          73,
          110,
          116,
          56,
          65,
          114,
          114,
          97,
          121,
          40,
          98,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          32,
          61,
          32,
          110,
          101,
          119,
          32,
          73,
          110,
          116,
          49,
          54,
          65,
          114,
          114,
          97,
          121,
          40,
          98,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          32,
          61,
          32,
          110,
          101,
          119,
          32,
          85,
          105,
          110,
          116,
          56,
          65,
          114,
          114,
          97,
          121,
          40,
          98,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          120,
          32,
          61,
          32,
          110,
          101,
          119,
          32,
          85,
          105,
          110,
          116,
          49,
          54,
          65,
          114,
          114,
          97,
          121,
          40,
          98,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          65,
          32,
          61,
          32,
          110,
          101,
          119,
          32,
          73,
          110,
          116,
          51,
          50,
          65,
          114,
          114,
          97,
          121,
          40,
          98,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          66,
          32,
          61,
          32,
          110,
          101,
          119,
          32,
          85,
          105,
          110,
          116,
          51,
          50,
          65,
          114,
          114,
          97,
          121,
          40,
          98,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          111,
          97,
          32,
          61,
          32,
          110,
          101,
          119,
          32,
          70,
          108,
          111,
          97,
          116,
          51,
          50,
          65,
          114,
          114,
          97,
          121,
          40,
          98,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          97,
          32,
          61,
          32,
          110,
          101,
          119,
          32,
          70,
          108,
          111,
          97,
          116,
          54,
          52,
          65,
          114,
          114,
          97,
          121,
          40,
          98,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          112,
          97,
          32,
          61,
          32,
          110,
          101,
          119,
          32,
          66,
          105,
          103,
          73,
          110,
          116,
          54,
          52,
          65,
          114,
          114,
          97,
          121,
          40,
          98,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          113,
          97,
          32,
          61,
          32,
          110,
          101,
          119,
          32,
          66,
          105,
          103,
          85,
          105,
          110,
          116,
          54,
          52,
          65,
          114,
          114,
          97,
          121,
          40,
          98,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          67,
          32,
          61,
          32,
          48,
          44,
          32,
          68,
          32,
          61,
          32,
          110,
          117,
          108,
          108,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          117,
          110,
          99,
          116,
          105,
          111,
          110,
          32,
          116,
          97,
          40,
          98,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          110,
          46,
          111,
          110,
          65,
          98,
          111,
          114,
          116,
          63,
          46,
          40,
          98,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          98,
          32,
          61,
          32,
          34,
          65,
          98,
          111,
          114,
          116,
          101,
          100,
          40,
          34,
          32,
          43,
          32,
          98,
          32,
          43,
          32,
          34,
          41,
          34,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          112,
          40,
          98,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          109,
          97,
          32,
          61,
          32,
          116,
          114,
          117,
          101,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          98,
          32,
          61,
          32,
          110,
          101,
          119,
          32,
          87,
          101,
          98,
          65,
          115,
          115,
          101,
          109,
          98,
          108,
          121,
          46,
          82,
          117,
          110,
          116,
          105,
          109,
          101,
          69,
          114,
          114,
          111,
          114,
          40,
          98,
          32,
          43,
          32,
          34,
          46,
          32,
          66,
          117,
          105,
          108,
          100,
          32,
          119,
          105,
          116,
          104,
          32,
          45,
          115,
          65,
          83,
          83,
          69,
          82,
          84,
          73,
          79,
          78,
          83,
          32,
          102,
          111,
          114,
          32,
          109,
          111,
          114,
          101,
          32,
          105,
          110,
          102,
          111,
          46,
          34,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          98,
          97,
          40,
          98,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          98,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          117,
          97,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          97,
          115,
          121,
          110,
          99,
          32,
          102,
          117,
          110,
          99,
          116,
          105,
          111,
          110,
          32,
          118,
          97,
          40,
          98,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          33,
          113,
          41,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          114,
          121,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          97,
          32,
          61,
          32,
          97,
          119,
          97,
          105,
          116,
          32,
          104,
          97,
          40,
          98,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          110,
          101,
          119,
          32,
          85,
          105,
          110,
          116,
          56,
          65,
          114,
          114,
          97,
          121,
          40,
          97,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          32,
          99,
          97,
          116,
          99,
          104,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          98,
          32,
          61,
          61,
          32,
          117,
          97,
          32,
          38,
          38,
          32,
          113,
          41,
          32,
          98,
          32,
          61,
          32,
          110,
          101,
          119,
          32,
          85,
          105,
          110,
          116,
          56,
          65,
          114,
          114,
          97,
          121,
          40,
          113,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          101,
          108,
          115,
          101,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          34,
          98,
          111,
          116,
          104,
          32,
          97,
          115,
          121,
          110,
          99,
          32,
          97,
          110,
          100,
          32,
          115,
          121,
          110,
          99,
          32,
          102,
          101,
          116,
          99,
          104,
          105,
          110,
          103,
          32,
          111,
          102,
          32,
          116,
          104,
          101,
          32,
          119,
          97,
          115,
          109,
          32,
          102,
          97,
          105,
          108,
          101,
          100,
          34,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          98,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          97,
          115,
          121,
          110,
          99,
          32,
          102,
          117,
          110,
          99,
          116,
          105,
          111,
          110,
          32,
          119,
          97,
          40,
          98,
          44,
          32,
          97,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          114,
          121,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          99,
          32,
          61,
          32,
          97,
          119,
          97,
          105,
          116,
          32,
          118,
          97,
          40,
          98,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          97,
          119,
          97,
          105,
          116,
          32,
          87,
          101,
          98,
          65,
          115,
          115,
          101,
          109,
          98,
          108,
          121,
          46,
          105,
          110,
          115,
          116,
          97,
          110,
          116,
          105,
          97,
          116,
          101,
          40,
          99,
          44,
          32,
          97,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          32,
          99,
          97,
          116,
          99,
          104,
          32,
          40,
          100,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          112,
          40,
          96,
          102,
          97,
          105,
          108,
          101,
          100,
          32,
          116,
          111,
          32,
          97,
          115,
          121,
          110,
          99,
          104,
          114,
          111,
          110,
          111,
          117,
          115,
          108,
          121,
          32,
          112,
          114,
          101,
          112,
          97,
          114,
          101,
          32,
          119,
          97,
          115,
          109,
          58,
          32,
          36,
          123,
          100,
          125,
          96,
          41,
          44,
          32,
          116,
          97,
          40,
          100,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          97,
          115,
          121,
          110,
          99,
          32,
          102,
          117,
          110,
          99,
          116,
          105,
          111,
          110,
          32,
          120,
          97,
          40,
          98,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          97,
          32,
          61,
          32,
          117,
          97,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          33,
          113,
          32,
          38,
          38,
          32,
          34,
          102,
          117,
          110,
          99,
          116,
          105,
          111,
          110,
          34,
          32,
          61,
          61,
          32,
          116,
          121,
          112,
          101,
          111,
          102,
          32,
          87,
          101,
          98,
          65,
          115,
          115,
          101,
          109,
          98,
          108,
          121,
          46,
          105,
          110,
          115,
          116,
          97,
          110,
          116,
          105,
          97,
          116,
          101,
          83,
          116,
          114,
          101,
          97,
          109,
          105,
          110,
          103,
          41,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          114,
          121,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          99,
          32,
          61,
          32,
          102,
          101,
          116,
          99,
          104,
          40,
          97,
          44,
          32,
          123,
          32,
          99,
          114,
          101,
          100,
          101,
          110,
          116,
          105,
          97,
          108,
          115,
          58,
          32,
          34,
          115,
          97,
          109,
          101,
          45,
          111,
          114,
          105,
          103,
          105,
          110,
          34,
          32,
          125,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          97,
          119,
          97,
          105,
          116,
          32,
          87,
          101,
          98,
          65,
          115,
          115,
          101,
          109,
          98,
          108,
          121,
          46,
          105,
          110,
          115,
          116,
          97,
          110,
          116,
          105,
          97,
          116,
          101,
          83,
          116,
          114,
          101,
          97,
          109,
          105,
          110,
          103,
          40,
          99,
          44,
          32,
          98,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          32,
          99,
          97,
          116,
          99,
          104,
          32,
          40,
          100,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          112,
          40,
          96,
          119,
          97,
          115,
          109,
          32,
          115,
          116,
          114,
          101,
          97,
          109,
          105,
          110,
          103,
          32,
          99,
          111,
          109,
          112,
          105,
          108,
          101,
          32,
          102,
          97,
          105,
          108,
          101,
          100,
          58,
          32,
          36,
          123,
          100,
          125,
          96,
          41,
          44,
          32,
          112,
          40,
          34,
          102,
          97,
          108,
          108,
          105,
          110,
          103,
          32,
          98,
          97,
          99,
          107,
          32,
          116,
          111,
          32,
          65,
          114,
          114,
          97,
          121,
          66,
          117,
          102,
          102,
          101,
          114,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          116,
          105,
          97,
          116,
          105,
          111,
          110,
          34,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          119,
          97,
          40,
          97,
          44,
          32,
          98,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          108,
          97,
          115,
          115,
          32,
          121,
          97,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          114,
          117,
          99,
          116,
          111,
          114,
          40,
          98,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          95,
          95,
          112,
          117,
          98,
          108,
          105,
          99,
          70,
          105,
          101,
          108,
          100,
          40,
          116,
          104,
          105,
          115,
          44,
          32,
          34,
          110,
          97,
          109,
          101,
          34,
          44,
          32,
          34,
          69,
          120,
          105,
          116,
          83,
          116,
          97,
          116,
          117,
          115,
          34,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          109,
          101,
          115,
          115,
          97,
          103,
          101,
          32,
          61,
          32,
          96,
          80,
          114,
          111,
          103,
          114,
          97,
          109,
          32,
          116,
          101,
          114,
          109,
          105,
          110,
          97,
          116,
          101,
          100,
          32,
          119,
          105,
          116,
          104,
          32,
          101,
          120,
          105,
          116,
          40,
          36,
          123,
          98,
          125,
          41,
          96,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          115,
          116,
          97,
          116,
          117,
          115,
          32,
          61,
          32,
          98,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          122,
          97,
          32,
          61,
          32,
          40,
          98,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          111,
          114,
          32,
          40,
          59,
          32,
          48,
          32,
          60,
          32,
          98,
          46,
          108,
          101,
          110,
          103,
          116,
          104,
          59,
          32,
          41,
          32,
          98,
          46,
          115,
          104,
          105,
          102,
          116,
          40,
          41,
          40,
          110,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          44,
          32,
          65,
          97,
          32,
          61,
          32,
          91,
          93,
          44,
          32,
          66,
          97,
          32,
          61,
          32,
          91,
          93,
          44,
          32,
          67,
          97,
          32,
          61,
          32,
          40,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          98,
          32,
          61,
          32,
          110,
          46,
          112,
          114,
          101,
          82,
          117,
          110,
          46,
          115,
          104,
          105,
          102,
          116,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          66,
          97,
          46,
          112,
          117,
          115,
          104,
          40,
          98,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          44,
          32,
          68,
          97,
          32,
          61,
          32,
          116,
          114,
          117,
          101,
          44,
          32,
          69,
          97,
          32,
          61,
          32,
          34,
          117,
          110,
          100,
          101,
          102,
          105,
          110,
          101,
          100,
          34,
          32,
          33,
          61,
          32,
          116,
          121,
          112,
          101,
          111,
          102,
          32,
          84,
          101,
          120,
          116,
          68,
          101,
          99,
          111,
          100,
          101,
          114,
          32,
          63,
          32,
          110,
          101,
          119,
          32,
          84,
          101,
          120,
          116,
          68,
          101,
          99,
          111,
          100,
          101,
          114,
          40,
          41,
          32,
          58,
          32,
          118,
          111,
          105,
          100,
          32,
          48,
          44,
          32,
          70,
          32,
          61,
          32,
          40,
          98,
          44,
          32,
          97,
          32,
          61,
          32,
          48,
          44,
          32,
          99,
          32,
          61,
          32,
          78,
          97,
          78,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          100,
          32,
          61,
          32,
          97,
          32,
          43,
          32,
          99,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          111,
          114,
          32,
          40,
          99,
          32,
          61,
          32,
          97,
          59,
          32,
          98,
          91,
          99,
          93,
          32,
          38,
          38,
          32,
          33,
          40,
          99,
          32,
          62,
          61,
          32,
          100,
          41,
          59,
          32,
          41,
          32,
          43,
          43,
          99,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          49,
          54,
          32,
          60,
          32,
          99,
          32,
          45,
          32,
          97,
          32,
          38,
          38,
          32,
          98,
          46,
          98,
          117,
          102,
          102,
          101,
          114,
          32,
          38,
          38,
          32,
          69,
          97,
          41,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          69,
          97,
          46,
          100,
          101,
          99,
          111,
          100,
          101,
          40,
          98,
          46,
          115,
          117,
          98,
          97,
          114,
          114,
          97,
          121,
          40,
          97,
          44,
          32,
          99,
          41,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          111,
          114,
          32,
          40,
          100,
          32,
          61,
          32,
          34,
          34,
          59,
          32,
          97,
          32,
          60,
          32,
          99,
          59,
          32,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          101,
          32,
          61,
          32,
          98,
          91,
          97,
          43,
          43,
          93,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          101,
          32,
          38,
          32,
          49,
          50,
          56,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          102,
          32,
          61,
          32,
          98,
          91,
          97,
          43,
          43,
          93,
          32,
          38,
          32,
          54,
          51,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          49,
          57,
          50,
          32,
          61,
          61,
          32,
          40,
          101,
          32,
          38,
          32,
          50,
          50,
          52,
          41,
          41,
          32,
          100,
          32,
          43,
          61,
          32,
          83,
          116,
          114,
          105,
          110,
          103,
          46,
          102,
          114,
          111,
          109,
          67,
          104,
          97,
          114,
          67,
          111,
          100,
          101,
          40,
          40,
          101,
          32,
          38,
          32,
          51,
          49,
          41,
          32,
          60,
          60,
          32,
          54,
          32,
          124,
          32,
          102,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          101,
          108,
          115,
          101,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          103,
          32,
          61,
          32,
          98,
          91,
          97,
          43,
          43,
          93,
          32,
          38,
          32,
          54,
          51,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          101,
          32,
          61,
          32,
          50,
          50,
          52,
          32,
          61,
          61,
          32,
          40,
          101,
          32,
          38,
          32,
          50,
          52,
          48,
          41,
          32,
          63,
          32,
          40,
          101,
          32,
          38,
          32,
          49,
          53,
          41,
          32,
          60,
          60,
          32,
          49,
          50,
          32,
          124,
          32,
          102,
          32,
          60,
          60,
          32,
          54,
          32,
          124,
          32,
          103,
          32,
          58,
          32,
          40,
          101,
          32,
          38,
          32,
          55,
          41,
          32,
          60,
          60,
          32,
          49,
          56,
          32,
          124,
          32,
          102,
          32,
          60,
          60,
          32,
          49,
          50,
          32,
          124,
          32,
          103,
          32,
          60,
          60,
          32,
          54,
          32,
          124,
          32,
          98,
          91,
          97,
          43,
          43,
          93,
          32,
          38,
          32,
          54,
          51,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          54,
          53,
          53,
          51,
          54,
          32,
          62,
          32,
          101,
          32,
          63,
          32,
          100,
          32,
          43,
          61,
          32,
          83,
          116,
          114,
          105,
          110,
          103,
          46,
          102,
          114,
          111,
          109,
          67,
          104,
          97,
          114,
          67,
          111,
          100,
          101,
          40,
          101,
          41,
          32,
          58,
          32,
          40,
          101,
          32,
          45,
          61,
          32,
          54,
          53,
          53,
          51,
          54,
          44,
          32,
          100,
          32,
          43,
          61,
          32,
          83,
          116,
          114,
          105,
          110,
          103,
          46,
          102,
          114,
          111,
          109,
          67,
          104,
          97,
          114,
          67,
          111,
          100,
          101,
          40,
          53,
          53,
          50,
          57,
          54,
          32,
          124,
          32,
          101,
          32,
          62,
          62,
          32,
          49,
          48,
          44,
          32,
          53,
          54,
          51,
          50,
          48,
          32,
          124,
          32,
          101,
          32,
          38,
          32,
          49,
          48,
          50,
          51,
          41,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          32,
          101,
          108,
          115,
          101,
          32,
          100,
          32,
          43,
          61,
          32,
          83,
          116,
          114,
          105,
          110,
          103,
          46,
          102,
          114,
          111,
          109,
          67,
          104,
          97,
          114,
          67,
          111,
          100,
          101,
          40,
          101,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          100,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          44,
          32,
          70,
          97,
          32,
          61,
          32,
          91,
          93,
          44,
          32,
          71,
          97,
          32,
          61,
          32,
          48,
          44,
          32,
          72,
          32,
          61,
          32,
          48,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          108,
          97,
          115,
          115,
          32,
          72,
          97,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          114,
          117,
          99,
          116,
          111,
          114,
          40,
          98,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          97,
          99,
          32,
          61,
          32,
          98,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          65,
          98,
          32,
          61,
          32,
          98,
          32,
          45,
          32,
          50,
          52,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          75,
          97,
          32,
          61,
          32,
          40,
          98,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          97,
          32,
          61,
          32,
          72,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          33,
          97,
          41,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          73,
          97,
          40,
          48,
          41,
          44,
          32,
          48,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          99,
          32,
          61,
          32,
          110,
          101,
          119,
          32,
          72,
          97,
          40,
          97,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          66,
          91,
          99,
          46,
          65,
          98,
          32,
          43,
          32,
          49,
          54,
          32,
          62,
          62,
          32,
          50,
          93,
          32,
          61,
          32,
          97,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          100,
          32,
          61,
          32,
          66,
          91,
          99,
          46,
          65,
          98,
          32,
          43,
          32,
          52,
          32,
          62,
          62,
          32,
          50,
          93,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          33,
          100,
          41,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          73,
          97,
          40,
          48,
          41,
          44,
          32,
          97,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          111,
          114,
          32,
          40,
          118,
          97,
          114,
          32,
          101,
          32,
          111,
          102,
          32,
          98,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          48,
          32,
          61,
          61,
          61,
          32,
          101,
          32,
          124,
          124,
          32,
          101,
          32,
          61,
          61,
          61,
          32,
          100,
          41,
          32,
          98,
          114,
          101,
          97,
          107,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          74,
          97,
          40,
          101,
          44,
          32,
          100,
          44,
          32,
          99,
          46,
          65,
          98,
          32,
          43,
          32,
          49,
          54,
          41,
          41,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          73,
          97,
          40,
          101,
          41,
          44,
          32,
          97,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          73,
          97,
          40,
          100,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          97,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          44,
          32,
          76,
          97,
          32,
          61,
          32,
          40,
          98,
          44,
          32,
          97,
          41,
          32,
          61,
          62,
          32,
          79,
          98,
          106,
          101,
          99,
          116,
          46,
          100,
          101,
          102,
          105,
          110,
          101,
          80,
          114,
          111,
          112,
          101,
          114,
          116,
          121,
          40,
          97,
          44,
          32,
          34,
          110,
          97,
          109,
          101,
          34,
          44,
          32,
          123,
          32,
          118,
          97,
          108,
          117,
          101,
          58,
          32,
          98,
          32,
          125,
          41,
          44,
          32,
          77,
          97,
          32,
          61,
          32,
          91,
          93,
          44,
          32,
          73,
          32,
          61,
          32,
          91,
          93,
          44,
          32,
          75,
          32,
          61,
          32,
          110,
          46,
          66,
          105,
          110,
          100,
          105,
          110,
          103,
          69,
          114,
          114,
          111,
          114,
          32,
          61,
          32,
          99,
          108,
          97,
          115,
          115,
          32,
          101,
          120,
          116,
          101,
          110,
          100,
          115,
          32,
          69,
          114,
          114,
          111,
          114,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          114,
          117,
          99,
          116,
          111,
          114,
          40,
          98,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          115,
          117,
          112,
          101,
          114,
          40,
          98,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          110,
          97,
          109,
          101,
          32,
          61,
          32,
          34,
          66,
          105,
          110,
          100,
          105,
          110,
          103,
          69,
          114,
          114,
          111,
          114,
          34,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          44,
          32,
          78,
          97,
          32,
          61,
          32,
          40,
          98,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          110,
          101,
          119,
          32,
          75,
          40,
          98,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          44,
          32,
          76,
          32,
          61,
          32,
          40,
          98,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          33,
          98,
          41,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          110,
          101,
          119,
          32,
          75,
          40,
          96,
          67,
          97,
          110,
          110,
          111,
          116,
          32,
          117,
          115,
          101,
          32,
          100,
          101,
          108,
          101,
          116,
          101,
          100,
          32,
          118,
          97,
          108,
          46,
          32,
          104,
          97,
          110,
          100,
          108,
          101,
          32,
          61,
          32,
          36,
          123,
          98,
          125,
          96,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          73,
          91,
          98,
          93,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          44,
          32,
          79,
          97,
          32,
          61,
          32,
          40,
          98,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          115,
          119,
          105,
          116,
          99,
          104,
          32,
          40,
          98,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          97,
          115,
          101,
          32,
          118,
          111,
          105,
          100,
          32,
          48,
          58,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          50,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          97,
          115,
          101,
          32,
          110,
          117,
          108,
          108,
          58,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          52,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          97,
          115,
          101,
          32,
          116,
          114,
          117,
          101,
          58,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          54,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          97,
          115,
          101,
          32,
          102,
          97,
          108,
          115,
          101,
          58,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          56,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          100,
          101,
          102,
          97,
          117,
          108,
          116,
          58,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          97,
          32,
          61,
          32,
          77,
          97,
          46,
          112,
          111,
          112,
          40,
          41,
          32,
          124,
          124,
          32,
          73,
          46,
          108,
          101,
          110,
          103,
          116,
          104,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          73,
          91,
          97,
          93,
          32,
          61,
          32,
          98,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          73,
          91,
          97,
          32,
          43,
          32,
          49,
          93,
          32,
          61,
          32,
          49,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          97,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          108,
          97,
          115,
          115,
          32,
          80,
          97,
          32,
          101,
          120,
          116,
          101,
          110,
          100,
          115,
          32,
          69,
          114,
          114,
          111,
          114,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          81,
          97,
          44,
          32,
          77,
          32,
          61,
          32,
          40,
          98,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          111,
          114,
          32,
          40,
          118,
          97,
          114,
          32,
          97,
          32,
          61,
          32,
          34,
          34,
          59,
          32,
          116,
          91,
          98,
          93,
          59,
          32,
          41,
          32,
          97,
          32,
          43,
          61,
          32,
          81,
          97,
          91,
          116,
          91,
          98,
          43,
          43,
          93,
          93,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          97,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          44,
          32,
          82,
          97,
          32,
          61,
          32,
          123,
          125,
          44,
          32,
          83,
          97,
          32,
          61,
          32,
          40,
          98,
          44,
          32,
          97,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          118,
          111,
          105,
          100,
          32,
          48,
          32,
          61,
          61,
          61,
          32,
          97,
          41,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          110,
          101,
          119,
          32,
          75,
          40,
          34,
          112,
          116,
          114,
          32,
          115,
          104,
          111,
          117,
          108,
          100,
          32,
          110,
          111,
          116,
          32,
          98,
          101,
          32,
          117,
          110,
          100,
          101,
          102,
          105,
          110,
          101,
          100,
          34,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          111,
          114,
          32,
          40,
          59,
          32,
          98,
          46,
          69,
          98,
          59,
          32,
          41,
          32,
          97,
          32,
          61,
          32,
          98,
          46,
          80,
          98,
          40,
          97,
          41,
          44,
          32,
          98,
          32,
          61,
          32,
          98,
          46,
          69,
          98,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          97,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          44,
          32,
          78,
          32,
          61,
          32,
          123,
          125,
          44,
          32,
          86,
          97,
          32,
          61,
          32,
          40,
          98,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          98,
          32,
          61,
          32,
          85,
          97,
          40,
          98,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          97,
          32,
          61,
          32,
          77,
          40,
          98,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          79,
          40,
          98,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          97,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          44,
          32,
          87,
          97,
          32,
          61,
          32,
          40,
          98,
          44,
          32,
          97,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          99,
          32,
          61,
          32,
          78,
          91,
          98,
          93,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          118,
          111,
          105,
          100,
          32,
          48,
          32,
          61,
          61,
          61,
          32,
          99,
          41,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          98,
          32,
          61,
          32,
          96,
          36,
          123,
          97,
          125,
          32,
          104,
          97,
          115,
          32,
          117,
          110,
          107,
          110,
          111,
          119,
          110,
          32,
          116,
          121,
          112,
          101,
          32,
          36,
          123,
          86,
          97,
          40,
          98,
          41,
          125,
          96,
          44,
          32,
          110,
          101,
          119,
          32,
          75,
          40,
          98,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          99,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          44,
          32,
          88,
          97,
          32,
          61,
          32,
          40,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          44,
          32,
          89,
          97,
          32,
          61,
          32,
          102,
          97,
          108,
          115,
          101,
          44,
          32,
          80,
          32,
          61,
          32,
          40,
          98,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          34,
          117,
          110,
          100,
          101,
          102,
          105,
          110,
          101,
          100,
          34,
          32,
          61,
          61,
          61,
          32,
          116,
          121,
          112,
          101,
          111,
          102,
          32,
          70,
          105,
          110,
          97,
          108,
          105,
          122,
          97,
          116,
          105,
          111,
          110,
          82,
          101,
          103,
          105,
          115,
          116,
          114,
          121,
          41,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          80,
          32,
          61,
          32,
          40,
          97,
          41,
          32,
          61,
          62,
          32,
          97,
          44,
          32,
          98,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          89,
          97,
          32,
          61,
          32,
          110,
          101,
          119,
          32,
          70,
          105,
          110,
          97,
          108,
          105,
          122,
          97,
          116,
          105,
          111,
          110,
          82,
          101,
          103,
          105,
          115,
          116,
          114,
          121,
          40,
          40,
          97,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          97,
          32,
          61,
          32,
          97,
          46,
          122,
          98,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          45,
          45,
          97,
          46,
          99,
          111,
          117,
          110,
          116,
          46,
          118,
          97,
          108,
          117,
          101,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          48,
          32,
          61,
          61,
          61,
          32,
          97,
          46,
          99,
          111,
          117,
          110,
          116,
          46,
          118,
          97,
          108,
          117,
          101,
          32,
          38,
          38,
          32,
          40,
          97,
          46,
          70,
          98,
          32,
          63,
          32,
          97,
          46,
          73,
          98,
          46,
          74,
          98,
          40,
          97,
          46,
          70,
          98,
          41,
          32,
          58,
          32,
          97,
          46,
          67,
          98,
          46,
          66,
          98,
          46,
          74,
          98,
          40,
          97,
          46,
          65,
          98,
          41,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          80,
          32,
          61,
          32,
          40,
          97,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          99,
          32,
          61,
          32,
          97,
          46,
          122,
          98,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          46,
          70,
          98,
          32,
          38,
          38,
          32,
          89,
          97,
          46,
          114,
          101,
          103,
          105,
          115,
          116,
          101,
          114,
          40,
          97,
          44,
          32,
          123,
          32,
          122,
          98,
          58,
          32,
          99,
          32,
          125,
          44,
          32,
          97,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          97,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          88,
          97,
          32,
          61,
          32,
          40,
          97,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          89,
          97,
          46,
          117,
          110,
          114,
          101,
          103,
          105,
          115,
          116,
          101,
          114,
          40,
          97,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          80,
          40,
          98,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          44,
          32,
          90,
          97,
          32,
          61,
          32,
          123,
          125,
          44,
          32,
          36,
          97,
          32,
          61,
          32,
          40,
          98,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          111,
          114,
          32,
          40,
          59,
          32,
          98,
          46,
          108,
          101,
          110,
          103,
          116,
          104,
          59,
          32,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          97,
          32,
          61,
          32,
          98,
          46,
          112,
          111,
          112,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          98,
          46,
          112,
          111,
          112,
          40,
          41,
          40,
          97,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          117,
          110,
          99,
          116,
          105,
          111,
          110,
          32,
          97,
          98,
          40,
          98,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          116,
          104,
          105,
          115,
          46,
          102,
          114,
          111,
          109,
          87,
          105,
          114,
          101,
          84,
          121,
          112,
          101,
          40,
          66,
          91,
          98,
          32,
          62,
          62,
          32,
          50,
          93,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          81,
          32,
          61,
          32,
          123,
          125,
          44,
          32,
          98,
          98,
          32,
          61,
          32,
          123,
          125,
          44,
          32,
          99,
          98,
          32,
          61,
          32,
          110,
          46,
          73,
          110,
          116,
          101,
          114,
          110,
          97,
          108,
          69,
          114,
          114,
          111,
          114,
          32,
          61,
          32,
          99,
          108,
          97,
          115,
          115,
          32,
          101,
          120,
          116,
          101,
          110,
          100,
          115,
          32,
          69,
          114,
          114,
          111,
          114,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          114,
          117,
          99,
          116,
          111,
          114,
          40,
          98,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          115,
          117,
          112,
          101,
          114,
          40,
          98,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          110,
          97,
          109,
          101,
          32,
          61,
          32,
          34,
          73,
          110,
          116,
          101,
          114,
          110,
          97,
          108,
          69,
          114,
          114,
          111,
          114,
          34,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          44,
          32,
          83,
          32,
          61,
          32,
          40,
          98,
          44,
          32,
          97,
          44,
          32,
          99,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          117,
          110,
          99,
          116,
          105,
          111,
          110,
          32,
          100,
          40,
          104,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          104,
          32,
          61,
          32,
          99,
          40,
          104,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          104,
          46,
          108,
          101,
          110,
          103,
          116,
          104,
          32,
          33,
          61,
          61,
          32,
          98,
          46,
          108,
          101,
          110,
          103,
          116,
          104,
          41,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          110,
          101,
          119,
          32,
          99,
          98,
          40,
          34,
          77,
          105,
          115,
          109,
          97,
          116,
          99,
          104,
          101,
          100,
          32,
          116,
          121,
          112,
          101,
          32,
          99,
          111,
          110,
          118,
          101,
          114,
          116,
          101,
          114,
          32,
          99,
          111,
          117,
          110,
          116,
          34,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          111,
          114,
          32,
          40,
          118,
          97,
          114,
          32,
          107,
          32,
          61,
          32,
          48,
          59,
          32,
          107,
          32,
          60,
          32,
          98,
          46,
          108,
          101,
          110,
          103,
          116,
          104,
          59,
          32,
          43,
          43,
          107,
          41,
          32,
          82,
          40,
          98,
          91,
          107,
          93,
          44,
          32,
          104,
          91,
          107,
          93,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          98,
          46,
          102,
          111,
          114,
          69,
          97,
          99,
          104,
          40,
          40,
          104,
          41,
          32,
          61,
          62,
          32,
          98,
          98,
          91,
          104,
          93,
          32,
          61,
          32,
          97,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          101,
          32,
          61,
          32,
          65,
          114,
          114,
          97,
          121,
          40,
          97,
          46,
          108,
          101,
          110,
          103,
          116,
          104,
          41,
          44,
          32,
          102,
          32,
          61,
          32,
          91,
          93,
          44,
          32,
          103,
          32,
          61,
          32,
          48,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          97,
          46,
          102,
          111,
          114,
          69,
          97,
          99,
          104,
          40,
          40,
          104,
          44,
          32,
          107,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          78,
          46,
          104,
          97,
          115,
          79,
          119,
          110,
          80,
          114,
          111,
          112,
          101,
          114,
          116,
          121,
          40,
          104,
          41,
          32,
          63,
          32,
          101,
          91,
          107,
          93,
          32,
          61,
          32,
          78,
          91,
          104,
          93,
          32,
          58,
          32,
          40,
          102,
          46,
          112,
          117,
          115,
          104,
          40,
          104,
          41,
          44,
          32,
          81,
          46,
          104,
          97,
          115,
          79,
          119,
          110,
          80,
          114,
          111,
          112,
          101,
          114,
          116,
          121,
          40,
          104,
          41,
          32,
          124,
          124,
          32,
          40,
          81,
          91,
          104,
          93,
          32,
          61,
          32,
          91,
          93,
          41,
          44,
          32,
          81,
          91,
          104,
          93,
          46,
          112,
          117,
          115,
          104,
          40,
          40,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          101,
          91,
          107,
          93,
          32,
          61,
          32,
          78,
          91,
          104,
          93,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          43,
          43,
          103,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          103,
          32,
          61,
          61,
          61,
          32,
          102,
          46,
          108,
          101,
          110,
          103,
          116,
          104,
          32,
          38,
          38,
          32,
          100,
          40,
          101,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          41,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          48,
          32,
          61,
          61,
          61,
          32,
          102,
          46,
          108,
          101,
          110,
          103,
          116,
          104,
          32,
          38,
          38,
          32,
          100,
          40,
          101,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          44,
          32,
          100,
          98,
          32,
          61,
          32,
          40,
          98,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          110,
          117,
          108,
          108,
          32,
          61,
          61,
          61,
          32,
          98,
          41,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          34,
          110,
          117,
          108,
          108,
          34,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          97,
          32,
          61,
          32,
          116,
          121,
          112,
          101,
          111,
          102,
          32,
          98,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          34,
          111,
          98,
          106,
          101,
          99,
          116,
          34,
          32,
          61,
          61,
          61,
          32,
          97,
          32,
          124,
          124,
          32,
          34,
          97,
          114,
          114,
          97,
          121,
          34,
          32,
          61,
          61,
          61,
          32,
          97,
          32,
          124,
          124,
          32,
          34,
          102,
          117,
          110,
          99,
          116,
          105,
          111,
          110,
          34,
          32,
          61,
          61,
          61,
          32,
          97,
          32,
          63,
          32,
          98,
          46,
          116,
          111,
          83,
          116,
          114,
          105,
          110,
          103,
          40,
          41,
          32,
          58,
          32,
          34,
          34,
          32,
          43,
          32,
          98,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          117,
          110,
          99,
          116,
          105,
          111,
          110,
          32,
          101,
          98,
          40,
          98,
          44,
          32,
          97,
          44,
          32,
          99,
          32,
          61,
          32,
          123,
          125,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          100,
          32,
          61,
          32,
          97,
          46,
          110,
          97,
          109,
          101,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          33,
          98,
          41,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          110,
          101,
          119,
          32,
          75,
          40,
          96,
          116,
          121,
          112,
          101,
          32,
          34,
          36,
          123,
          100,
          125,
          34,
          32,
          109,
          117,
          115,
          116,
          32,
          104,
          97,
          118,
          101,
          32,
          97,
          32,
          112,
          111,
          115,
          105,
          116,
          105,
          118,
          101,
          32,
          105,
          110,
          116,
          101,
          103,
          101,
          114,
          32,
          116,
          121,
          112,
          101,
          105,
          100,
          32,
          112,
          111,
          105,
          110,
          116,
          101,
          114,
          96,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          78,
          46,
          104,
          97,
          115,
          79,
          119,
          110,
          80,
          114,
          111,
          112,
          101,
          114,
          116,
          121,
          40,
          98,
          41,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          99,
          46,
          105,
          99,
          41,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          110,
          101,
          119,
          32,
          75,
          40,
          96,
          67,
          97,
          110,
          110,
          111,
          116,
          32,
          114,
          101,
          103,
          105,
          115,
          116,
          101,
          114,
          32,
          116,
          121,
          112,
          101,
          32,
          39,
          36,
          123,
          100,
          125,
          39,
          32,
          116,
          119,
          105,
          99,
          101,
          96,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          78,
          91,
          98,
          93,
          32,
          61,
          32,
          97,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          100,
          101,
          108,
          101,
          116,
          101,
          32,
          98,
          98,
          91,
          98,
          93,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          81,
          46,
          104,
          97,
          115,
          79,
          119,
          110,
          80,
          114,
          111,
          112,
          101,
          114,
          116,
          121,
          40,
          98,
          41,
          32,
          38,
          38,
          32,
          40,
          97,
          32,
          61,
          32,
          81,
          91,
          98,
          93,
          44,
          32,
          100,
          101,
          108,
          101,
          116,
          101,
          32,
          81,
          91,
          98,
          93,
          44,
          32,
          97,
          46,
          102,
          111,
          114,
          69,
          97,
          99,
          104,
          40,
          40,
          101,
          41,
          32,
          61,
          62,
          32,
          101,
          40,
          41,
          41,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          117,
          110,
          99,
          116,
          105,
          111,
          110,
          32,
          82,
          40,
          98,
          44,
          32,
          97,
          44,
          32,
          99,
          32,
          61,
          32,
          123,
          125,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          101,
          98,
          40,
          98,
          44,
          32,
          97,
          44,
          32,
          99,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          102,
          98,
          32,
          61,
          32,
          40,
          98,
          44,
          32,
          97,
          44,
          32,
          99,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          115,
          119,
          105,
          116,
          99,
          104,
          32,
          40,
          97,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          97,
          115,
          101,
          32,
          49,
          58,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          99,
          32,
          63,
          32,
          40,
          100,
          41,
          32,
          61,
          62,
          32,
          114,
          91,
          100,
          93,
          32,
          58,
          32,
          40,
          100,
          41,
          32,
          61,
          62,
          32,
          116,
          91,
          100,
          93,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          97,
          115,
          101,
          32,
          50,
          58,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          99,
          32,
          63,
          32,
          40,
          100,
          41,
          32,
          61,
          62,
          32,
          118,
          91,
          100,
          32,
          62,
          62,
          32,
          49,
          93,
          32,
          58,
          32,
          40,
          100,
          41,
          32,
          61,
          62,
          32,
          120,
          91,
          100,
          32,
          62,
          62,
          32,
          49,
          93,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          97,
          115,
          101,
          32,
          52,
          58,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          99,
          32,
          63,
          32,
          40,
          100,
          41,
          32,
          61,
          62,
          32,
          65,
          91,
          100,
          32,
          62,
          62,
          32,
          50,
          93,
          32,
          58,
          32,
          40,
          100,
          41,
          32,
          61,
          62,
          32,
          66,
          91,
          100,
          32,
          62,
          62,
          32,
          50,
          93,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          97,
          115,
          101,
          32,
          56,
          58,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          99,
          32,
          63,
          32,
          40,
          100,
          41,
          32,
          61,
          62,
          32,
          112,
          97,
          91,
          100,
          32,
          62,
          62,
          32,
          51,
          93,
          32,
          58,
          32,
          40,
          100,
          41,
          32,
          61,
          62,
          32,
          113,
          97,
          91,
          100,
          32,
          62,
          62,
          32,
          51,
          93,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          100,
          101,
          102,
          97,
          117,
          108,
          116,
          58,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          110,
          101,
          119,
          32,
          84,
          121,
          112,
          101,
          69,
          114,
          114,
          111,
          114,
          40,
          96,
          105,
          110,
          118,
          97,
          108,
          105,
          100,
          32,
          105,
          110,
          116,
          101,
          103,
          101,
          114,
          32,
          119,
          105,
          100,
          116,
          104,
          32,
          40,
          36,
          123,
          97,
          125,
          41,
          58,
          32,
          36,
          123,
          98,
          125,
          96,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          44,
          32,
          103,
          98,
          32,
          61,
          32,
          40,
          98,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          110,
          101,
          119,
          32,
          75,
          40,
          98,
          46,
          122,
          98,
          46,
          67,
          98,
          46,
          66,
          98,
          46,
          110,
          97,
          109,
          101,
          32,
          43,
          32,
          34,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          32,
          97,
          108,
          114,
          101,
          97,
          100,
          121,
          32,
          100,
          101,
          108,
          101,
          116,
          101,
          100,
          34,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          44,
          32,
          104,
          98,
          32,
          61,
          32,
          91,
          93,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          117,
          110,
          99,
          116,
          105,
          111,
          110,
          32,
          105,
          98,
          40,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          106,
          98,
          32,
          61,
          32,
          123,
          125,
          44,
          32,
          107,
          98,
          32,
          61,
          32,
          40,
          98,
          44,
          32,
          97,
          44,
          32,
          99,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          118,
          111,
          105,
          100,
          32,
          48,
          32,
          61,
          61,
          61,
          32,
          98,
          91,
          97,
          93,
          46,
          68,
          98,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          100,
          32,
          61,
          32,
          98,
          91,
          97,
          93,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          98,
          91,
          97,
          93,
          32,
          61,
          32,
          102,
          117,
          110,
          99,
          116,
          105,
          111,
          110,
          40,
          46,
          46,
          46,
          101,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          33,
          98,
          91,
          97,
          93,
          46,
          68,
          98,
          46,
          104,
          97,
          115,
          79,
          119,
          110,
          80,
          114,
          111,
          112,
          101,
          114,
          116,
          121,
          40,
          101,
          46,
          108,
          101,
          110,
          103,
          116,
          104,
          41,
          41,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          110,
          101,
          119,
          32,
          75,
          40,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          96,
          70,
          117,
          110,
          99,
          116,
          105,
          111,
          110,
          32,
          39,
          36,
          123,
          99,
          125,
          39,
          32,
          99,
          97,
          108,
          108,
          101,
          100,
          32,
          119,
          105,
          116,
          104,
          32,
          97,
          110,
          32,
          105,
          110,
          118,
          97,
          108,
          105,
          100,
          32,
          110,
          117,
          109,
          98,
          101,
          114,
          32,
          111,
          102,
          32,
          97,
          114,
          103,
          117,
          109,
          101,
          110,
          116,
          115,
          32,
          40,
          36,
          123,
          101,
          46,
          108,
          101,
          110,
          103,
          116,
          104,
          125,
          41,
          32,
          45,
          32,
          101,
          120,
          112,
          101,
          99,
          116,
          115,
          32,
          111,
          110,
          101,
          32,
          111,
          102,
          32,
          40,
          36,
          123,
          98,
          91,
          97,
          93,
          46,
          68,
          98,
          125,
          41,
          33,
          96,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          98,
          91,
          97,
          93,
          46,
          68,
          98,
          91,
          101,
          46,
          108,
          101,
          110,
          103,
          116,
          104,
          93,
          46,
          97,
          112,
          112,
          108,
          121,
          40,
          116,
          104,
          105,
          115,
          44,
          32,
          101,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          98,
          91,
          97,
          93,
          46,
          68,
          98,
          32,
          61,
          32,
          91,
          93,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          98,
          91,
          97,
          93,
          46,
          68,
          98,
          91,
          100,
          46,
          76,
          98,
          93,
          32,
          61,
          32,
          100,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          44,
          32,
          108,
          98,
          32,
          61,
          32,
          40,
          98,
          44,
          32,
          97,
          44,
          32,
          99,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          110,
          46,
          104,
          97,
          115,
          79,
          119,
          110,
          80,
          114,
          111,
          112,
          101,
          114,
          116,
          121,
          40,
          98,
          41,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          118,
          111,
          105,
          100,
          32,
          48,
          32,
          61,
          61,
          61,
          32,
          99,
          32,
          124,
          124,
          32,
          118,
          111,
          105,
          100,
          32,
          48,
          32,
          33,
          61,
          61,
          32,
          110,
          91,
          98,
          93,
          46,
          68,
          98,
          32,
          38,
          38,
          32,
          118,
          111,
          105,
          100,
          32,
          48,
          32,
          33,
          61,
          61,
          32,
          110,
          91,
          98,
          93,
          46,
          68,
          98,
          91,
          99,
          93,
          41,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          110,
          101,
          119,
          32,
          75,
          40,
          96,
          67,
          97,
          110,
          110,
          111,
          116,
          32,
          114,
          101,
          103,
          105,
          115,
          116,
          101,
          114,
          32,
          112,
          117,
          98,
          108,
          105,
          99,
          32,
          110,
          97,
          109,
          101,
          32,
          39,
          36,
          123,
          98,
          125,
          39,
          32,
          116,
          119,
          105,
          99,
          101,
          96,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          107,
          98,
          40,
          110,
          44,
          32,
          98,
          44,
          32,
          98,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          110,
          91,
          98,
          93,
          46,
          68,
          98,
          46,
          104,
          97,
          115,
          79,
          119,
          110,
          80,
          114,
          111,
          112,
          101,
          114,
          116,
          121,
          40,
          99,
          41,
          41,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          110,
          101,
          119,
          32,
          75,
          40,
          96,
          67,
          97,
          110,
          110,
          111,
          116,
          32,
          114,
          101,
          103,
          105,
          115,
          116,
          101,
          114,
          32,
          109,
          117,
          108,
          116,
          105,
          112,
          108,
          101,
          32,
          111,
          118,
          101,
          114,
          108,
          111,
          97,
          100,
          115,
          32,
          111,
          102,
          32,
          97,
          32,
          102,
          117,
          110,
          99,
          116,
          105,
          111,
          110,
          32,
          119,
          105,
          116,
          104,
          32,
          116,
          104,
          101,
          32,
          115,
          97,
          109,
          101,
          32,
          110,
          117,
          109,
          98,
          101,
          114,
          32,
          111,
          102,
          32,
          97,
          114,
          103,
          117,
          109,
          101,
          110,
          116,
          115,
          32,
          40,
          36,
          123,
          99,
          125,
          41,
          33,
          96,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          110,
          91,
          98,
          93,
          46,
          68,
          98,
          91,
          99,
          93,
          32,
          61,
          32,
          97,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          32,
          101,
          108,
          115,
          101,
          32,
          110,
          91,
          98,
          93,
          32,
          61,
          32,
          97,
          44,
          32,
          110,
          91,
          98,
          93,
          46,
          76,
          98,
          32,
          61,
          32,
          99,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          44,
          32,
          109,
          98,
          32,
          61,
          32,
          40,
          98,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          98,
          32,
          61,
          32,
          98,
          46,
          114,
          101,
          112,
          108,
          97,
          99,
          101,
          40,
          47,
          91,
          94,
          97,
          45,
          122,
          65,
          45,
          90,
          48,
          45,
          57,
          95,
          93,
          47,
          103,
          44,
          32,
          34,
          36,
          34,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          97,
          32,
          61,
          32,
          98,
          46,
          99,
          104,
          97,
          114,
          67,
          111,
          100,
          101,
          65,
          116,
          40,
          48,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          52,
          56,
          32,
          60,
          61,
          32,
          97,
          32,
          38,
          38,
          32,
          53,
          55,
          32,
          62,
          61,
          32,
          97,
          32,
          63,
          32,
          96,
          95,
          36,
          123,
          98,
          125,
          96,
          32,
          58,
          32,
          98,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          117,
          110,
          99,
          116,
          105,
          111,
          110,
          32,
          110,
          98,
          40,
          98,
          44,
          32,
          97,
          44,
          32,
          99,
          44,
          32,
          100,
          44,
          32,
          101,
          44,
          32,
          102,
          44,
          32,
          103,
          44,
          32,
          104,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          110,
          97,
          109,
          101,
          32,
          61,
          32,
          98,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          99,
          111,
          110,
          115,
          116,
          114,
          117,
          99,
          116,
          111,
          114,
          32,
          61,
          32,
          97,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          75,
          98,
          32,
          61,
          32,
          99,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          74,
          98,
          32,
          61,
          32,
          100,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          69,
          98,
          32,
          61,
          32,
          101,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          99,
          99,
          32,
          61,
          32,
          102,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          80,
          98,
          32,
          61,
          32,
          103,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          36,
          98,
          32,
          61,
          32,
          104,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          88,
          98,
          32,
          61,
          32,
          91,
          93,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          111,
          98,
          32,
          61,
          32,
          40,
          98,
          44,
          32,
          97,
          44,
          32,
          99,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          111,
          114,
          32,
          40,
          59,
          32,
          97,
          32,
          33,
          61,
          61,
          32,
          99,
          59,
          32,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          33,
          97,
          46,
          80,
          98,
          41,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          110,
          101,
          119,
          32,
          75,
          40,
          96,
          69,
          120,
          112,
          101,
          99,
          116,
          101,
          100,
          32,
          110,
          117,
          108,
          108,
          32,
          111,
          114,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          32,
          111,
          102,
          32,
          36,
          123,
          99,
          46,
          110,
          97,
          109,
          101,
          125,
          44,
          32,
          103,
          111,
          116,
          32,
          97,
          110,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          32,
          111,
          102,
          32,
          36,
          123,
          97,
          46,
          110,
          97,
          109,
          101,
          125,
          96,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          98,
          32,
          61,
          32,
          97,
          46,
          80,
          98,
          40,
          98,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          97,
          32,
          61,
          32,
          97,
          46,
          69,
          98,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          98,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          117,
          110,
          99,
          116,
          105,
          111,
          110,
          32,
          112,
          98,
          40,
          98,
          44,
          32,
          97,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          110,
          117,
          108,
          108,
          32,
          61,
          61,
          61,
          32,
          97,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          116,
          104,
          105,
          115,
          46,
          84,
          98,
          41,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          110,
          101,
          119,
          32,
          75,
          40,
          96,
          110,
          117,
          108,
          108,
          32,
          105,
          115,
          32,
          110,
          111,
          116,
          32,
          97,
          32,
          118,
          97,
          108,
          105,
          100,
          32,
          36,
          123,
          116,
          104,
          105,
          115,
          46,
          110,
          97,
          109,
          101,
          125,
          96,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          48,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          33,
          97,
          46,
          122,
          98,
          41,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          110,
          101,
          119,
          32,
          75,
          40,
          96,
          67,
          97,
          110,
          110,
          111,
          116,
          32,
          112,
          97,
          115,
          115,
          32,
          34,
          36,
          123,
          100,
          98,
          40,
          97,
          41,
          125,
          34,
          32,
          97,
          115,
          32,
          97,
          32,
          36,
          123,
          116,
          104,
          105,
          115,
          46,
          110,
          97,
          109,
          101,
          125,
          96,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          33,
          97,
          46,
          122,
          98,
          46,
          65,
          98,
          41,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          110,
          101,
          119,
          32,
          75,
          40,
          96,
          67,
          97,
          110,
          110,
          111,
          116,
          32,
          112,
          97,
          115,
          115,
          32,
          100,
          101,
          108,
          101,
          116,
          101,
          100,
          32,
          111,
          98,
          106,
          101,
          99,
          116,
          32,
          97,
          115,
          32,
          97,
          32,
          112,
          111,
          105,
          110,
          116,
          101,
          114,
          32,
          111,
          102,
          32,
          116,
          121,
          112,
          101,
          32,
          36,
          123,
          116,
          104,
          105,
          115,
          46,
          110,
          97,
          109,
          101,
          125,
          96,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          111,
          98,
          40,
          97,
          46,
          122,
          98,
          46,
          65,
          98,
          44,
          32,
          97,
          46,
          122,
          98,
          46,
          67,
          98,
          46,
          66,
          98,
          44,
          32,
          116,
          104,
          105,
          115,
          46,
          66,
          98,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          117,
          110,
          99,
          116,
          105,
          111,
          110,
          32,
          113,
          98,
          40,
          98,
          44,
          32,
          97,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          110,
          117,
          108,
          108,
          32,
          61,
          61,
          61,
          32,
          97,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          116,
          104,
          105,
          115,
          46,
          84,
          98,
          41,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          110,
          101,
          119,
          32,
          75,
          40,
          96,
          110,
          117,
          108,
          108,
          32,
          105,
          115,
          32,
          110,
          111,
          116,
          32,
          97,
          32,
          118,
          97,
          108,
          105,
          100,
          32,
          36,
          123,
          116,
          104,
          105,
          115,
          46,
          110,
          97,
          109,
          101,
          125,
          96,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          116,
          104,
          105,
          115,
          46,
          83,
          98,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          99,
          32,
          61,
          32,
          116,
          104,
          105,
          115,
          46,
          85,
          98,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          110,
          117,
          108,
          108,
          32,
          33,
          61,
          61,
          32,
          98,
          32,
          38,
          38,
          32,
          98,
          46,
          112,
          117,
          115,
          104,
          40,
          116,
          104,
          105,
          115,
          46,
          74,
          98,
          44,
          32,
          99,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          99,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          48,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          33,
          97,
          32,
          124,
          124,
          32,
          33,
          97,
          46,
          122,
          98,
          41,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          110,
          101,
          119,
          32,
          75,
          40,
          96,
          67,
          97,
          110,
          110,
          111,
          116,
          32,
          112,
          97,
          115,
          115,
          32,
          34,
          36,
          123,
          100,
          98,
          40,
          97,
          41,
          125,
          34,
          32,
          97,
          115,
          32,
          97,
          32,
          36,
          123,
          116,
          104,
          105,
          115,
          46,
          110,
          97,
          109,
          101,
          125,
          96,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          33,
          97,
          46,
          122,
          98,
          46,
          65,
          98,
          41,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          110,
          101,
          119,
          32,
          75,
          40,
          96,
          67,
          97,
          110,
          110,
          111,
          116,
          32,
          112,
          97,
          115,
          115,
          32,
          100,
          101,
          108,
          101,
          116,
          101,
          100,
          32,
          111,
          98,
          106,
          101,
          99,
          116,
          32,
          97,
          115,
          32,
          97,
          32,
          112,
          111,
          105,
          110,
          116,
          101,
          114,
          32,
          111,
          102,
          32,
          116,
          121,
          112,
          101,
          32,
          36,
          123,
          116,
          104,
          105,
          115,
          46,
          110,
          97,
          109,
          101,
          125,
          96,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          33,
          116,
          104,
          105,
          115,
          46,
          82,
          98,
          32,
          38,
          38,
          32,
          97,
          46,
          122,
          98,
          46,
          67,
          98,
          46,
          82,
          98,
          41,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          110,
          101,
          119,
          32,
          75,
          40,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          96,
          67,
          97,
          110,
          110,
          111,
          116,
          32,
          99,
          111,
          110,
          118,
          101,
          114,
          116,
          32,
          97,
          114,
          103,
          117,
          109,
          101,
          110,
          116,
          32,
          111,
          102,
          32,
          116,
          121,
          112,
          101,
          32,
          36,
          123,
          97,
          46,
          122,
          98,
          46,
          73,
          98,
          32,
          63,
          32,
          97,
          46,
          122,
          98,
          46,
          73,
          98,
          46,
          110,
          97,
          109,
          101,
          32,
          58,
          32,
          97,
          46,
          122,
          98,
          46,
          67,
          98,
          46,
          110,
          97,
          109,
          101,
          125,
          32,
          116,
          111,
          32,
          112,
          97,
          114,
          97,
          109,
          101,
          116,
          101,
          114,
          32,
          116,
          121,
          112,
          101,
          32,
          36,
          123,
          116,
          104,
          105,
          115,
          46,
          110,
          97,
          109,
          101,
          125,
          96,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          32,
          61,
          32,
          111,
          98,
          40,
          97,
          46,
          122,
          98,
          46,
          65,
          98,
          44,
          32,
          97,
          46,
          122,
          98,
          46,
          67,
          98,
          46,
          66,
          98,
          44,
          32,
          116,
          104,
          105,
          115,
          46,
          66,
          98,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          116,
          104,
          105,
          115,
          46,
          83,
          98,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          118,
          111,
          105,
          100,
          32,
          48,
          32,
          61,
          61,
          61,
          32,
          97,
          46,
          122,
          98,
          46,
          70,
          98,
          41,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          110,
          101,
          119,
          32,
          75,
          40,
          34,
          80,
          97,
          115,
          115,
          105,
          110,
          103,
          32,
          114,
          97,
          119,
          32,
          112,
          111,
          105,
          110,
          116,
          101,
          114,
          32,
          116,
          111,
          32,
          115,
          109,
          97,
          114,
          116,
          32,
          112,
          111,
          105,
          110,
          116,
          101,
          114,
          32,
          105,
          115,
          32,
          105,
          108,
          108,
          101,
          103,
          97,
          108,
          34,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          115,
          119,
          105,
          116,
          99,
          104,
          32,
          40,
          116,
          104,
          105,
          115,
          46,
          112,
          99,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          97,
          115,
          101,
          32,
          48,
          58,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          97,
          46,
          122,
          98,
          46,
          73,
          98,
          32,
          61,
          61,
          61,
          32,
          116,
          104,
          105,
          115,
          41,
          32,
          99,
          32,
          61,
          32,
          97,
          46,
          122,
          98,
          46,
          70,
          98,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          101,
          108,
          115,
          101,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          110,
          101,
          119,
          32,
          75,
          40,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          96,
          67,
          97,
          110,
          110,
          111,
          116,
          32,
          99,
          111,
          110,
          118,
          101,
          114,
          116,
          32,
          97,
          114,
          103,
          117,
          109,
          101,
          110,
          116,
          32,
          111,
          102,
          32,
          116,
          121,
          112,
          101,
          32,
          36,
          123,
          97,
          46,
          122,
          98,
          46,
          73,
          98,
          32,
          63,
          32,
          97,
          46,
          122,
          98,
          46,
          73,
          98,
          46,
          110,
          97,
          109,
          101,
          32,
          58,
          32,
          97,
          46,
          122,
          98,
          46,
          67,
          98,
          46,
          110,
          97,
          109,
          101,
          125,
          32,
          116,
          111,
          32,
          112,
          97,
          114,
          97,
          109,
          101,
          116,
          101,
          114,
          32,
          116,
          121,
          112,
          101,
          32,
          36,
          123,
          116,
          104,
          105,
          115,
          46,
          110,
          97,
          109,
          101,
          125,
          96,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          98,
          114,
          101,
          97,
          107,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          97,
          115,
          101,
          32,
          49,
          58,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          32,
          61,
          32,
          97,
          46,
          122,
          98,
          46,
          70,
          98,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          98,
          114,
          101,
          97,
          107,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          97,
          115,
          101,
          32,
          50,
          58,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          97,
          46,
          122,
          98,
          46,
          73,
          98,
          32,
          61,
          61,
          61,
          32,
          116,
          104,
          105,
          115,
          41,
          32,
          99,
          32,
          61,
          32,
          97,
          46,
          122,
          98,
          46,
          70,
          98,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          101,
          108,
          115,
          101,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          100,
          32,
          61,
          32,
          97,
          46,
          99,
          108,
          111,
          110,
          101,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          32,
          61,
          32,
          116,
          104,
          105,
          115,
          46,
          108,
          99,
          40,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          79,
          97,
          40,
          40,
          41,
          32,
          61,
          62,
          32,
          100,
          91,
          34,
          100,
          101,
          108,
          101,
          116,
          101,
          34,
          93,
          40,
          41,
          41,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          110,
          117,
          108,
          108,
          32,
          33,
          61,
          61,
          32,
          98,
          32,
          38,
          38,
          32,
          98,
          46,
          112,
          117,
          115,
          104,
          40,
          116,
          104,
          105,
          115,
          46,
          74,
          98,
          44,
          32,
          99,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          98,
          114,
          101,
          97,
          107,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          100,
          101,
          102,
          97,
          117,
          108,
          116,
          58,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          110,
          101,
          119,
          32,
          75,
          40,
          34,
          85,
          110,
          115,
          117,
          112,
          112,
          111,
          114,
          116,
          105,
          110,
          103,
          32,
          115,
          104,
          97,
          114,
          105,
          110,
          103,
          32,
          112,
          111,
          108,
          105,
          99,
          121,
          34,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          99,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          117,
          110,
          99,
          116,
          105,
          111,
          110,
          32,
          114,
          98,
          40,
          98,
          44,
          32,
          97,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          110,
          117,
          108,
          108,
          32,
          61,
          61,
          61,
          32,
          97,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          116,
          104,
          105,
          115,
          46,
          84,
          98,
          41,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          110,
          101,
          119,
          32,
          75,
          40,
          96,
          110,
          117,
          108,
          108,
          32,
          105,
          115,
          32,
          110,
          111,
          116,
          32,
          97,
          32,
          118,
          97,
          108,
          105,
          100,
          32,
          36,
          123,
          116,
          104,
          105,
          115,
          46,
          110,
          97,
          109,
          101,
          125,
          96,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          48,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          33,
          97,
          46,
          122,
          98,
          41,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          110,
          101,
          119,
          32,
          75,
          40,
          96,
          67,
          97,
          110,
          110,
          111,
          116,
          32,
          112,
          97,
          115,
          115,
          32,
          34,
          36,
          123,
          100,
          98,
          40,
          97,
          41,
          125,
          34,
          32,
          97,
          115,
          32,
          97,
          32,
          36,
          123,
          116,
          104,
          105,
          115,
          46,
          110,
          97,
          109,
          101,
          125,
          96,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          33,
          97,
          46,
          122,
          98,
          46,
          65,
          98,
          41,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          110,
          101,
          119,
          32,
          75,
          40,
          96,
          67,
          97,
          110,
          110,
          111,
          116,
          32,
          112,
          97,
          115,
          115,
          32,
          100,
          101,
          108,
          101,
          116,
          101,
          100,
          32,
          111,
          98,
          106,
          101,
          99,
          116,
          32,
          97,
          115,
          32,
          97,
          32,
          112,
          111,
          105,
          110,
          116,
          101,
          114,
          32,
          111,
          102,
          32,
          116,
          121,
          112,
          101,
          32,
          36,
          123,
          116,
          104,
          105,
          115,
          46,
          110,
          97,
          109,
          101,
          125,
          96,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          97,
          46,
          122,
          98,
          46,
          67,
          98,
          46,
          82,
          98,
          41,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          110,
          101,
          119,
          32,
          75,
          40,
          96,
          67,
          97,
          110,
          110,
          111,
          116,
          32,
          99,
          111,
          110,
          118,
          101,
          114,
          116,
          32,
          97,
          114,
          103,
          117,
          109,
          101,
          110,
          116,
          32,
          111,
          102,
          32,
          116,
          121,
          112,
          101,
          32,
          36,
          123,
          97,
          46,
          122,
          98,
          46,
          67,
          98,
          46,
          110,
          97,
          109,
          101,
          125,
          32,
          116,
          111,
          32,
          112,
          97,
          114,
          97,
          109,
          101,
          116,
          101,
          114,
          32,
          116,
          121,
          112,
          101,
          32,
          36,
          123,
          116,
          104,
          105,
          115,
          46,
          110,
          97,
          109,
          101,
          125,
          96,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          111,
          98,
          40,
          97,
          46,
          122,
          98,
          46,
          65,
          98,
          44,
          32,
          97,
          46,
          122,
          98,
          46,
          67,
          98,
          46,
          66,
          98,
          44,
          32,
          116,
          104,
          105,
          115,
          46,
          66,
          98,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          115,
          98,
          32,
          61,
          32,
          40,
          98,
          44,
          32,
          97,
          44,
          32,
          99,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          97,
          32,
          61,
          61,
          61,
          32,
          99,
          41,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          98,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          118,
          111,
          105,
          100,
          32,
          48,
          32,
          61,
          61,
          61,
          32,
          99,
          46,
          69,
          98,
          41,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          110,
          117,
          108,
          108,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          98,
          32,
          61,
          32,
          115,
          98,
          40,
          98,
          44,
          32,
          97,
          44,
          32,
          99,
          46,
          69,
          98,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          110,
          117,
          108,
          108,
          32,
          61,
          61,
          61,
          32,
          98,
          32,
          63,
          32,
          110,
          117,
          108,
          108,
          32,
          58,
          32,
          99,
          46,
          36,
          98,
          40,
          98,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          44,
          32,
          116,
          98,
          32,
          61,
          32,
          40,
          98,
          44,
          32,
          97,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          97,
          32,
          61,
          32,
          83,
          97,
          40,
          98,
          44,
          32,
          97,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          82,
          97,
          91,
          97,
          93,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          44,
          32,
          117,
          98,
          32,
          61,
          32,
          40,
          98,
          44,
          32,
          97,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          33,
          97,
          46,
          67,
          98,
          32,
          124,
          124,
          32,
          33,
          97,
          46,
          65,
          98,
          41,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          110,
          101,
          119,
          32,
          99,
          98,
          40,
          34,
          109,
          97,
          107,
          101,
          67,
          108,
          97,
          115,
          115,
          72,
          97,
          110,
          100,
          108,
          101,
          32,
          114,
          101,
          113,
          117,
          105,
          114,
          101,
          115,
          32,
          112,
          116,
          114,
          32,
          97,
          110,
          100,
          32,
          112,
          116,
          114,
          84,
          121,
          112,
          101,
          34,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          33,
          33,
          97,
          46,
          73,
          98,
          32,
          33,
          61,
          61,
          32,
          33,
          33,
          97,
          46,
          70,
          98,
          41,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          110,
          101,
          119,
          32,
          99,
          98,
          40,
          34,
          66,
          111,
          116,
          104,
          32,
          115,
          109,
          97,
          114,
          116,
          80,
          116,
          114,
          84,
          121,
          112,
          101,
          32,
          97,
          110,
          100,
          32,
          115,
          109,
          97,
          114,
          116,
          80,
          116,
          114,
          32,
          109,
          117,
          115,
          116,
          32,
          98,
          101,
          32,
          115,
          112,
          101,
          99,
          105,
          102,
          105,
          101,
          100,
          34,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          97,
          46,
          99,
          111,
          117,
          110,
          116,
          32,
          61,
          32,
          123,
          32,
          118,
          97,
          108,
          117,
          101,
          58,
          32,
          49,
          32,
          125,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          80,
          40,
          79,
          98,
          106,
          101,
          99,
          116,
          46,
          99,
          114,
          101,
          97,
          116,
          101,
          40,
          98,
          44,
          32,
          123,
          32,
          122,
          98,
          58,
          32,
          123,
          32,
          118,
          97,
          108,
          117,
          101,
          58,
          32,
          97,
          44,
          32,
          119,
          114,
          105,
          116,
          97,
          98,
          108,
          101,
          58,
          32,
          116,
          114,
          117,
          101,
          32,
          125,
          32,
          125,
          41,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          117,
          110,
          99,
          116,
          105,
          111,
          110,
          32,
          118,
          98,
          40,
          98,
          44,
          32,
          97,
          44,
          32,
          99,
          44,
          32,
          100,
          44,
          32,
          101,
          44,
          32,
          102,
          44,
          32,
          103,
          44,
          32,
          104,
          44,
          32,
          107,
          44,
          32,
          108,
          44,
          32,
          109,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          110,
          97,
          109,
          101,
          32,
          61,
          32,
          98,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          66,
          98,
          32,
          61,
          32,
          97,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          84,
          98,
          32,
          61,
          32,
          99,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          82,
          98,
          32,
          61,
          32,
          100,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          83,
          98,
          32,
          61,
          32,
          101,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          107,
          99,
          32,
          61,
          32,
          102,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          112,
          99,
          32,
          61,
          32,
          103,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          89,
          98,
          32,
          61,
          32,
          104,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          85,
          98,
          32,
          61,
          32,
          107,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          108,
          99,
          32,
          61,
          32,
          108,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          74,
          98,
          32,
          61,
          32,
          109,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          101,
          32,
          124,
          124,
          32,
          118,
          111,
          105,
          100,
          32,
          48,
          32,
          33,
          61,
          61,
          32,
          97,
          46,
          69,
          98,
          32,
          63,
          32,
          116,
          104,
          105,
          115,
          46,
          116,
          111,
          87,
          105,
          114,
          101,
          84,
          121,
          112,
          101,
          32,
          61,
          32,
          113,
          98,
          32,
          58,
          32,
          40,
          116,
          104,
          105,
          115,
          46,
          116,
          111,
          87,
          105,
          114,
          101,
          84,
          121,
          112,
          101,
          32,
          61,
          32,
          100,
          32,
          63,
          32,
          112,
          98,
          32,
          58,
          32,
          114,
          98,
          44,
          32,
          116,
          104,
          105,
          115,
          46,
          71,
          98,
          32,
          61,
          32,
          110,
          117,
          108,
          108,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          119,
          98,
          32,
          61,
          32,
          40,
          98,
          44,
          32,
          97,
          44,
          32,
          99,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          33,
          110,
          46,
          104,
          97,
          115,
          79,
          119,
          110,
          80,
          114,
          111,
          112,
          101,
          114,
          116,
          121,
          40,
          98,
          41,
          41,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          110,
          101,
          119,
          32,
          99,
          98,
          40,
          34,
          82,
          101,
          112,
          108,
          97,
          99,
          105,
          110,
          103,
          32,
          110,
          111,
          110,
          101,
          120,
          105,
          115,
          116,
          101,
          110,
          116,
          32,
          112,
          117,
          98,
          108,
          105,
          99,
          32,
          115,
          121,
          109,
          98,
          111,
          108,
          34,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          111,
          105,
          100,
          32,
          48,
          32,
          33,
          61,
          61,
          32,
          110,
          91,
          98,
          93,
          46,
          68,
          98,
          32,
          38,
          38,
          32,
          118,
          111,
          105,
          100,
          32,
          48,
          32,
          33,
          61,
          61,
          32,
          99,
          32,
          63,
          32,
          110,
          91,
          98,
          93,
          46,
          68,
          98,
          91,
          99,
          93,
          32,
          61,
          32,
          97,
          32,
          58,
          32,
          40,
          110,
          91,
          98,
          93,
          32,
          61,
          32,
          97,
          44,
          32,
          110,
          91,
          98,
          93,
          46,
          76,
          98,
          32,
          61,
          32,
          99,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          44,
          32,
          84,
          44,
          32,
          85,
          32,
          61,
          32,
          40,
          98,
          44,
          32,
          97,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          98,
          32,
          61,
          32,
          77,
          40,
          98,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          99,
          32,
          61,
          32,
          84,
          46,
          103,
          101,
          116,
          40,
          97,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          34,
          102,
          117,
          110,
          99,
          116,
          105,
          111,
          110,
          34,
          32,
          33,
          61,
          32,
          116,
          121,
          112,
          101,
          111,
          102,
          32,
          99,
          41,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          110,
          101,
          119,
          32,
          75,
          40,
          96,
          117,
          110,
          107,
          110,
          111,
          119,
          110,
          32,
          102,
          117,
          110,
          99,
          116,
          105,
          111,
          110,
          32,
          112,
          111,
          105,
          110,
          116,
          101,
          114,
          32,
          119,
          105,
          116,
          104,
          32,
          115,
          105,
          103,
          110,
          97,
          116,
          117,
          114,
          101,
          32,
          36,
          123,
          98,
          125,
          58,
          32,
          36,
          123,
          97,
          125,
          96,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          99,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          108,
          97,
          115,
          115,
          32,
          120,
          98,
          32,
          101,
          120,
          116,
          101,
          110,
          100,
          115,
          32,
          69,
          114,
          114,
          111,
          114,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          121,
          98,
          32,
          61,
          32,
          40,
          98,
          44,
          32,
          97,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          117,
          110,
          99,
          116,
          105,
          111,
          110,
          32,
          99,
          40,
          102,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          101,
          91,
          102,
          93,
          32,
          124,
          124,
          32,
          78,
          91,
          102,
          93,
          32,
          124,
          124,
          32,
          40,
          98,
          98,
          91,
          102,
          93,
          32,
          63,
          32,
          98,
          98,
          91,
          102,
          93,
          46,
          102,
          111,
          114,
          69,
          97,
          99,
          104,
          40,
          99,
          41,
          32,
          58,
          32,
          40,
          100,
          46,
          112,
          117,
          115,
          104,
          40,
          102,
          41,
          44,
          32,
          101,
          91,
          102,
          93,
          32,
          61,
          32,
          116,
          114,
          117,
          101,
          41,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          100,
          32,
          61,
          32,
          91,
          93,
          44,
          32,
          101,
          32,
          61,
          32,
          123,
          125,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          97,
          46,
          102,
          111,
          114,
          69,
          97,
          99,
          104,
          40,
          99,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          110,
          101,
          119,
          32,
          120,
          98,
          40,
          96,
          36,
          123,
          98,
          125,
          58,
          32,
          96,
          32,
          43,
          32,
          100,
          46,
          109,
          97,
          112,
          40,
          86,
          97,
          41,
          46,
          106,
          111,
          105,
          110,
          40,
          91,
          34,
          44,
          32,
          34,
          93,
          41,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          117,
          110,
          99,
          116,
          105,
          111,
          110,
          32,
          122,
          98,
          40,
          98,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          111,
          114,
          32,
          40,
          118,
          97,
          114,
          32,
          97,
          32,
          61,
          32,
          49,
          59,
          32,
          97,
          32,
          60,
          32,
          98,
          46,
          108,
          101,
          110,
          103,
          116,
          104,
          59,
          32,
          43,
          43,
          97,
          41,
          32,
          105,
          102,
          32,
          40,
          110,
          117,
          108,
          108,
          32,
          33,
          61,
          61,
          32,
          98,
          91,
          97,
          93,
          32,
          38,
          38,
          32,
          118,
          111,
          105,
          100,
          32,
          48,
          32,
          61,
          61,
          61,
          32,
          98,
          91,
          97,
          93,
          46,
          71,
          98,
          41,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          116,
          114,
          117,
          101,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          102,
          97,
          108,
          115,
          101,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          117,
          110,
          99,
          116,
          105,
          111,
          110,
          32,
          65,
          98,
          40,
          98,
          44,
          32,
          97,
          44,
          32,
          99,
          44,
          32,
          100,
          44,
          32,
          101,
          44,
          32,
          102,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          103,
          32,
          61,
          32,
          97,
          46,
          108,
          101,
          110,
          103,
          116,
          104,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          50,
          32,
          62,
          32,
          103,
          41,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          110,
          101,
          119,
          32,
          75,
          40,
          34,
          97,
          114,
          103,
          84,
          121,
          112,
          101,
          115,
          32,
          97,
          114,
          114,
          97,
          121,
          32,
          115,
          105,
          122,
          101,
          32,
          109,
          105,
          115,
          109,
          97,
          116,
          99,
          104,
          33,
          32,
          77,
          117,
          115,
          116,
          32,
          97,
          116,
          32,
          108,
          101,
          97,
          115,
          116,
          32,
          103,
          101,
          116,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          118,
          97,
          108,
          117,
          101,
          32,
          97,
          110,
          100,
          32,
          39,
          116,
          104,
          105,
          115,
          39,
          32,
          116,
          121,
          112,
          101,
          115,
          33,
          34,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          104,
          32,
          61,
          32,
          110,
          117,
          108,
          108,
          32,
          33,
          61,
          61,
          32,
          97,
          91,
          49,
          93,
          32,
          38,
          38,
          32,
          110,
          117,
          108,
          108,
          32,
          33,
          61,
          61,
          32,
          99,
          44,
          32,
          107,
          32,
          61,
          32,
          122,
          98,
          40,
          97,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          32,
          61,
          32,
          34,
          118,
          111,
          105,
          100,
          34,
          32,
          33,
          61,
          61,
          32,
          97,
          91,
          48,
          93,
          46,
          110,
          97,
          109,
          101,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          100,
          32,
          61,
          32,
          91,
          98,
          44,
          32,
          78,
          97,
          44,
          32,
          100,
          44,
          32,
          101,
          44,
          32,
          36,
          97,
          44,
          32,
          97,
          91,
          48,
          93,
          44,
          32,
          97,
          91,
          49,
          93,
          93,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          111,
          114,
          32,
          40,
          101,
          32,
          61,
          32,
          48,
          59,
          32,
          101,
          32,
          60,
          32,
          103,
          32,
          45,
          32,
          50,
          59,
          32,
          43,
          43,
          101,
          41,
          32,
          100,
          46,
          112,
          117,
          115,
          104,
          40,
          97,
          91,
          101,
          32,
          43,
          32,
          50,
          93,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          33,
          107,
          41,
          32,
          102,
          111,
          114,
          32,
          40,
          101,
          32,
          61,
          32,
          104,
          32,
          63,
          32,
          49,
          32,
          58,
          32,
          50,
          59,
          32,
          101,
          32,
          60,
          32,
          97,
          46,
          108,
          101,
          110,
          103,
          116,
          104,
          59,
          32,
          43,
          43,
          101,
          41,
          32,
          110,
          117,
          108,
          108,
          32,
          33,
          61,
          61,
          32,
          97,
          91,
          101,
          93,
          46,
          71,
          98,
          32,
          38,
          38,
          32,
          100,
          46,
          112,
          117,
          115,
          104,
          40,
          97,
          91,
          101,
          93,
          46,
          71,
          98,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          107,
          32,
          61,
          32,
          122,
          98,
          40,
          97,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          101,
          32,
          61,
          32,
          97,
          46,
          108,
          101,
          110,
          103,
          116,
          104,
          32,
          45,
          32,
          50,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          108,
          32,
          61,
          32,
          91,
          93,
          44,
          32,
          109,
          32,
          61,
          32,
          91,
          34,
          102,
          110,
          34,
          93,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          104,
          32,
          38,
          38,
          32,
          109,
          46,
          112,
          117,
          115,
          104,
          40,
          34,
          116,
          104,
          105,
          115,
          87,
          105,
          114,
          101,
          100,
          34,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          111,
          114,
          32,
          40,
          103,
          32,
          61,
          32,
          48,
          59,
          32,
          103,
          32,
          60,
          32,
          101,
          59,
          32,
          43,
          43,
          103,
          41,
          32,
          108,
          46,
          112,
          117,
          115,
          104,
          40,
          96,
          97,
          114,
          103,
          36,
          123,
          103,
          125,
          96,
          41,
          44,
          32,
          109,
          46,
          112,
          117,
          115,
          104,
          40,
          96,
          97,
          114,
          103,
          36,
          123,
          103,
          125,
          87,
          105,
          114,
          101,
          100,
          96,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          108,
          32,
          61,
          32,
          108,
          46,
          106,
          111,
          105,
          110,
          40,
          34,
          44,
          34,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          109,
          32,
          61,
          32,
          109,
          46,
          106,
          111,
          105,
          110,
          40,
          34,
          44,
          34,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          108,
          32,
          61,
          32,
          96,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          102,
          117,
          110,
          99,
          116,
          105,
          111,
          110,
          32,
          40,
          36,
          123,
          108,
          125,
          41,
          32,
          123,
          10,
          96,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          107,
          32,
          38,
          38,
          32,
          40,
          108,
          32,
          43,
          61,
          32,
          34,
          118,
          97,
          114,
          32,
          100,
          101,
          115,
          116,
          114,
          117,
          99,
          116,
          111,
          114,
          115,
          32,
          61,
          32,
          91,
          93,
          59,
          92,
          110,
          34,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          117,
          32,
          61,
          32,
          107,
          32,
          63,
          32,
          34,
          100,
          101,
          115,
          116,
          114,
          117,
          99,
          116,
          111,
          114,
          115,
          34,
          32,
          58,
          32,
          34,
          110,
          117,
          108,
          108,
          34,
          44,
          32,
          119,
          32,
          61,
          32,
          34,
          104,
          117,
          109,
          97,
          110,
          78,
          97,
          109,
          101,
          32,
          116,
          104,
          114,
          111,
          119,
          66,
          105,
          110,
          100,
          105,
          110,
          103,
          69,
          114,
          114,
          111,
          114,
          32,
          105,
          110,
          118,
          111,
          107,
          101,
          114,
          32,
          102,
          110,
          32,
          114,
          117,
          110,
          68,
          101,
          115,
          116,
          114,
          117,
          99,
          116,
          111,
          114,
          115,
          32,
          114,
          101,
          116,
          84,
          121,
          112,
          101,
          32,
          99,
          108,
          97,
          115,
          115,
          80,
          97,
          114,
          97,
          109,
          34,
          46,
          115,
          112,
          108,
          105,
          116,
          40,
          34,
          32,
          34,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          104,
          32,
          38,
          38,
          32,
          40,
          108,
          32,
          43,
          61,
          32,
          96,
          118,
          97,
          114,
          32,
          116,
          104,
          105,
          115,
          87,
          105,
          114,
          101,
          100,
          32,
          61,
          32,
          99,
          108,
          97,
          115,
          115,
          80,
          97,
          114,
          97,
          109,
          91,
          39,
          116,
          111,
          87,
          105,
          114,
          101,
          84,
          121,
          112,
          101,
          39,
          93,
          40,
          36,
          123,
          117,
          125,
          44,
          32,
          116,
          104,
          105,
          115,
          41,
          59,
          10,
          96,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          111,
          114,
          32,
          40,
          103,
          32,
          61,
          32,
          48,
          59,
          32,
          103,
          32,
          60,
          32,
          101,
          59,
          32,
          43,
          43,
          103,
          41,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          108,
          32,
          43,
          61,
          32,
          96,
          118,
          97,
          114,
          32,
          97,
          114,
          103,
          36,
          123,
          103,
          125,
          87,
          105,
          114,
          101,
          100,
          32,
          61,
          32,
          97,
          114,
          103,
          84,
          121,
          112,
          101,
          36,
          123,
          103,
          125,
          91,
          39,
          116,
          111,
          87,
          105,
          114,
          101,
          84,
          121,
          112,
          101,
          39,
          93,
          40,
          36,
          123,
          117,
          125,
          44,
          32,
          97,
          114,
          103,
          36,
          123,
          103,
          125,
          41,
          59,
          10,
          96,
          44,
          32,
          119,
          46,
          112,
          117,
          115,
          104,
          40,
          96,
          97,
          114,
          103,
          84,
          121,
          112,
          101,
          36,
          123,
          103,
          125,
          96,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          108,
          32,
          43,
          61,
          32,
          40,
          99,
          32,
          124,
          124,
          32,
          102,
          32,
          63,
          32,
          34,
          118,
          97,
          114,
          32,
          114,
          118,
          32,
          61,
          32,
          34,
          32,
          58,
          32,
          34,
          34,
          41,
          32,
          43,
          32,
          96,
          105,
          110,
          118,
          111,
          107,
          101,
          114,
          40,
          36,
          123,
          109,
          125,
          41,
          59,
          10,
          96,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          107,
          41,
          32,
          108,
          32,
          43,
          61,
          32,
          34,
          114,
          117,
          110,
          68,
          101,
          115,
          116,
          114,
          117,
          99,
          116,
          111,
          114,
          115,
          40,
          100,
          101,
          115,
          116,
          114,
          117,
          99,
          116,
          111,
          114,
          115,
          41,
          59,
          92,
          110,
          34,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          101,
          108,
          115,
          101,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          111,
          114,
          32,
          40,
          103,
          32,
          61,
          32,
          104,
          32,
          63,
          32,
          49,
          32,
          58,
          32,
          50,
          59,
          32,
          103,
          32,
          60,
          32,
          97,
          46,
          108,
          101,
          110,
          103,
          116,
          104,
          59,
          32,
          43,
          43,
          103,
          41,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          32,
          61,
          32,
          49,
          32,
          61,
          61,
          61,
          32,
          103,
          32,
          63,
          32,
          34,
          116,
          104,
          105,
          115,
          87,
          105,
          114,
          101,
          100,
          34,
          32,
          58,
          32,
          34,
          97,
          114,
          103,
          34,
          32,
          43,
          32,
          40,
          103,
          32,
          45,
          32,
          50,
          41,
          32,
          43,
          32,
          34,
          87,
          105,
          114,
          101,
          100,
          34,
          44,
          32,
          110,
          117,
          108,
          108,
          32,
          33,
          61,
          61,
          32,
          97,
          91,
          103,
          93,
          46,
          71,
          98,
          32,
          38,
          38,
          32,
          40,
          108,
          32,
          43,
          61,
          32,
          96,
          36,
          123,
          102,
          125,
          95,
          100,
          116,
          111,
          114,
          40,
          36,
          123,
          102,
          125,
          41,
          59,
          10,
          96,
          44,
          32,
          119,
          46,
          112,
          117,
          115,
          104,
          40,
          96,
          36,
          123,
          102,
          125,
          95,
          100,
          116,
          111,
          114,
          96,
          41,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          32,
          38,
          38,
          32,
          40,
          108,
          32,
          43,
          61,
          32,
          34,
          118,
          97,
          114,
          32,
          114,
          101,
          116,
          32,
          61,
          32,
          114,
          101,
          116,
          84,
          121,
          112,
          101,
          91,
          39,
          102,
          114,
          111,
          109,
          87,
          105,
          114,
          101,
          84,
          121,
          112,
          101,
          39,
          93,
          40,
          114,
          118,
          41,
          59,
          92,
          110,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          114,
          101,
          116,
          59,
          92,
          110,
          34,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          108,
          101,
          116,
          32,
          91,
          121,
          44,
          32,
          122,
          93,
          32,
          61,
          32,
          91,
          119,
          44,
          32,
          108,
          32,
          43,
          32,
          34,
          125,
          92,
          110,
          34,
          93,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          97,
          32,
          61,
          32,
          110,
          101,
          119,
          32,
          70,
          117,
          110,
          99,
          116,
          105,
          111,
          110,
          40,
          46,
          46,
          46,
          121,
          44,
          32,
          122,
          41,
          40,
          46,
          46,
          46,
          100,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          76,
          97,
          40,
          98,
          44,
          32,
          97,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          67,
          98,
          32,
          61,
          32,
          40,
          98,
          44,
          32,
          97,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          111,
          114,
          32,
          40,
          118,
          97,
          114,
          32,
          99,
          32,
          61,
          32,
          91,
          93,
          44,
          32,
          100,
          32,
          61,
          32,
          48,
          59,
          32,
          100,
          32,
          60,
          32,
          98,
          59,
          32,
          100,
          43,
          43,
          41,
          32,
          99,
          46,
          112,
          117,
          115,
          104,
          40,
          66,
          91,
          97,
          32,
          43,
          32,
          52,
          32,
          42,
          32,
          100,
          32,
          62,
          62,
          32,
          50,
          93,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          99,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          44,
          32,
          68,
          98,
          32,
          61,
          32,
          40,
          98,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          98,
          32,
          61,
          32,
          98,
          46,
          116,
          114,
          105,
          109,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          97,
          32,
          61,
          32,
          98,
          46,
          105,
          110,
          100,
          101,
          120,
          79,
          102,
          40,
          34,
          40,
          34,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          45,
          49,
          32,
          61,
          61,
          61,
          32,
          97,
          32,
          63,
          32,
          98,
          32,
          58,
          32,
          98,
          46,
          115,
          108,
          105,
          99,
          101,
          40,
          48,
          44,
          32,
          97,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          44,
          32,
          69,
          98,
          32,
          61,
          32,
          40,
          98,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          57,
          32,
          60,
          32,
          98,
          32,
          38,
          38,
          32,
          48,
          32,
          61,
          61,
          61,
          32,
          45,
          45,
          73,
          91,
          98,
          32,
          43,
          32,
          49,
          93,
          32,
          38,
          38,
          32,
          40,
          73,
          91,
          98,
          93,
          32,
          61,
          32,
          118,
          111,
          105,
          100,
          32,
          48,
          44,
          32,
          77,
          97,
          46,
          112,
          117,
          115,
          104,
          40,
          98,
          41,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          44,
          32,
          70,
          98,
          32,
          61,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          110,
          97,
          109,
          101,
          58,
          32,
          34,
          101,
          109,
          115,
          99,
          114,
          105,
          112,
          116,
          101,
          110,
          58,
          58,
          118,
          97,
          108,
          34,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          114,
          111,
          109,
          87,
          105,
          114,
          101,
          84,
          121,
          112,
          101,
          58,
          32,
          40,
          98,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          97,
          32,
          61,
          32,
          76,
          40,
          98,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          69,
          98,
          40,
          98,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          97,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          111,
          87,
          105,
          114,
          101,
          84,
          121,
          112,
          101,
          58,
          32,
          40,
          98,
          44,
          32,
          97,
          41,
          32,
          61,
          62,
          32,
          79,
          97,
          40,
          97,
          41,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          72,
          98,
          58,
          32,
          56,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          97,
          100,
          86,
          97,
          108,
          117,
          101,
          70,
          114,
          111,
          109,
          80,
          111,
          105,
          110,
          116,
          101,
          114,
          58,
          32,
          97,
          98,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          71,
          98,
          58,
          32,
          110,
          117,
          108,
          108,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          44,
          32,
          71,
          98,
          32,
          61,
          32,
          40,
          98,
          44,
          32,
          97,
          44,
          32,
          99,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          115,
          119,
          105,
          116,
          99,
          104,
          32,
          40,
          97,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          97,
          115,
          101,
          32,
          49,
          58,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          99,
          32,
          63,
          32,
          102,
          117,
          110,
          99,
          116,
          105,
          111,
          110,
          40,
          100,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          116,
          104,
          105,
          115,
          46,
          102,
          114,
          111,
          109,
          87,
          105,
          114,
          101,
          84,
          121,
          112,
          101,
          40,
          114,
          91,
          100,
          93,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          32,
          58,
          32,
          102,
          117,
          110,
          99,
          116,
          105,
          111,
          110,
          40,
          100,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          116,
          104,
          105,
          115,
          46,
          102,
          114,
          111,
          109,
          87,
          105,
          114,
          101,
          84,
          121,
          112,
          101,
          40,
          116,
          91,
          100,
          93,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          97,
          115,
          101,
          32,
          50,
          58,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          99,
          32,
          63,
          32,
          102,
          117,
          110,
          99,
          116,
          105,
          111,
          110,
          40,
          100,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          116,
          104,
          105,
          115,
          46,
          102,
          114,
          111,
          109,
          87,
          105,
          114,
          101,
          84,
          121,
          112,
          101,
          40,
          118,
          91,
          100,
          32,
          62,
          62,
          32,
          49,
          93,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          32,
          58,
          32,
          102,
          117,
          110,
          99,
          116,
          105,
          111,
          110,
          40,
          100,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          116,
          104,
          105,
          115,
          46,
          102,
          114,
          111,
          109,
          87,
          105,
          114,
          101,
          84,
          121,
          112,
          101,
          40,
          120,
          91,
          100,
          32,
          62,
          62,
          32,
          49,
          93,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          97,
          115,
          101,
          32,
          52,
          58,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          99,
          32,
          63,
          32,
          102,
          117,
          110,
          99,
          116,
          105,
          111,
          110,
          40,
          100,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          116,
          104,
          105,
          115,
          46,
          102,
          114,
          111,
          109,
          87,
          105,
          114,
          101,
          84,
          121,
          112,
          101,
          40,
          65,
          91,
          100,
          32,
          62,
          62,
          32,
          50,
          93,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          32,
          58,
          32,
          102,
          117,
          110,
          99,
          116,
          105,
          111,
          110,
          40,
          100,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          116,
          104,
          105,
          115,
          46,
          102,
          114,
          111,
          109,
          87,
          105,
          114,
          101,
          84,
          121,
          112,
          101,
          40,
          66,
          91,
          100,
          32,
          62,
          62,
          32,
          50,
          93,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          100,
          101,
          102,
          97,
          117,
          108,
          116,
          58,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          110,
          101,
          119,
          32,
          84,
          121,
          112,
          101,
          69,
          114,
          114,
          111,
          114,
          40,
          96,
          105,
          110,
          118,
          97,
          108,
          105,
          100,
          32,
          105,
          110,
          116,
          101,
          103,
          101,
          114,
          32,
          119,
          105,
          100,
          116,
          104,
          32,
          40,
          36,
          123,
          97,
          125,
          41,
          58,
          32,
          36,
          123,
          98,
          125,
          96,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          44,
          32,
          72,
          98,
          32,
          61,
          32,
          40,
          98,
          44,
          32,
          97,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          115,
          119,
          105,
          116,
          99,
          104,
          32,
          40,
          97,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          97,
          115,
          101,
          32,
          52,
          58,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          102,
          117,
          110,
          99,
          116,
          105,
          111,
          110,
          40,
          99,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          116,
          104,
          105,
          115,
          46,
          102,
          114,
          111,
          109,
          87,
          105,
          114,
          101,
          84,
          121,
          112,
          101,
          40,
          111,
          97,
          91,
          99,
          32,
          62,
          62,
          32,
          50,
          93,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          97,
          115,
          101,
          32,
          56,
          58,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          102,
          117,
          110,
          99,
          116,
          105,
          111,
          110,
          40,
          99,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          116,
          104,
          105,
          115,
          46,
          102,
          114,
          111,
          109,
          87,
          105,
          114,
          101,
          84,
          121,
          112,
          101,
          40,
          114,
          97,
          91,
          99,
          32,
          62,
          62,
          32,
          51,
          93,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          100,
          101,
          102,
          97,
          117,
          108,
          116,
          58,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          110,
          101,
          119,
          32,
          84,
          121,
          112,
          101,
          69,
          114,
          114,
          111,
          114,
          40,
          96,
          105,
          110,
          118,
          97,
          108,
          105,
          100,
          32,
          102,
          108,
          111,
          97,
          116,
          32,
          119,
          105,
          100,
          116,
          104,
          32,
          40,
          36,
          123,
          97,
          125,
          41,
          58,
          32,
          36,
          123,
          98,
          125,
          96,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          44,
          32,
          73,
          98,
          32,
          61,
          32,
          79,
          98,
          106,
          101,
          99,
          116,
          46,
          97,
          115,
          115,
          105,
          103,
          110,
          40,
          123,
          32,
          111,
          112,
          116,
          105,
          111,
          110,
          97,
          108,
          58,
          32,
          116,
          114,
          117,
          101,
          32,
          125,
          44,
          32,
          70,
          98,
          41,
          44,
          32,
          86,
          32,
          61,
          32,
          40,
          98,
          44,
          32,
          97,
          44,
          32,
          99,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          100,
          32,
          61,
          32,
          116,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          33,
          40,
          48,
          32,
          60,
          32,
          99,
          41,
          41,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          48,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          101,
          32,
          61,
          32,
          97,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          32,
          61,
          32,
          97,
          32,
          43,
          32,
          99,
          32,
          45,
          32,
          49,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          111,
          114,
          32,
          40,
          118,
          97,
          114,
          32,
          102,
          32,
          61,
          32,
          48,
          59,
          32,
          102,
          32,
          60,
          32,
          98,
          46,
          108,
          101,
          110,
          103,
          116,
          104,
          59,
          32,
          43,
          43,
          102,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          103,
          32,
          61,
          32,
          98,
          46,
          99,
          104,
          97,
          114,
          67,
          111,
          100,
          101,
          65,
          116,
          40,
          102,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          53,
          53,
          50,
          57,
          54,
          32,
          60,
          61,
          32,
          103,
          32,
          38,
          38,
          32,
          53,
          55,
          51,
          52,
          51,
          32,
          62,
          61,
          32,
          103,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          104,
          32,
          61,
          32,
          98,
          46,
          99,
          104,
          97,
          114,
          67,
          111,
          100,
          101,
          65,
          116,
          40,
          43,
          43,
          102,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          103,
          32,
          61,
          32,
          54,
          53,
          53,
          51,
          54,
          32,
          43,
          32,
          40,
          40,
          103,
          32,
          38,
          32,
          49,
          48,
          50,
          51,
          41,
          32,
          60,
          60,
          32,
          49,
          48,
          41,
          32,
          124,
          32,
          104,
          32,
          38,
          32,
          49,
          48,
          50,
          51,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          49,
          50,
          55,
          32,
          62,
          61,
          32,
          103,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          97,
          32,
          62,
          61,
          32,
          99,
          41,
          32,
          98,
          114,
          101,
          97,
          107,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          100,
          91,
          97,
          43,
          43,
          93,
          32,
          61,
          32,
          103,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          32,
          101,
          108,
          115,
          101,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          50,
          48,
          52,
          55,
          32,
          62,
          61,
          32,
          103,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          97,
          32,
          43,
          32,
          49,
          32,
          62,
          61,
          32,
          99,
          41,
          32,
          98,
          114,
          101,
          97,
          107,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          100,
          91,
          97,
          43,
          43,
          93,
          32,
          61,
          32,
          49,
          57,
          50,
          32,
          124,
          32,
          103,
          32,
          62,
          62,
          32,
          54,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          32,
          101,
          108,
          115,
          101,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          54,
          53,
          53,
          51,
          53,
          32,
          62,
          61,
          32,
          103,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          97,
          32,
          43,
          32,
          50,
          32,
          62,
          61,
          32,
          99,
          41,
          32,
          98,
          114,
          101,
          97,
          107,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          100,
          91,
          97,
          43,
          43,
          93,
          32,
          61,
          32,
          50,
          50,
          52,
          32,
          124,
          32,
          103,
          32,
          62,
          62,
          32,
          49,
          50,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          32,
          101,
          108,
          115,
          101,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          97,
          32,
          43,
          32,
          51,
          32,
          62,
          61,
          32,
          99,
          41,
          32,
          98,
          114,
          101,
          97,
          107,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          100,
          91,
          97,
          43,
          43,
          93,
          32,
          61,
          32,
          50,
          52,
          48,
          32,
          124,
          32,
          103,
          32,
          62,
          62,
          32,
          49,
          56,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          100,
          91,
          97,
          43,
          43,
          93,
          32,
          61,
          32,
          49,
          50,
          56,
          32,
          124,
          32,
          103,
          32,
          62,
          62,
          32,
          49,
          50,
          32,
          38,
          32,
          54,
          51,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          100,
          91,
          97,
          43,
          43,
          93,
          32,
          61,
          32,
          49,
          50,
          56,
          32,
          124,
          32,
          103,
          32,
          62,
          62,
          32,
          54,
          32,
          38,
          32,
          54,
          51,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          100,
          91,
          97,
          43,
          43,
          93,
          32,
          61,
          32,
          49,
          50,
          56,
          32,
          124,
          32,
          103,
          32,
          38,
          32,
          54,
          51,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          100,
          91,
          97,
          93,
          32,
          61,
          32,
          48,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          97,
          32,
          45,
          32,
          101,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          44,
          32,
          74,
          98,
          32,
          61,
          32,
          40,
          98,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          111,
          114,
          32,
          40,
          118,
          97,
          114,
          32,
          97,
          32,
          61,
          32,
          48,
          44,
          32,
          99,
          32,
          61,
          32,
          48,
          59,
          32,
          99,
          32,
          60,
          32,
          98,
          46,
          108,
          101,
          110,
          103,
          116,
          104,
          59,
          32,
          43,
          43,
          99,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          100,
          32,
          61,
          32,
          98,
          46,
          99,
          104,
          97,
          114,
          67,
          111,
          100,
          101,
          65,
          116,
          40,
          99,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          49,
          50,
          55,
          32,
          62,
          61,
          32,
          100,
          32,
          63,
          32,
          97,
          43,
          43,
          32,
          58,
          32,
          50,
          48,
          52,
          55,
          32,
          62,
          61,
          32,
          100,
          32,
          63,
          32,
          97,
          32,
          43,
          61,
          32,
          50,
          32,
          58,
          32,
          53,
          53,
          50,
          57,
          54,
          32,
          60,
          61,
          32,
          100,
          32,
          38,
          38,
          32,
          53,
          55,
          51,
          52,
          51,
          32,
          62,
          61,
          32,
          100,
          32,
          63,
          32,
          40,
          97,
          32,
          43,
          61,
          32,
          52,
          44,
          32,
          43,
          43,
          99,
          41,
          32,
          58,
          32,
          97,
          32,
          43,
          61,
          32,
          51,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          97,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          44,
          32,
          75,
          98,
          32,
          61,
          32,
          34,
          117,
          110,
          100,
          101,
          102,
          105,
          110,
          101,
          100,
          34,
          32,
          33,
          61,
          32,
          116,
          121,
          112,
          101,
          111,
          102,
          32,
          84,
          101,
          120,
          116,
          68,
          101,
          99,
          111,
          100,
          101,
          114,
          32,
          63,
          32,
          110,
          101,
          119,
          32,
          84,
          101,
          120,
          116,
          68,
          101,
          99,
          111,
          100,
          101,
          114,
          40,
          34,
          117,
          116,
          102,
          45,
          49,
          54,
          108,
          101,
          34,
          41,
          32,
          58,
          32,
          118,
          111,
          105,
          100,
          32,
          48,
          44,
          32,
          76,
          98,
          32,
          61,
          32,
          40,
          98,
          44,
          32,
          97,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          99,
          32,
          61,
          32,
          98,
          32,
          62,
          62,
          32,
          49,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          111,
          114,
          32,
          40,
          118,
          97,
          114,
          32,
          100,
          32,
          61,
          32,
          99,
          32,
          43,
          32,
          97,
          32,
          47,
          32,
          50,
          59,
          32,
          33,
          40,
          99,
          32,
          62,
          61,
          32,
          100,
          41,
          32,
          38,
          38,
          32,
          120,
          91,
          99,
          93,
          59,
          32,
          41,
          32,
          43,
          43,
          99,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          32,
          60,
          60,
          61,
          32,
          49,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          51,
          50,
          32,
          60,
          32,
          99,
          32,
          45,
          32,
          98,
          32,
          38,
          38,
          32,
          75,
          98,
          41,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          75,
          98,
          46,
          100,
          101,
          99,
          111,
          100,
          101,
          40,
          116,
          46,
          115,
          117,
          98,
          97,
          114,
          114,
          97,
          121,
          40,
          98,
          44,
          32,
          99,
          41,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          32,
          61,
          32,
          34,
          34,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          111,
          114,
          32,
          40,
          100,
          32,
          61,
          32,
          48,
          59,
          32,
          33,
          40,
          100,
          32,
          62,
          61,
          32,
          97,
          32,
          47,
          32,
          50,
          41,
          59,
          32,
          43,
          43,
          100,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          101,
          32,
          61,
          32,
          118,
          91,
          98,
          32,
          43,
          32,
          50,
          32,
          42,
          32,
          100,
          32,
          62,
          62,
          32,
          49,
          93,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          48,
          32,
          61,
          61,
          32,
          101,
          41,
          32,
          98,
          114,
          101,
          97,
          107,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          32,
          43,
          61,
          32,
          83,
          116,
          114,
          105,
          110,
          103,
          46,
          102,
          114,
          111,
          109,
          67,
          104,
          97,
          114,
          67,
          111,
          100,
          101,
          40,
          101,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          99,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          44,
          32,
          77,
          98,
          32,
          61,
          32,
          40,
          98,
          44,
          32,
          97,
          44,
          32,
          99,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          32,
          63,
          63,
          32,
          40,
          99,
          32,
          61,
          32,
          50,
          49,
          52,
          55,
          52,
          56,
          51,
          54,
          52,
          55,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          50,
          32,
          62,
          32,
          99,
          41,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          48,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          32,
          45,
          61,
          32,
          50,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          100,
          32,
          61,
          32,
          97,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          32,
          61,
          32,
          99,
          32,
          60,
          32,
          50,
          32,
          42,
          32,
          98,
          46,
          108,
          101,
          110,
          103,
          116,
          104,
          32,
          63,
          32,
          99,
          32,
          47,
          32,
          50,
          32,
          58,
          32,
          98,
          46,
          108,
          101,
          110,
          103,
          116,
          104,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          111,
          114,
          32,
          40,
          118,
          97,
          114,
          32,
          101,
          32,
          61,
          32,
          48,
          59,
          32,
          101,
          32,
          60,
          32,
          99,
          59,
          32,
          43,
          43,
          101,
          41,
          32,
          118,
          91,
          97,
          32,
          62,
          62,
          32,
          49,
          93,
          32,
          61,
          32,
          98,
          46,
          99,
          104,
          97,
          114,
          67,
          111,
          100,
          101,
          65,
          116,
          40,
          101,
          41,
          44,
          32,
          97,
          32,
          43,
          61,
          32,
          50,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          91,
          97,
          32,
          62,
          62,
          32,
          49,
          93,
          32,
          61,
          32,
          48,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          97,
          32,
          45,
          32,
          100,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          44,
          32,
          78,
          98,
          32,
          61,
          32,
          40,
          98,
          41,
          32,
          61,
          62,
          32,
          50,
          32,
          42,
          32,
          98,
          46,
          108,
          101,
          110,
          103,
          116,
          104,
          44,
          32,
          79,
          98,
          32,
          61,
          32,
          40,
          98,
          44,
          32,
          97,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          111,
          114,
          32,
          40,
          118,
          97,
          114,
          32,
          99,
          32,
          61,
          32,
          48,
          44,
          32,
          100,
          32,
          61,
          32,
          34,
          34,
          59,
          32,
          33,
          40,
          99,
          32,
          62,
          61,
          32,
          97,
          32,
          47,
          32,
          52,
          41,
          59,
          32,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          101,
          32,
          61,
          32,
          65,
          91,
          98,
          32,
          43,
          32,
          52,
          32,
          42,
          32,
          99,
          32,
          62,
          62,
          32,
          50,
          93,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          48,
          32,
          61,
          61,
          32,
          101,
          41,
          32,
          98,
          114,
          101,
          97,
          107,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          43,
          43,
          99,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          54,
          53,
          53,
          51,
          54,
          32,
          60,
          61,
          32,
          101,
          32,
          63,
          32,
          40,
          101,
          32,
          45,
          61,
          32,
          54,
          53,
          53,
          51,
          54,
          44,
          32,
          100,
          32,
          43,
          61,
          32,
          83,
          116,
          114,
          105,
          110,
          103,
          46,
          102,
          114,
          111,
          109,
          67,
          104,
          97,
          114,
          67,
          111,
          100,
          101,
          40,
          53,
          53,
          50,
          57,
          54,
          32,
          124,
          32,
          101,
          32,
          62,
          62,
          32,
          49,
          48,
          44,
          32,
          53,
          54,
          51,
          50,
          48,
          32,
          124,
          32,
          101,
          32,
          38,
          32,
          49,
          48,
          50,
          51,
          41,
          41,
          32,
          58,
          32,
          100,
          32,
          43,
          61,
          32,
          83,
          116,
          114,
          105,
          110,
          103,
          46,
          102,
          114,
          111,
          109,
          67,
          104,
          97,
          114,
          67,
          111,
          100,
          101,
          40,
          101,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          100,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          44,
          32,
          80,
          98,
          32,
          61,
          32,
          40,
          98,
          44,
          32,
          97,
          44,
          32,
          99,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          32,
          63,
          63,
          32,
          40,
          99,
          32,
          61,
          32,
          50,
          49,
          52,
          55,
          52,
          56,
          51,
          54,
          52,
          55,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          52,
          32,
          62,
          32,
          99,
          41,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          48,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          100,
          32,
          61,
          32,
          97,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          32,
          61,
          32,
          100,
          32,
          43,
          32,
          99,
          32,
          45,
          32,
          52,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          111,
          114,
          32,
          40,
          118,
          97,
          114,
          32,
          101,
          32,
          61,
          32,
          48,
          59,
          32,
          101,
          32,
          60,
          32,
          98,
          46,
          108,
          101,
          110,
          103,
          116,
          104,
          59,
          32,
          43,
          43,
          101,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          102,
          32,
          61,
          32,
          98,
          46,
          99,
          104,
          97,
          114,
          67,
          111,
          100,
          101,
          65,
          116,
          40,
          101,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          53,
          53,
          50,
          57,
          54,
          32,
          60,
          61,
          32,
          102,
          32,
          38,
          38,
          32,
          53,
          55,
          51,
          52,
          51,
          32,
          62,
          61,
          32,
          102,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          103,
          32,
          61,
          32,
          98,
          46,
          99,
          104,
          97,
          114,
          67,
          111,
          100,
          101,
          65,
          116,
          40,
          43,
          43,
          101,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          32,
          61,
          32,
          54,
          53,
          53,
          51,
          54,
          32,
          43,
          32,
          40,
          40,
          102,
          32,
          38,
          32,
          49,
          48,
          50,
          51,
          41,
          32,
          60,
          60,
          32,
          49,
          48,
          41,
          32,
          124,
          32,
          103,
          32,
          38,
          32,
          49,
          48,
          50,
          51,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          65,
          91,
          97,
          32,
          62,
          62,
          32,
          50,
          93,
          32,
          61,
          32,
          102,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          97,
          32,
          43,
          61,
          32,
          52,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          97,
          32,
          43,
          32,
          52,
          32,
          62,
          32,
          99,
          41,
          32,
          98,
          114,
          101,
          97,
          107,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          65,
          91,
          97,
          32,
          62,
          62,
          32,
          50,
          93,
          32,
          61,
          32,
          48,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          97,
          32,
          45,
          32,
          100,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          44,
          32,
          81,
          98,
          32,
          61,
          32,
          40,
          98,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          111,
          114,
          32,
          40,
          118,
          97,
          114,
          32,
          97,
          32,
          61,
          32,
          48,
          44,
          32,
          99,
          32,
          61,
          32,
          48,
          59,
          32,
          99,
          32,
          60,
          32,
          98,
          46,
          108,
          101,
          110,
          103,
          116,
          104,
          59,
          32,
          43,
          43,
          99,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          100,
          32,
          61,
          32,
          98,
          46,
          99,
          104,
          97,
          114,
          67,
          111,
          100,
          101,
          65,
          116,
          40,
          99,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          53,
          53,
          50,
          57,
          54,
          32,
          60,
          61,
          32,
          100,
          32,
          38,
          38,
          32,
          53,
          55,
          51,
          52,
          51,
          32,
          62,
          61,
          32,
          100,
          32,
          38,
          38,
          32,
          43,
          43,
          99,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          97,
          32,
          43,
          61,
          32,
          52,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          97,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          44,
          32,
          82,
          98,
          32,
          61,
          32,
          48,
          44,
          32,
          83,
          98,
          32,
          61,
          32,
          40,
          98,
          44,
          32,
          97,
          44,
          32,
          99,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          100,
          32,
          61,
          32,
          91,
          93,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          98,
          32,
          61,
          32,
          98,
          46,
          116,
          111,
          87,
          105,
          114,
          101,
          84,
          121,
          112,
          101,
          40,
          100,
          44,
          32,
          99,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          100,
          46,
          108,
          101,
          110,
          103,
          116,
          104,
          32,
          38,
          38,
          32,
          40,
          66,
          91,
          97,
          32,
          62,
          62,
          32,
          50,
          93,
          32,
          61,
          32,
          79,
          97,
          40,
          100,
          41,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          98,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          44,
          32,
          84,
          98,
          32,
          61,
          32,
          91,
          93,
          44,
          32,
          85,
          98,
          32,
          61,
          32,
          123,
          125,
          44,
          32,
          86,
          98,
          32,
          61,
          32,
          40,
          98,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          97,
          32,
          61,
          32,
          84,
          98,
          46,
          108,
          101,
          110,
          103,
          116,
          104,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          84,
          98,
          46,
          112,
          117,
          115,
          104,
          40,
          98,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          97,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          44,
          32,
          87,
          98,
          32,
          61,
          32,
          40,
          98,
          44,
          32,
          97,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          111,
          114,
          32,
          40,
          118,
          97,
          114,
          32,
          99,
          32,
          61,
          32,
          65,
          114,
          114,
          97,
          121,
          40,
          98,
          41,
          44,
          32,
          100,
          32,
          61,
          32,
          48,
          59,
          32,
          100,
          32,
          60,
          32,
          98,
          59,
          32,
          43,
          43,
          100,
          41,
          32,
          99,
          91,
          100,
          93,
          32,
          61,
          32,
          87,
          97,
          40,
          66,
          91,
          97,
          32,
          43,
          32,
          52,
          32,
          42,
          32,
          100,
          32,
          62,
          62,
          32,
          50,
          93,
          44,
          32,
          96,
          112,
          97,
          114,
          97,
          109,
          101,
          116,
          101,
          114,
          32,
          36,
          123,
          100,
          125,
          96,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          99,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          44,
          32,
          88,
          98,
          32,
          61,
          32,
          123,
          125,
          44,
          32,
          89,
          98,
          32,
          61,
          32,
          40,
          98,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          33,
          40,
          98,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          111,
          102,
          32,
          121,
          97,
          32,
          124,
          124,
          32,
          34,
          117,
          110,
          119,
          105,
          110,
          100,
          34,
          32,
          61,
          61,
          32,
          98,
          41,
          41,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          98,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          44,
          32,
          90,
          98,
          32,
          61,
          32,
          40,
          98,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          110,
          97,
          32,
          61,
          32,
          98,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          68,
          97,
          32,
          124,
          124,
          32,
          48,
          32,
          60,
          32,
          82,
          98,
          32,
          124,
          124,
          32,
          40,
          110,
          46,
          111,
          110,
          69,
          120,
          105,
          116,
          63,
          46,
          40,
          98,
          41,
          44,
          32,
          109,
          97,
          32,
          61,
          32,
          116,
          114,
          117,
          101,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          110,
          101,
          119,
          32,
          121,
          97,
          40,
          98,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          44,
          32,
          36,
          98,
          32,
          61,
          32,
          40,
          98,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          33,
          109,
          97,
          41,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          114,
          121,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          98,
          40,
          41,
          44,
          32,
          33,
          40,
          68,
          97,
          32,
          124,
          124,
          32,
          48,
          32,
          60,
          32,
          82,
          98,
          41,
          41,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          114,
          121,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          110,
          97,
          32,
          61,
          32,
          98,
          32,
          61,
          32,
          110,
          97,
          44,
          32,
          90,
          98,
          40,
          98,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          32,
          99,
          97,
          116,
          99,
          104,
          32,
          40,
          97,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          89,
          98,
          40,
          97,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          32,
          99,
          97,
          116,
          99,
          104,
          32,
          40,
          97,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          89,
          98,
          40,
          97,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          44,
          32,
          97,
          99,
          32,
          61,
          32,
          123,
          125,
          44,
          32,
          99,
          99,
          32,
          61,
          32,
          40,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          33,
          98,
          99,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          98,
          32,
          61,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          85,
          83,
          69,
          82,
          58,
          32,
          34,
          119,
          101,
          98,
          95,
          117,
          115,
          101,
          114,
          34,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          76,
          79,
          71,
          78,
          65,
          77,
          69,
          58,
          32,
          34,
          119,
          101,
          98,
          95,
          117,
          115,
          101,
          114,
          34,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          80,
          65,
          84,
          72,
          58,
          32,
          34,
          47,
          34,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          80,
          87,
          68,
          58,
          32,
          34,
          47,
          34,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          72,
          79,
          77,
          69,
          58,
          32,
          34,
          47,
          104,
          111,
          109,
          101,
          47,
          119,
          101,
          98,
          95,
          117,
          115,
          101,
          114,
          34,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          76,
          65,
          78,
          71,
          58,
          32,
          40,
          34,
          111,
          98,
          106,
          101,
          99,
          116,
          34,
          32,
          61,
          61,
          32,
          116,
          121,
          112,
          101,
          111,
          102,
          32,
          110,
          97,
          118,
          105,
          103,
          97,
          116,
          111,
          114,
          32,
          38,
          38,
          32,
          110,
          97,
          118,
          105,
          103,
          97,
          116,
          111,
          114,
          46,
          108,
          97,
          110,
          103,
          117,
          97,
          103,
          101,
          115,
          32,
          38,
          38,
          32,
          110,
          97,
          118,
          105,
          103,
          97,
          116,
          111,
          114,
          46,
          108,
          97,
          110,
          103,
          117,
          97,
          103,
          101,
          115,
          91,
          48,
          93,
          32,
          124,
          124,
          32,
          34,
          67,
          34,
          41,
          46,
          114,
          101,
          112,
          108,
          97,
          99,
          101,
          40,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          34,
          45,
          34,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          34,
          95,
          34,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          41,
          32,
          43,
          32,
          34,
          46,
          85,
          84,
          70,
          45,
          56,
          34,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          95,
          58,
          32,
          100,
          97,
          32,
          124,
          124,
          32,
          34,
          46,
          47,
          116,
          104,
          105,
          115,
          46,
          112,
          114,
          111,
          103,
          114,
          97,
          109,
          34,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          44,
          32,
          97,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          111,
          114,
          32,
          40,
          97,
          32,
          105,
          110,
          32,
          97,
          99,
          41,
          32,
          118,
          111,
          105,
          100,
          32,
          48,
          32,
          61,
          61,
          61,
          32,
          97,
          99,
          91,
          97,
          93,
          32,
          63,
          32,
          100,
          101,
          108,
          101,
          116,
          101,
          32,
          98,
          91,
          97,
          93,
          32,
          58,
          32,
          98,
          91,
          97,
          93,
          32,
          61,
          32,
          97,
          99,
          91,
          97,
          93,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          99,
          32,
          61,
          32,
          91,
          93,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          111,
          114,
          32,
          40,
          97,
          32,
          105,
          110,
          32,
          98,
          41,
          32,
          99,
          46,
          112,
          117,
          115,
          104,
          40,
          96,
          36,
          123,
          97,
          125,
          61,
          36,
          123,
          98,
          91,
          97,
          93,
          125,
          96,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          98,
          99,
          32,
          61,
          32,
          99,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          98,
          99,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          44,
          32,
          98,
          99,
          44,
          32,
          100,
          99,
          32,
          61,
          32,
          91,
          110,
          117,
          108,
          108,
          44,
          32,
          91,
          93,
          44,
          32,
          91,
          93,
          93,
          44,
          32,
          101,
          99,
          32,
          61,
          32,
          40,
          41,
          32,
          61,
          62,
          32,
          40,
          98,
          41,
          32,
          61,
          62,
          32,
          99,
          114,
          121,
          112,
          116,
          111,
          46,
          103,
          101,
          116,
          82,
          97,
          110,
          100,
          111,
          109,
          86,
          97,
          108,
          117,
          101,
          115,
          40,
          98,
          41,
          44,
          32,
          102,
          99,
          32,
          61,
          32,
          40,
          98,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          40,
          102,
          99,
          32,
          61,
          32,
          101,
          99,
          40,
          41,
          41,
          40,
          98,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          73,
          46,
          112,
          117,
          115,
          104,
          40,
          48,
          44,
          32,
          49,
          44,
          32,
          118,
          111,
          105,
          100,
          32,
          48,
          44,
          32,
          49,
          44,
          32,
          110,
          117,
          108,
          108,
          44,
          32,
          49,
          44,
          32,
          116,
          114,
          117,
          101,
          44,
          32,
          49,
          44,
          32,
          102,
          97,
          108,
          115,
          101,
          44,
          32,
          49,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          110,
          46,
          99,
          111,
          117,
          110,
          116,
          95,
          101,
          109,
          118,
          97,
          108,
          95,
          104,
          97,
          110,
          100,
          108,
          101,
          115,
          32,
          61,
          32,
          40,
          41,
          32,
          61,
          62,
          32,
          73,
          46,
          108,
          101,
          110,
          103,
          116,
          104,
          32,
          47,
          32,
          50,
          32,
          45,
          32,
          53,
          32,
          45,
          32,
          77,
          97,
          46,
          108,
          101,
          110,
          103,
          116,
          104,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          111,
          114,
          32,
          40,
          118,
          97,
          114,
          32,
          103,
          99,
          32,
          61,
          32,
          65,
          114,
          114,
          97,
          121,
          40,
          50,
          53,
          54,
          41,
          44,
          32,
          104,
          99,
          32,
          61,
          32,
          48,
          59,
          32,
          50,
          53,
          54,
          32,
          62,
          32,
          104,
          99,
          59,
          32,
          43,
          43,
          104,
          99,
          41,
          32,
          103,
          99,
          91,
          104,
          99,
          93,
          32,
          61,
          32,
          83,
          116,
          114,
          105,
          110,
          103,
          46,
          102,
          114,
          111,
          109,
          67,
          104,
          97,
          114,
          67,
          111,
          100,
          101,
          40,
          104,
          99,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          81,
          97,
          32,
          61,
          32,
          103,
          99,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          40,
          40,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          108,
          101,
          116,
          32,
          98,
          32,
          61,
          32,
          105,
          98,
          46,
          112,
          114,
          111,
          116,
          111,
          116,
          121,
          112,
          101,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          79,
          98,
          106,
          101,
          99,
          116,
          46,
          97,
          115,
          115,
          105,
          103,
          110,
          40,
          98,
          44,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          115,
          65,
          108,
          105,
          97,
          115,
          79,
          102,
          58,
          32,
          102,
          117,
          110,
          99,
          116,
          105,
          111,
          110,
          40,
          99,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          33,
          40,
          116,
          104,
          105,
          115,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          111,
          102,
          32,
          105,
          98,
          32,
          38,
          38,
          32,
          99,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          111,
          102,
          32,
          105,
          98,
          41,
          41,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          102,
          97,
          108,
          115,
          101,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          100,
          32,
          61,
          32,
          116,
          104,
          105,
          115,
          46,
          122,
          98,
          46,
          67,
          98,
          46,
          66,
          98,
          44,
          32,
          101,
          32,
          61,
          32,
          116,
          104,
          105,
          115,
          46,
          122,
          98,
          46,
          65,
          98,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          46,
          122,
          98,
          32,
          61,
          32,
          99,
          46,
          122,
          98,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          102,
          32,
          61,
          32,
          99,
          46,
          122,
          98,
          46,
          67,
          98,
          46,
          66,
          98,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          111,
          114,
          32,
          40,
          99,
          32,
          61,
          32,
          99,
          46,
          122,
          98,
          46,
          65,
          98,
          59,
          32,
          100,
          46,
          69,
          98,
          59,
          32,
          41,
          32,
          101,
          32,
          61,
          32,
          100,
          46,
          80,
          98,
          40,
          101,
          41,
          44,
          32,
          100,
          32,
          61,
          32,
          100,
          46,
          69,
          98,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          111,
          114,
          32,
          40,
          59,
          32,
          102,
          46,
          69,
          98,
          59,
          32,
          41,
          32,
          99,
          32,
          61,
          32,
          102,
          46,
          80,
          98,
          40,
          99,
          41,
          44,
          32,
          102,
          32,
          61,
          32,
          102,
          46,
          69,
          98,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          100,
          32,
          61,
          61,
          61,
          32,
          102,
          32,
          38,
          38,
          32,
          101,
          32,
          61,
          61,
          61,
          32,
          99,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          108,
          111,
          110,
          101,
          58,
          32,
          102,
          117,
          110,
          99,
          116,
          105,
          111,
          110,
          40,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          122,
          98,
          46,
          65,
          98,
          32,
          124,
          124,
          32,
          103,
          98,
          40,
          116,
          104,
          105,
          115,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          116,
          104,
          105,
          115,
          46,
          122,
          98,
          46,
          78,
          98,
          41,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          116,
          104,
          105,
          115,
          46,
          122,
          98,
          46,
          99,
          111,
          117,
          110,
          116,
          46,
          118,
          97,
          108,
          117,
          101,
          32,
          43,
          61,
          32,
          49,
          44,
          32,
          116,
          104,
          105,
          115,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          99,
          32,
          61,
          32,
          80,
          44,
          32,
          100,
          32,
          61,
          32,
          79,
          98,
          106,
          101,
          99,
          116,
          44,
          32,
          101,
          32,
          61,
          32,
          100,
          46,
          99,
          114,
          101,
          97,
          116,
          101,
          44,
          32,
          102,
          32,
          61,
          32,
          79,
          98,
          106,
          101,
          99,
          116,
          46,
          103,
          101,
          116,
          80,
          114,
          111,
          116,
          111,
          116,
          121,
          112,
          101,
          79,
          102,
          40,
          116,
          104,
          105,
          115,
          41,
          44,
          32,
          103,
          32,
          61,
          32,
          116,
          104,
          105,
          115,
          46,
          122,
          98,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          32,
          61,
          32,
          99,
          40,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          101,
          46,
          99,
          97,
          108,
          108,
          40,
          100,
          44,
          32,
          102,
          44,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          122,
          98,
          58,
          32,
          123,
          32,
          118,
          97,
          108,
          117,
          101,
          58,
          32,
          123,
          32,
          99,
          111,
          117,
          110,
          116,
          58,
          32,
          103,
          46,
          99,
          111,
          117,
          110,
          116,
          44,
          32,
          79,
          98,
          58,
          32,
          103,
          46,
          79,
          98,
          44,
          32,
          78,
          98,
          58,
          32,
          103,
          46,
          78,
          98,
          44,
          32,
          65,
          98,
          58,
          32,
          103,
          46,
          65,
          98,
          44,
          32,
          67,
          98,
          58,
          32,
          103,
          46,
          67,
          98,
          44,
          32,
          70,
          98,
          58,
          32,
          103,
          46,
          70,
          98,
          44,
          32,
          73,
          98,
          58,
          32,
          103,
          46,
          73,
          98,
          32,
          125,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          41,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          46,
          122,
          98,
          46,
          99,
          111,
          117,
          110,
          116,
          46,
          118,
          97,
          108,
          117,
          101,
          32,
          43,
          61,
          32,
          49,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          46,
          122,
          98,
          46,
          79,
          98,
          32,
          61,
          32,
          102,
          97,
          108,
          115,
          101,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          99,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          91,
          34,
          100,
          101,
          108,
          101,
          116,
          101,
          34,
          93,
          40,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          122,
          98,
          46,
          65,
          98,
          32,
          124,
          124,
          32,
          103,
          98,
          40,
          116,
          104,
          105,
          115,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          116,
          104,
          105,
          115,
          46,
          122,
          98,
          46,
          79,
          98,
          32,
          38,
          38,
          32,
          33,
          116,
          104,
          105,
          115,
          46,
          122,
          98,
          46,
          78,
          98,
          41,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          110,
          101,
          119,
          32,
          75,
          40,
          34,
          79,
          98,
          106,
          101,
          99,
          116,
          32,
          97,
          108,
          114,
          101,
          97,
          100,
          121,
          32,
          115,
          99,
          104,
          101,
          100,
          117,
          108,
          101,
          100,
          32,
          102,
          111,
          114,
          32,
          100,
          101,
          108,
          101,
          116,
          105,
          111,
          110,
          34,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          88,
          97,
          40,
          116,
          104,
          105,
          115,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          99,
          32,
          61,
          32,
          116,
          104,
          105,
          115,
          46,
          122,
          98,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          45,
          45,
          99,
          46,
          99,
          111,
          117,
          110,
          116,
          46,
          118,
          97,
          108,
          117,
          101,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          48,
          32,
          61,
          61,
          61,
          32,
          99,
          46,
          99,
          111,
          117,
          110,
          116,
          46,
          118,
          97,
          108,
          117,
          101,
          32,
          38,
          38,
          32,
          40,
          99,
          46,
          70,
          98,
          32,
          63,
          32,
          99,
          46,
          73,
          98,
          46,
          74,
          98,
          40,
          99,
          46,
          70,
          98,
          41,
          32,
          58,
          32,
          99,
          46,
          67,
          98,
          46,
          66,
          98,
          46,
          74,
          98,
          40,
          99,
          46,
          65,
          98,
          41,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          122,
          98,
          46,
          78,
          98,
          32,
          124,
          124,
          32,
          40,
          116,
          104,
          105,
          115,
          46,
          122,
          98,
          46,
          70,
          98,
          32,
          61,
          32,
          118,
          111,
          105,
          100,
          32,
          48,
          44,
          32,
          116,
          104,
          105,
          115,
          46,
          122,
          98,
          46,
          65,
          98,
          32,
          61,
          32,
          118,
          111,
          105,
          100,
          32,
          48,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          115,
          68,
          101,
          108,
          101,
          116,
          101,
          100,
          58,
          32,
          102,
          117,
          110,
          99,
          116,
          105,
          111,
          110,
          40,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          33,
          116,
          104,
          105,
          115,
          46,
          122,
          98,
          46,
          65,
          98,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          100,
          101,
          108,
          101,
          116,
          101,
          76,
          97,
          116,
          101,
          114,
          58,
          32,
          102,
          117,
          110,
          99,
          116,
          105,
          111,
          110,
          40,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          122,
          98,
          46,
          65,
          98,
          32,
          124,
          124,
          32,
          103,
          98,
          40,
          116,
          104,
          105,
          115,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          116,
          104,
          105,
          115,
          46,
          122,
          98,
          46,
          79,
          98,
          32,
          38,
          38,
          32,
          33,
          116,
          104,
          105,
          115,
          46,
          122,
          98,
          46,
          78,
          98,
          41,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          110,
          101,
          119,
          32,
          75,
          40,
          34,
          79,
          98,
          106,
          101,
          99,
          116,
          32,
          97,
          108,
          114,
          101,
          97,
          100,
          121,
          32,
          115,
          99,
          104,
          101,
          100,
          117,
          108,
          101,
          100,
          32,
          102,
          111,
          114,
          32,
          100,
          101,
          108,
          101,
          116,
          105,
          111,
          110,
          34,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          104,
          98,
          46,
          112,
          117,
          115,
          104,
          40,
          116,
          104,
          105,
          115,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          122,
          98,
          46,
          79,
          98,
          32,
          61,
          32,
          116,
          114,
          117,
          101,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          116,
          104,
          105,
          115,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          97,
          32,
          61,
          32,
          83,
          121,
          109,
          98,
          111,
          108,
          46,
          100,
          105,
          115,
          112,
          111,
          115,
          101,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          97,
          32,
          38,
          38,
          32,
          40,
          98,
          91,
          97,
          93,
          32,
          61,
          32,
          98,
          91,
          34,
          100,
          101,
          108,
          101,
          116,
          101,
          34,
          93,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          41,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          79,
          98,
          106,
          101,
          99,
          116,
          46,
          97,
          115,
          115,
          105,
          103,
          110,
          40,
          118,
          98,
          46,
          112,
          114,
          111,
          116,
          111,
          116,
          121,
          112,
          101,
          44,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          100,
          99,
          40,
          98,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          89,
          98,
          32,
          38,
          38,
          32,
          40,
          98,
          32,
          61,
          32,
          116,
          104,
          105,
          115,
          46,
          89,
          98,
          40,
          98,
          41,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          98,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          86,
          98,
          40,
          98,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          74,
          98,
          63,
          46,
          40,
          98,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          72,
          98,
          58,
          32,
          56,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          97,
          100,
          86,
          97,
          108,
          117,
          101,
          70,
          114,
          111,
          109,
          80,
          111,
          105,
          110,
          116,
          101,
          114,
          58,
          32,
          97,
          98,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          114,
          111,
          109,
          87,
          105,
          114,
          101,
          84,
          121,
          112,
          101,
          58,
          32,
          102,
          117,
          110,
          99,
          116,
          105,
          111,
          110,
          40,
          98,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          117,
          110,
          99,
          116,
          105,
          111,
          110,
          32,
          97,
          40,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          116,
          104,
          105,
          115,
          46,
          83,
          98,
          32,
          63,
          32,
          117,
          98,
          40,
          116,
          104,
          105,
          115,
          46,
          66,
          98,
          46,
          75,
          98,
          44,
          32,
          123,
          32,
          67,
          98,
          58,
          32,
          116,
          104,
          105,
          115,
          46,
          107,
          99,
          44,
          32,
          65,
          98,
          58,
          32,
          99,
          44,
          32,
          73,
          98,
          58,
          32,
          116,
          104,
          105,
          115,
          44,
          32,
          70,
          98,
          58,
          32,
          98,
          32,
          125,
          41,
          32,
          58,
          32,
          117,
          98,
          40,
          116,
          104,
          105,
          115,
          46,
          66,
          98,
          46,
          75,
          98,
          44,
          32,
          123,
          32,
          67,
          98,
          58,
          32,
          116,
          104,
          105,
          115,
          44,
          32,
          65,
          98,
          58,
          32,
          98,
          32,
          125,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          99,
          32,
          61,
          32,
          116,
          104,
          105,
          115,
          46,
          100,
          99,
          40,
          98,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          33,
          99,
          41,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          116,
          104,
          105,
          115,
          46,
          86,
          98,
          40,
          98,
          41,
          44,
          32,
          110,
          117,
          108,
          108,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          100,
          32,
          61,
          32,
          116,
          98,
          40,
          116,
          104,
          105,
          115,
          46,
          66,
          98,
          44,
          32,
          99,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          118,
          111,
          105,
          100,
          32,
          48,
          32,
          33,
          61,
          61,
          32,
          100,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          48,
          32,
          61,
          61,
          61,
          32,
          100,
          46,
          122,
          98,
          46,
          99,
          111,
          117,
          110,
          116,
          46,
          118,
          97,
          108,
          117,
          101,
          41,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          100,
          46,
          122,
          98,
          46,
          65,
          98,
          32,
          61,
          32,
          99,
          44,
          32,
          100,
          46,
          122,
          98,
          46,
          70,
          98,
          32,
          61,
          32,
          98,
          44,
          32,
          100,
          46,
          99,
          108,
          111,
          110,
          101,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          100,
          32,
          61,
          32,
          100,
          46,
          99,
          108,
          111,
          110,
          101,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          86,
          98,
          40,
          98,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          100,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          100,
          32,
          61,
          32,
          116,
          104,
          105,
          115,
          46,
          66,
          98,
          46,
          99,
          99,
          40,
          99,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          100,
          32,
          61,
          32,
          106,
          98,
          91,
          100,
          93,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          33,
          100,
          41,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          97,
          46,
          99,
          97,
          108,
          108,
          40,
          116,
          104,
          105,
          115,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          100,
          32,
          61,
          32,
          116,
          104,
          105,
          115,
          46,
          82,
          98,
          32,
          63,
          32,
          100,
          46,
          90,
          98,
          32,
          58,
          32,
          100,
          46,
          112,
          111,
          105,
          110,
          116,
          101,
          114,
          84,
          121,
          112,
          101,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          101,
          32,
          61,
          32,
          115,
          98,
          40,
          99,
          44,
          32,
          116,
          104,
          105,
          115,
          46,
          66,
          98,
          44,
          32,
          100,
          46,
          66,
          98,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          110,
          117,
          108,
          108,
          32,
          61,
          61,
          61,
          32,
          101,
          32,
          63,
          32,
          97,
          46,
          99,
          97,
          108,
          108,
          40,
          116,
          104,
          105,
          115,
          41,
          32,
          58,
          32,
          116,
          104,
          105,
          115,
          46,
          83,
          98,
          32,
          63,
          32,
          117,
          98,
          40,
          100,
          46,
          66,
          98,
          46,
          75,
          98,
          44,
          32,
          123,
          32,
          67,
          98,
          58,
          32,
          100,
          44,
          32,
          65,
          98,
          58,
          32,
          101,
          44,
          32,
          73,
          98,
          58,
          32,
          116,
          104,
          105,
          115,
          44,
          32,
          70,
          98,
          58,
          32,
          98,
          32,
          125,
          41,
          32,
          58,
          32,
          117,
          98,
          40,
          100,
          46,
          66,
          98,
          46,
          75,
          98,
          44,
          32,
          123,
          32,
          67,
          98,
          58,
          32,
          100,
          44,
          32,
          65,
          98,
          58,
          32,
          101,
          32,
          125,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          110,
          46,
          110,
          111,
          69,
          120,
          105,
          116,
          82,
          117,
          110,
          116,
          105,
          109,
          101,
          32,
          38,
          38,
          32,
          40,
          68,
          97,
          32,
          61,
          32,
          110,
          46,
          110,
          111,
          69,
          120,
          105,
          116,
          82,
          117,
          110,
          116,
          105,
          109,
          101,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          110,
          46,
          112,
          114,
          105,
          110,
          116,
          32,
          38,
          38,
          32,
          40,
          105,
          97,
          32,
          61,
          32,
          110,
          46,
          112,
          114,
          105,
          110,
          116,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          110,
          46,
          112,
          114,
          105,
          110,
          116,
          69,
          114,
          114,
          32,
          38,
          38,
          32,
          40,
          112,
          32,
          61,
          32,
          110,
          46,
          112,
          114,
          105,
          110,
          116,
          69,
          114,
          114,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          110,
          46,
          119,
          97,
          115,
          109,
          66,
          105,
          110,
          97,
          114,
          121,
          32,
          38,
          38,
          32,
          40,
          113,
          32,
          61,
          32,
          110,
          46,
          119,
          97,
          115,
          109,
          66,
          105,
          110,
          97,
          114,
          121,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          110,
          46,
          116,
          104,
          105,
          115,
          80,
          114,
          111,
          103,
          114,
          97,
          109,
          32,
          38,
          38,
          32,
          40,
          100,
          97,
          32,
          61,
          32,
          110,
          46,
          116,
          104,
          105,
          115,
          80,
          114,
          111,
          103,
          114,
          97,
          109,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          120,
          100,
          32,
          61,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          108,
          58,
          32,
          40,
          98,
          44,
          32,
          97,
          44,
          32,
          99,
          44,
          32,
          100,
          41,
          32,
          61,
          62,
          32,
          116,
          97,
          40,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          96,
          65,
          115,
          115,
          101,
          114,
          116,
          105,
          111,
          110,
          32,
          102,
          97,
          105,
          108,
          101,
          100,
          58,
          32,
          36,
          123,
          98,
          32,
          63,
          32,
          70,
          40,
          116,
          44,
          32,
          98,
          41,
          32,
          58,
          32,
          34,
          34,
          125,
          44,
          32,
          97,
          116,
          58,
          32,
          96,
          32,
          43,
          32,
          91,
          97,
          32,
          63,
          32,
          97,
          32,
          63,
          32,
          70,
          40,
          116,
          44,
          32,
          97,
          41,
          32,
          58,
          32,
          34,
          34,
          32,
          58,
          32,
          34,
          117,
          110,
          107,
          110,
          111,
          119,
          110,
          32,
          102,
          105,
          108,
          101,
          110,
          97,
          109,
          101,
          34,
          44,
          32,
          99,
          44,
          32,
          100,
          32,
          63,
          32,
          100,
          32,
          63,
          32,
          70,
          40,
          116,
          44,
          32,
          100,
          41,
          32,
          58,
          32,
          34,
          34,
          32,
          58,
          32,
          34,
          117,
          110,
          107,
          110,
          111,
          119,
          110,
          32,
          102,
          117,
          110,
          99,
          116,
          105,
          111,
          110,
          34,
          93,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          41,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          120,
          97,
          58,
          32,
          40,
          98,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          97,
          32,
          61,
          32,
          110,
          101,
          119,
          32,
          72,
          97,
          40,
          98,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          48,
          32,
          61,
          61,
          32,
          114,
          91,
          97,
          46,
          65,
          98,
          32,
          43,
          32,
          49,
          50,
          93,
          32,
          38,
          38,
          32,
          40,
          114,
          91,
          97,
          46,
          65,
          98,
          32,
          43,
          32,
          49,
          50,
          93,
          32,
          61,
          32,
          49,
          44,
          32,
          71,
          97,
          45,
          45,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          91,
          97,
          46,
          65,
          98,
          32,
          43,
          32,
          49,
          51,
          93,
          32,
          61,
          32,
          48,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          70,
          97,
          46,
          112,
          117,
          115,
          104,
          40,
          97,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          99,
          40,
          98,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          106,
          99,
          40,
          98,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          119,
          97,
          58,
          32,
          40,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          87,
          40,
          48,
          44,
          32,
          48,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          98,
          32,
          61,
          32,
          70,
          97,
          46,
          112,
          111,
          112,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          107,
          99,
          40,
          98,
          46,
          97,
          99,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          72,
          32,
          61,
          32,
          48,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          98,
          58,
          32,
          40,
          41,
          32,
          61,
          62,
          32,
          75,
          97,
          40,
          91,
          93,
          41,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          111,
          58,
          32,
          40,
          98,
          44,
          32,
          97,
          41,
          32,
          61,
          62,
          32,
          75,
          97,
          40,
          91,
          98,
          44,
          32,
          97,
          93,
          41,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          117,
          58,
          32,
          40,
          98,
          44,
          32,
          97,
          44,
          32,
          99,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          100,
          32,
          61,
          32,
          110,
          101,
          119,
          32,
          72,
          97,
          40,
          98,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          66,
          91,
          100,
          46,
          65,
          98,
          32,
          43,
          32,
          49,
          54,
          32,
          62,
          62,
          32,
          50,
          93,
          32,
          61,
          32,
          48,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          66,
          91,
          100,
          46,
          65,
          98,
          32,
          43,
          32,
          52,
          32,
          62,
          62,
          32,
          50,
          93,
          32,
          61,
          32,
          97,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          66,
          91,
          100,
          46,
          65,
          98,
          32,
          43,
          32,
          56,
          32,
          62,
          62,
          32,
          50,
          93,
          32,
          61,
          32,
          99,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          72,
          32,
          61,
          32,
          98,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          71,
          97,
          43,
          43,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          72,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          100,
          58,
          32,
          40,
          98,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          72,
          32,
          124,
          124,
          32,
          40,
          72,
          32,
          61,
          32,
          98,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          72,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          98,
          58,
          32,
          40,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          97,
          98,
          58,
          32,
          40,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          98,
          98,
          58,
          32,
          40,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          101,
          98,
          58,
          32,
          102,
          117,
          110,
          99,
          116,
          105,
          111,
          110,
          40,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          103,
          98,
          58,
          32,
          40,
          41,
          32,
          61,
          62,
          32,
          116,
          97,
          40,
          34,
          34,
          41,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          115,
          97,
          58,
          32,
          40,
          98,
          44,
          32,
          97,
          44,
          32,
          99,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          98,
          32,
          61,
          32,
          77,
          40,
          98,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          97,
          32,
          61,
          32,
          87,
          97,
          40,
          97,
          44,
          32,
          34,
          119,
          114,
          97,
          112,
          112,
          101,
          114,
          34,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          32,
          61,
          32,
          76,
          40,
          99,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          100,
          32,
          61,
          32,
          97,
          46,
          66,
          98,
          44,
          32,
          101,
          32,
          61,
          32,
          100,
          46,
          75,
          98,
          44,
          32,
          102,
          32,
          61,
          32,
          100,
          46,
          69,
          98,
          46,
          75,
          98,
          44,
          32,
          103,
          32,
          61,
          32,
          100,
          46,
          69,
          98,
          46,
          99,
          111,
          110,
          115,
          116,
          114,
          117,
          99,
          116,
          111,
          114,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          98,
          32,
          61,
          32,
          76,
          97,
          40,
          98,
          44,
          32,
          102,
          117,
          110,
          99,
          116,
          105,
          111,
          110,
          40,
          46,
          46,
          46,
          104,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          100,
          46,
          69,
          98,
          46,
          88,
          98,
          46,
          102,
          111,
          114,
          69,
          97,
          99,
          104,
          40,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          117,
          110,
          99,
          116,
          105,
          111,
          110,
          40,
          107,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          116,
          104,
          105,
          115,
          91,
          107,
          93,
          32,
          61,
          61,
          61,
          32,
          102,
          91,
          107,
          93,
          41,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          110,
          101,
          119,
          32,
          80,
          97,
          40,
          96,
          80,
          117,
          114,
          101,
          32,
          118,
          105,
          114,
          116,
          117,
          97,
          108,
          32,
          102,
          117,
          110,
          99,
          116,
          105,
          111,
          110,
          32,
          36,
          123,
          107,
          125,
          32,
          109,
          117,
          115,
          116,
          32,
          98,
          101,
          32,
          105,
          109,
          112,
          108,
          101,
          109,
          101,
          110,
          116,
          101,
          100,
          32,
          105,
          110,
          32,
          74,
          97,
          118,
          97,
          83,
          99,
          114,
          105,
          112,
          116,
          96,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          46,
          98,
          105,
          110,
          100,
          40,
          116,
          104,
          105,
          115,
          41,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          79,
          98,
          106,
          101,
          99,
          116,
          46,
          100,
          101,
          102,
          105,
          110,
          101,
          80,
          114,
          111,
          112,
          101,
          114,
          116,
          121,
          40,
          116,
          104,
          105,
          115,
          44,
          32,
          34,
          95,
          95,
          112,
          97,
          114,
          101,
          110,
          116,
          34,
          44,
          32,
          123,
          32,
          118,
          97,
          108,
          117,
          101,
          58,
          32,
          101,
          32,
          125,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          95,
          99,
          111,
          110,
          115,
          116,
          114,
          117,
          99,
          116,
          40,
          46,
          46,
          46,
          104,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          101,
          46,
          95,
          95,
          99,
          111,
          110,
          115,
          116,
          114,
          117,
          99,
          116,
          32,
          61,
          32,
          102,
          117,
          110,
          99,
          116,
          105,
          111,
          110,
          40,
          46,
          46,
          46,
          104,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          116,
          104,
          105,
          115,
          32,
          61,
          61,
          61,
          32,
          101,
          41,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          110,
          101,
          119,
          32,
          75,
          40,
          34,
          80,
          97,
          115,
          115,
          32,
          99,
          111,
          114,
          114,
          101,
          99,
          116,
          32,
          39,
          116,
          104,
          105,
          115,
          39,
          32,
          116,
          111,
          32,
          95,
          95,
          99,
          111,
          110,
          115,
          116,
          114,
          117,
          99,
          116,
          34,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          104,
          32,
          61,
          32,
          103,
          46,
          105,
          109,
          112,
          108,
          101,
          109,
          101,
          110,
          116,
          40,
          116,
          104,
          105,
          115,
          44,
          32,
          46,
          46,
          46,
          104,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          88,
          97,
          40,
          104,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          107,
          32,
          61,
          32,
          104,
          46,
          122,
          98,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          104,
          46,
          110,
          111,
          116,
          105,
          102,
          121,
          79,
          110,
          68,
          101,
          115,
          116,
          114,
          117,
          99,
          116,
          105,
          111,
          110,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          107,
          46,
          78,
          98,
          32,
          61,
          32,
          116,
          114,
          117,
          101,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          79,
          98,
          106,
          101,
          99,
          116,
          46,
          100,
          101,
          102,
          105,
          110,
          101,
          80,
          114,
          111,
          112,
          101,
          114,
          116,
          105,
          101,
          115,
          40,
          116,
          104,
          105,
          115,
          44,
          32,
          123,
          32,
          122,
          98,
          58,
          32,
          123,
          32,
          118,
          97,
          108,
          117,
          101,
          58,
          32,
          107,
          32,
          125,
          32,
          125,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          80,
          40,
          116,
          104,
          105,
          115,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          104,
          32,
          61,
          32,
          107,
          46,
          65,
          98,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          104,
          32,
          61,
          32,
          83,
          97,
          40,
          100,
          44,
          32,
          104,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          82,
          97,
          46,
          104,
          97,
          115,
          79,
          119,
          110,
          80,
          114,
          111,
          112,
          101,
          114,
          116,
          121,
          40,
          104,
          41,
          41,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          110,
          101,
          119,
          32,
          75,
          40,
          96,
          84,
          114,
          105,
          101,
          100,
          32,
          116,
          111,
          32,
          114,
          101,
          103,
          105,
          115,
          116,
          101,
          114,
          32,
          114,
          101,
          103,
          105,
          115,
          116,
          101,
          114,
          101,
          100,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          58,
          32,
          36,
          123,
          104,
          125,
          96,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          82,
          97,
          91,
          104,
          93,
          32,
          61,
          32,
          116,
          104,
          105,
          115,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          101,
          46,
          95,
          95,
          100,
          101,
          115,
          116,
          114,
          117,
          99,
          116,
          32,
          61,
          32,
          102,
          117,
          110,
          99,
          116,
          105,
          111,
          110,
          40,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          116,
          104,
          105,
          115,
          32,
          61,
          61,
          61,
          32,
          101,
          41,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          110,
          101,
          119,
          32,
          75,
          40,
          34,
          80,
          97,
          115,
          115,
          32,
          99,
          111,
          114,
          114,
          101,
          99,
          116,
          32,
          39,
          116,
          104,
          105,
          115,
          39,
          32,
          116,
          111,
          32,
          95,
          95,
          100,
          101,
          115,
          116,
          114,
          117,
          99,
          116,
          34,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          88,
          97,
          40,
          116,
          104,
          105,
          115,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          104,
          32,
          61,
          32,
          116,
          104,
          105,
          115,
          46,
          122,
          98,
          46,
          65,
          98,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          104,
          32,
          61,
          32,
          83,
          97,
          40,
          100,
          44,
          32,
          104,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          82,
          97,
          46,
          104,
          97,
          115,
          79,
          119,
          110,
          80,
          114,
          111,
          112,
          101,
          114,
          116,
          121,
          40,
          104,
          41,
          41,
          32,
          100,
          101,
          108,
          101,
          116,
          101,
          32,
          82,
          97,
          91,
          104,
          93,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          101,
          108,
          115,
          101,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          110,
          101,
          119,
          32,
          75,
          40,
          96,
          84,
          114,
          105,
          101,
          100,
          32,
          116,
          111,
          32,
          117,
          110,
          114,
          101,
          103,
          105,
          115,
          116,
          101,
          114,
          32,
          117,
          110,
          114,
          101,
          103,
          105,
          115,
          116,
          101,
          114,
          101,
          100,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          58,
          32,
          36,
          123,
          104,
          125,
          96,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          98,
          46,
          112,
          114,
          111,
          116,
          111,
          116,
          121,
          112,
          101,
          32,
          61,
          32,
          79,
          98,
          106,
          101,
          99,
          116,
          46,
          99,
          114,
          101,
          97,
          116,
          101,
          40,
          101,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          79,
          98,
          106,
          101,
          99,
          116,
          46,
          97,
          115,
          115,
          105,
          103,
          110,
          40,
          98,
          46,
          112,
          114,
          111,
          116,
          111,
          116,
          121,
          112,
          101,
          44,
          32,
          99,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          79,
          97,
          40,
          98,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          82,
          58,
          32,
          40,
          98,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          97,
          32,
          61,
          32,
          90,
          97,
          91,
          98,
          93,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          100,
          101,
          108,
          101,
          116,
          101,
          32,
          90,
          97,
          91,
          98,
          93,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          99,
          32,
          61,
          32,
          97,
          46,
          85,
          98,
          44,
          32,
          100,
          32,
          61,
          32,
          97,
          46,
          74,
          98,
          44,
          32,
          101,
          32,
          61,
          32,
          97,
          46,
          87,
          98,
          44,
          32,
          102,
          32,
          61,
          32,
          101,
          46,
          109,
          97,
          112,
          40,
          40,
          103,
          41,
          32,
          61,
          62,
          32,
          103,
          46,
          104,
          99,
          41,
          46,
          99,
          111,
          110,
          99,
          97,
          116,
          40,
          101,
          46,
          109,
          97,
          112,
          40,
          40,
          103,
          41,
          32,
          61,
          62,
          32,
          103,
          46,
          110,
          99,
          41,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          83,
          40,
          91,
          98,
          93,
          44,
          32,
          102,
          44,
          32,
          40,
          103,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          104,
          32,
          61,
          32,
          123,
          125,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          101,
          46,
          102,
          111,
          114,
          69,
          97,
          99,
          104,
          40,
          40,
          107,
          44,
          32,
          108,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          109,
          32,
          61,
          32,
          103,
          91,
          108,
          93,
          44,
          32,
          117,
          32,
          61,
          32,
          107,
          46,
          101,
          99,
          44,
          32,
          119,
          32,
          61,
          32,
          107,
          46,
          102,
          99,
          44,
          32,
          121,
          32,
          61,
          32,
          103,
          91,
          108,
          32,
          43,
          32,
          101,
          46,
          108,
          101,
          110,
          103,
          116,
          104,
          93,
          44,
          32,
          122,
          32,
          61,
          32,
          107,
          46,
          109,
          99,
          44,
          32,
          71,
          32,
          61,
          32,
          107,
          46,
          111,
          99,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          104,
          91,
          107,
          46,
          98,
          99,
          93,
          32,
          61,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          97,
          100,
          58,
          32,
          40,
          74,
          41,
          32,
          61,
          62,
          32,
          109,
          46,
          102,
          114,
          111,
          109,
          87,
          105,
          114,
          101,
          84,
          121,
          112,
          101,
          40,
          117,
          40,
          119,
          44,
          32,
          74,
          41,
          41,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          119,
          114,
          105,
          116,
          101,
          58,
          32,
          40,
          74,
          44,
          32,
          106,
          97,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          69,
          32,
          61,
          32,
          91,
          93,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          122,
          40,
          71,
          44,
          32,
          74,
          44,
          32,
          121,
          46,
          116,
          111,
          87,
          105,
          114,
          101,
          84,
          121,
          112,
          101,
          40,
          69,
          44,
          32,
          106,
          97,
          41,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          36,
          97,
          40,
          69,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          111,
          112,
          116,
          105,
          111,
          110,
          97,
          108,
          58,
          32,
          103,
          91,
          108,
          93,
          46,
          111,
          112,
          116,
          105,
          111,
          110,
          97,
          108,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          91,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          110,
          97,
          109,
          101,
          58,
          32,
          97,
          46,
          110,
          97,
          109,
          101,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          114,
          111,
          109,
          87,
          105,
          114,
          101,
          84,
          121,
          112,
          101,
          58,
          32,
          40,
          107,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          108,
          32,
          61,
          32,
          123,
          125,
          44,
          32,
          109,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          111,
          114,
          32,
          40,
          109,
          32,
          105,
          110,
          32,
          104,
          41,
          32,
          108,
          91,
          109,
          93,
          32,
          61,
          32,
          104,
          91,
          109,
          93,
          46,
          114,
          101,
          97,
          100,
          40,
          107,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          100,
          40,
          107,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          108,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          111,
          87,
          105,
          114,
          101,
          84,
          121,
          112,
          101,
          58,
          32,
          40,
          107,
          44,
          32,
          108,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          111,
          114,
          32,
          40,
          118,
          97,
          114,
          32,
          109,
          32,
          105,
          110,
          32,
          104,
          41,
          32,
          105,
          102,
          32,
          40,
          33,
          40,
          109,
          32,
          105,
          110,
          32,
          108,
          32,
          124,
          124,
          32,
          104,
          91,
          109,
          93,
          46,
          111,
          112,
          116,
          105,
          111,
          110,
          97,
          108,
          41,
          41,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          110,
          101,
          119,
          32,
          84,
          121,
          112,
          101,
          69,
          114,
          114,
          111,
          114,
          40,
          96,
          77,
          105,
          115,
          115,
          105,
          110,
          103,
          32,
          102,
          105,
          101,
          108,
          100,
          58,
          32,
          34,
          36,
          123,
          109,
          125,
          34,
          96,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          117,
          32,
          61,
          32,
          99,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          111,
          114,
          32,
          40,
          109,
          32,
          105,
          110,
          32,
          104,
          41,
          32,
          104,
          91,
          109,
          93,
          46,
          119,
          114,
          105,
          116,
          101,
          40,
          117,
          44,
          32,
          108,
          91,
          109,
          93,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          110,
          117,
          108,
          108,
          32,
          33,
          61,
          61,
          32,
          107,
          32,
          38,
          38,
          32,
          107,
          46,
          112,
          117,
          115,
          104,
          40,
          100,
          44,
          32,
          117,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          117,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          72,
          98,
          58,
          32,
          56,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          97,
          100,
          86,
          97,
          108,
          117,
          101,
          70,
          114,
          111,
          109,
          80,
          111,
          105,
          110,
          116,
          101,
          114,
          58,
          32,
          97,
          98,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          71,
          98,
          58,
          32,
          100,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          93,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          113,
          97,
          58,
          32,
          40,
          98,
          44,
          32,
          97,
          44,
          32,
          99,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          97,
          32,
          61,
          32,
          77,
          40,
          97,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          82,
          40,
          98,
          44,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          110,
          97,
          109,
          101,
          58,
          32,
          97,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          114,
          111,
          109,
          87,
          105,
          114,
          101,
          84,
          121,
          112,
          101,
          58,
          32,
          40,
          100,
          41,
          32,
          61,
          62,
          32,
          100,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          111,
          87,
          105,
          114,
          101,
          84,
          121,
          112,
          101,
          58,
          32,
          102,
          117,
          110,
          99,
          116,
          105,
          111,
          110,
          40,
          100,
          44,
          32,
          101,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          34,
          98,
          105,
          103,
          105,
          110,
          116,
          34,
          32,
          33,
          61,
          32,
          116,
          121,
          112,
          101,
          111,
          102,
          32,
          101,
          32,
          38,
          38,
          32,
          34,
          110,
          117,
          109,
          98,
          101,
          114,
          34,
          32,
          33,
          61,
          32,
          116,
          121,
          112,
          101,
          111,
          102,
          32,
          101,
          41,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          110,
          101,
          119,
          32,
          84,
          121,
          112,
          101,
          69,
          114,
          114,
          111,
          114,
          40,
          96,
          67,
          97,
          110,
          110,
          111,
          116,
          32,
          99,
          111,
          110,
          118,
          101,
          114,
          116,
          32,
          34,
          36,
          123,
          100,
          98,
          40,
          101,
          41,
          125,
          34,
          32,
          116,
          111,
          32,
          36,
          123,
          116,
          104,
          105,
          115,
          46,
          110,
          97,
          109,
          101,
          125,
          96,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          34,
          110,
          117,
          109,
          98,
          101,
          114,
          34,
          32,
          61,
          61,
          32,
          116,
          121,
          112,
          101,
          111,
          102,
          32,
          101,
          32,
          38,
          38,
          32,
          40,
          101,
          32,
          61,
          32,
          66,
          105,
          103,
          73,
          110,
          116,
          40,
          101,
          41,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          101,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          72,
          98,
          58,
          32,
          56,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          97,
          100,
          86,
          97,
          108,
          117,
          101,
          70,
          114,
          111,
          109,
          80,
          111,
          105,
          110,
          116,
          101,
          114,
          58,
          32,
          102,
          98,
          40,
          97,
          44,
          32,
          99,
          44,
          32,
          45,
          49,
          32,
          61,
          61,
          32,
          97,
          46,
          105,
          110,
          100,
          101,
          120,
          79,
          102,
          40,
          34,
          117,
          34,
          41,
          41,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          71,
          98,
          58,
          32,
          110,
          117,
          108,
          108,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          81,
          97,
          58,
          32,
          40,
          98,
          44,
          32,
          97,
          44,
          32,
          99,
          44,
          32,
          100,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          97,
          32,
          61,
          32,
          77,
          40,
          97,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          82,
          40,
          98,
          44,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          110,
          97,
          109,
          101,
          58,
          32,
          97,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          114,
          111,
          109,
          87,
          105,
          114,
          101,
          84,
          121,
          112,
          101,
          58,
          32,
          102,
          117,
          110,
          99,
          116,
          105,
          111,
          110,
          40,
          101,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          33,
          33,
          101,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          111,
          87,
          105,
          114,
          101,
          84,
          121,
          112,
          101,
          58,
          32,
          102,
          117,
          110,
          99,
          116,
          105,
          111,
          110,
          40,
          101,
          44,
          32,
          102,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          102,
          32,
          63,
          32,
          99,
          32,
          58,
          32,
          100,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          72,
          98,
          58,
          32,
          56,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          97,
          100,
          86,
          97,
          108,
          117,
          101,
          70,
          114,
          111,
          109,
          80,
          111,
          105,
          110,
          116,
          101,
          114,
          58,
          32,
          102,
          117,
          110,
          99,
          116,
          105,
          111,
          110,
          40,
          101,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          116,
          104,
          105,
          115,
          46,
          102,
          114,
          111,
          109,
          87,
          105,
          114,
          101,
          84,
          121,
          112,
          101,
          40,
          116,
          91,
          101,
          93,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          71,
          98,
          58,
          32,
          110,
          117,
          108,
          108,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          68,
          58,
          32,
          40,
          98,
          44,
          32,
          97,
          44,
          32,
          99,
          44,
          32,
          100,
          44,
          32,
          101,
          44,
          32,
          102,
          44,
          32,
          103,
          44,
          32,
          104,
          44,
          32,
          107,
          44,
          32,
          108,
          44,
          32,
          109,
          44,
          32,
          117,
          44,
          32,
          119,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          109,
          32,
          61,
          32,
          77,
          40,
          109,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          32,
          61,
          32,
          85,
          40,
          101,
          44,
          32,
          102,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          104,
          32,
          38,
          38,
          32,
          40,
          104,
          32,
          61,
          32,
          85,
          40,
          103,
          44,
          32,
          104,
          41,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          108,
          32,
          38,
          38,
          32,
          40,
          108,
          32,
          61,
          32,
          85,
          40,
          107,
          44,
          32,
          108,
          41,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          119,
          32,
          61,
          32,
          85,
          40,
          117,
          44,
          32,
          119,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          121,
          32,
          61,
          32,
          109,
          98,
          40,
          109,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          108,
          98,
          40,
          121,
          44,
          32,
          102,
          117,
          110,
          99,
          116,
          105,
          111,
          110,
          40,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          121,
          98,
          40,
          96,
          67,
          97,
          110,
          110,
          111,
          116,
          32,
          99,
          111,
          110,
          115,
          116,
          114,
          117,
          99,
          116,
          32,
          36,
          123,
          109,
          125,
          32,
          100,
          117,
          101,
          32,
          116,
          111,
          32,
          117,
          110,
          98,
          111,
          117,
          110,
          100,
          32,
          116,
          121,
          112,
          101,
          115,
          96,
          44,
          32,
          91,
          100,
          93,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          83,
          40,
          91,
          98,
          44,
          32,
          97,
          44,
          32,
          99,
          93,
          44,
          32,
          100,
          32,
          63,
          32,
          91,
          100,
          93,
          32,
          58,
          32,
          91,
          93,
          44,
          32,
          40,
          122,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          122,
          32,
          61,
          32,
          122,
          91,
          48,
          93,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          100,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          71,
          32,
          61,
          32,
          122,
          46,
          66,
          98,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          74,
          32,
          61,
          32,
          71,
          46,
          75,
          98,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          32,
          101,
          108,
          115,
          101,
          32,
          74,
          32,
          61,
          32,
          105,
          98,
          46,
          112,
          114,
          111,
          116,
          111,
          116,
          121,
          112,
          101,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          122,
          32,
          61,
          32,
          76,
          97,
          40,
          109,
          44,
          32,
          102,
          117,
          110,
          99,
          116,
          105,
          111,
          110,
          40,
          46,
          46,
          46,
          84,
          97,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          79,
          98,
          106,
          101,
          99,
          116,
          46,
          103,
          101,
          116,
          80,
          114,
          111,
          116,
          111,
          116,
          121,
          112,
          101,
          79,
          102,
          40,
          116,
          104,
          105,
          115,
          41,
          32,
          33,
          61,
          61,
          32,
          106,
          97,
          41,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          110,
          101,
          119,
          32,
          75,
          40,
          96,
          85,
          115,
          101,
          32,
          39,
          110,
          101,
          119,
          39,
          32,
          116,
          111,
          32,
          99,
          111,
          110,
          115,
          116,
          114,
          117,
          99,
          116,
          32,
          36,
          123,
          109,
          125,
          96,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          118,
          111,
          105,
          100,
          32,
          48,
          32,
          61,
          61,
          61,
          32,
          69,
          46,
          77,
          98,
          41,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          110,
          101,
          119,
          32,
          75,
          40,
          96,
          36,
          123,
          109,
          125,
          32,
          104,
          97,
          115,
          32,
          110,
          111,
          32,
          97,
          99,
          99,
          101,
          115,
          115,
          105,
          98,
          108,
          101,
          32,
          99,
          111,
          110,
          115,
          116,
          114,
          117,
          99,
          116,
          111,
          114,
          96,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          66,
          98,
          32,
          61,
          32,
          69,
          46,
          77,
          98,
          91,
          84,
          97,
          46,
          108,
          101,
          110,
          103,
          116,
          104,
          93,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          118,
          111,
          105,
          100,
          32,
          48,
          32,
          61,
          61,
          61,
          32,
          66,
          98,
          41,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          110,
          101,
          119,
          32,
          75,
          40,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          96,
          84,
          114,
          105,
          101,
          100,
          32,
          116,
          111,
          32,
          105,
          110,
          118,
          111,
          107,
          101,
          32,
          99,
          116,
          111,
          114,
          32,
          111,
          102,
          32,
          36,
          123,
          109,
          125,
          32,
          119,
          105,
          116,
          104,
          32,
          105,
          110,
          118,
          97,
          108,
          105,
          100,
          32,
          110,
          117,
          109,
          98,
          101,
          114,
          32,
          111,
          102,
          32,
          112,
          97,
          114,
          97,
          109,
          101,
          116,
          101,
          114,
          115,
          32,
          40,
          36,
          123,
          84,
          97,
          46,
          108,
          101,
          110,
          103,
          116,
          104,
          125,
          41,
          32,
          45,
          32,
          101,
          120,
          112,
          101,
          99,
          116,
          101,
          100,
          32,
          40,
          36,
          123,
          79,
          98,
          106,
          101,
          99,
          116,
          46,
          107,
          101,
          121,
          115,
          40,
          69,
          46,
          77,
          98,
          41,
          46,
          116,
          111,
          83,
          116,
          114,
          105,
          110,
          103,
          40,
          41,
          125,
          41,
          32,
          112,
          97,
          114,
          97,
          109,
          101,
          116,
          101,
          114,
          115,
          32,
          105,
          110,
          115,
          116,
          101,
          97,
          100,
          33,
          96,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          66,
          98,
          46,
          97,
          112,
          112,
          108,
          121,
          40,
          116,
          104,
          105,
          115,
          44,
          32,
          84,
          97,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          106,
          97,
          32,
          61,
          32,
          79,
          98,
          106,
          101,
          99,
          116,
          46,
          99,
          114,
          101,
          97,
          116,
          101,
          40,
          74,
          44,
          32,
          123,
          32,
          99,
          111,
          110,
          115,
          116,
          114,
          117,
          99,
          116,
          111,
          114,
          58,
          32,
          123,
          32,
          118,
          97,
          108,
          117,
          101,
          58,
          32,
          122,
          32,
          125,
          32,
          125,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          122,
          46,
          112,
          114,
          111,
          116,
          111,
          116,
          121,
          112,
          101,
          32,
          61,
          32,
          106,
          97,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          69,
          32,
          61,
          32,
          110,
          101,
          119,
          32,
          110,
          98,
          40,
          109,
          44,
          32,
          122,
          44,
          32,
          106,
          97,
          44,
          32,
          119,
          44,
          32,
          71,
          44,
          32,
          102,
          44,
          32,
          104,
          44,
          32,
          108,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          69,
          46,
          69,
          98,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          107,
          97,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          40,
          107,
          97,
          32,
          61,
          32,
          69,
          46,
          69,
          98,
          41,
          46,
          81,
          98,
          32,
          63,
          63,
          32,
          40,
          107,
          97,
          46,
          81,
          98,
          32,
          61,
          32,
          91,
          93,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          69,
          46,
          69,
          98,
          46,
          81,
          98,
          46,
          112,
          117,
          115,
          104,
          40,
          69,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          71,
          32,
          61,
          32,
          110,
          101,
          119,
          32,
          118,
          98,
          40,
          109,
          44,
          32,
          69,
          44,
          32,
          116,
          114,
          117,
          101,
          44,
          32,
          102,
          97,
          108,
          115,
          101,
          44,
          32,
          102,
          97,
          108,
          115,
          101,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          107,
          97,
          32,
          61,
          32,
          110,
          101,
          119,
          32,
          118,
          98,
          40,
          109,
          32,
          43,
          32,
          34,
          42,
          34,
          44,
          32,
          69,
          44,
          32,
          102,
          97,
          108,
          115,
          101,
          44,
          32,
          102,
          97,
          108,
          115,
          101,
          44,
          32,
          102,
          97,
          108,
          115,
          101,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          74,
          32,
          61,
          32,
          110,
          101,
          119,
          32,
          118,
          98,
          40,
          109,
          32,
          43,
          32,
          34,
          32,
          99,
          111,
          110,
          115,
          116,
          42,
          34,
          44,
          32,
          69,
          44,
          32,
          102,
          97,
          108,
          115,
          101,
          44,
          32,
          116,
          114,
          117,
          101,
          44,
          32,
          102,
          97,
          108,
          115,
          101,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          106,
          98,
          91,
          98,
          93,
          32,
          61,
          32,
          123,
          32,
          112,
          111,
          105,
          110,
          116,
          101,
          114,
          84,
          121,
          112,
          101,
          58,
          32,
          107,
          97,
          44,
          32,
          90,
          98,
          58,
          32,
          74,
          32,
          125,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          119,
          98,
          40,
          121,
          44,
          32,
          122,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          91,
          71,
          44,
          32,
          107,
          97,
          44,
          32,
          74,
          93,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          80,
          58,
          32,
          40,
          98,
          44,
          32,
          97,
          44,
          32,
          99,
          44,
          32,
          100,
          44,
          32,
          101,
          44,
          32,
          102,
          44,
          32,
          103,
          44,
          32,
          104,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          107,
          32,
          61,
          32,
          67,
          98,
          40,
          99,
          44,
          32,
          100,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          97,
          32,
          61,
          32,
          77,
          40,
          97,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          97,
          32,
          61,
          32,
          68,
          98,
          40,
          97,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          32,
          61,
          32,
          85,
          40,
          101,
          44,
          32,
          102,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          83,
          40,
          91,
          93,
          44,
          32,
          91,
          98,
          93,
          44,
          32,
          40,
          108,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          117,
          110,
          99,
          116,
          105,
          111,
          110,
          32,
          109,
          40,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          121,
          98,
          40,
          96,
          67,
          97,
          110,
          110,
          111,
          116,
          32,
          99,
          97,
          108,
          108,
          32,
          36,
          123,
          117,
          125,
          32,
          100,
          117,
          101,
          32,
          116,
          111,
          32,
          117,
          110,
          98,
          111,
          117,
          110,
          100,
          32,
          116,
          121,
          112,
          101,
          115,
          96,
          44,
          32,
          107,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          108,
          32,
          61,
          32,
          108,
          91,
          48,
          93,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          117,
          32,
          61,
          32,
          96,
          36,
          123,
          108,
          46,
          110,
          97,
          109,
          101,
          125,
          46,
          36,
          123,
          97,
          125,
          96,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          97,
          46,
          115,
          116,
          97,
          114,
          116,
          115,
          87,
          105,
          116,
          104,
          40,
          34,
          64,
          64,
          34,
          41,
          32,
          38,
          38,
          32,
          40,
          97,
          32,
          61,
          32,
          83,
          121,
          109,
          98,
          111,
          108,
          91,
          97,
          46,
          115,
          117,
          98,
          115,
          116,
          114,
          105,
          110,
          103,
          40,
          50,
          41,
          93,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          119,
          32,
          61,
          32,
          108,
          46,
          66,
          98,
          46,
          99,
          111,
          110,
          115,
          116,
          114,
          117,
          99,
          116,
          111,
          114,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          111,
          105,
          100,
          32,
          48,
          32,
          61,
          61,
          61,
          32,
          119,
          91,
          97,
          93,
          32,
          63,
          32,
          40,
          109,
          46,
          76,
          98,
          32,
          61,
          32,
          99,
          32,
          45,
          32,
          49,
          44,
          32,
          119,
          91,
          97,
          93,
          32,
          61,
          32,
          109,
          41,
          32,
          58,
          32,
          40,
          107,
          98,
          40,
          119,
          44,
          32,
          97,
          44,
          32,
          117,
          41,
          44,
          32,
          119,
          91,
          97,
          93,
          46,
          68,
          98,
          91,
          99,
          32,
          45,
          32,
          49,
          93,
          32,
          61,
          32,
          109,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          83,
          40,
          91,
          93,
          44,
          32,
          107,
          44,
          32,
          40,
          121,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          121,
          32,
          61,
          32,
          65,
          98,
          40,
          117,
          44,
          32,
          91,
          121,
          91,
          48,
          93,
          44,
          32,
          110,
          117,
          108,
          108,
          93,
          46,
          99,
          111,
          110,
          99,
          97,
          116,
          40,
          121,
          46,
          115,
          108,
          105,
          99,
          101,
          40,
          49,
          41,
          41,
          44,
          32,
          110,
          117,
          108,
          108,
          44,
          32,
          102,
          44,
          32,
          103,
          44,
          32,
          104,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          111,
          105,
          100,
          32,
          48,
          32,
          61,
          61,
          61,
          32,
          119,
          91,
          97,
          93,
          46,
          68,
          98,
          32,
          63,
          32,
          40,
          121,
          46,
          76,
          98,
          32,
          61,
          32,
          99,
          32,
          45,
          32,
          49,
          44,
          32,
          119,
          91,
          97,
          93,
          32,
          61,
          32,
          121,
          41,
          32,
          58,
          32,
          119,
          91,
          97,
          93,
          46,
          68,
          98,
          91,
          99,
          32,
          45,
          32,
          49,
          93,
          32,
          61,
          32,
          121,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          108,
          46,
          66,
          98,
          46,
          81,
          98,
          41,
          32,
          102,
          111,
          114,
          32,
          40,
          99,
          111,
          110,
          115,
          116,
          32,
          122,
          32,
          111,
          102,
          32,
          108,
          46,
          66,
          98,
          46,
          81,
          98,
          41,
          32,
          122,
          46,
          99,
          111,
          110,
          115,
          116,
          114,
          117,
          99,
          116,
          111,
          114,
          46,
          104,
          97,
          115,
          79,
          119,
          110,
          80,
          114,
          111,
          112,
          101,
          114,
          116,
          121,
          40,
          97,
          41,
          32,
          124,
          124,
          32,
          40,
          122,
          46,
          99,
          111,
          110,
          115,
          116,
          114,
          117,
          99,
          116,
          111,
          114,
          91,
          97,
          93,
          32,
          61,
          32,
          121,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          91,
          93,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          91,
          93,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          79,
          58,
          32,
          40,
          98,
          44,
          32,
          97,
          44,
          32,
          99,
          44,
          32,
          100,
          44,
          32,
          101,
          44,
          32,
          102,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          103,
          32,
          61,
          32,
          67,
          98,
          40,
          97,
          44,
          32,
          99,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          101,
          32,
          61,
          32,
          85,
          40,
          100,
          44,
          32,
          101,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          83,
          40,
          91,
          93,
          44,
          32,
          91,
          98,
          93,
          44,
          32,
          40,
          104,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          104,
          32,
          61,
          32,
          104,
          91,
          48,
          93,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          107,
          32,
          61,
          32,
          96,
          99,
          111,
          110,
          115,
          116,
          114,
          117,
          99,
          116,
          111,
          114,
          32,
          36,
          123,
          104,
          46,
          110,
          97,
          109,
          101,
          125,
          96,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          111,
          105,
          100,
          32,
          48,
          32,
          61,
          61,
          61,
          32,
          104,
          46,
          66,
          98,
          46,
          77,
          98,
          32,
          38,
          38,
          32,
          40,
          104,
          46,
          66,
          98,
          46,
          77,
          98,
          32,
          61,
          32,
          91,
          93,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          118,
          111,
          105,
          100,
          32,
          48,
          32,
          33,
          61,
          61,
          32,
          104,
          46,
          66,
          98,
          46,
          77,
          98,
          91,
          97,
          32,
          45,
          32,
          49,
          93,
          41,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          110,
          101,
          119,
          32,
          75,
          40,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          96,
          67,
          97,
          110,
          110,
          111,
          116,
          32,
          114,
          101,
          103,
          105,
          115,
          116,
          101,
          114,
          32,
          109,
          117,
          108,
          116,
          105,
          112,
          108,
          101,
          32,
          99,
          111,
          110,
          115,
          116,
          114,
          117,
          99,
          116,
          111,
          114,
          115,
          32,
          119,
          105,
          116,
          104,
          32,
          105,
          100,
          101,
          110,
          116,
          105,
          99,
          97,
          108,
          32,
          110,
          117,
          109,
          98,
          101,
          114,
          32,
          111,
          102,
          32,
          112,
          97,
          114,
          97,
          109,
          101,
          116,
          101,
          114,
          115,
          32,
          40,
          36,
          123,
          97,
          32,
          45,
          32,
          49,
          125,
          41,
          32,
          102,
          111,
          114,
          32,
          99,
          108,
          97,
          115,
          115,
          32,
          39,
          36,
          123,
          104,
          46,
          110,
          97,
          109,
          101,
          125,
          39,
          33,
          32,
          79,
          118,
          101,
          114,
          108,
          111,
          97,
          100,
          32,
          114,
          101,
          115,
          111,
          108,
          117,
          116,
          105,
          111,
          110,
          32,
          105,
          115,
          32,
          99,
          117,
          114,
          114,
          101,
          110,
          116,
          108,
          121,
          32,
          111,
          110,
          108,
          121,
          32,
          112,
          101,
          114,
          102,
          111,
          114,
          109,
          101,
          100,
          32,
          117,
          115,
          105,
          110,
          103,
          32,
          116,
          104,
          101,
          32,
          112,
          97,
          114,
          97,
          109,
          101,
          116,
          101,
          114,
          32,
          99,
          111,
          117,
          110,
          116,
          44,
          32,
          110,
          111,
          116,
          32,
          97,
          99,
          116,
          117,
          97,
          108,
          32,
          116,
          121,
          112,
          101,
          32,
          105,
          110,
          102,
          111,
          33,
          96,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          104,
          46,
          66,
          98,
          46,
          77,
          98,
          91,
          97,
          32,
          45,
          32,
          49,
          93,
          32,
          61,
          32,
          40,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          121,
          98,
          40,
          96,
          67,
          97,
          110,
          110,
          111,
          116,
          32,
          99,
          111,
          110,
          115,
          116,
          114,
          117,
          99,
          116,
          32,
          36,
          123,
          104,
          46,
          110,
          97,
          109,
          101,
          125,
          32,
          100,
          117,
          101,
          32,
          116,
          111,
          32,
          117,
          110,
          98,
          111,
          117,
          110,
          100,
          32,
          116,
          121,
          112,
          101,
          115,
          96,
          44,
          32,
          103,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          83,
          40,
          91,
          93,
          44,
          32,
          103,
          44,
          32,
          40,
          108,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          108,
          46,
          115,
          112,
          108,
          105,
          99,
          101,
          40,
          49,
          44,
          32,
          48,
          44,
          32,
          110,
          117,
          108,
          108,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          104,
          46,
          66,
          98,
          46,
          77,
          98,
          91,
          97,
          32,
          45,
          32,
          49,
          93,
          32,
          61,
          32,
          65,
          98,
          40,
          107,
          44,
          32,
          108,
          44,
          32,
          110,
          117,
          108,
          108,
          44,
          32,
          101,
          44,
          32,
          102,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          91,
          93,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          91,
          93,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          109,
          58,
          32,
          40,
          98,
          44,
          32,
          97,
          44,
          32,
          99,
          44,
          32,
          100,
          44,
          32,
          101,
          44,
          32,
          102,
          44,
          32,
          103,
          44,
          32,
          104,
          44,
          32,
          107,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          108,
          32,
          61,
          32,
          67,
          98,
          40,
          99,
          44,
          32,
          100,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          97,
          32,
          61,
          32,
          77,
          40,
          97,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          97,
          32,
          61,
          32,
          68,
          98,
          40,
          97,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          32,
          61,
          32,
          85,
          40,
          101,
          44,
          32,
          102,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          83,
          40,
          91,
          93,
          44,
          32,
          91,
          98,
          93,
          44,
          32,
          40,
          109,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          117,
          110,
          99,
          116,
          105,
          111,
          110,
          32,
          117,
          40,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          121,
          98,
          40,
          96,
          67,
          97,
          110,
          110,
          111,
          116,
          32,
          99,
          97,
          108,
          108,
          32,
          36,
          123,
          119,
          125,
          32,
          100,
          117,
          101,
          32,
          116,
          111,
          32,
          117,
          110,
          98,
          111,
          117,
          110,
          100,
          32,
          116,
          121,
          112,
          101,
          115,
          96,
          44,
          32,
          108,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          109,
          32,
          61,
          32,
          109,
          91,
          48,
          93,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          119,
          32,
          61,
          32,
          96,
          36,
          123,
          109,
          46,
          110,
          97,
          109,
          101,
          125,
          46,
          36,
          123,
          97,
          125,
          96,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          97,
          46,
          115,
          116,
          97,
          114,
          116,
          115,
          87,
          105,
          116,
          104,
          40,
          34,
          64,
          64,
          34,
          41,
          32,
          38,
          38,
          32,
          40,
          97,
          32,
          61,
          32,
          83,
          121,
          109,
          98,
          111,
          108,
          91,
          97,
          46,
          115,
          117,
          98,
          115,
          116,
          114,
          105,
          110,
          103,
          40,
          50,
          41,
          93,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          104,
          32,
          38,
          38,
          32,
          109,
          46,
          66,
          98,
          46,
          88,
          98,
          46,
          112,
          117,
          115,
          104,
          40,
          97,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          121,
          32,
          61,
          32,
          109,
          46,
          66,
          98,
          46,
          75,
          98,
          44,
          32,
          122,
          32,
          61,
          32,
          121,
          91,
          97,
          93,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          111,
          105,
          100,
          32,
          48,
          32,
          61,
          61,
          61,
          32,
          122,
          32,
          124,
          124,
          32,
          118,
          111,
          105,
          100,
          32,
          48,
          32,
          61,
          61,
          61,
          32,
          122,
          46,
          68,
          98,
          32,
          38,
          38,
          32,
          122,
          46,
          99,
          108,
          97,
          115,
          115,
          78,
          97,
          109,
          101,
          32,
          33,
          61,
          61,
          32,
          109,
          46,
          110,
          97,
          109,
          101,
          32,
          38,
          38,
          32,
          122,
          46,
          76,
          98,
          32,
          61,
          61,
          61,
          32,
          99,
          32,
          45,
          32,
          50,
          32,
          63,
          32,
          40,
          117,
          46,
          76,
          98,
          32,
          61,
          32,
          99,
          32,
          45,
          32,
          50,
          44,
          32,
          117,
          46,
          99,
          108,
          97,
          115,
          115,
          78,
          97,
          109,
          101,
          32,
          61,
          32,
          109,
          46,
          110,
          97,
          109,
          101,
          44,
          32,
          121,
          91,
          97,
          93,
          32,
          61,
          32,
          117,
          41,
          32,
          58,
          32,
          40,
          107,
          98,
          40,
          121,
          44,
          32,
          97,
          44,
          32,
          119,
          41,
          44,
          32,
          121,
          91,
          97,
          93,
          46,
          68,
          98,
          91,
          99,
          32,
          45,
          32,
          50,
          93,
          32,
          61,
          32,
          117,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          83,
          40,
          91,
          93,
          44,
          32,
          108,
          44,
          32,
          40,
          71,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          71,
          32,
          61,
          32,
          65,
          98,
          40,
          119,
          44,
          32,
          71,
          44,
          32,
          109,
          44,
          32,
          102,
          44,
          32,
          103,
          44,
          32,
          107,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          111,
          105,
          100,
          32,
          48,
          32,
          61,
          61,
          61,
          32,
          121,
          91,
          97,
          93,
          46,
          68,
          98,
          32,
          63,
          32,
          40,
          71,
          46,
          76,
          98,
          32,
          61,
          32,
          99,
          32,
          45,
          32,
          50,
          44,
          32,
          121,
          91,
          97,
          93,
          32,
          61,
          32,
          71,
          41,
          32,
          58,
          32,
          121,
          91,
          97,
          93,
          46,
          68,
          98,
          91,
          99,
          32,
          45,
          32,
          50,
          93,
          32,
          61,
          32,
          71,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          91,
          93,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          91,
          93,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          79,
          97,
          58,
          32,
          40,
          98,
          41,
          32,
          61,
          62,
          32,
          82,
          40,
          98,
          44,
          32,
          70,
          98,
          41,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          85,
          58,
          32,
          40,
          98,
          44,
          32,
          97,
          44,
          32,
          99,
          44,
          32,
          100,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          117,
          110,
          99,
          116,
          105,
          111,
          110,
          32,
          101,
          40,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          97,
          32,
          61,
          32,
          77,
          40,
          97,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          101,
          46,
          118,
          97,
          108,
          117,
          101,
          115,
          32,
          61,
          32,
          123,
          125,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          82,
          40,
          98,
          44,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          110,
          97,
          109,
          101,
          58,
          32,
          97,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          114,
          117,
          99,
          116,
          111,
          114,
          58,
          32,
          101,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          114,
          111,
          109,
          87,
          105,
          114,
          101,
          84,
          121,
          112,
          101,
          58,
          32,
          102,
          117,
          110,
          99,
          116,
          105,
          111,
          110,
          40,
          102,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          116,
          104,
          105,
          115,
          46,
          99,
          111,
          110,
          115,
          116,
          114,
          117,
          99,
          116,
          111,
          114,
          46,
          118,
          97,
          108,
          117,
          101,
          115,
          91,
          102,
          93,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          111,
          87,
          105,
          114,
          101,
          84,
          121,
          112,
          101,
          58,
          32,
          40,
          102,
          44,
          32,
          103,
          41,
          32,
          61,
          62,
          32,
          103,
          46,
          118,
          97,
          108,
          117,
          101,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          72,
          98,
          58,
          32,
          56,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          97,
          100,
          86,
          97,
          108,
          117,
          101,
          70,
          114,
          111,
          109,
          80,
          111,
          105,
          110,
          116,
          101,
          114,
          58,
          32,
          71,
          98,
          40,
          97,
          44,
          32,
          99,
          44,
          32,
          100,
          41,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          71,
          98,
          58,
          32,
          110,
          117,
          108,
          108,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          108,
          98,
          40,
          97,
          44,
          32,
          101,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          58,
          32,
          40,
          98,
          44,
          32,
          97,
          44,
          32,
          99,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          100,
          32,
          61,
          32,
          87,
          97,
          40,
          98,
          44,
          32,
          34,
          101,
          110,
          117,
          109,
          34,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          97,
          32,
          61,
          32,
          77,
          40,
          97,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          98,
          32,
          61,
          32,
          100,
          46,
          99,
          111,
          110,
          115,
          116,
          114,
          117,
          99,
          116,
          111,
          114,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          100,
          32,
          61,
          32,
          79,
          98,
          106,
          101,
          99,
          116,
          46,
          99,
          114,
          101,
          97,
          116,
          101,
          40,
          100,
          46,
          99,
          111,
          110,
          115,
          116,
          114,
          117,
          99,
          116,
          111,
          114,
          46,
          112,
          114,
          111,
          116,
          111,
          116,
          121,
          112,
          101,
          44,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          108,
          117,
          101,
          58,
          32,
          123,
          32,
          118,
          97,
          108,
          117,
          101,
          58,
          32,
          99,
          32,
          125,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          114,
          117,
          99,
          116,
          111,
          114,
          58,
          32,
          123,
          32,
          118,
          97,
          108,
          117,
          101,
          58,
          32,
          76,
          97,
          40,
          96,
          36,
          123,
          100,
          46,
          110,
          97,
          109,
          101,
          125,
          95,
          36,
          123,
          97,
          125,
          96,
          44,
          32,
          102,
          117,
          110,
          99,
          116,
          105,
          111,
          110,
          40,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          41,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          98,
          46,
          118,
          97,
          108,
          117,
          101,
          115,
          91,
          99,
          93,
          32,
          61,
          32,
          100,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          98,
          91,
          97,
          93,
          32,
          61,
          32,
          100,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          112,
          97,
          58,
          32,
          40,
          98,
          44,
          32,
          97,
          44,
          32,
          99,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          97,
          32,
          61,
          32,
          77,
          40,
          97,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          82,
          40,
          98,
          44,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          110,
          97,
          109,
          101,
          58,
          32,
          97,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          114,
          111,
          109,
          87,
          105,
          114,
          101,
          84,
          121,
          112,
          101,
          58,
          32,
          40,
          100,
          41,
          32,
          61,
          62,
          32,
          100,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          111,
          87,
          105,
          114,
          101,
          84,
          121,
          112,
          101,
          58,
          32,
          40,
          100,
          44,
          32,
          101,
          41,
          32,
          61,
          62,
          32,
          101,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          72,
          98,
          58,
          32,
          56,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          97,
          100,
          86,
          97,
          108,
          117,
          101,
          70,
          114,
          111,
          109,
          80,
          111,
          105,
          110,
          116,
          101,
          114,
          58,
          32,
          72,
          98,
          40,
          97,
          44,
          32,
          99,
          41,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          71,
          98,
          58,
          32,
          110,
          117,
          108,
          108,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          81,
          58,
          32,
          40,
          98,
          44,
          32,
          97,
          44,
          32,
          99,
          44,
          32,
          100,
          44,
          32,
          101,
          44,
          32,
          102,
          44,
          32,
          103,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          104,
          32,
          61,
          32,
          67,
          98,
          40,
          97,
          44,
          32,
          99,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          98,
          32,
          61,
          32,
          77,
          40,
          98,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          98,
          32,
          61,
          32,
          68,
          98,
          40,
          98,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          101,
          32,
          61,
          32,
          85,
          40,
          100,
          44,
          32,
          101,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          108,
          98,
          40,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          98,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          117,
          110,
          99,
          116,
          105,
          111,
          110,
          40,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          121,
          98,
          40,
          96,
          67,
          97,
          110,
          110,
          111,
          116,
          32,
          99,
          97,
          108,
          108,
          32,
          36,
          123,
          98,
          125,
          32,
          100,
          117,
          101,
          32,
          116,
          111,
          32,
          117,
          110,
          98,
          111,
          117,
          110,
          100,
          32,
          116,
          121,
          112,
          101,
          115,
          96,
          44,
          32,
          104,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          97,
          32,
          45,
          32,
          49,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          83,
          40,
          91,
          93,
          44,
          32,
          104,
          44,
          32,
          40,
          107,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          119,
          98,
          40,
          98,
          44,
          32,
          65,
          98,
          40,
          98,
          44,
          32,
          91,
          107,
          91,
          48,
          93,
          44,
          32,
          110,
          117,
          108,
          108,
          93,
          46,
          99,
          111,
          110,
          99,
          97,
          116,
          40,
          107,
          46,
          115,
          108,
          105,
          99,
          101,
          40,
          49,
          41,
          41,
          44,
          32,
          110,
          117,
          108,
          108,
          44,
          32,
          101,
          44,
          32,
          102,
          44,
          32,
          103,
          41,
          44,
          32,
          97,
          32,
          45,
          32,
          49,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          91,
          93,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          65,
          58,
          32,
          40,
          98,
          44,
          32,
          97,
          44,
          32,
          99,
          44,
          32,
          100,
          44,
          32,
          101,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          97,
          32,
          61,
          32,
          77,
          40,
          97,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          45,
          49,
          32,
          61,
          61,
          61,
          32,
          101,
          32,
          38,
          38,
          32,
          40,
          101,
          32,
          61,
          32,
          52,
          50,
          57,
          52,
          57,
          54,
          55,
          50,
          57,
          53,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          101,
          32,
          61,
          32,
          40,
          104,
          41,
          32,
          61,
          62,
          32,
          104,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          48,
          32,
          61,
          61,
          61,
          32,
          100,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          102,
          32,
          61,
          32,
          51,
          50,
          32,
          45,
          32,
          56,
          32,
          42,
          32,
          99,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          101,
          32,
          61,
          32,
          40,
          104,
          41,
          32,
          61,
          62,
          32,
          104,
          32,
          60,
          60,
          32,
          102,
          32,
          62,
          62,
          62,
          32,
          102,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          103,
          32,
          61,
          32,
          97,
          46,
          105,
          110,
          99,
          108,
          117,
          100,
          101,
          115,
          40,
          34,
          117,
          110,
          115,
          105,
          103,
          110,
          101,
          100,
          34,
          41,
          32,
          63,
          32,
          102,
          117,
          110,
          99,
          116,
          105,
          111,
          110,
          40,
          104,
          44,
          32,
          107,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          107,
          32,
          62,
          62,
          62,
          32,
          48,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          32,
          58,
          32,
          102,
          117,
          110,
          99,
          116,
          105,
          111,
          110,
          40,
          104,
          44,
          32,
          107,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          107,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          82,
          40,
          98,
          44,
          32,
          123,
          32,
          110,
          97,
          109,
          101,
          58,
          32,
          97,
          44,
          32,
          102,
          114,
          111,
          109,
          87,
          105,
          114,
          101,
          84,
          121,
          112,
          101,
          58,
          32,
          101,
          44,
          32,
          116,
          111,
          87,
          105,
          114,
          101,
          84,
          121,
          112,
          101,
          58,
          32,
          103,
          44,
          32,
          72,
          98,
          58,
          32,
          56,
          44,
          32,
          114,
          101,
          97,
          100,
          86,
          97,
          108,
          117,
          101,
          70,
          114,
          111,
          109,
          80,
          111,
          105,
          110,
          116,
          101,
          114,
          58,
          32,
          102,
          98,
          40,
          97,
          44,
          32,
          99,
          44,
          32,
          48,
          32,
          33,
          61,
          61,
          32,
          100,
          41,
          44,
          32,
          71,
          98,
          58,
          32,
          110,
          117,
          108,
          108,
          32,
          125,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          58,
          32,
          40,
          98,
          44,
          32,
          97,
          44,
          32,
          99,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          117,
          110,
          99,
          116,
          105,
          111,
          110,
          32,
          100,
          40,
          102,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          110,
          101,
          119,
          32,
          101,
          40,
          114,
          46,
          98,
          117,
          102,
          102,
          101,
          114,
          44,
          32,
          66,
          91,
          102,
          32,
          43,
          32,
          52,
          32,
          62,
          62,
          32,
          50,
          93,
          44,
          32,
          66,
          91,
          102,
          32,
          62,
          62,
          32,
          50,
          93,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          101,
          32,
          61,
          32,
          91,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          73,
          110,
          116,
          56,
          65,
          114,
          114,
          97,
          121,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          85,
          105,
          110,
          116,
          56,
          65,
          114,
          114,
          97,
          121,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          73,
          110,
          116,
          49,
          54,
          65,
          114,
          114,
          97,
          121,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          85,
          105,
          110,
          116,
          49,
          54,
          65,
          114,
          114,
          97,
          121,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          73,
          110,
          116,
          51,
          50,
          65,
          114,
          114,
          97,
          121,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          85,
          105,
          110,
          116,
          51,
          50,
          65,
          114,
          114,
          97,
          121,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          70,
          108,
          111,
          97,
          116,
          51,
          50,
          65,
          114,
          114,
          97,
          121,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          70,
          108,
          111,
          97,
          116,
          54,
          52,
          65,
          114,
          114,
          97,
          121,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          66,
          105,
          103,
          73,
          110,
          116,
          54,
          52,
          65,
          114,
          114,
          97,
          121,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          66,
          105,
          103,
          85,
          105,
          110,
          116,
          54,
          52,
          65,
          114,
          114,
          97,
          121,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          93,
          91,
          97,
          93,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          32,
          61,
          32,
          77,
          40,
          99,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          82,
          40,
          98,
          44,
          32,
          123,
          32,
          110,
          97,
          109,
          101,
          58,
          32,
          99,
          44,
          32,
          102,
          114,
          111,
          109,
          87,
          105,
          114,
          101,
          84,
          121,
          112,
          101,
          58,
          32,
          100,
          44,
          32,
          72,
          98,
          58,
          32,
          56,
          44,
          32,
          114,
          101,
          97,
          100,
          86,
          97,
          108,
          117,
          101,
          70,
          114,
          111,
          109,
          80,
          111,
          105,
          110,
          116,
          101,
          114,
          58,
          32,
          100,
          32,
          125,
          44,
          32,
          123,
          32,
          105,
          99,
          58,
          32,
          116,
          114,
          117,
          101,
          32,
          125,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          83,
          58,
          32,
          40,
          98,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          82,
          40,
          98,
          44,
          32,
          73,
          98,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          90,
          58,
          32,
          40,
          98,
          44,
          32,
          97,
          44,
          32,
          99,
          44,
          32,
          100,
          44,
          32,
          101,
          44,
          32,
          102,
          44,
          32,
          103,
          44,
          32,
          104,
          44,
          32,
          107,
          44,
          32,
          108,
          44,
          32,
          109,
          44,
          32,
          117,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          32,
          61,
          32,
          77,
          40,
          99,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          32,
          61,
          32,
          85,
          40,
          101,
          44,
          32,
          102,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          104,
          32,
          61,
          32,
          85,
          40,
          103,
          44,
          32,
          104,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          108,
          32,
          61,
          32,
          85,
          40,
          107,
          44,
          32,
          108,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          117,
          32,
          61,
          32,
          85,
          40,
          109,
          44,
          32,
          117,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          83,
          40,
          91,
          98,
          93,
          44,
          32,
          91,
          97,
          93,
          44,
          32,
          40,
          119,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          119,
          32,
          61,
          32,
          119,
          91,
          48,
          93,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          91,
          110,
          101,
          119,
          32,
          118,
          98,
          40,
          99,
          44,
          32,
          119,
          46,
          66,
          98,
          44,
          32,
          102,
          97,
          108,
          115,
          101,
          44,
          32,
          102,
          97,
          108,
          115,
          101,
          44,
          32,
          116,
          114,
          117,
          101,
          44,
          32,
          119,
          44,
          32,
          100,
          44,
          32,
          102,
          44,
          32,
          104,
          44,
          32,
          108,
          44,
          32,
          117,
          41,
          93,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          80,
          97,
          58,
          32,
          40,
          98,
          44,
          32,
          97,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          97,
          32,
          61,
          32,
          77,
          40,
          97,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          82,
          40,
          98,
          44,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          110,
          97,
          109,
          101,
          58,
          32,
          97,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          114,
          111,
          109,
          87,
          105,
          114,
          101,
          84,
          121,
          112,
          101,
          58,
          32,
          102,
          117,
          110,
          99,
          116,
          105,
          111,
          110,
          40,
          99,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          111,
          114,
          32,
          40,
          118,
          97,
          114,
          32,
          100,
          32,
          61,
          32,
          66,
          91,
          99,
          32,
          62,
          62,
          32,
          50,
          93,
          44,
          32,
          101,
          32,
          61,
          32,
          99,
          32,
          43,
          32,
          52,
          44,
          32,
          102,
          44,
          32,
          103,
          32,
          61,
          32,
          101,
          44,
          32,
          104,
          32,
          61,
          32,
          48,
          59,
          32,
          104,
          32,
          60,
          61,
          32,
          100,
          59,
          32,
          43,
          43,
          104,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          107,
          32,
          61,
          32,
          101,
          32,
          43,
          32,
          104,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          104,
          32,
          61,
          61,
          32,
          100,
          32,
          124,
          124,
          32,
          48,
          32,
          61,
          61,
          32,
          116,
          91,
          107,
          93,
          41,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          103,
          32,
          61,
          32,
          103,
          32,
          63,
          32,
          70,
          40,
          116,
          44,
          32,
          103,
          44,
          32,
          107,
          32,
          45,
          32,
          103,
          41,
          32,
          58,
          32,
          34,
          34,
          44,
          32,
          118,
          111,
          105,
          100,
          32,
          48,
          32,
          61,
          61,
          61,
          32,
          102,
          32,
          63,
          32,
          102,
          32,
          61,
          32,
          103,
          32,
          58,
          32,
          40,
          102,
          32,
          43,
          61,
          32,
          83,
          116,
          114,
          105,
          110,
          103,
          46,
          102,
          114,
          111,
          109,
          67,
          104,
          97,
          114,
          67,
          111,
          100,
          101,
          40,
          48,
          41,
          44,
          32,
          102,
          32,
          43,
          61,
          32,
          103,
          41,
          44,
          32,
          103,
          32,
          61,
          32,
          107,
          32,
          43,
          32,
          49,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          79,
          40,
          99,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          102,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          111,
          87,
          105,
          114,
          101,
          84,
          121,
          112,
          101,
          58,
          32,
          102,
          117,
          110,
          99,
          116,
          105,
          111,
          110,
          40,
          99,
          44,
          32,
          100,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          100,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          111,
          102,
          32,
          65,
          114,
          114,
          97,
          121,
          66,
          117,
          102,
          102,
          101,
          114,
          32,
          38,
          38,
          32,
          40,
          100,
          32,
          61,
          32,
          110,
          101,
          119,
          32,
          85,
          105,
          110,
          116,
          56,
          65,
          114,
          114,
          97,
          121,
          40,
          100,
          41,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          101,
          32,
          61,
          32,
          34,
          115,
          116,
          114,
          105,
          110,
          103,
          34,
          32,
          61,
          61,
          32,
          116,
          121,
          112,
          101,
          111,
          102,
          32,
          100,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          33,
          40,
          101,
          32,
          124,
          124,
          32,
          65,
          114,
          114,
          97,
          121,
          66,
          117,
          102,
          102,
          101,
          114,
          46,
          105,
          115,
          86,
          105,
          101,
          119,
          40,
          100,
          41,
          32,
          38,
          38,
          32,
          49,
          32,
          61,
          61,
          32,
          100,
          46,
          66,
          89,
          84,
          69,
          83,
          95,
          80,
          69,
          82,
          95,
          69,
          76,
          69,
          77,
          69,
          78,
          84,
          41,
          41,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          110,
          101,
          119,
          32,
          75,
          40,
          34,
          67,
          97,
          110,
          110,
          111,
          116,
          32,
          112,
          97,
          115,
          115,
          32,
          110,
          111,
          110,
          45,
          115,
          116,
          114,
          105,
          110,
          103,
          32,
          116,
          111,
          32,
          115,
          116,
          100,
          58,
          58,
          115,
          116,
          114,
          105,
          110,
          103,
          34,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          102,
          32,
          61,
          32,
          101,
          32,
          63,
          32,
          74,
          98,
          40,
          100,
          41,
          32,
          58,
          32,
          100,
          46,
          108,
          101,
          110,
          103,
          116,
          104,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          103,
          32,
          61,
          32,
          108,
          99,
          40,
          52,
          32,
          43,
          32,
          102,
          32,
          43,
          32,
          49,
          41,
          44,
          32,
          104,
          32,
          61,
          32,
          103,
          32,
          43,
          32,
          52,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          66,
          91,
          103,
          32,
          62,
          62,
          32,
          50,
          93,
          32,
          61,
          32,
          102,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          101,
          32,
          63,
          32,
          86,
          40,
          100,
          44,
          32,
          104,
          44,
          32,
          102,
          32,
          43,
          32,
          49,
          41,
          32,
          58,
          32,
          116,
          46,
          115,
          101,
          116,
          40,
          100,
          44,
          32,
          104,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          110,
          117,
          108,
          108,
          32,
          33,
          61,
          61,
          32,
          99,
          32,
          38,
          38,
          32,
          99,
          46,
          112,
          117,
          115,
          104,
          40,
          79,
          44,
          32,
          103,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          103,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          72,
          98,
          58,
          32,
          56,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          97,
          100,
          86,
          97,
          108,
          117,
          101,
          70,
          114,
          111,
          109,
          80,
          111,
          105,
          110,
          116,
          101,
          114,
          58,
          32,
          97,
          98,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          71,
          98,
          40,
          99,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          79,
          40,
          99,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          89,
          58,
          32,
          40,
          98,
          44,
          32,
          97,
          44,
          32,
          99,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          32,
          61,
          32,
          77,
          40,
          99,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          50,
          32,
          61,
          61,
          61,
          32,
          97,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          100,
          32,
          61,
          32,
          76,
          98,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          101,
          32,
          61,
          32,
          77,
          98,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          102,
          32,
          61,
          32,
          78,
          98,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          103,
          32,
          61,
          32,
          40,
          104,
          41,
          32,
          61,
          62,
          32,
          120,
          91,
          104,
          32,
          62,
          62,
          32,
          49,
          93,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          32,
          101,
          108,
          115,
          101,
          32,
          52,
          32,
          61,
          61,
          61,
          32,
          97,
          32,
          38,
          38,
          32,
          40,
          100,
          32,
          61,
          32,
          79,
          98,
          44,
          32,
          101,
          32,
          61,
          32,
          80,
          98,
          44,
          32,
          102,
          32,
          61,
          32,
          81,
          98,
          44,
          32,
          103,
          32,
          61,
          32,
          40,
          104,
          41,
          32,
          61,
          62,
          32,
          66,
          91,
          104,
          32,
          62,
          62,
          32,
          50,
          93,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          82,
          40,
          98,
          44,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          110,
          97,
          109,
          101,
          58,
          32,
          99,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          114,
          111,
          109,
          87,
          105,
          114,
          101,
          84,
          121,
          112,
          101,
          58,
          32,
          40,
          104,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          111,
          114,
          32,
          40,
          118,
          97,
          114,
          32,
          107,
          32,
          61,
          32,
          66,
          91,
          104,
          32,
          62,
          62,
          32,
          50,
          93,
          44,
          32,
          108,
          44,
          32,
          109,
          32,
          61,
          32,
          104,
          32,
          43,
          32,
          52,
          44,
          32,
          117,
          32,
          61,
          32,
          48,
          59,
          32,
          117,
          32,
          60,
          61,
          32,
          107,
          59,
          32,
          43,
          43,
          117,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          119,
          32,
          61,
          32,
          104,
          32,
          43,
          32,
          52,
          32,
          43,
          32,
          117,
          32,
          42,
          32,
          97,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          117,
          32,
          61,
          61,
          32,
          107,
          32,
          124,
          124,
          32,
          48,
          32,
          61,
          61,
          32,
          103,
          40,
          119,
          41,
          41,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          109,
          32,
          61,
          32,
          100,
          40,
          109,
          44,
          32,
          119,
          32,
          45,
          32,
          109,
          41,
          44,
          32,
          118,
          111,
          105,
          100,
          32,
          48,
          32,
          61,
          61,
          61,
          32,
          108,
          32,
          63,
          32,
          108,
          32,
          61,
          32,
          109,
          32,
          58,
          32,
          40,
          108,
          32,
          43,
          61,
          32,
          83,
          116,
          114,
          105,
          110,
          103,
          46,
          102,
          114,
          111,
          109,
          67,
          104,
          97,
          114,
          67,
          111,
          100,
          101,
          40,
          48,
          41,
          44,
          32,
          108,
          32,
          43,
          61,
          32,
          109,
          41,
          44,
          32,
          109,
          32,
          61,
          32,
          119,
          32,
          43,
          32,
          97,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          79,
          40,
          104,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          108,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          111,
          87,
          105,
          114,
          101,
          84,
          121,
          112,
          101,
          58,
          32,
          40,
          104,
          44,
          32,
          107,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          34,
          115,
          116,
          114,
          105,
          110,
          103,
          34,
          32,
          33,
          61,
          32,
          116,
          121,
          112,
          101,
          111,
          102,
          32,
          107,
          41,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          110,
          101,
          119,
          32,
          75,
          40,
          96,
          67,
          97,
          110,
          110,
          111,
          116,
          32,
          112,
          97,
          115,
          115,
          32,
          110,
          111,
          110,
          45,
          115,
          116,
          114,
          105,
          110,
          103,
          32,
          116,
          111,
          32,
          67,
          43,
          43,
          32,
          115,
          116,
          114,
          105,
          110,
          103,
          32,
          116,
          121,
          112,
          101,
          32,
          36,
          123,
          99,
          125,
          96,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          108,
          32,
          61,
          32,
          102,
          40,
          107,
          41,
          44,
          32,
          109,
          32,
          61,
          32,
          108,
          99,
          40,
          52,
          32,
          43,
          32,
          108,
          32,
          43,
          32,
          97,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          66,
          91,
          109,
          32,
          62,
          62,
          32,
          50,
          93,
          32,
          61,
          32,
          108,
          32,
          47,
          32,
          97,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          101,
          40,
          107,
          44,
          32,
          109,
          32,
          43,
          32,
          52,
          44,
          32,
          108,
          32,
          43,
          32,
          97,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          110,
          117,
          108,
          108,
          32,
          33,
          61,
          61,
          32,
          104,
          32,
          38,
          38,
          32,
          104,
          46,
          112,
          117,
          115,
          104,
          40,
          79,
          44,
          32,
          109,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          109,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          72,
          98,
          58,
          32,
          56,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          97,
          100,
          86,
          97,
          108,
          117,
          101,
          70,
          114,
          111,
          109,
          80,
          111,
          105,
          110,
          116,
          101,
          114,
          58,
          32,
          97,
          98,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          71,
          98,
          40,
          104,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          79,
          40,
          104,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          75,
          58,
          32,
          40,
          98,
          44,
          32,
          97,
          44,
          32,
          99,
          44,
          32,
          100,
          44,
          32,
          101,
          44,
          32,
          102,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          90,
          97,
          91,
          98,
          93,
          32,
          61,
          32,
          123,
          32,
          110,
          97,
          109,
          101,
          58,
          32,
          77,
          40,
          97,
          41,
          44,
          32,
          85,
          98,
          58,
          32,
          85,
          40,
          99,
          44,
          32,
          100,
          41,
          44,
          32,
          74,
          98,
          58,
          32,
          85,
          40,
          101,
          44,
          32,
          102,
          41,
          44,
          32,
          87,
          98,
          58,
          32,
          91,
          93,
          32,
          125,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          120,
          58,
          32,
          40,
          98,
          44,
          32,
          97,
          44,
          32,
          99,
          44,
          32,
          100,
          44,
          32,
          101,
          44,
          32,
          102,
          44,
          32,
          103,
          44,
          32,
          104,
          44,
          32,
          107,
          44,
          32,
          108,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          90,
          97,
          91,
          98,
          93,
          46,
          87,
          98,
          46,
          112,
          117,
          115,
          104,
          40,
          123,
          32,
          98,
          99,
          58,
          32,
          77,
          40,
          97,
          41,
          44,
          32,
          104,
          99,
          58,
          32,
          99,
          44,
          32,
          101,
          99,
          58,
          32,
          85,
          40,
          100,
          44,
          32,
          101,
          41,
          44,
          32,
          102,
          99,
          58,
          32,
          102,
          44,
          32,
          110,
          99,
          58,
          32,
          103,
          44,
          32,
          109,
          99,
          58,
          32,
          85,
          40,
          104,
          44,
          32,
          107,
          41,
          44,
          32,
          111,
          99,
          58,
          32,
          108,
          32,
          125,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          82,
          97,
          58,
          32,
          40,
          98,
          44,
          32,
          97,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          97,
          32,
          61,
          32,
          77,
          40,
          97,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          82,
          40,
          98,
          44,
          32,
          123,
          32,
          106,
          99,
          58,
          32,
          116,
          114,
          117,
          101,
          44,
          32,
          110,
          97,
          109,
          101,
          58,
          32,
          97,
          44,
          32,
          72,
          98,
          58,
          32,
          48,
          44,
          32,
          102,
          114,
          111,
          109,
          87,
          105,
          114,
          101,
          84,
          121,
          112,
          101,
          58,
          32,
          40,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          44,
          32,
          116,
          111,
          87,
          105,
          114,
          101,
          84,
          121,
          112,
          101,
          58,
          32,
          40,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          32,
          125,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          121,
          97,
          58,
          32,
          102,
          117,
          110,
          99,
          116,
          105,
          111,
          110,
          40,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          68,
          97,
          116,
          101,
          46,
          110,
          111,
          119,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          95,
          97,
          58,
          32,
          40,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          68,
          97,
          32,
          61,
          32,
          102,
          97,
          108,
          115,
          101,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          82,
          98,
          32,
          61,
          32,
          48,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          86,
          97,
          58,
          32,
          40,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          73,
          110,
          102,
          105,
          110,
          105,
          116,
          121,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          97,
          58,
          32,
          40,
          98,
          44,
          32,
          97,
          44,
          32,
          99,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          98,
          32,
          61,
          32,
          76,
          40,
          98,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          97,
          32,
          61,
          32,
          87,
          97,
          40,
          97,
          44,
          32,
          34,
          101,
          109,
          118,
          97,
          108,
          58,
          58,
          97,
          115,
          34,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          83,
          98,
          40,
          97,
          44,
          32,
          99,
          44,
          32,
          98,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          84,
          97,
          58,
          32,
          40,
          98,
          44,
          32,
          97,
          44,
          32,
          99,
          44,
          32,
          100,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          98,
          32,
          61,
          32,
          84,
          98,
          91,
          98,
          93,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          97,
          32,
          61,
          32,
          76,
          40,
          97,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          98,
          40,
          110,
          117,
          108,
          108,
          44,
          32,
          97,
          44,
          32,
          99,
          44,
          32,
          100,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          69,
          58,
          32,
          40,
          98,
          44,
          32,
          97,
          44,
          32,
          99,
          44,
          32,
          100,
          44,
          32,
          101,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          98,
          32,
          61,
          32,
          84,
          98,
          91,
          98,
          93,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          97,
          32,
          61,
          32,
          76,
          40,
          97,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          102,
          32,
          61,
          32,
          85,
          98,
          91,
          99,
          93,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          32,
          61,
          32,
          118,
          111,
          105,
          100,
          32,
          48,
          32,
          61,
          61,
          61,
          32,
          102,
          32,
          63,
          32,
          77,
          40,
          99,
          41,
          32,
          58,
          32,
          102,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          98,
          40,
          97,
          44,
          32,
          97,
          91,
          99,
          93,
          44,
          32,
          100,
          44,
          32,
          101,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          75,
          97,
          58,
          32,
          69,
          98,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          66,
          58,
          32,
          40,
          98,
          44,
          32,
          97,
          44,
          32,
          99,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          97,
          32,
          61,
          32,
          87,
          98,
          40,
          98,
          44,
          32,
          97,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          100,
          32,
          61,
          32,
          97,
          46,
          115,
          104,
          105,
          102,
          116,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          98,
          45,
          45,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          101,
          32,
          61,
          32,
          34,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          102,
          117,
          110,
          99,
          116,
          105,
          111,
          110,
          32,
          40,
          111,
          98,
          106,
          44,
          32,
          102,
          117,
          110,
          99,
          44,
          32,
          100,
          101,
          115,
          116,
          114,
          117,
          99,
          116,
          111,
          114,
          115,
          82,
          101,
          102,
          44,
          32,
          97,
          114,
          103,
          115,
          41,
          32,
          123,
          92,
          110,
          34,
          44,
          32,
          102,
          32,
          61,
          32,
          48,
          44,
          32,
          103,
          32,
          61,
          32,
          91,
          93,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          48,
          32,
          61,
          61,
          61,
          32,
          99,
          32,
          38,
          38,
          32,
          103,
          46,
          112,
          117,
          115,
          104,
          40,
          34,
          111,
          98,
          106,
          34,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          111,
          114,
          32,
          40,
          118,
          97,
          114,
          32,
          104,
          32,
          61,
          32,
          91,
          34,
          114,
          101,
          116,
          84,
          121,
          112,
          101,
          34,
          93,
          44,
          32,
          107,
          32,
          61,
          32,
          91,
          100,
          93,
          44,
          32,
          108,
          32,
          61,
          32,
          48,
          59,
          32,
          108,
          32,
          60,
          32,
          98,
          59,
          32,
          43,
          43,
          108,
          41,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          103,
          46,
          112,
          117,
          115,
          104,
          40,
          96,
          97,
          114,
          103,
          36,
          123,
          108,
          125,
          96,
          41,
          44,
          32,
          104,
          46,
          112,
          117,
          115,
          104,
          40,
          96,
          97,
          114,
          103,
          84,
          121,
          112,
          101,
          36,
          123,
          108,
          125,
          96,
          41,
          44,
          32,
          107,
          46,
          112,
          117,
          115,
          104,
          40,
          97,
          91,
          108,
          93,
          41,
          44,
          32,
          101,
          32,
          43,
          61,
          32,
          96,
          32,
          32,
          118,
          97,
          114,
          32,
          97,
          114,
          103,
          36,
          123,
          108,
          125,
          32,
          61,
          32,
          97,
          114,
          103,
          84,
          121,
          112,
          101,
          36,
          123,
          108,
          125,
          46,
          114,
          101,
          97,
          100,
          86,
          97,
          108,
          117,
          101,
          70,
          114,
          111,
          109,
          80,
          111,
          105,
          110,
          116,
          101,
          114,
          40,
          97,
          114,
          103,
          115,
          36,
          123,
          102,
          32,
          63,
          32,
          34,
          43,
          34,
          32,
          43,
          32,
          102,
          32,
          58,
          32,
          34,
          34,
          125,
          41,
          59,
          10,
          96,
          44,
          32,
          102,
          32,
          43,
          61,
          32,
          97,
          91,
          108,
          93,
          46,
          72,
          98,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          101,
          32,
          43,
          61,
          32,
          96,
          32,
          32,
          118,
          97,
          114,
          32,
          114,
          118,
          32,
          61,
          32,
          36,
          123,
          49,
          32,
          61,
          61,
          61,
          32,
          99,
          32,
          63,
          32,
          34,
          110,
          101,
          119,
          32,
          102,
          117,
          110,
          99,
          34,
          32,
          58,
          32,
          34,
          102,
          117,
          110,
          99,
          46,
          99,
          97,
          108,
          108,
          34,
          125,
          40,
          36,
          123,
          103,
          46,
          106,
          111,
          105,
          110,
          40,
          34,
          44,
          32,
          34,
          41,
          125,
          41,
          59,
          10,
          96,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          100,
          46,
          106,
          99,
          32,
          124,
          124,
          32,
          40,
          104,
          46,
          112,
          117,
          115,
          104,
          40,
          34,
          101,
          109,
          118,
          97,
          108,
          95,
          114,
          101,
          116,
          117,
          114,
          110,
          86,
          97,
          108,
          117,
          101,
          34,
          41,
          44,
          32,
          107,
          46,
          112,
          117,
          115,
          104,
          40,
          83,
          98,
          41,
          44,
          32,
          101,
          32,
          43,
          61,
          32,
          34,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          101,
          109,
          118,
          97,
          108,
          95,
          114,
          101,
          116,
          117,
          114,
          110,
          86,
          97,
          108,
          117,
          101,
          40,
          114,
          101,
          116,
          84,
          121,
          112,
          101,
          44,
          32,
          100,
          101,
          115,
          116,
          114,
          117,
          99,
          116,
          111,
          114,
          115,
          82,
          101,
          102,
          44,
          32,
          114,
          118,
          41,
          59,
          92,
          110,
          34,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          98,
          32,
          61,
          32,
          110,
          101,
          119,
          32,
          70,
          117,
          110,
          99,
          116,
          105,
          111,
          110,
          40,
          46,
          46,
          46,
          104,
          44,
          32,
          101,
          32,
          43,
          32,
          34,
          125,
          59,
          92,
          110,
          34,
          41,
          40,
          46,
          46,
          46,
          107,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          32,
          61,
          32,
          96,
          109,
          101,
          116,
          104,
          111,
          100,
          67,
          97,
          108,
          108,
          101,
          114,
          60,
          40,
          36,
          123,
          97,
          46,
          109,
          97,
          112,
          40,
          40,
          109,
          41,
          32,
          61,
          62,
          32,
          109,
          46,
          110,
          97,
          109,
          101,
          41,
          46,
          106,
          111,
          105,
          110,
          40,
          34,
          44,
          32,
          34,
          41,
          125,
          41,
          32,
          61,
          62,
          32,
          36,
          123,
          100,
          46,
          110,
          97,
          109,
          101,
          125,
          62,
          96,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          86,
          98,
          40,
          76,
          97,
          40,
          99,
          44,
          32,
          98,
          41,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          85,
          97,
          58,
          32,
          40,
          98,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          57,
          32,
          60,
          32,
          98,
          32,
          38,
          38,
          32,
          40,
          73,
          91,
          98,
          32,
          43,
          32,
          49,
          93,
          32,
          43,
          61,
          32,
          49,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          83,
          97,
          58,
          32,
          40,
          98,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          97,
          32,
          61,
          32,
          76,
          40,
          98,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          36,
          97,
          40,
          97,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          69,
          98,
          40,
          98,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          74,
          58,
          32,
          40,
          98,
          44,
          32,
          97,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          98,
          32,
          61,
          32,
          87,
          97,
          40,
          98,
          44,
          32,
          34,
          95,
          101,
          109,
          118,
          97,
          108,
          95,
          116,
          97,
          107,
          101,
          95,
          118,
          97,
          108,
          117,
          101,
          34,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          98,
          32,
          61,
          32,
          98,
          46,
          114,
          101,
          97,
          100,
          86,
          97,
          108,
          117,
          101,
          70,
          114,
          111,
          109,
          80,
          111,
          105,
          110,
          116,
          101,
          114,
          40,
          97,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          79,
          97,
          40,
          98,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          88,
          97,
          58,
          32,
          40,
          98,
          44,
          32,
          97,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          88,
          98,
          91,
          98,
          93,
          32,
          38,
          38,
          32,
          40,
          99,
          108,
          101,
          97,
          114,
          84,
          105,
          109,
          101,
          111,
          117,
          116,
          40,
          88,
          98,
          91,
          98,
          93,
          46,
          105,
          100,
          41,
          44,
          32,
          100,
          101,
          108,
          101,
          116,
          101,
          32,
          88,
          98,
          91,
          98,
          93,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          33,
          97,
          41,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          48,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          99,
          32,
          61,
          32,
          115,
          101,
          116,
          84,
          105,
          109,
          101,
          111,
          117,
          116,
          40,
          40,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          100,
          101,
          108,
          101,
          116,
          101,
          32,
          88,
          98,
          91,
          98,
          93,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          36,
          98,
          40,
          40,
          41,
          32,
          61,
          62,
          32,
          109,
          99,
          40,
          98,
          44,
          32,
          112,
          101,
          114,
          102,
          111,
          114,
          109,
          97,
          110,
          99,
          101,
          46,
          110,
          111,
          119,
          40,
          41,
          41,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          44,
          32,
          97,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          88,
          98,
          91,
          98,
          93,
          32,
          61,
          32,
          123,
          32,
          105,
          100,
          58,
          32,
          99,
          44,
          32,
          113,
          99,
          58,
          32,
          97,
          32,
          125,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          48,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          89,
          97,
          58,
          32,
          40,
          98,
          44,
          32,
          97,
          44,
          32,
          99,
          44,
          32,
          100,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          101,
          32,
          61,
          32,
          40,
          47,
          42,
          32,
          64,
          95,
          95,
          80,
          85,
          82,
          69,
          95,
          95,
          32,
          42,
          47,
          32,
          110,
          101,
          119,
          32,
          68,
          97,
          116,
          101,
          40,
          41,
          41,
          46,
          103,
          101,
          116,
          70,
          117,
          108,
          108,
          89,
          101,
          97,
          114,
          40,
          41,
          44,
          32,
          102,
          32,
          61,
          32,
          110,
          101,
          119,
          32,
          68,
          97,
          116,
          101,
          40,
          101,
          44,
          32,
          48,
          44,
          32,
          49,
          41,
          46,
          103,
          101,
          116,
          84,
          105,
          109,
          101,
          122,
          111,
          110,
          101,
          79,
          102,
          102,
          115,
          101,
          116,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          101,
          32,
          61,
          32,
          110,
          101,
          119,
          32,
          68,
          97,
          116,
          101,
          40,
          101,
          44,
          32,
          54,
          44,
          32,
          49,
          41,
          46,
          103,
          101,
          116,
          84,
          105,
          109,
          101,
          122,
          111,
          110,
          101,
          79,
          102,
          102,
          115,
          101,
          116,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          66,
          91,
          98,
          32,
          62,
          62,
          32,
          50,
          93,
          32,
          61,
          32,
          54,
          48,
          32,
          42,
          32,
          77,
          97,
          116,
          104,
          46,
          109,
          97,
          120,
          40,
          102,
          44,
          32,
          101,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          65,
          91,
          97,
          32,
          62,
          62,
          32,
          50,
          93,
          32,
          61,
          32,
          78,
          117,
          109,
          98,
          101,
          114,
          40,
          102,
          32,
          33,
          61,
          32,
          101,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          97,
          32,
          61,
          32,
          40,
          103,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          104,
          32,
          61,
          32,
          77,
          97,
          116,
          104,
          46,
          97,
          98,
          115,
          40,
          103,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          96,
          85,
          84,
          67,
          36,
          123,
          48,
          32,
          60,
          61,
          32,
          103,
          32,
          63,
          32,
          34,
          45,
          34,
          32,
          58,
          32,
          34,
          43,
          34,
          125,
          36,
          123,
          83,
          116,
          114,
          105,
          110,
          103,
          40,
          77,
          97,
          116,
          104,
          46,
          102,
          108,
          111,
          111,
          114,
          40,
          104,
          32,
          47,
          32,
          54,
          48,
          41,
          41,
          46,
          112,
          97,
          100,
          83,
          116,
          97,
          114,
          116,
          40,
          50,
          44,
          32,
          34,
          48,
          34,
          41,
          125,
          36,
          123,
          83,
          116,
          114,
          105,
          110,
          103,
          40,
          104,
          32,
          37,
          32,
          54,
          48,
          41,
          46,
          112,
          97,
          100,
          83,
          116,
          97,
          114,
          116,
          40,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          50,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          34,
          48,
          34,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          41,
          125,
          96,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          98,
          32,
          61,
          32,
          97,
          40,
          102,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          97,
          32,
          61,
          32,
          97,
          40,
          101,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          101,
          32,
          60,
          32,
          102,
          32,
          63,
          32,
          40,
          86,
          40,
          98,
          44,
          32,
          99,
          44,
          32,
          49,
          55,
          41,
          44,
          32,
          86,
          40,
          97,
          44,
          32,
          100,
          44,
          32,
          49,
          55,
          41,
          41,
          32,
          58,
          32,
          40,
          86,
          40,
          98,
          44,
          32,
          100,
          44,
          32,
          49,
          55,
          41,
          44,
          32,
          86,
          40,
          97,
          44,
          32,
          99,
          44,
          32,
          49,
          55,
          41,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          90,
          97,
          58,
          32,
          40,
          98,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          97,
          32,
          61,
          32,
          116,
          46,
          108,
          101,
          110,
          103,
          116,
          104,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          98,
          32,
          62,
          62,
          62,
          61,
          32,
          48,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          50,
          49,
          52,
          55,
          52,
          56,
          51,
          54,
          52,
          56,
          32,
          60,
          32,
          98,
          41,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          102,
          97,
          108,
          115,
          101,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          111,
          114,
          32,
          40,
          118,
          97,
          114,
          32,
          99,
          32,
          61,
          32,
          49,
          59,
          32,
          52,
          32,
          62,
          61,
          32,
          99,
          59,
          32,
          99,
          32,
          42,
          61,
          32,
          50,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          100,
          32,
          61,
          32,
          97,
          32,
          42,
          32,
          40,
          49,
          32,
          43,
          32,
          48,
          46,
          50,
          32,
          47,
          32,
          99,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          100,
          32,
          61,
          32,
          77,
          97,
          116,
          104,
          46,
          109,
          105,
          110,
          40,
          100,
          44,
          32,
          98,
          32,
          43,
          32,
          49,
          48,
          48,
          54,
          54,
          51,
          50,
          57,
          54,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          97,
          58,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          100,
          32,
          61,
          32,
          40,
          77,
          97,
          116,
          104,
          46,
          109,
          105,
          110,
          40,
          50,
          49,
          52,
          55,
          52,
          56,
          51,
          54,
          52,
          56,
          44,
          32,
          54,
          53,
          53,
          51,
          54,
          32,
          42,
          32,
          77,
          97,
          116,
          104,
          46,
          99,
          101,
          105,
          108,
          40,
          77,
          97,
          116,
          104,
          46,
          109,
          97,
          120,
          40,
          98,
          44,
          32,
          100,
          41,
          32,
          47,
          32,
          54,
          53,
          53,
          51,
          54,
          41,
          41,
          32,
          45,
          32,
          108,
          97,
          46,
          98,
          117,
          102,
          102,
          101,
          114,
          46,
          98,
          121,
          116,
          101,
          76,
          101,
          110,
          103,
          116,
          104,
          32,
          43,
          32,
          54,
          53,
          53,
          51,
          53,
          41,
          32,
          47,
          32,
          54,
          53,
          53,
          51,
          54,
          32,
          124,
          32,
          48,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          114,
          121,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          108,
          97,
          46,
          103,
          114,
          111,
          119,
          40,
          100,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          115,
          97,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          101,
          32,
          61,
          32,
          49,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          98,
          114,
          101,
          97,
          107,
          32,
          97,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          32,
          99,
          97,
          116,
          99,
          104,
          32,
          40,
          102,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          101,
          32,
          61,
          32,
          118,
          111,
          105,
          100,
          32,
          48,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          101,
          41,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          116,
          114,
          117,
          101,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          102,
          97,
          108,
          115,
          101,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          98,
          58,
          32,
          40,
          98,
          44,
          32,
          97,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          99,
          32,
          61,
          32,
          48,
          44,
          32,
          100,
          32,
          61,
          32,
          48,
          44,
          32,
          101,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          111,
          114,
          32,
          40,
          101,
          32,
          111,
          102,
          32,
          99,
          99,
          40,
          41,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          102,
          32,
          61,
          32,
          97,
          32,
          43,
          32,
          99,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          66,
          91,
          98,
          32,
          43,
          32,
          100,
          32,
          62,
          62,
          32,
          50,
          93,
          32,
          61,
          32,
          102,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          32,
          43,
          61,
          32,
          86,
          40,
          101,
          44,
          32,
          102,
          44,
          32,
          73,
          110,
          102,
          105,
          110,
          105,
          116,
          121,
          41,
          32,
          43,
          32,
          49,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          100,
          32,
          43,
          61,
          32,
          52,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          48,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          106,
          98,
          58,
          32,
          40,
          98,
          44,
          32,
          97,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          99,
          32,
          61,
          32,
          99,
          99,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          66,
          91,
          98,
          32,
          62,
          62,
          32,
          50,
          93,
          32,
          61,
          32,
          99,
          46,
          108,
          101,
          110,
          103,
          116,
          104,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          98,
          32,
          61,
          32,
          48,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          111,
          114,
          32,
          40,
          118,
          97,
          114,
          32,
          100,
          32,
          111,
          102,
          32,
          99,
          41,
          32,
          98,
          32,
          43,
          61,
          32,
          74,
          98,
          40,
          100,
          41,
          32,
          43,
          32,
          49,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          66,
          91,
          97,
          32,
          62,
          62,
          32,
          50,
          93,
          32,
          61,
          32,
          98,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          48,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          98,
          58,
          32,
          40,
          41,
          32,
          61,
          62,
          32,
          53,
          50,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          100,
          98,
          58,
          32,
          40,
          41,
          32,
          61,
          62,
          32,
          53,
          50,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          97,
          58,
          32,
          40,
          98,
          44,
          32,
          97,
          44,
          32,
          99,
          44,
          32,
          100,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          111,
          114,
          32,
          40,
          118,
          97,
          114,
          32,
          101,
          32,
          61,
          32,
          48,
          44,
          32,
          102,
          32,
          61,
          32,
          48,
          59,
          32,
          102,
          32,
          60,
          32,
          99,
          59,
          32,
          102,
          43,
          43,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          103,
          32,
          61,
          32,
          66,
          91,
          97,
          32,
          62,
          62,
          32,
          50,
          93,
          44,
          32,
          104,
          32,
          61,
          32,
          66,
          91,
          97,
          32,
          43,
          32,
          52,
          32,
          62,
          62,
          32,
          50,
          93,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          97,
          32,
          43,
          61,
          32,
          56,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          111,
          114,
          32,
          40,
          118,
          97,
          114,
          32,
          107,
          32,
          61,
          32,
          48,
          59,
          32,
          107,
          32,
          60,
          32,
          104,
          59,
          32,
          107,
          43,
          43,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          108,
          32,
          61,
          32,
          98,
          44,
          32,
          109,
          32,
          61,
          32,
          116,
          91,
          103,
          32,
          43,
          32,
          107,
          93,
          44,
          32,
          117,
          32,
          61,
          32,
          100,
          99,
          91,
          108,
          93,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          48,
          32,
          61,
          61,
          61,
          32,
          109,
          32,
          124,
          124,
          32,
          49,
          48,
          32,
          61,
          61,
          61,
          32,
          109,
          32,
          63,
          32,
          40,
          40,
          49,
          32,
          61,
          61,
          61,
          32,
          108,
          32,
          63,
          32,
          105,
          97,
          32,
          58,
          32,
          112,
          41,
          40,
          70,
          40,
          117,
          41,
          41,
          44,
          32,
          117,
          46,
          108,
          101,
          110,
          103,
          116,
          104,
          32,
          61,
          32,
          48,
          41,
          32,
          58,
          32,
          117,
          46,
          112,
          117,
          115,
          104,
          40,
          109,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          101,
          32,
          43,
          61,
          32,
          104,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          66,
          91,
          100,
          32,
          62,
          62,
          32,
          50,
          93,
          32,
          61,
          32,
          101,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          48,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          117,
          97,
          58,
          32,
          110,
          99,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          58,
          32,
          111,
          99,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          87,
          97,
          58,
          32,
          112,
          99,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          70,
          97,
          58,
          32,
          113,
          99,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          110,
          58,
          32,
          114,
          99,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          110,
          97,
          58,
          32,
          115,
          99,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          76,
          97,
          58,
          32,
          116,
          99,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          103,
          58,
          32,
          117,
          99,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          119,
          58,
          32,
          118,
          99,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          88,
          58,
          32,
          119,
          99,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          73,
          58,
          32,
          120,
          99,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          78,
          58,
          32,
          121,
          99,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          58,
          32,
          122,
          99,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          108,
          97,
          58,
          32,
          65,
          99,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          104,
          58,
          32,
          66,
          99,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          77,
          97,
          58,
          32,
          67,
          99,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          107,
          58,
          32,
          68,
          99,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          87,
          58,
          32,
          69,
          99,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          58,
          32,
          70,
          99,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          72,
          97,
          58,
          32,
          71,
          99,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          36,
          58,
          32,
          72,
          99,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          97,
          97,
          58,
          32,
          73,
          99,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          98,
          97,
          58,
          32,
          74,
          99,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          76,
          58,
          32,
          75,
          99,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          73,
          97,
          58,
          32,
          76,
          99,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          109,
          97,
          58,
          32,
          77,
          99,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          111,
          97,
          58,
          32,
          78,
          99,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          86,
          58,
          32,
          79,
          99,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          71,
          97,
          58,
          32,
          80,
          99,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          104,
          97,
          58,
          32,
          81,
          99,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          97,
          58,
          32,
          82,
          99,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          67,
          58,
          32,
          83,
          99,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          71,
          58,
          32,
          84,
          99,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          100,
          97,
          58,
          32,
          85,
          99,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          58,
          32,
          86,
          99,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          78,
          97,
          58,
          32,
          87,
          99,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          68,
          97,
          58,
          32,
          88,
          99,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          69,
          97,
          58,
          32,
          89,
          99,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          101,
          58,
          32,
          90,
          99,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          101,
          97,
          58,
          32,
          36,
          99,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          84,
          58,
          32,
          97,
          100,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          106,
          58,
          32,
          98,
          100,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          121,
          58,
          32,
          99,
          100,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          58,
          32,
          100,
          100,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          112,
          58,
          32,
          101,
          100,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          115,
          58,
          32,
          102,
          100,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          107,
          97,
          58,
          32,
          103,
          100,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          66,
          97,
          58,
          32,
          104,
          100,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          65,
          97,
          58,
          32,
          106,
          100,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          97,
          58,
          32,
          107,
          100,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          97,
          58,
          32,
          108,
          100,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          67,
          97,
          58,
          32,
          109,
          100,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          77,
          58,
          32,
          110,
          100,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          122,
          58,
          32,
          111,
          100,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          72,
          58,
          32,
          112,
          100,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          122,
          97,
          58,
          32,
          113,
          100,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          97,
          58,
          32,
          114,
          100,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          106,
          97,
          58,
          32,
          115,
          100,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          70,
          58,
          32,
          116,
          100,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          74,
          97,
          58,
          32,
          117,
          100,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          95,
          58,
          32,
          118,
          100,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          103,
          97,
          58,
          32,
          119,
          100,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          113,
          58,
          32,
          40,
          98,
          41,
          32,
          61,
          62,
          32,
          98,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          104,
          98,
          58,
          32,
          90,
          98,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          36,
          97,
          58,
          32,
          40,
          98,
          44,
          32,
          97,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          99,
          40,
          116,
          46,
          115,
          117,
          98,
          97,
          114,
          114,
          97,
          121,
          40,
          98,
          44,
          32,
          98,
          32,
          43,
          32,
          97,
          41,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          48,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          44,
          32,
          88,
          32,
          61,
          32,
          97,
          119,
          97,
          105,
          116,
          32,
          97,
          115,
          121,
          110,
          99,
          32,
          102,
          117,
          110,
          99,
          116,
          105,
          111,
          110,
          40,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          117,
          110,
          99,
          116,
          105,
          111,
          110,
          32,
          98,
          40,
          100,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          88,
          32,
          61,
          32,
          100,
          46,
          101,
          120,
          112,
          111,
          114,
          116,
          115,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          108,
          97,
          32,
          61,
          32,
          88,
          46,
          107,
          98,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          115,
          97,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          84,
          32,
          61,
          32,
          88,
          46,
          112,
          98,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          67,
          45,
          45,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          110,
          46,
          109,
          111,
          110,
          105,
          116,
          111,
          114,
          82,
          117,
          110,
          68,
          101,
          112,
          101,
          110,
          100,
          101,
          110,
          99,
          105,
          101,
          115,
          63,
          46,
          40,
          67,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          48,
          32,
          61,
          61,
          32,
          67,
          32,
          38,
          38,
          32,
          68,
          32,
          38,
          38,
          32,
          40,
          100,
          32,
          61,
          32,
          68,
          44,
          32,
          68,
          32,
          61,
          32,
          110,
          117,
          108,
          108,
          44,
          32,
          100,
          40,
          41,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          88,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          67,
          43,
          43,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          110,
          46,
          109,
          111,
          110,
          105,
          116,
          111,
          114,
          82,
          117,
          110,
          68,
          101,
          112,
          101,
          110,
          100,
          101,
          110,
          99,
          105,
          101,
          115,
          63,
          46,
          40,
          67,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          97,
          32,
          61,
          32,
          123,
          32,
          97,
          58,
          32,
          120,
          100,
          32,
          125,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          110,
          46,
          105,
          110,
          115,
          116,
          97,
          110,
          116,
          105,
          97,
          116,
          101,
          87,
          97,
          115,
          109,
          41,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          110,
          101,
          119,
          32,
          80,
          114,
          111,
          109,
          105,
          115,
          101,
          40,
          40,
          100,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          110,
          46,
          105,
          110,
          115,
          116,
          97,
          110,
          116,
          105,
          97,
          116,
          101,
          87,
          97,
          115,
          109,
          40,
          97,
          44,
          32,
          40,
          101,
          44,
          32,
          102,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          100,
          40,
          98,
          40,
          101,
          44,
          32,
          102,
          41,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          117,
          97,
          32,
          63,
          63,
          32,
          40,
          117,
          97,
          32,
          61,
          32,
          110,
          46,
          108,
          111,
          99,
          97,
          116,
          101,
          70,
          105,
          108,
          101,
          32,
          63,
          32,
          110,
          46,
          108,
          111,
          99,
          97,
          116,
          101,
          70,
          105,
          108,
          101,
          32,
          63,
          32,
          110,
          46,
          108,
          111,
          99,
          97,
          116,
          101,
          70,
          105,
          108,
          101,
          40,
          34,
          100,
          111,
          116,
          108,
          111,
          116,
          116,
          105,
          101,
          45,
          112,
          108,
          97,
          121,
          101,
          114,
          46,
          119,
          97,
          115,
          109,
          34,
          44,
          32,
          102,
          97,
          41,
          32,
          58,
          32,
          102,
          97,
          32,
          43,
          32,
          34,
          100,
          111,
          116,
          108,
          111,
          116,
          116,
          105,
          101,
          45,
          112,
          108,
          97,
          121,
          101,
          114,
          46,
          119,
          97,
          115,
          109,
          34,
          32,
          58,
          32,
          34,
          34,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          114,
          121,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          99,
          32,
          61,
          32,
          97,
          119,
          97,
          105,
          116,
          32,
          120,
          97,
          40,
          97,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          98,
          40,
          99,
          46,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          32,
          99,
          97,
          116,
          99,
          104,
          32,
          40,
          100,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          98,
          97,
          40,
          100,
          41,
          44,
          32,
          80,
          114,
          111,
          109,
          105,
          115,
          101,
          46,
          114,
          101,
          106,
          101,
          99,
          116,
          40,
          100,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          40,
          41,
          44,
          32,
          108,
          99,
          32,
          61,
          32,
          88,
          46,
          109,
          98,
          44,
          32,
          85,
          97,
          32,
          61,
          32,
          88,
          46,
          110,
          98,
          44,
          32,
          79,
          32,
          61,
          32,
          88,
          46,
          111,
          98,
          44,
          32,
          109,
          99,
          32,
          61,
          32,
          88,
          46,
          113,
          98,
          44,
          32,
          87,
          32,
          61,
          32,
          88,
          46,
          114,
          98,
          44,
          32,
          73,
          97,
          32,
          61,
          32,
          88,
          46,
          115,
          98,
          44,
          32,
          89,
          32,
          61,
          32,
          88,
          46,
          116,
          98,
          44,
          32,
          90,
          32,
          61,
          32,
          88,
          46,
          117,
          98,
          44,
          32,
          107,
          99,
          32,
          61,
          32,
          88,
          46,
          118,
          98,
          44,
          32,
          105,
          99,
          32,
          61,
          32,
          88,
          46,
          119,
          98,
          44,
          32,
          74,
          97,
          32,
          61,
          32,
          88,
          46,
          120,
          98,
          44,
          32,
          106,
          99,
          32,
          61,
          32,
          88,
          46,
          121,
          98,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          117,
          110,
          99,
          116,
          105,
          111,
          110,
          32,
          86,
          99,
          40,
          98,
          44,
          32,
          97,
          44,
          32,
          99,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          100,
          32,
          61,
          32,
          90,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          114,
          121,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          84,
          46,
          103,
          101,
          116,
          40,
          98,
          41,
          40,
          97,
          44,
          32,
          99,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          32,
          99,
          97,
          116,
          99,
          104,
          32,
          40,
          101,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          89,
          40,
          100,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          101,
          32,
          33,
          61,
          61,
          32,
          101,
          32,
          43,
          32,
          48,
          41,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          101,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          87,
          40,
          49,
          44,
          32,
          48,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          117,
          110,
          99,
          116,
          105,
          111,
          110,
          32,
          90,
          99,
          40,
          98,
          44,
          32,
          97,
          44,
          32,
          99,
          44,
          32,
          100,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          101,
          32,
          61,
          32,
          90,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          114,
          121,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          84,
          46,
          103,
          101,
          116,
          40,
          98,
          41,
          40,
          97,
          44,
          32,
          99,
          44,
          32,
          100,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          32,
          99,
          97,
          116,
          99,
          104,
          32,
          40,
          102,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          89,
          40,
          101,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          102,
          32,
          33,
          61,
          61,
          32,
          102,
          32,
          43,
          32,
          48,
          41,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          102,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          87,
          40,
          49,
          44,
          32,
          48,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          117,
          110,
          99,
          116,
          105,
          111,
          110,
          32,
          82,
          99,
          40,
          98,
          44,
          32,
          97,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          99,
          32,
          61,
          32,
          90,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          114,
          121,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          84,
          46,
          103,
          101,
          116,
          40,
          98,
          41,
          40,
          97,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          32,
          99,
          97,
          116,
          99,
          104,
          32,
          40,
          100,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          89,
          40,
          99,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          100,
          32,
          33,
          61,
          61,
          32,
          100,
          32,
          43,
          32,
          48,
          41,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          100,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          87,
          40,
          49,
          44,
          32,
          48,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          117,
          110,
          99,
          116,
          105,
          111,
          110,
          32,
          98,
          100,
          40,
          98,
          44,
          32,
          97,
          44,
          32,
          99,
          44,
          32,
          100,
          44,
          32,
          101,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          102,
          32,
          61,
          32,
          90,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          114,
          121,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          84,
          46,
          103,
          101,
          116,
          40,
          98,
          41,
          40,
          97,
          44,
          32,
          99,
          44,
          32,
          100,
          44,
          32,
          101,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          32,
          99,
          97,
          116,
          99,
          104,
          32,
          40,
          103,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          89,
          40,
          102,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          103,
          32,
          33,
          61,
          61,
          32,
          103,
          32,
          43,
          32,
          48,
          41,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          103,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          87,
          40,
          49,
          44,
          32,
          48,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          117,
          110,
          99,
          116,
          105,
          111,
          110,
          32,
          117,
          99,
          40,
          98,
          44,
          32,
          97,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          99,
          32,
          61,
          32,
          90,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          114,
          121,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          84,
          46,
          103,
          101,
          116,
          40,
          98,
          41,
          40,
          97,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          32,
          99,
          97,
          116,
          99,
          104,
          32,
          40,
          100,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          89,
          40,
          99,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          100,
          32,
          33,
          61,
          61,
          32,
          100,
          32,
          43,
          32,
          48,
          41,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          100,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          87,
          40,
          49,
          44,
          32,
          48,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          117,
          110,
          99,
          116,
          105,
          111,
          110,
          32,
          122,
          99,
          40,
          98,
          44,
          32,
          97,
          44,
          32,
          99,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          100,
          32,
          61,
          32,
          90,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          114,
          121,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          84,
          46,
          103,
          101,
          116,
          40,
          98,
          41,
          40,
          97,
          44,
          32,
          99,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          32,
          99,
          97,
          116,
          99,
          104,
          32,
          40,
          101,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          89,
          40,
          100,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          101,
          32,
          33,
          61,
          61,
          32,
          101,
          32,
          43,
          32,
          48,
          41,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          101,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          87,
          40,
          49,
          44,
          32,
          48,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          117,
          110,
          99,
          116,
          105,
          111,
          110,
          32,
          78,
          99,
          40,
          98,
          44,
          32,
          97,
          44,
          32,
          99,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          100,
          32,
          61,
          32,
          90,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          114,
          121,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          84,
          46,
          103,
          101,
          116,
          40,
          98,
          41,
          40,
          97,
          44,
          32,
          99,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          32,
          99,
          97,
          116,
          99,
          104,
          32,
          40,
          101,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          89,
          40,
          100,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          101,
          32,
          33,
          61,
          61,
          32,
          101,
          32,
          43,
          32,
          48,
          41,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          101,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          87,
          40,
          49,
          44,
          32,
          48,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          48,
          110,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          117,
          110,
          99,
          116,
          105,
          111,
          110,
          32,
          115,
          99,
          40,
          98,
          44,
          32,
          97,
          44,
          32,
          99,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          100,
          32,
          61,
          32,
          90,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          114,
          121,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          84,
          46,
          103,
          101,
          116,
          40,
          98,
          41,
          40,
          97,
          44,
          32,
          99,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          32,
          99,
          97,
          116,
          99,
          104,
          32,
          40,
          101,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          89,
          40,
          100,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          101,
          32,
          33,
          61,
          61,
          32,
          101,
          32,
          43,
          32,
          48,
          41,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          101,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          87,
          40,
          49,
          44,
          32,
          48,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          117,
          110,
          99,
          116,
          105,
          111,
          110,
          32,
          77,
          99,
          40,
          98,
          44,
          32,
          97,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          99,
          32,
          61,
          32,
          90,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          114,
          121,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          84,
          46,
          103,
          101,
          116,
          40,
          98,
          41,
          40,
          97,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          32,
          99,
          97,
          116,
          99,
          104,
          32,
          40,
          100,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          89,
          40,
          99,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          100,
          32,
          33,
          61,
          61,
          32,
          100,
          32,
          43,
          32,
          48,
          41,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          100,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          87,
          40,
          49,
          44,
          32,
          48,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          48,
          110,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          117,
          110,
          99,
          116,
          105,
          111,
          110,
          32,
          119,
          99,
          40,
          98,
          44,
          32,
          97,
          44,
          32,
          99,
          44,
          32,
          100,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          101,
          32,
          61,
          32,
          90,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          114,
          121,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          84,
          46,
          103,
          101,
          116,
          40,
          98,
          41,
          40,
          97,
          44,
          32,
          99,
          44,
          32,
          100,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          32,
          99,
          97,
          116,
          99,
          104,
          32,
          40,
          102,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          89,
          40,
          101,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          102,
          32,
          33,
          61,
          61,
          32,
          102,
          32,
          43,
          32,
          48,
          41,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          102,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          87,
          40,
          49,
          44,
          32,
          48,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          117,
          110,
          99,
          116,
          105,
          111,
          110,
          32,
          70,
          99,
          40,
          98,
          44,
          32,
          97,
          44,
          32,
          99,
          44,
          32,
          100,
          44,
          32,
          101,
          44,
          32,
          102,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          103,
          32,
          61,
          32,
          90,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          114,
          121,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          84,
          46,
          103,
          101,
          116,
          40,
          98,
          41,
          40,
          97,
          44,
          32,
          99,
          44,
          32,
          100,
          44,
          32,
          101,
          44,
          32,
          102,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          32,
          99,
          97,
          116,
          99,
          104,
          32,
          40,
          104,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          89,
          40,
          103,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          104,
          32,
          33,
          61,
          61,
          32,
          104,
          32,
          43,
          32,
          48,
          41,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          104,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          87,
          40,
          49,
          44,
          32,
          48,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          117,
          110,
          99,
          116,
          105,
          111,
          110,
          32,
          84,
          99,
          40,
          98,
          44,
          32,
          97,
          44,
          32,
          99,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          100,
          32,
          61,
          32,
          90,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          114,
          121,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          84,
          46,
          103,
          101,
          116,
          40,
          98,
          41,
          40,
          97,
          44,
          32,
          99,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          32,
          99,
          97,
          116,
          99,
          104,
          32,
          40,
          101,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          89,
          40,
          100,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          101,
          32,
          33,
          61,
          61,
          32,
          101,
          32,
          43,
          32,
          48,
          41,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          101,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          87,
          40,
          49,
          44,
          32,
          48,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          117,
          110,
          99,
          116,
          105,
          111,
          110,
          32,
          114,
          99,
          40,
          98,
          44,
          32,
          97,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          99,
          32,
          61,
          32,
          90,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          114,
          121,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          84,
          46,
          103,
          101,
          116,
          40,
          98,
          41,
          40,
          97,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          32,
          99,
          97,
          116,
          99,
          104,
          32,
          40,
          100,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          89,
          40,
          99,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          100,
          32,
          33,
          61,
          61,
          32,
          100,
          32,
          43,
          32,
          48,
          41,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          100,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          87,
          40,
          49,
          44,
          32,
          48,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          117,
          110,
          99,
          116,
          105,
          111,
          110,
          32,
          118,
          99,
          40,
          98,
          44,
          32,
          97,
          44,
          32,
          99,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          100,
          32,
          61,
          32,
          90,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          114,
          121,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          84,
          46,
          103,
          101,
          116,
          40,
          98,
          41,
          40,
          97,
          44,
          32,
          99,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          32,
          99,
          97,
          116,
          99,
          104,
          32,
          40,
          101,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          89,
          40,
          100,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          101,
          32,
          33,
          61,
          61,
          32,
          101,
          32,
          43,
          32,
          48,
          41,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          101,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          87,
          40,
          49,
          44,
          32,
          48,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          117,
          110,
          99,
          116,
          105,
          111,
          110,
          32,
          66,
          99,
          40,
          98,
          44,
          32,
          97,
          44,
          32,
          99,
          44,
          32,
          100,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          101,
          32,
          61,
          32,
          90,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          114,
          121,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          84,
          46,
          103,
          101,
          116,
          40,
          98,
          41,
          40,
          97,
          44,
          32,
          99,
          44,
          32,
          100,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          32,
          99,
          97,
          116,
          99,
          104,
          32,
          40,
          102,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          89,
          40,
          101,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          102,
          32,
          33,
          61,
          61,
          32,
          102,
          32,
          43,
          32,
          48,
          41,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          102,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          87,
          40,
          49,
          44,
          32,
          48,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          117,
          110,
          99,
          116,
          105,
          111,
          110,
          32,
          87,
          99,
          40,
          98,
          44,
          32,
          97,
          44,
          32,
          99,
          44,
          32,
          100,
          44,
          32,
          101,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          102,
          32,
          61,
          32,
          90,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          114,
          121,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          84,
          46,
          103,
          101,
          116,
          40,
          98,
          41,
          40,
          97,
          44,
          32,
          99,
          44,
          32,
          100,
          44,
          32,
          101,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          32,
          99,
          97,
          116,
          99,
          104,
          32,
          40,
          103,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          89,
          40,
          102,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          103,
          32,
          33,
          61,
          61,
          32,
          103,
          32,
          43,
          32,
          48,
          41,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          103,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          87,
          40,
          49,
          44,
          32,
          48,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          117,
          110,
          99,
          116,
          105,
          111,
          110,
          32,
          100,
          100,
          40,
          98,
          44,
          32,
          97,
          44,
          32,
          99,
          44,
          32,
          100,
          44,
          32,
          101,
          44,
          32,
          102,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          103,
          32,
          61,
          32,
          90,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          114,
          121,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          84,
          46,
          103,
          101,
          116,
          40,
          98,
          41,
          40,
          97,
          44,
          32,
          99,
          44,
          32,
          100,
          44,
          32,
          101,
          44,
          32,
          102,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          32,
          99,
          97,
          116,
          99,
          104,
          32,
          40,
          104,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          89,
          40,
          103,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          104,
          32,
          33,
          61,
          61,
          32,
          104,
          32,
          43,
          32,
          48,
          41,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          104,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          87,
          40,
          49,
          44,
          32,
          48,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          117,
          110,
          99,
          116,
          105,
          111,
          110,
          32,
          67,
          99,
          40,
          98,
          44,
          32,
          97,
          44,
          32,
          99,
          44,
          32,
          100,
          44,
          32,
          101,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          102,
          32,
          61,
          32,
          90,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          114,
          121,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          84,
          46,
          103,
          101,
          116,
          40,
          98,
          41,
          40,
          97,
          44,
          32,
          99,
          44,
          32,
          100,
          44,
          32,
          101,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          32,
          99,
          97,
          116,
          99,
          104,
          32,
          40,
          103,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          89,
          40,
          102,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          103,
          32,
          33,
          61,
          61,
          32,
          103,
          32,
          43,
          32,
          48,
          41,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          103,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          87,
          40,
          49,
          44,
          32,
          48,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          117,
          110,
          99,
          116,
          105,
          111,
          110,
          32,
          121,
          99,
          40,
          98,
          44,
          32,
          97,
          44,
          32,
          99,
          44,
          32,
          100,
          44,
          32,
          101,
          44,
          32,
          102,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          103,
          32,
          61,
          32,
          90,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          114,
          121,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          84,
          46,
          103,
          101,
          116,
          40,
          98,
          41,
          40,
          97,
          44,
          32,
          99,
          44,
          32,
          100,
          44,
          32,
          101,
          44,
          32,
          102,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          32,
          99,
          97,
          116,
          99,
          104,
          32,
          40,
          104,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          89,
          40,
          103,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          104,
          32,
          33,
          61,
          61,
          32,
          104,
          32,
          43,
          32,
          48,
          41,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          104,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          87,
          40,
          49,
          44,
          32,
          48,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          117,
          110,
          99,
          116,
          105,
          111,
          110,
          32,
          120,
          99,
          40,
          98,
          44,
          32,
          97,
          44,
          32,
          99,
          44,
          32,
          100,
          44,
          32,
          101,
          44,
          32,
          102,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          103,
          32,
          61,
          32,
          90,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          114,
          121,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          84,
          46,
          103,
          101,
          116,
          40,
          98,
          41,
          40,
          97,
          44,
          32,
          99,
          44,
          32,
          100,
          44,
          32,
          101,
          44,
          32,
          102,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          32,
          99,
          97,
          116,
          99,
          104,
          32,
          40,
          104,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          89,
          40,
          103,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          104,
          32,
          33,
          61,
          61,
          32,
          104,
          32,
          43,
          32,
          48,
          41,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          104,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          87,
          40,
          49,
          44,
          32,
          48,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          117,
          110,
          99,
          116,
          105,
          111,
          110,
          32,
          68,
          99,
          40,
          98,
          44,
          32,
          97,
          44,
          32,
          99,
          44,
          32,
          100,
          44,
          32,
          101,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          102,
          32,
          61,
          32,
          90,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          114,
          121,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          84,
          46,
          103,
          101,
          116,
          40,
          98,
          41,
          40,
          97,
          44,
          32,
          99,
          44,
          32,
          100,
          44,
          32,
          101,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          32,
          99,
          97,
          116,
          99,
          104,
          32,
          40,
          103,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          89,
          40,
          102,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          103,
          32,
          33,
          61,
          61,
          32,
          103,
          32,
          43,
          32,
          48,
          41,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          103,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          87,
          40,
          49,
          44,
          32,
          48,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          117,
          110,
          99,
          116,
          105,
          111,
          110,
          32,
          69,
          99,
          40,
          98,
          44,
          32,
          97,
          44,
          32,
          99,
          44,
          32,
          100,
          44,
          32,
          101,
          44,
          32,
          102,
          44,
          32,
          103,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          104,
          32,
          61,
          32,
          90,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          114,
          121,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          84,
          46,
          103,
          101,
          116,
          40,
          98,
          41,
          40,
          97,
          44,
          32,
          99,
          44,
          32,
          100,
          44,
          32,
          101,
          44,
          32,
          102,
          44,
          32,
          103,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          32,
          99,
          97,
          116,
          99,
          104,
          32,
          40,
          107,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          89,
          40,
          104,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          107,
          32,
          33,
          61,
          61,
          32,
          107,
          32,
          43,
          32,
          48,
          41,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          107,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          87,
          40,
          49,
          44,
          32,
          48,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          117,
          110,
          99,
          116,
          105,
          111,
          110,
          32,
          116,
          99,
          40,
          98,
          44,
          32,
          97,
          44,
          32,
          99,
          44,
          32,
          100,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          101,
          32,
          61,
          32,
          90,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          114,
          121,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          84,
          46,
          103,
          101,
          116,
          40,
          98,
          41,
          40,
          97,
          44,
          32,
          99,
          44,
          32,
          100,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          32,
          99,
          97,
          116,
          99,
          104,
          32,
          40,
          102,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          89,
          40,
          101,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          102,
          32,
          33,
          61,
          61,
          32,
          102,
          32,
          43,
          32,
          48,
          41,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          102,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          87,
          40,
          49,
          44,
          32,
          48,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          117,
          110,
          99,
          116,
          105,
          111,
          110,
          32,
          65,
          99,
          40,
          98,
          44,
          32,
          97,
          44,
          32,
          99,
          44,
          32,
          100,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          101,
          32,
          61,
          32,
          90,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          114,
          121,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          84,
          46,
          103,
          101,
          116,
          40,
          98,
          41,
          40,
          97,
          44,
          32,
          99,
          44,
          32,
          100,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          32,
          99,
          97,
          116,
          99,
          104,
          32,
          40,
          102,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          89,
          40,
          101,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          102,
          32,
          33,
          61,
          61,
          32,
          102,
          32,
          43,
          32,
          48,
          41,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          102,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          87,
          40,
          49,
          44,
          32,
          48,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          117,
          110,
          99,
          116,
          105,
          111,
          110,
          32,
          117,
          100,
          40,
          98,
          44,
          32,
          97,
          44,
          32,
          99,
          44,
          32,
          100,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          101,
          32,
          61,
          32,
          90,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          114,
          121,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          84,
          46,
          103,
          101,
          116,
          40,
          98,
          41,
          40,
          97,
          44,
          32,
          99,
          44,
          32,
          100,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          32,
          99,
          97,
          116,
          99,
          104,
          32,
          40,
          102,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          89,
          40,
          101,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          102,
          32,
          33,
          61,
          61,
          32,
          102,
          32,
          43,
          32,
          48,
          41,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          102,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          87,
          40,
          49,
          44,
          32,
          48,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          117,
          110,
          99,
          116,
          105,
          111,
          110,
          32,
          111,
          100,
          40,
          98,
          44,
          32,
          97,
          44,
          32,
          99,
          44,
          32,
          100,
          44,
          32,
          101,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          102,
          32,
          61,
          32,
          90,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          114,
          121,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          84,
          46,
          103,
          101,
          116,
          40,
          98,
          41,
          40,
          97,
          44,
          32,
          99,
          44,
          32,
          100,
          44,
          32,
          101,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          32,
          99,
          97,
          116,
          99,
          104,
          32,
          40,
          103,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          89,
          40,
          102,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          103,
          32,
          33,
          61,
          61,
          32,
          103,
          32,
          43,
          32,
          48,
          41,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          103,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          87,
          40,
          49,
          44,
          32,
          48,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          117,
          110,
          99,
          116,
          105,
          111,
          110,
          32,
          76,
          99,
          40,
          98,
          44,
          32,
          97,
          44,
          32,
          99,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          100,
          32,
          61,
          32,
          90,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          114,
          121,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          84,
          46,
          103,
          101,
          116,
          40,
          98,
          41,
          40,
          97,
          44,
          32,
          99,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          32,
          99,
          97,
          116,
          99,
          104,
          32,
          40,
          101,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          89,
          40,
          100,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          101,
          32,
          33,
          61,
          61,
          32,
          101,
          32,
          43,
          32,
          48,
          41,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          101,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          87,
          40,
          49,
          44,
          32,
          48,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          117,
          110,
          99,
          116,
          105,
          111,
          110,
          32,
          101,
          100,
          40,
          98,
          44,
          32,
          97,
          44,
          32,
          99,
          44,
          32,
          100,
          44,
          32,
          101,
          44,
          32,
          102,
          44,
          32,
          103,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          104,
          32,
          61,
          32,
          90,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          114,
          121,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          84,
          46,
          103,
          101,
          116,
          40,
          98,
          41,
          40,
          97,
          44,
          32,
          99,
          44,
          32,
          100,
          44,
          32,
          101,
          44,
          32,
          102,
          44,
          32,
          103,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          32,
          99,
          97,
          116,
          99,
          104,
          32,
          40,
          107,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          89,
          40,
          104,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          107,
          32,
          33,
          61,
          61,
          32,
          107,
          32,
          43,
          32,
          48,
          41,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          107,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          87,
          40,
          49,
          44,
          32,
          48,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          117,
          110,
          99,
          116,
          105,
          111,
          110,
          32,
          112,
          100,
          40,
          98,
          44,
          32,
          97,
          44,
          32,
          99,
          44,
          32,
          100,
          44,
          32,
          101,
          44,
          32,
          102,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          103,
          32,
          61,
          32,
          90,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          114,
          121,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          84,
          46,
          103,
          101,
          116,
          40,
          98,
          41,
          40,
          97,
          44,
          32,
          99,
          44,
          32,
          100,
          44,
          32,
          101,
          44,
          32,
          102,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          32,
          99,
          97,
          116,
          99,
          104,
          32,
          40,
          104,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          89,
          40,
          103,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          104,
          32,
          33,
          61,
          61,
          32,
          104,
          32,
          43,
          32,
          48,
          41,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          104,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          87,
          40,
          49,
          44,
          32,
          48,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          117,
          110,
          99,
          116,
          105,
          111,
          110,
          32,
          79,
          99,
          40,
          98,
          44,
          32,
          97,
          44,
          32,
          99,
          44,
          32,
          100,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          101,
          32,
          61,
          32,
          90,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          114,
          121,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          84,
          46,
          103,
          101,
          116,
          40,
          98,
          41,
          40,
          97,
          44,
          32,
          99,
          44,
          32,
          100,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          32,
          99,
          97,
          116,
          99,
          104,
          32,
          40,
          102,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          89,
          40,
          101,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          102,
          32,
          33,
          61,
          61,
          32,
          102,
          32,
          43,
          32,
          48,
          41,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          102,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          87,
          40,
          49,
          44,
          32,
          48,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          48,
          110,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          117,
          110,
          99,
          116,
          105,
          111,
          110,
          32,
          102,
          100,
          40,
          98,
          44,
          32,
          97,
          44,
          32,
          99,
          44,
          32,
          100,
          44,
          32,
          101,
          44,
          32,
          102,
          44,
          32,
          103,
          44,
          32,
          104,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          107,
          32,
          61,
          32,
          90,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          114,
          121,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          84,
          46,
          103,
          101,
          116,
          40,
          98,
          41,
          40,
          97,
          44,
          32,
          99,
          44,
          32,
          100,
          44,
          32,
          101,
          44,
          32,
          102,
          44,
          32,
          103,
          44,
          32,
          104,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          32,
          99,
          97,
          116,
          99,
          104,
          32,
          40,
          108,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          89,
          40,
          107,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          108,
          32,
          33,
          61,
          61,
          32,
          108,
          32,
          43,
          32,
          48,
          41,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          108,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          87,
          40,
          49,
          44,
          32,
          48,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          117,
          110,
          99,
          116,
          105,
          111,
          110,
          32,
          71,
          99,
          40,
          98,
          44,
          32,
          97,
          44,
          32,
          99,
          44,
          32,
          100,
          44,
          32,
          101,
          44,
          32,
          102,
          44,
          32,
          103,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          104,
          32,
          61,
          32,
          90,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          114,
          121,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          84,
          46,
          103,
          101,
          116,
          40,
          98,
          41,
          40,
          97,
          44,
          32,
          99,
          44,
          32,
          100,
          44,
          32,
          101,
          44,
          32,
          102,
          44,
          32,
          103,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          32,
          99,
          97,
          116,
          99,
          104,
          32,
          40,
          107,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          89,
          40,
          104,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          107,
          32,
          33,
          61,
          61,
          32,
          107,
          32,
          43,
          32,
          48,
          41,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          107,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          87,
          40,
          49,
          44,
          32,
          48,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          117,
          110,
          99,
          116,
          105,
          111,
          110,
          32,
          103,
          100,
          40,
          98,
          44,
          32,
          97,
          44,
          32,
          99,
          44,
          32,
          100,
          44,
          32,
          101,
          44,
          32,
          102,
          44,
          32,
          103,
          44,
          32,
          104,
          44,
          32,
          107,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          108,
          32,
          61,
          32,
          90,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          114,
          121,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          84,
          46,
          103,
          101,
          116,
          40,
          98,
          41,
          40,
          97,
          44,
          32,
          99,
          44,
          32,
          100,
          44,
          32,
          101,
          44,
          32,
          102,
          44,
          32,
          103,
          44,
          32,
          104,
          44,
          32,
          107,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          32,
          99,
          97,
          116,
          99,
          104,
          32,
          40,
          109,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          89,
          40,
          108,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          109,
          32,
          33,
          61,
          61,
          32,
          109,
          32,
          43,
          32,
          48,
          41,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          109,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          87,
          40,
          49,
          44,
          32,
          48,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          117,
          110,
          99,
          116,
          105,
          111,
          110,
          32,
          83,
          99,
          40,
          98,
          44,
          32,
          97,
          44,
          32,
          99,
          44,
          32,
          100,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          101,
          32,
          61,
          32,
          90,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          114,
          121,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          84,
          46,
          103,
          101,
          116,
          40,
          98,
          41,
          40,
          97,
          44,
          32,
          99,
          44,
          32,
          100,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          32,
          99,
          97,
          116,
          99,
          104,
          32,
          40,
          102,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          89,
          40,
          101,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          102,
          32,
          33,
          61,
          61,
          32,
          102,
          32,
          43,
          32,
          48,
          41,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          102,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          87,
          40,
          49,
          44,
          32,
          48,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          117,
          110,
          99,
          116,
          105,
          111,
          110,
          32,
          115,
          100,
          40,
          98,
          44,
          32,
          97,
          44,
          32,
          99,
          44,
          32,
          100,
          44,
          32,
          101,
          44,
          32,
          102,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          103,
          32,
          61,
          32,
          90,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          114,
          121,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          84,
          46,
          103,
          101,
          116,
          40,
          98,
          41,
          40,
          97,
          44,
          32,
          99,
          44,
          32,
          100,
          44,
          32,
          101,
          44,
          32,
          102,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          32,
          99,
          97,
          116,
          99,
          104,
          32,
          40,
          104,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          89,
          40,
          103,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          104,
          32,
          33,
          61,
          61,
          32,
          104,
          32,
          43,
          32,
          48,
          41,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          104,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          87,
          40,
          49,
          44,
          32,
          48,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          117,
          110,
          99,
          116,
          105,
          111,
          110,
          32,
          116,
          100,
          40,
          98,
          44,
          32,
          97,
          44,
          32,
          99,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          100,
          32,
          61,
          32,
          90,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          114,
          121,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          84,
          46,
          103,
          101,
          116,
          40,
          98,
          41,
          40,
          97,
          44,
          32,
          99,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          32,
          99,
          97,
          116,
          99,
          104,
          32,
          40,
          101,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          89,
          40,
          100,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          101,
          32,
          33,
          61,
          61,
          32,
          101,
          32,
          43,
          32,
          48,
          41,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          101,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          87,
          40,
          49,
          44,
          32,
          48,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          117,
          110,
          99,
          116,
          105,
          111,
          110,
          32,
          114,
          100,
          40,
          98,
          44,
          32,
          97,
          44,
          32,
          99,
          44,
          32,
          100,
          44,
          32,
          101,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          102,
          32,
          61,
          32,
          90,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          114,
          121,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          84,
          46,
          103,
          101,
          116,
          40,
          98,
          41,
          40,
          97,
          44,
          32,
          99,
          44,
          32,
          100,
          44,
          32,
          101,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          32,
          99,
          97,
          116,
          99,
          104,
          32,
          40,
          103,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          89,
          40,
          102,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          103,
          32,
          33,
          61,
          61,
          32,
          103,
          32,
          43,
          32,
          48,
          41,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          103,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          87,
          40,
          49,
          44,
          32,
          48,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          117,
          110,
          99,
          116,
          105,
          111,
          110,
          32,
          81,
          99,
          40,
          98,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          97,
          32,
          61,
          32,
          90,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          114,
          121,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          84,
          46,
          103,
          101,
          116,
          40,
          98,
          41,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          32,
          99,
          97,
          116,
          99,
          104,
          32,
          40,
          99,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          89,
          40,
          97,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          99,
          32,
          33,
          61,
          61,
          32,
          99,
          32,
          43,
          32,
          48,
          41,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          99,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          87,
          40,
          49,
          44,
          32,
          48,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          117,
          110,
          99,
          116,
          105,
          111,
          110,
          32,
          119,
          100,
          40,
          98,
          44,
          32,
          97,
          44,
          32,
          99,
          44,
          32,
          100,
          44,
          32,
          101,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          102,
          32,
          61,
          32,
          90,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          114,
          121,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          84,
          46,
          103,
          101,
          116,
          40,
          98,
          41,
          40,
          97,
          44,
          32,
          99,
          44,
          32,
          100,
          44,
          32,
          101,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          32,
          99,
          97,
          116,
          99,
          104,
          32,
          40,
          103,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          89,
          40,
          102,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          103,
          32,
          33,
          61,
          61,
          32,
          103,
          32,
          43,
          32,
          48,
          41,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          103,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          87,
          40,
          49,
          44,
          32,
          48,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          117,
          110,
          99,
          116,
          105,
          111,
          110,
          32,
          80,
          99,
          40,
          98,
          44,
          32,
          97,
          44,
          32,
          99,
          44,
          32,
          100,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          101,
          32,
          61,
          32,
          90,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          114,
          121,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          84,
          46,
          103,
          101,
          116,
          40,
          98,
          41,
          40,
          97,
          44,
          32,
          99,
          44,
          32,
          100,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          32,
          99,
          97,
          116,
          99,
          104,
          32,
          40,
          102,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          89,
          40,
          101,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          102,
          32,
          33,
          61,
          61,
          32,
          102,
          32,
          43,
          32,
          48,
          41,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          102,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          87,
          40,
          49,
          44,
          32,
          48,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          48,
          110,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          117,
          110,
          99,
          116,
          105,
          111,
          110,
          32,
          110,
          100,
          40,
          98,
          44,
          32,
          97,
          44,
          32,
          99,
          44,
          32,
          100,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          101,
          32,
          61,
          32,
          90,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          114,
          121,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          84,
          46,
          103,
          101,
          116,
          40,
          98,
          41,
          40,
          97,
          44,
          32,
          99,
          44,
          32,
          100,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          32,
          99,
          97,
          116,
          99,
          104,
          32,
          40,
          102,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          89,
          40,
          101,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          102,
          32,
          33,
          61,
          61,
          32,
          102,
          32,
          43,
          32,
          48,
          41,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          102,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          87,
          40,
          49,
          44,
          32,
          48,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          117,
          110,
          99,
          116,
          105,
          111,
          110,
          32,
          75,
          99,
          40,
          98,
          44,
          32,
          97,
          44,
          32,
          99,
          44,
          32,
          100,
          44,
          32,
          101,
          44,
          32,
          102,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          103,
          32,
          61,
          32,
          90,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          114,
          121,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          84,
          46,
          103,
          101,
          116,
          40,
          98,
          41,
          40,
          97,
          44,
          32,
          99,
          44,
          32,
          100,
          44,
          32,
          101,
          44,
          32,
          102,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          32,
          99,
          97,
          116,
          99,
          104,
          32,
          40,
          104,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          89,
          40,
          103,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          104,
          32,
          33,
          61,
          61,
          32,
          104,
          32,
          43,
          32,
          48,
          41,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          104,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          87,
          40,
          49,
          44,
          32,
          48,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          117,
          110,
          99,
          116,
          105,
          111,
          110,
          32,
          107,
          100,
          40,
          98,
          44,
          32,
          97,
          44,
          32,
          99,
          44,
          32,
          100,
          44,
          32,
          101,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          102,
          32,
          61,
          32,
          90,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          114,
          121,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          84,
          46,
          103,
          101,
          116,
          40,
          98,
          41,
          40,
          97,
          44,
          32,
          99,
          44,
          32,
          100,
          44,
          32,
          101,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          32,
          99,
          97,
          116,
          99,
          104,
          32,
          40,
          103,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          89,
          40,
          102,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          103,
          32,
          33,
          61,
          61,
          32,
          103,
          32,
          43,
          32,
          48,
          41,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          103,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          87,
          40,
          49,
          44,
          32,
          48,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          117,
          110,
          99,
          116,
          105,
          111,
          110,
          32,
          113,
          99,
          40,
          98,
          44,
          32,
          97,
          44,
          32,
          99,
          44,
          32,
          100,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          101,
          32,
          61,
          32,
          90,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          114,
          121,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          84,
          46,
          103,
          101,
          116,
          40,
          98,
          41,
          40,
          97,
          44,
          32,
          99,
          44,
          32,
          100,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          32,
          99,
          97,
          116,
          99,
          104,
          32,
          40,
          102,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          89,
          40,
          101,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          102,
          32,
          33,
          61,
          61,
          32,
          102,
          32,
          43,
          32,
          48,
          41,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          102,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          87,
          40,
          49,
          44,
          32,
          48,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          117,
          110,
          99,
          116,
          105,
          111,
          110,
          32,
          89,
          99,
          40,
          98,
          44,
          32,
          97,
          44,
          32,
          99,
          44,
          32,
          100,
          44,
          32,
          101,
          44,
          32,
          102,
          44,
          32,
          103,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          104,
          32,
          61,
          32,
          90,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          114,
          121,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          84,
          46,
          103,
          101,
          116,
          40,
          98,
          41,
          40,
          97,
          44,
          32,
          99,
          44,
          32,
          100,
          44,
          32,
          101,
          44,
          32,
          102,
          44,
          32,
          103,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          32,
          99,
          97,
          116,
          99,
          104,
          32,
          40,
          107,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          89,
          40,
          104,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          107,
          32,
          33,
          61,
          61,
          32,
          107,
          32,
          43,
          32,
          48,
          41,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          107,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          87,
          40,
          49,
          44,
          32,
          48,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          117,
          110,
          99,
          116,
          105,
          111,
          110,
          32,
          36,
          99,
          40,
          98,
          44,
          32,
          97,
          44,
          32,
          99,
          44,
          32,
          100,
          44,
          32,
          101,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          102,
          32,
          61,
          32,
          90,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          114,
          121,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          84,
          46,
          103,
          101,
          116,
          40,
          98,
          41,
          40,
          97,
          44,
          32,
          99,
          44,
          32,
          100,
          44,
          32,
          101,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          32,
          99,
          97,
          116,
          99,
          104,
          32,
          40,
          103,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          89,
          40,
          102,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          103,
          32,
          33,
          61,
          61,
          32,
          103,
          32,
          43,
          32,
          48,
          41,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          103,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          87,
          40,
          49,
          44,
          32,
          48,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          117,
          110,
          99,
          116,
          105,
          111,
          110,
          32,
          99,
          100,
          40,
          98,
          44,
          32,
          97,
          44,
          32,
          99,
          44,
          32,
          100,
          44,
          32,
          101,
          44,
          32,
          102,
          44,
          32,
          103,
          44,
          32,
          104,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          107,
          32,
          61,
          32,
          90,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          114,
          121,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          84,
          46,
          103,
          101,
          116,
          40,
          98,
          41,
          40,
          97,
          44,
          32,
          99,
          44,
          32,
          100,
          44,
          32,
          101,
          44,
          32,
          102,
          44,
          32,
          103,
          44,
          32,
          104,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          32,
          99,
          97,
          116,
          99,
          104,
          32,
          40,
          108,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          89,
          40,
          107,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          108,
          32,
          33,
          61,
          61,
          32,
          108,
          32,
          43,
          32,
          48,
          41,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          108,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          87,
          40,
          49,
          44,
          32,
          48,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          117,
          110,
          99,
          116,
          105,
          111,
          110,
          32,
          85,
          99,
          40,
          98,
          44,
          32,
          97,
          44,
          32,
          99,
          44,
          32,
          100,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          101,
          32,
          61,
          32,
          90,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          114,
          121,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          84,
          46,
          103,
          101,
          116,
          40,
          98,
          41,
          40,
          97,
          44,
          32,
          99,
          44,
          32,
          100,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          32,
          99,
          97,
          116,
          99,
          104,
          32,
          40,
          102,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          89,
          40,
          101,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          102,
          32,
          33,
          61,
          61,
          32,
          102,
          32,
          43,
          32,
          48,
          41,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          102,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          87,
          40,
          49,
          44,
          32,
          48,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          117,
          110,
          99,
          116,
          105,
          111,
          110,
          32,
          88,
          99,
          40,
          98,
          44,
          32,
          97,
          44,
          32,
          99,
          44,
          32,
          100,
          44,
          32,
          101,
          44,
          32,
          102,
          44,
          32,
          103,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          104,
          32,
          61,
          32,
          90,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          114,
          121,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          84,
          46,
          103,
          101,
          116,
          40,
          98,
          41,
          40,
          97,
          44,
          32,
          99,
          44,
          32,
          100,
          44,
          32,
          101,
          44,
          32,
          102,
          44,
          32,
          103,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          32,
          99,
          97,
          116,
          99,
          104,
          32,
          40,
          107,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          89,
          40,
          104,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          107,
          32,
          33,
          61,
          61,
          32,
          107,
          32,
          43,
          32,
          48,
          41,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          107,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          87,
          40,
          49,
          44,
          32,
          48,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          117,
          110,
          99,
          116,
          105,
          111,
          110,
          32,
          97,
          100,
          40,
          98,
          44,
          32,
          97,
          44,
          32,
          99,
          44,
          32,
          100,
          44,
          32,
          101,
          44,
          32,
          102,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          103,
          32,
          61,
          32,
          90,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          114,
          121,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          84,
          46,
          103,
          101,
          116,
          40,
          98,
          41,
          40,
          97,
          44,
          32,
          99,
          44,
          32,
          100,
          44,
          32,
          101,
          44,
          32,
          102,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          32,
          99,
          97,
          116,
          99,
          104,
          32,
          40,
          104,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          89,
          40,
          103,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          104,
          32,
          33,
          61,
          61,
          32,
          104,
          32,
          43,
          32,
          48,
          41,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          104,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          87,
          40,
          49,
          44,
          32,
          48,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          117,
          110,
          99,
          116,
          105,
          111,
          110,
          32,
          108,
          100,
          40,
          98,
          44,
          32,
          97,
          44,
          32,
          99,
          44,
          32,
          100,
          44,
          32,
          101,
          44,
          32,
          102,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          103,
          32,
          61,
          32,
          90,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          114,
          121,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          84,
          46,
          103,
          101,
          116,
          40,
          98,
          41,
          40,
          97,
          44,
          32,
          99,
          44,
          32,
          100,
          44,
          32,
          101,
          44,
          32,
          102,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          32,
          99,
          97,
          116,
          99,
          104,
          32,
          40,
          104,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          89,
          40,
          103,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          104,
          32,
          33,
          61,
          61,
          32,
          104,
          32,
          43,
          32,
          48,
          41,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          104,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          87,
          40,
          49,
          44,
          32,
          48,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          117,
          110,
          99,
          116,
          105,
          111,
          110,
          32,
          109,
          100,
          40,
          98,
          44,
          32,
          97,
          44,
          32,
          99,
          44,
          32,
          100,
          44,
          32,
          101,
          44,
          32,
          102,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          103,
          32,
          61,
          32,
          90,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          114,
          121,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          84,
          46,
          103,
          101,
          116,
          40,
          98,
          41,
          40,
          97,
          44,
          32,
          99,
          44,
          32,
          100,
          44,
          32,
          101,
          44,
          32,
          102,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          32,
          99,
          97,
          116,
          99,
          104,
          32,
          40,
          104,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          89,
          40,
          103,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          104,
          32,
          33,
          61,
          61,
          32,
          104,
          32,
          43,
          32,
          48,
          41,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          104,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          87,
          40,
          49,
          44,
          32,
          48,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          117,
          110,
          99,
          116,
          105,
          111,
          110,
          32,
          104,
          100,
          40,
          98,
          44,
          32,
          97,
          44,
          32,
          99,
          44,
          32,
          100,
          44,
          32,
          101,
          44,
          32,
          102,
          44,
          32,
          103,
          44,
          32,
          104,
          44,
          32,
          107,
          44,
          32,
          108,
          44,
          32,
          109,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          117,
          32,
          61,
          32,
          90,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          114,
          121,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          84,
          46,
          103,
          101,
          116,
          40,
          98,
          41,
          40,
          97,
          44,
          32,
          99,
          44,
          32,
          100,
          44,
          32,
          101,
          44,
          32,
          102,
          44,
          32,
          103,
          44,
          32,
          104,
          44,
          32,
          107,
          44,
          32,
          108,
          44,
          32,
          109,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          32,
          99,
          97,
          116,
          99,
          104,
          32,
          40,
          119,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          89,
          40,
          117,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          119,
          32,
          33,
          61,
          61,
          32,
          119,
          32,
          43,
          32,
          48,
          41,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          119,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          87,
          40,
          49,
          44,
          32,
          48,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          117,
          110,
          99,
          116,
          105,
          111,
          110,
          32,
          106,
          100,
          40,
          98,
          44,
          32,
          97,
          44,
          32,
          99,
          44,
          32,
          100,
          44,
          32,
          101,
          44,
          32,
          102,
          44,
          32,
          103,
          44,
          32,
          104,
          44,
          32,
          107,
          44,
          32,
          108,
          44,
          32,
          109,
          44,
          32,
          117,
          44,
          32,
          119,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          121,
          32,
          61,
          32,
          90,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          114,
          121,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          84,
          46,
          103,
          101,
          116,
          40,
          98,
          41,
          40,
          97,
          44,
          32,
          99,
          44,
          32,
          100,
          44,
          32,
          101,
          44,
          32,
          102,
          44,
          32,
          103,
          44,
          32,
          104,
          44,
          32,
          107,
          44,
          32,
          108,
          44,
          32,
          109,
          44,
          32,
          117,
          44,
          32,
          119,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          32,
          99,
          97,
          116,
          99,
          104,
          32,
          40,
          122,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          89,
          40,
          121,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          122,
          32,
          33,
          61,
          61,
          32,
          122,
          32,
          43,
          32,
          48,
          41,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          122,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          87,
          40,
          49,
          44,
          32,
          48,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          117,
          110,
          99,
          116,
          105,
          111,
          110,
          32,
          74,
          99,
          40,
          98,
          44,
          32,
          97,
          44,
          32,
          99,
          44,
          32,
          100,
          44,
          32,
          101,
          44,
          32,
          102,
          44,
          32,
          103,
          44,
          32,
          104,
          44,
          32,
          107,
          44,
          32,
          108,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          109,
          32,
          61,
          32,
          90,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          114,
          121,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          84,
          46,
          103,
          101,
          116,
          40,
          98,
          41,
          40,
          97,
          44,
          32,
          99,
          44,
          32,
          100,
          44,
          32,
          101,
          44,
          32,
          102,
          44,
          32,
          103,
          44,
          32,
          104,
          44,
          32,
          107,
          44,
          32,
          108,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          32,
          99,
          97,
          116,
          99,
          104,
          32,
          40,
          117,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          89,
          40,
          109,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          117,
          32,
          33,
          61,
          61,
          32,
          117,
          32,
          43,
          32,
          48,
          41,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          117,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          87,
          40,
          49,
          44,
          32,
          48,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          117,
          110,
          99,
          116,
          105,
          111,
          110,
          32,
          73,
          99,
          40,
          98,
          44,
          32,
          97,
          44,
          32,
          99,
          44,
          32,
          100,
          44,
          32,
          101,
          44,
          32,
          102,
          44,
          32,
          103,
          44,
          32,
          104,
          44,
          32,
          107,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          108,
          32,
          61,
          32,
          90,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          114,
          121,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          84,
          46,
          103,
          101,
          116,
          40,
          98,
          41,
          40,
          97,
          44,
          32,
          99,
          44,
          32,
          100,
          44,
          32,
          101,
          44,
          32,
          102,
          44,
          32,
          103,
          44,
          32,
          104,
          44,
          32,
          107,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          32,
          99,
          97,
          116,
          99,
          104,
          32,
          40,
          109,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          89,
          40,
          108,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          109,
          32,
          33,
          61,
          61,
          32,
          109,
          32,
          43,
          32,
          48,
          41,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          109,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          87,
          40,
          49,
          44,
          32,
          48,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          117,
          110,
          99,
          116,
          105,
          111,
          110,
          32,
          113,
          100,
          40,
          98,
          44,
          32,
          97,
          44,
          32,
          99,
          44,
          32,
          100,
          44,
          32,
          101,
          44,
          32,
          102,
          44,
          32,
          103,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          104,
          32,
          61,
          32,
          90,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          114,
          121,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          84,
          46,
          103,
          101,
          116,
          40,
          98,
          41,
          40,
          97,
          44,
          32,
          99,
          44,
          32,
          100,
          44,
          32,
          101,
          44,
          32,
          102,
          44,
          32,
          103,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          32,
          99,
          97,
          116,
          99,
          104,
          32,
          40,
          107,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          89,
          40,
          104,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          107,
          32,
          33,
          61,
          61,
          32,
          107,
          32,
          43,
          32,
          48,
          41,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          107,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          87,
          40,
          49,
          44,
          32,
          48,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          117,
          110,
          99,
          116,
          105,
          111,
          110,
          32,
          72,
          99,
          40,
          98,
          44,
          32,
          97,
          44,
          32,
          99,
          44,
          32,
          100,
          44,
          32,
          101,
          44,
          32,
          102,
          44,
          32,
          103,
          44,
          32,
          104,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          107,
          32,
          61,
          32,
          90,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          114,
          121,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          84,
          46,
          103,
          101,
          116,
          40,
          98,
          41,
          40,
          97,
          44,
          32,
          99,
          44,
          32,
          100,
          44,
          32,
          101,
          44,
          32,
          102,
          44,
          32,
          103,
          44,
          32,
          104,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          32,
          99,
          97,
          116,
          99,
          104,
          32,
          40,
          108,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          89,
          40,
          107,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          108,
          32,
          33,
          61,
          61,
          32,
          108,
          32,
          43,
          32,
          48,
          41,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          108,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          87,
          40,
          49,
          44,
          32,
          48,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          117,
          110,
          99,
          116,
          105,
          111,
          110,
          32,
          118,
          100,
          40,
          98,
          44,
          32,
          97,
          44,
          32,
          99,
          44,
          32,
          100,
          44,
          32,
          101,
          44,
          32,
          102,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          103,
          32,
          61,
          32,
          90,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          114,
          121,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          84,
          46,
          103,
          101,
          116,
          40,
          98,
          41,
          40,
          97,
          44,
          32,
          99,
          44,
          32,
          100,
          44,
          32,
          101,
          44,
          32,
          102,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          32,
          99,
          97,
          116,
          99,
          104,
          32,
          40,
          104,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          89,
          40,
          103,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          104,
          32,
          33,
          61,
          61,
          32,
          104,
          32,
          43,
          32,
          48,
          41,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          104,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          87,
          40,
          49,
          44,
          32,
          48,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          117,
          110,
          99,
          116,
          105,
          111,
          110,
          32,
          111,
          99,
          40,
          98,
          44,
          32,
          97,
          44,
          32,
          99,
          44,
          32,
          100,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          101,
          32,
          61,
          32,
          90,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          114,
          121,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          84,
          46,
          103,
          101,
          116,
          40,
          98,
          41,
          40,
          97,
          44,
          32,
          99,
          44,
          32,
          100,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          32,
          99,
          97,
          116,
          99,
          104,
          32,
          40,
          102,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          89,
          40,
          101,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          102,
          32,
          33,
          61,
          61,
          32,
          102,
          32,
          43,
          32,
          48,
          41,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          102,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          87,
          40,
          49,
          44,
          32,
          48,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          117,
          110,
          99,
          116,
          105,
          111,
          110,
          32,
          110,
          99,
          40,
          98,
          44,
          32,
          97,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          99,
          32,
          61,
          32,
          90,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          114,
          121,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          84,
          46,
          103,
          101,
          116,
          40,
          98,
          41,
          40,
          97,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          32,
          99,
          97,
          116,
          99,
          104,
          32,
          40,
          100,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          89,
          40,
          99,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          100,
          32,
          33,
          61,
          61,
          32,
          100,
          32,
          43,
          32,
          48,
          41,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          100,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          87,
          40,
          49,
          44,
          32,
          48,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          117,
          110,
          99,
          116,
          105,
          111,
          110,
          32,
          112,
          99,
          40,
          98,
          44,
          32,
          97,
          44,
          32,
          99,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          100,
          32,
          61,
          32,
          90,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          114,
          121,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          84,
          46,
          103,
          101,
          116,
          40,
          98,
          41,
          40,
          97,
          44,
          32,
          99,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          32,
          99,
          97,
          116,
          99,
          104,
          32,
          40,
          101,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          89,
          40,
          100,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          101,
          32,
          33,
          61,
          61,
          32,
          101,
          32,
          43,
          32,
          48,
          41,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          101,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          87,
          40,
          49,
          44,
          32,
          48,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          117,
          110,
          99,
          116,
          105,
          111,
          110,
          32,
          121,
          100,
          40,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          117,
          110,
          99,
          116,
          105,
          111,
          110,
          32,
          98,
          40,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          110,
          46,
          99,
          97,
          108,
          108,
          101,
          100,
          82,
          117,
          110,
          32,
          61,
          32,
          116,
          114,
          117,
          101,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          33,
          109,
          97,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          88,
          46,
          108,
          98,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          97,
          97,
          40,
          110,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          110,
          46,
          111,
          110,
          82,
          117,
          110,
          116,
          105,
          109,
          101,
          73,
          110,
          105,
          116,
          105,
          97,
          108,
          105,
          122,
          101,
          100,
          63,
          46,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          110,
          46,
          112,
          111,
          115,
          116,
          82,
          117,
          110,
          41,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          111,
          114,
          32,
          40,
          34,
          102,
          117,
          110,
          99,
          116,
          105,
          111,
          110,
          34,
          32,
          61,
          61,
          32,
          116,
          121,
          112,
          101,
          111,
          102,
          32,
          110,
          46,
          112,
          111,
          115,
          116,
          82,
          117,
          110,
          32,
          38,
          38,
          32,
          40,
          110,
          46,
          112,
          111,
          115,
          116,
          82,
          117,
          110,
          32,
          61,
          32,
          91,
          110,
          46,
          112,
          111,
          115,
          116,
          82,
          117,
          110,
          93,
          41,
          59,
          32,
          110,
          46,
          112,
          111,
          115,
          116,
          82,
          117,
          110,
          46,
          108,
          101,
          110,
          103,
          116,
          104,
          59,
          32,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          118,
          97,
          114,
          32,
          97,
          32,
          61,
          32,
          110,
          46,
          112,
          111,
          115,
          116,
          82,
          117,
          110,
          46,
          115,
          104,
          105,
          102,
          116,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          65,
          97,
          46,
          112,
          117,
          115,
          104,
          40,
          97,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          122,
          97,
          40,
          65,
          97,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          48,
          32,
          60,
          32,
          67,
          41,
          32,
          68,
          32,
          61,
          32,
          121,
          100,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          101,
          108,
          115,
          101,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          110,
          46,
          112,
          114,
          101,
          82,
          117,
          110,
          41,
          32,
          102,
          111,
          114,
          32,
          40,
          34,
          102,
          117,
          110,
          99,
          116,
          105,
          111,
          110,
          34,
          32,
          61,
          61,
          32,
          116,
          121,
          112,
          101,
          111,
          102,
          32,
          110,
          46,
          112,
          114,
          101,
          82,
          117,
          110,
          32,
          38,
          38,
          32,
          40,
          110,
          46,
          112,
          114,
          101,
          82,
          117,
          110,
          32,
          61,
          32,
          91,
          110,
          46,
          112,
          114,
          101,
          82,
          117,
          110,
          93,
          41,
          59,
          32,
          110,
          46,
          112,
          114,
          101,
          82,
          117,
          110,
          46,
          108,
          101,
          110,
          103,
          116,
          104,
          59,
          32,
          41,
          32,
          67,
          97,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          122,
          97,
          40,
          66,
          97,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          48,
          32,
          60,
          32,
          67,
          32,
          63,
          32,
          68,
          32,
          61,
          32,
          121,
          100,
          32,
          58,
          32,
          110,
          46,
          115,
          101,
          116,
          83,
          116,
          97,
          116,
          117,
          115,
          32,
          63,
          32,
          40,
          110,
          46,
          115,
          101,
          116,
          83,
          116,
          97,
          116,
          117,
          115,
          40,
          34,
          82,
          117,
          110,
          110,
          105,
          110,
          103,
          46,
          46,
          46,
          34,
          41,
          44,
          32,
          115,
          101,
          116,
          84,
          105,
          109,
          101,
          111,
          117,
          116,
          40,
          40,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          115,
          101,
          116,
          84,
          105,
          109,
          101,
          111,
          117,
          116,
          40,
          40,
          41,
          32,
          61,
          62,
          32,
          110,
          46,
          115,
          101,
          116,
          83,
          116,
          97,
          116,
          117,
          115,
          40,
          34,
          34,
          41,
          44,
          32,
          49,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          98,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          44,
          32,
          49,
          41,
          41,
          32,
          58,
          32,
          98,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          110,
          46,
          112,
          114,
          101,
          73,
          110,
          105,
          116,
          41,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          111,
          114,
          32,
          40,
          34,
          102,
          117,
          110,
          99,
          116,
          105,
          111,
          110,
          34,
          32,
          61,
          61,
          32,
          116,
          121,
          112,
          101,
          111,
          102,
          32,
          110,
          46,
          112,
          114,
          101,
          73,
          110,
          105,
          116,
          32,
          38,
          38,
          32,
          40,
          110,
          46,
          112,
          114,
          101,
          73,
          110,
          105,
          116,
          32,
          61,
          32,
          91,
          110,
          46,
          112,
          114,
          101,
          73,
          110,
          105,
          116,
          93,
          41,
          59,
          32,
          48,
          32,
          60,
          32,
          110,
          46,
          112,
          114,
          101,
          73,
          110,
          105,
          116,
          46,
          108,
          101,
          110,
          103,
          116,
          104,
          59,
          32,
          41,
          32,
          110,
          46,
          112,
          114,
          101,
          73,
          110,
          105,
          116,
          46,
          115,
          104,
          105,
          102,
          116,
          40,
          41,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          121,
          100,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          109,
          111,
          100,
          117,
          108,
          101,
          82,
          116,
          110,
          32,
          61,
          32,
          99,
          97,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          109,
          111,
          100,
          117,
          108,
          101,
          82,
          116,
          110,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          59,
          10,
          32,
          32,
          125,
          41,
          40,
          41,
          59,
          10,
          32,
          32,
          118,
          97,
          114,
          32,
          100,
          111,
          116,
          108,
          111,
          116,
          116,
          105,
          101,
          95,
          112,
          108,
          97,
          121,
          101,
          114,
          95,
          100,
          101,
          102,
          97,
          117,
          108,
          116,
          32,
          61,
          32,
          99,
          114,
          101,
          97,
          116,
          101,
          68,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          80,
          108,
          97,
          121,
          101,
          114,
          77,
          111,
          100,
          117,
          108,
          101,
          59,
          10,
          10,
          32,
          32,
          47,
          47,
          32,
          115,
          114,
          99,
          47,
          99,
          111,
          114,
          101,
          47,
          100,
          111,
          116,
          108,
          111,
          116,
          116,
          105,
          101,
          45,
          119,
          97,
          115,
          109,
          45,
          108,
          111,
          97,
          100,
          101,
          114,
          46,
          116,
          115,
          10,
          32,
          32,
          118,
          97,
          114,
          32,
          68,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          87,
          97,
          115,
          109,
          76,
          111,
          97,
          100,
          101,
          114,
          32,
          61,
          32,
          99,
          108,
          97,
          115,
          115,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          114,
          117,
          99,
          116,
          111,
          114,
          40,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          110,
          101,
          119,
          32,
          69,
          114,
          114,
          111,
          114,
          40,
          34,
          82,
          101,
          110,
          100,
          101,
          114,
          101,
          114,
          76,
          111,
          97,
          100,
          101,
          114,
          32,
          105,
          115,
          32,
          97,
          32,
          115,
          116,
          97,
          116,
          105,
          99,
          32,
          99,
          108,
          97,
          115,
          115,
          32,
          97,
          110,
          100,
          32,
          99,
          97,
          110,
          110,
          111,
          116,
          32,
          98,
          101,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          116,
          105,
          97,
          116,
          101,
          100,
          46,
          34,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          115,
          116,
          97,
          116,
          105,
          99,
          32,
          97,
          115,
          121,
          110,
          99,
          32,
          95,
          116,
          114,
          121,
          76,
          111,
          97,
          100,
          40,
          117,
          114,
          108,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          109,
          111,
          100,
          117,
          108,
          101,
          32,
          61,
          32,
          97,
          119,
          97,
          105,
          116,
          32,
          100,
          111,
          116,
          108,
          111,
          116,
          116,
          105,
          101,
          95,
          112,
          108,
          97,
          121,
          101,
          114,
          95,
          100,
          101,
          102,
          97,
          117,
          108,
          116,
          40,
          123,
          32,
          108,
          111,
          99,
          97,
          116,
          101,
          70,
          105,
          108,
          101,
          58,
          32,
          40,
          41,
          32,
          61,
          62,
          32,
          117,
          114,
          108,
          32,
          125,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          109,
          111,
          100,
          117,
          108,
          101,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          47,
          42,
          42,
          10,
          32,
          32,
          32,
          32,
          32,
          42,
          32,
          84,
          114,
          105,
          101,
          115,
          32,
          116,
          111,
          32,
          108,
          111,
          97,
          100,
          32,
          116,
          104,
          101,
          32,
          87,
          65,
          83,
          77,
          32,
          109,
          111,
          100,
          117,
          108,
          101,
          32,
          102,
          114,
          111,
          109,
          32,
          116,
          104,
          101,
          32,
          112,
          114,
          105,
          109,
          97,
          114,
          121,
          32,
          85,
          82,
          76,
          44,
          32,
          102,
          97,
          108,
          108,
          105,
          110,
          103,
          32,
          98,
          97,
          99,
          107,
          32,
          116,
          111,
          32,
          97,
          32,
          98,
          97,
          99,
          107,
          117,
          112,
          32,
          85,
          82,
          76,
          32,
          105,
          102,
          32,
          110,
          101,
          99,
          101,
          115,
          115,
          97,
          114,
          121,
          46,
          10,
          32,
          32,
          32,
          32,
          32,
          42,
          32,
          84,
          104,
          114,
          111,
          119,
          115,
          32,
          97,
          110,
          32,
          101,
          114,
          114,
          111,
          114,
          32,
          105,
          102,
          32,
          98,
          111,
          116,
          104,
          32,
          85,
          82,
          76,
          115,
          32,
          102,
          97,
          105,
          108,
          32,
          116,
          111,
          32,
          108,
          111,
          97,
          100,
          32,
          116,
          104,
          101,
          32,
          109,
          111,
          100,
          117,
          108,
          101,
          46,
          10,
          32,
          32,
          32,
          32,
          32,
          42,
          32,
          64,
          114,
          101,
          116,
          117,
          114,
          110,
          115,
          32,
          80,
          114,
          111,
          109,
          105,
          115,
          101,
          60,
          77,
          111,
          100,
          117,
          108,
          101,
          62,
          32,
          45,
          32,
          65,
          32,
          112,
          114,
          111,
          109,
          105,
          115,
          101,
          32,
          116,
          104,
          97,
          116,
          32,
          114,
          101,
          115,
          111,
          108,
          118,
          101,
          115,
          32,
          116,
          111,
          32,
          116,
          104,
          101,
          32,
          108,
          111,
          97,
          100,
          101,
          100,
          32,
          109,
          111,
          100,
          117,
          108,
          101,
          46,
          10,
          32,
          32,
          32,
          32,
          32,
          42,
          47,
          10,
          32,
          32,
          32,
          32,
          115,
          116,
          97,
          116,
          105,
          99,
          32,
          97,
          115,
          121,
          110,
          99,
          32,
          95,
          108,
          111,
          97,
          100,
          87,
          105,
          116,
          104,
          66,
          97,
          99,
          107,
          117,
          112,
          40,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          33,
          116,
          104,
          105,
          115,
          46,
          95,
          77,
          111,
          100,
          117,
          108,
          101,
          80,
          114,
          111,
          109,
          105,
          115,
          101,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          77,
          111,
          100,
          117,
          108,
          101,
          80,
          114,
          111,
          109,
          105,
          115,
          101,
          32,
          61,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          116,
          114,
          121,
          76,
          111,
          97,
          100,
          40,
          116,
          104,
          105,
          115,
          46,
          95,
          119,
          97,
          115,
          109,
          85,
          82,
          76,
          41,
          46,
          99,
          97,
          116,
          99,
          104,
          40,
          97,
          115,
          121,
          110,
          99,
          32,
          40,
          105,
          110,
          105,
          116,
          105,
          97,
          108,
          69,
          114,
          114,
          111,
          114,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          98,
          97,
          99,
          107,
          117,
          112,
          85,
          114,
          108,
          32,
          61,
          32,
          96,
          104,
          116,
          116,
          112,
          115,
          58,
          47,
          47,
          117,
          110,
          112,
          107,
          103,
          46,
          99,
          111,
          109,
          47,
          36,
          123,
          80,
          65,
          67,
          75,
          65,
          71,
          69,
          95,
          78,
          65,
          77,
          69,
          125,
          64,
          36,
          123,
          80,
          65,
          67,
          75,
          65,
          71,
          69,
          95,
          86,
          69,
          82,
          83,
          73,
          79,
          78,
          125,
          47,
          100,
          105,
          115,
          116,
          47,
          100,
          111,
          116,
          108,
          111,
          116,
          116,
          105,
          101,
          45,
          112,
          108,
          97,
          121,
          101,
          114,
          46,
          119,
          97,
          115,
          109,
          96,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          111,
          108,
          101,
          46,
          119,
          97,
          114,
          110,
          40,
          96,
          80,
          114,
          105,
          109,
          97,
          114,
          121,
          32,
          87,
          65,
          83,
          77,
          32,
          108,
          111,
          97,
          100,
          32,
          102,
          97,
          105,
          108,
          101,
          100,
          32,
          102,
          114,
          111,
          109,
          32,
          36,
          123,
          116,
          104,
          105,
          115,
          46,
          95,
          119,
          97,
          115,
          109,
          85,
          82,
          76,
          125,
          46,
          32,
          69,
          114,
          114,
          111,
          114,
          58,
          32,
          36,
          123,
          105,
          110,
          105,
          116,
          105,
          97,
          108,
          69,
          114,
          114,
          111,
          114,
          46,
          109,
          101,
          115,
          115,
          97,
          103,
          101,
          125,
          96,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          111,
          108,
          101,
          46,
          119,
          97,
          114,
          110,
          40,
          96,
          65,
          116,
          116,
          101,
          109,
          112,
          116,
          105,
          110,
          103,
          32,
          116,
          111,
          32,
          108,
          111,
          97,
          100,
          32,
          87,
          65,
          83,
          77,
          32,
          102,
          114,
          111,
          109,
          32,
          98,
          97,
          99,
          107,
          117,
          112,
          32,
          85,
          82,
          76,
          58,
          32,
          36,
          123,
          98,
          97,
          99,
          107,
          117,
          112,
          85,
          114,
          108,
          125,
          96,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          114,
          121,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          97,
          119,
          97,
          105,
          116,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          116,
          114,
          121,
          76,
          111,
          97,
          100,
          40,
          98,
          97,
          99,
          107,
          117,
          112,
          85,
          114,
          108,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          32,
          99,
          97,
          116,
          99,
          104,
          32,
          40,
          98,
          97,
          99,
          107,
          117,
          112,
          69,
          114,
          114,
          111,
          114,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          111,
          108,
          101,
          46,
          101,
          114,
          114,
          111,
          114,
          40,
          96,
          80,
          114,
          105,
          109,
          97,
          114,
          121,
          32,
          87,
          65,
          83,
          77,
          32,
          85,
          82,
          76,
          32,
          102,
          97,
          105,
          108,
          101,
          100,
          58,
          32,
          36,
          123,
          105,
          110,
          105,
          116,
          105,
          97,
          108,
          69,
          114,
          114,
          111,
          114,
          46,
          109,
          101,
          115,
          115,
          97,
          103,
          101,
          125,
          96,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          111,
          108,
          101,
          46,
          101,
          114,
          114,
          111,
          114,
          40,
          96,
          66,
          97,
          99,
          107,
          117,
          112,
          32,
          87,
          65,
          83,
          77,
          32,
          85,
          82,
          76,
          32,
          102,
          97,
          105,
          108,
          101,
          100,
          58,
          32,
          36,
          123,
          98,
          97,
          99,
          107,
          117,
          112,
          69,
          114,
          114,
          111,
          114,
          46,
          109,
          101,
          115,
          115,
          97,
          103,
          101,
          125,
          96,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          110,
          101,
          119,
          32,
          69,
          114,
          114,
          111,
          114,
          40,
          34,
          87,
          65,
          83,
          77,
          32,
          108,
          111,
          97,
          100,
          105,
          110,
          103,
          32,
          102,
          97,
          105,
          108,
          101,
          100,
          32,
          102,
          114,
          111,
          109,
          32,
          97,
          108,
          108,
          32,
          115,
          111,
          117,
          114,
          99,
          101,
          115,
          46,
          34,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          77,
          111,
          100,
          117,
          108,
          101,
          80,
          114,
          111,
          109,
          105,
          115,
          101,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          47,
          42,
          42,
          10,
          32,
          32,
          32,
          32,
          32,
          42,
          32,
          80,
          117,
          98,
          108,
          105,
          99,
          32,
          109,
          101,
          116,
          104,
          111,
          100,
          32,
          116,
          111,
          32,
          108,
          111,
          97,
          100,
          32,
          116,
          104,
          101,
          32,
          87,
          101,
          98,
          65,
          115,
          115,
          101,
          109,
          98,
          108,
          121,
          32,
          109,
          111,
          100,
          117,
          108,
          101,
          46,
          10,
          32,
          32,
          32,
          32,
          32,
          42,
          32,
          85,
          116,
          105,
          108,
          105,
          122,
          101,
          115,
          32,
          97,
          32,
          112,
          114,
          105,
          109,
          97,
          114,
          121,
          32,
          97,
          110,
          100,
          32,
          98,
          97,
          99,
          107,
          117,
          112,
          32,
          85,
          82,
          76,
          32,
          102,
          111,
          114,
          32,
          114,
          111,
          98,
          117,
          115,
          116,
          110,
          101,
          115,
          115,
          46,
          10,
          32,
          32,
          32,
          32,
          32,
          42,
          32,
          64,
          114,
          101,
          116,
          117,
          114,
          110,
          115,
          32,
          80,
          114,
          111,
          109,
          105,
          115,
          101,
          60,
          77,
          111,
          100,
          117,
          108,
          101,
          62,
          32,
          45,
          32,
          65,
          32,
          112,
          114,
          111,
          109,
          105,
          115,
          101,
          32,
          116,
          104,
          97,
          116,
          32,
          114,
          101,
          115,
          111,
          108,
          118,
          101,
          115,
          32,
          116,
          111,
          32,
          116,
          104,
          101,
          32,
          108,
          111,
          97,
          100,
          101,
          100,
          32,
          109,
          111,
          100,
          117,
          108,
          101,
          46,
          10,
          32,
          32,
          32,
          32,
          32,
          42,
          47,
          10,
          32,
          32,
          32,
          32,
          115,
          116,
          97,
          116,
          105,
          99,
          32,
          97,
          115,
          121,
          110,
          99,
          32,
          108,
          111,
          97,
          100,
          40,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          108,
          111,
          97,
          100,
          87,
          105,
          116,
          104,
          66,
          97,
          99,
          107,
          117,
          112,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          47,
          42,
          42,
          10,
          32,
          32,
          32,
          32,
          32,
          42,
          32,
          83,
          101,
          116,
          115,
          32,
          97,
          32,
          110,
          101,
          119,
          32,
          85,
          82,
          76,
          32,
          102,
          111,
          114,
          32,
          116,
          104,
          101,
          32,
          87,
          65,
          83,
          77,
          32,
          102,
          105,
          108,
          101,
          32,
          97,
          110,
          100,
          32,
          105,
          110,
          118,
          97,
          108,
          105,
          100,
          97,
          116,
          101,
          115,
          32,
          116,
          104,
          101,
          32,
          99,
          117,
          114,
          114,
          101,
          110,
          116,
          32,
          109,
          111,
          100,
          117,
          108,
          101,
          32,
          112,
          114,
          111,
          109,
          105,
          115,
          101,
          46,
          10,
          32,
          32,
          32,
          32,
          32,
          42,
          10,
          32,
          32,
          32,
          32,
          32,
          42,
          32,
          64,
          112,
          97,
          114,
          97,
          109,
          32,
          115,
          116,
          114,
          105,
          110,
          103,
          32,
          45,
          32,
          32,
          84,
          104,
          101,
          32,
          110,
          101,
          119,
          32,
          85,
          82,
          76,
          32,
          102,
          111,
          114,
          32,
          116,
          104,
          101,
          32,
          87,
          65,
          83,
          77,
          32,
          102,
          105,
          108,
          101,
          46,
          10,
          32,
          32,
          32,
          32,
          32,
          42,
          47,
          10,
          32,
          32,
          32,
          32,
          115,
          116,
          97,
          116,
          105,
          99,
          32,
          115,
          101,
          116,
          87,
          97,
          115,
          109,
          85,
          114,
          108,
          40,
          117,
          114,
          108,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          117,
          114,
          108,
          32,
          61,
          61,
          61,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          119,
          97,
          115,
          109,
          85,
          82,
          76,
          41,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          119,
          97,
          115,
          109,
          85,
          82,
          76,
          32,
          61,
          32,
          117,
          114,
          108,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          77,
          111,
          100,
          117,
          108,
          101,
          80,
          114,
          111,
          109,
          105,
          115,
          101,
          32,
          61,
          32,
          110,
          117,
          108,
          108,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          125,
          59,
          10,
          32,
          32,
          47,
          47,
          32,
          101,
          115,
          108,
          105,
          110,
          116,
          45,
          100,
          105,
          115,
          97,
          98,
          108,
          101,
          45,
          110,
          101,
          120,
          116,
          45,
          108,
          105,
          110,
          101,
          32,
          64,
          116,
          121,
          112,
          101,
          115,
          99,
          114,
          105,
          112,
          116,
          45,
          101,
          115,
          108,
          105,
          110,
          116,
          47,
          110,
          97,
          109,
          105,
          110,
          103,
          45,
          99,
          111,
          110,
          118,
          101,
          110,
          116,
          105,
          111,
          110,
          10,
          32,
          32,
          95,
          95,
          112,
          117,
          98,
          108,
          105,
          99,
          70,
          105,
          101,
          108,
          100,
          40,
          68,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          87,
          97,
          115,
          109,
          76,
          111,
          97,
          100,
          101,
          114,
          44,
          32,
          34,
          95,
          77,
          111,
          100,
          117,
          108,
          101,
          80,
          114,
          111,
          109,
          105,
          115,
          101,
          34,
          44,
          32,
          110,
          117,
          108,
          108,
          41,
          59,
          10,
          32,
          32,
          47,
          47,
          32,
          85,
          82,
          76,
          32,
          102,
          111,
          114,
          32,
          116,
          104,
          101,
          32,
          87,
          65,
          83,
          77,
          32,
          102,
          105,
          108,
          101,
          44,
          32,
          99,
          111,
          110,
          115,
          116,
          114,
          117,
          99,
          116,
          101,
          100,
          32,
          117,
          115,
          105,
          110,
          103,
          32,
          112,
          97,
          99,
          107,
          97,
          103,
          101,
          32,
          105,
          110,
          102,
          111,
          114,
          109,
          97,
          116,
          105,
          111,
          110,
          10,
          32,
          32,
          95,
          95,
          112,
          117,
          98,
          108,
          105,
          99,
          70,
          105,
          101,
          108,
          100,
          40,
          68,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          87,
          97,
          115,
          109,
          76,
          111,
          97,
          100,
          101,
          114,
          44,
          32,
          34,
          95,
          119,
          97,
          115,
          109,
          85,
          82,
          76,
          34,
          44,
          32,
          96,
          104,
          116,
          116,
          112,
          115,
          58,
          47,
          47,
          99,
          100,
          110,
          46,
          106,
          115,
          100,
          101,
          108,
          105,
          118,
          114,
          46,
          110,
          101,
          116,
          47,
          110,
          112,
          109,
          47,
          36,
          123,
          80,
          65,
          67,
          75,
          65,
          71,
          69,
          95,
          78,
          65,
          77,
          69,
          125,
          64,
          36,
          123,
          80,
          65,
          67,
          75,
          65,
          71,
          69,
          95,
          86,
          69,
          82,
          83,
          73,
          79,
          78,
          125,
          47,
          100,
          105,
          115,
          116,
          47,
          100,
          111,
          116,
          108,
          111,
          116,
          116,
          105,
          101,
          45,
          112,
          108,
          97,
          121,
          101,
          114,
          46,
          119,
          97,
          115,
          109,
          96,
          41,
          59,
          10,
          10,
          32,
          32,
          47,
          47,
          32,
          115,
          114,
          99,
          47,
          101,
          118,
          101,
          110,
          116,
          45,
          109,
          97,
          110,
          97,
          103,
          101,
          114,
          46,
          116,
          115,
          10,
          32,
          32,
          118,
          97,
          114,
          32,
          69,
          118,
          101,
          110,
          116,
          77,
          97,
          110,
          97,
          103,
          101,
          114,
          32,
          61,
          32,
          99,
          108,
          97,
          115,
          115,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          114,
          117,
          99,
          116,
          111,
          114,
          40,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          95,
          95,
          112,
          117,
          98,
          108,
          105,
          99,
          70,
          105,
          101,
          108,
          100,
          40,
          116,
          104,
          105,
          115,
          44,
          32,
          34,
          95,
          101,
          118,
          101,
          110,
          116,
          76,
          105,
          115,
          116,
          101,
          110,
          101,
          114,
          115,
          34,
          44,
          32,
          47,
          42,
          32,
          64,
          95,
          95,
          80,
          85,
          82,
          69,
          95,
          95,
          32,
          42,
          47,
          32,
          110,
          101,
          119,
          32,
          77,
          97,
          112,
          40,
          41,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          97,
          100,
          100,
          69,
          118,
          101,
          110,
          116,
          76,
          105,
          115,
          116,
          101,
          110,
          101,
          114,
          40,
          116,
          121,
          112,
          101,
          44,
          32,
          108,
          105,
          115,
          116,
          101,
          110,
          101,
          114,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          108,
          101,
          116,
          32,
          108,
          105,
          115,
          116,
          101,
          110,
          101,
          114,
          115,
          32,
          61,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          101,
          118,
          101,
          110,
          116,
          76,
          105,
          115,
          116,
          101,
          110,
          101,
          114,
          115,
          46,
          103,
          101,
          116,
          40,
          116,
          121,
          112,
          101,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          33,
          108,
          105,
          115,
          116,
          101,
          110,
          101,
          114,
          115,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          108,
          105,
          115,
          116,
          101,
          110,
          101,
          114,
          115,
          32,
          61,
          32,
          47,
          42,
          32,
          64,
          95,
          95,
          80,
          85,
          82,
          69,
          95,
          95,
          32,
          42,
          47,
          32,
          110,
          101,
          119,
          32,
          83,
          101,
          116,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          101,
          118,
          101,
          110,
          116,
          76,
          105,
          115,
          116,
          101,
          110,
          101,
          114,
          115,
          46,
          115,
          101,
          116,
          40,
          116,
          121,
          112,
          101,
          44,
          32,
          108,
          105,
          115,
          116,
          101,
          110,
          101,
          114,
          115,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          108,
          105,
          115,
          116,
          101,
          110,
          101,
          114,
          115,
          46,
          97,
          100,
          100,
          40,
          108,
          105,
          115,
          116,
          101,
          110,
          101,
          114,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          114,
          101,
          109,
          111,
          118,
          101,
          69,
          118,
          101,
          110,
          116,
          76,
          105,
          115,
          116,
          101,
          110,
          101,
          114,
          40,
          116,
          121,
          112,
          101,
          44,
          32,
          108,
          105,
          115,
          116,
          101,
          110,
          101,
          114,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          108,
          105,
          115,
          116,
          101,
          110,
          101,
          114,
          115,
          32,
          61,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          101,
          118,
          101,
          110,
          116,
          76,
          105,
          115,
          116,
          101,
          110,
          101,
          114,
          115,
          46,
          103,
          101,
          116,
          40,
          116,
          121,
          112,
          101,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          33,
          108,
          105,
          115,
          116,
          101,
          110,
          101,
          114,
          115,
          41,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          108,
          105,
          115,
          116,
          101,
          110,
          101,
          114,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          108,
          105,
          115,
          116,
          101,
          110,
          101,
          114,
          115,
          46,
          100,
          101,
          108,
          101,
          116,
          101,
          40,
          108,
          105,
          115,
          116,
          101,
          110,
          101,
          114,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          108,
          105,
          115,
          116,
          101,
          110,
          101,
          114,
          115,
          46,
          115,
          105,
          122,
          101,
          32,
          61,
          61,
          61,
          32,
          48,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          101,
          118,
          101,
          110,
          116,
          76,
          105,
          115,
          116,
          101,
          110,
          101,
          114,
          115,
          46,
          100,
          101,
          108,
          101,
          116,
          101,
          40,
          116,
          121,
          112,
          101,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          32,
          101,
          108,
          115,
          101,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          101,
          118,
          101,
          110,
          116,
          76,
          105,
          115,
          116,
          101,
          110,
          101,
          114,
          115,
          46,
          100,
          101,
          108,
          101,
          116,
          101,
          40,
          116,
          121,
          112,
          101,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          100,
          105,
          115,
          112,
          97,
          116,
          99,
          104,
          40,
          101,
          118,
          101,
          110,
          116,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          108,
          105,
          115,
          116,
          101,
          110,
          101,
          114,
          115,
          32,
          61,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          101,
          118,
          101,
          110,
          116,
          76,
          105,
          115,
          116,
          101,
          110,
          101,
          114,
          115,
          46,
          103,
          101,
          116,
          40,
          101,
          118,
          101,
          110,
          116,
          46,
          116,
          121,
          112,
          101,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          108,
          105,
          115,
          116,
          101,
          110,
          101,
          114,
          115,
          63,
          46,
          102,
          111,
          114,
          69,
          97,
          99,
          104,
          40,
          40,
          108,
          105,
          115,
          116,
          101,
          110,
          101,
          114,
          41,
          32,
          61,
          62,
          32,
          108,
          105,
          115,
          116,
          101,
          110,
          101,
          114,
          40,
          101,
          118,
          101,
          110,
          116,
          41,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          114,
          101,
          109,
          111,
          118,
          101,
          65,
          108,
          108,
          69,
          118,
          101,
          110,
          116,
          76,
          105,
          115,
          116,
          101,
          110,
          101,
          114,
          115,
          40,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          101,
          118,
          101,
          110,
          116,
          76,
          105,
          115,
          116,
          101,
          110,
          101,
          114,
          115,
          46,
          99,
          108,
          101,
          97,
          114,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          125,
          59,
          10,
          10,
          32,
          32,
          47,
          47,
          32,
          115,
          114,
          99,
          47,
          111,
          102,
          102,
          115,
          99,
          114,
          101,
          101,
          110,
          45,
          111,
          98,
          115,
          101,
          114,
          118,
          101,
          114,
          46,
          116,
          115,
          10,
          32,
          32,
          118,
          97,
          114,
          32,
          79,
          102,
          102,
          115,
          99,
          114,
          101,
          101,
          110,
          79,
          98,
          115,
          101,
          114,
          118,
          101,
          114,
          32,
          61,
          32,
          99,
          108,
          97,
          115,
          115,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          115,
          116,
          97,
          116,
          105,
          99,
          32,
          95,
          105,
          110,
          105,
          116,
          105,
          97,
          108,
          105,
          122,
          101,
          79,
          98,
          115,
          101,
          114,
          118,
          101,
          114,
          40,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          116,
          104,
          105,
          115,
          46,
          95,
          111,
          98,
          115,
          101,
          114,
          118,
          101,
          114,
          41,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          105,
          110,
          116,
          101,
          114,
          115,
          101,
          99,
          116,
          105,
          111,
          110,
          79,
          98,
          115,
          101,
          114,
          118,
          101,
          114,
          67,
          97,
          108,
          108,
          98,
          97,
          99,
          107,
          32,
          61,
          32,
          40,
          101,
          110,
          116,
          114,
          105,
          101,
          115,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          101,
          110,
          116,
          114,
          105,
          101,
          115,
          46,
          102,
          111,
          114,
          69,
          97,
          99,
          104,
          40,
          40,
          101,
          110,
          116,
          114,
          121,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          32,
          61,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          111,
          98,
          115,
          101,
          114,
          118,
          101,
          100,
          67,
          97,
          110,
          118,
          97,
          115,
          101,
          115,
          46,
          103,
          101,
          116,
          40,
          101,
          110,
          116,
          114,
          121,
          46,
          116,
          97,
          114,
          103,
          101,
          116,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          101,
          110,
          116,
          114,
          121,
          46,
          105,
          115,
          73,
          110,
          116,
          101,
          114,
          115,
          101,
          99,
          116,
          105,
          110,
          103,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          46,
          117,
          110,
          102,
          114,
          101,
          101,
          122,
          101,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          32,
          101,
          108,
          115,
          101,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          46,
          102,
          114,
          101,
          101,
          122,
          101,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          111,
          98,
          115,
          101,
          114,
          118,
          101,
          114,
          32,
          61,
          32,
          110,
          101,
          119,
          32,
          73,
          110,
          116,
          101,
          114,
          115,
          101,
          99,
          116,
          105,
          111,
          110,
          79,
          98,
          115,
          101,
          114,
          118,
          101,
          114,
          40,
          105,
          110,
          116,
          101,
          114,
          115,
          101,
          99,
          116,
          105,
          111,
          110,
          79,
          98,
          115,
          101,
          114,
          118,
          101,
          114,
          67,
          97,
          108,
          108,
          98,
          97,
          99,
          107,
          44,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          114,
          101,
          115,
          104,
          111,
          108,
          100,
          58,
          32,
          48,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          115,
          116,
          97,
          116,
          105,
          99,
          32,
          111,
          98,
          115,
          101,
          114,
          118,
          101,
          40,
          99,
          97,
          110,
          118,
          97,
          115,
          44,
          32,
          100,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          73,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          105,
          110,
          105,
          116,
          105,
          97,
          108,
          105,
          122,
          101,
          79,
          98,
          115,
          101,
          114,
          118,
          101,
          114,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          116,
          104,
          105,
          115,
          46,
          95,
          111,
          98,
          115,
          101,
          114,
          118,
          101,
          100,
          67,
          97,
          110,
          118,
          97,
          115,
          101,
          115,
          46,
          104,
          97,
          115,
          40,
          99,
          97,
          110,
          118,
          97,
          115,
          41,
          41,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          111,
          98,
          115,
          101,
          114,
          118,
          101,
          100,
          67,
          97,
          110,
          118,
          97,
          115,
          101,
          115,
          46,
          115,
          101,
          116,
          40,
          99,
          97,
          110,
          118,
          97,
          115,
          44,
          32,
          100,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          73,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          111,
          98,
          115,
          101,
          114,
          118,
          101,
          114,
          63,
          46,
          111,
          98,
          115,
          101,
          114,
          118,
          101,
          40,
          99,
          97,
          110,
          118,
          97,
          115,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          115,
          116,
          97,
          116,
          105,
          99,
          32,
          117,
          110,
          111,
          98,
          115,
          101,
          114,
          118,
          101,
          40,
          99,
          97,
          110,
          118,
          97,
          115,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          111,
          98,
          115,
          101,
          114,
          118,
          101,
          114,
          63,
          46,
          117,
          110,
          111,
          98,
          115,
          101,
          114,
          118,
          101,
          40,
          99,
          97,
          110,
          118,
          97,
          115,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          111,
          98,
          115,
          101,
          114,
          118,
          101,
          100,
          67,
          97,
          110,
          118,
          97,
          115,
          101,
          115,
          46,
          100,
          101,
          108,
          101,
          116,
          101,
          40,
          99,
          97,
          110,
          118,
          97,
          115,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          116,
          104,
          105,
          115,
          46,
          95,
          111,
          98,
          115,
          101,
          114,
          118,
          101,
          100,
          67,
          97,
          110,
          118,
          97,
          115,
          101,
          115,
          46,
          115,
          105,
          122,
          101,
          32,
          61,
          61,
          61,
          32,
          48,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          111,
          98,
          115,
          101,
          114,
          118,
          101,
          114,
          63,
          46,
          100,
          105,
          115,
          99,
          111,
          110,
          110,
          101,
          99,
          116,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          111,
          98,
          115,
          101,
          114,
          118,
          101,
          114,
          32,
          61,
          32,
          110,
          117,
          108,
          108,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          125,
          59,
          10,
          32,
          32,
          95,
          95,
          112,
          117,
          98,
          108,
          105,
          99,
          70,
          105,
          101,
          108,
          100,
          40,
          79,
          102,
          102,
          115,
          99,
          114,
          101,
          101,
          110,
          79,
          98,
          115,
          101,
          114,
          118,
          101,
          114,
          44,
          32,
          34,
          95,
          111,
          98,
          115,
          101,
          114,
          118,
          101,
          114,
          34,
          44,
          32,
          110,
          117,
          108,
          108,
          41,
          59,
          10,
          32,
          32,
          95,
          95,
          112,
          117,
          98,
          108,
          105,
          99,
          70,
          105,
          101,
          108,
          100,
          40,
          79,
          102,
          102,
          115,
          99,
          114,
          101,
          101,
          110,
          79,
          98,
          115,
          101,
          114,
          118,
          101,
          114,
          44,
          32,
          34,
          95,
          111,
          98,
          115,
          101,
          114,
          118,
          101,
          100,
          67,
          97,
          110,
          118,
          97,
          115,
          101,
          115,
          34,
          44,
          32,
          47,
          42,
          32,
          64,
          95,
          95,
          80,
          85,
          82,
          69,
          95,
          95,
          32,
          42,
          47,
          32,
          110,
          101,
          119,
          32,
          77,
          97,
          112,
          40,
          41,
          41,
          59,
          10,
          10,
          32,
          32,
          47,
          47,
          32,
          115,
          114,
          99,
          47,
          114,
          101,
          115,
          105,
          122,
          101,
          45,
          111,
          98,
          115,
          101,
          114,
          118,
          101,
          114,
          46,
          116,
          115,
          10,
          32,
          32,
          118,
          97,
          114,
          32,
          82,
          69,
          83,
          73,
          90,
          69,
          95,
          68,
          69,
          66,
          79,
          85,
          78,
          67,
          69,
          95,
          84,
          73,
          77,
          69,
          32,
          61,
          32,
          49,
          48,
          48,
          59,
          10,
          32,
          32,
          118,
          97,
          114,
          32,
          67,
          97,
          110,
          118,
          97,
          115,
          82,
          101,
          115,
          105,
          122,
          101,
          79,
          98,
          115,
          101,
          114,
          118,
          101,
          114,
          32,
          61,
          32,
          99,
          108,
          97,
          115,
          115,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          115,
          116,
          97,
          116,
          105,
          99,
          32,
          95,
          105,
          110,
          105,
          116,
          105,
          97,
          108,
          105,
          122,
          101,
          79,
          98,
          115,
          101,
          114,
          118,
          101,
          114,
          40,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          116,
          104,
          105,
          115,
          46,
          95,
          111,
          98,
          115,
          101,
          114,
          118,
          101,
          114,
          41,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          114,
          101,
          115,
          105,
          122,
          101,
          72,
          97,
          110,
          100,
          108,
          101,
          114,
          32,
          61,
          32,
          40,
          101,
          110,
          116,
          114,
          105,
          101,
          115,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          101,
          110,
          116,
          114,
          105,
          101,
          115,
          46,
          102,
          111,
          114,
          69,
          97,
          99,
          104,
          40,
          40,
          101,
          110,
          116,
          114,
          121,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          101,
          108,
          101,
          109,
          101,
          110,
          116,
          32,
          61,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          111,
          98,
          115,
          101,
          114,
          118,
          101,
          100,
          67,
          97,
          110,
          118,
          97,
          115,
          101,
          115,
          46,
          103,
          101,
          116,
          40,
          101,
          110,
          116,
          114,
          121,
          46,
          116,
          97,
          114,
          103,
          101,
          116,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          33,
          101,
          108,
          101,
          109,
          101,
          110,
          116,
          41,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          91,
          100,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          73,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          44,
          32,
          116,
          105,
          109,
          101,
          111,
          117,
          116,
          93,
          32,
          61,
          32,
          101,
          108,
          101,
          109,
          101,
          110,
          116,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          108,
          101,
          97,
          114,
          84,
          105,
          109,
          101,
          111,
          117,
          116,
          40,
          116,
          105,
          109,
          101,
          111,
          117,
          116,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          110,
          101,
          119,
          84,
          105,
          109,
          101,
          111,
          117,
          116,
          32,
          61,
          32,
          115,
          101,
          116,
          84,
          105,
          109,
          101,
          111,
          117,
          116,
          40,
          40,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          100,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          73,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          46,
          114,
          101,
          115,
          105,
          122,
          101,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          44,
          32,
          82,
          69,
          83,
          73,
          90,
          69,
          95,
          68,
          69,
          66,
          79,
          85,
          78,
          67,
          69,
          95,
          84,
          73,
          77,
          69,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          111,
          98,
          115,
          101,
          114,
          118,
          101,
          100,
          67,
          97,
          110,
          118,
          97,
          115,
          101,
          115,
          46,
          115,
          101,
          116,
          40,
          101,
          110,
          116,
          114,
          121,
          46,
          116,
          97,
          114,
          103,
          101,
          116,
          44,
          32,
          91,
          100,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          73,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          44,
          32,
          110,
          101,
          119,
          84,
          105,
          109,
          101,
          111,
          117,
          116,
          93,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          111,
          98,
          115,
          101,
          114,
          118,
          101,
          114,
          32,
          61,
          32,
          110,
          101,
          119,
          32,
          82,
          101,
          115,
          105,
          122,
          101,
          79,
          98,
          115,
          101,
          114,
          118,
          101,
          114,
          40,
          114,
          101,
          115,
          105,
          122,
          101,
          72,
          97,
          110,
          100,
          108,
          101,
          114,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          115,
          116,
          97,
          116,
          105,
          99,
          32,
          111,
          98,
          115,
          101,
          114,
          118,
          101,
          40,
          99,
          97,
          110,
          118,
          97,
          115,
          44,
          32,
          100,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          73,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          105,
          110,
          105,
          116,
          105,
          97,
          108,
          105,
          122,
          101,
          79,
          98,
          115,
          101,
          114,
          118,
          101,
          114,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          116,
          104,
          105,
          115,
          46,
          95,
          111,
          98,
          115,
          101,
          114,
          118,
          101,
          100,
          67,
          97,
          110,
          118,
          97,
          115,
          101,
          115,
          46,
          104,
          97,
          115,
          40,
          99,
          97,
          110,
          118,
          97,
          115,
          41,
          41,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          111,
          98,
          115,
          101,
          114,
          118,
          101,
          100,
          67,
          97,
          110,
          118,
          97,
          115,
          101,
          115,
          46,
          115,
          101,
          116,
          40,
          99,
          97,
          110,
          118,
          97,
          115,
          44,
          32,
          91,
          100,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          73,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          44,
          32,
          48,
          93,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          111,
          98,
          115,
          101,
          114,
          118,
          101,
          114,
          63,
          46,
          111,
          98,
          115,
          101,
          114,
          118,
          101,
          40,
          99,
          97,
          110,
          118,
          97,
          115,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          115,
          116,
          97,
          116,
          105,
          99,
          32,
          117,
          110,
          111,
          98,
          115,
          101,
          114,
          118,
          101,
          40,
          99,
          97,
          110,
          118,
          97,
          115,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          101,
          108,
          101,
          109,
          101,
          110,
          116,
          32,
          61,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          111,
          98,
          115,
          101,
          114,
          118,
          101,
          100,
          67,
          97,
          110,
          118,
          97,
          115,
          101,
          115,
          46,
          103,
          101,
          116,
          40,
          99,
          97,
          110,
          118,
          97,
          115,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          101,
          108,
          101,
          109,
          101,
          110,
          116,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          116,
          105,
          109,
          101,
          111,
          117,
          116,
          73,
          100,
          32,
          61,
          32,
          101,
          108,
          101,
          109,
          101,
          110,
          116,
          91,
          49,
          93,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          116,
          105,
          109,
          101,
          111,
          117,
          116,
          73,
          100,
          41,
          32,
          99,
          108,
          101,
          97,
          114,
          84,
          105,
          109,
          101,
          111,
          117,
          116,
          40,
          116,
          105,
          109,
          101,
          111,
          117,
          116,
          73,
          100,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          111,
          98,
          115,
          101,
          114,
          118,
          101,
          114,
          63,
          46,
          117,
          110,
          111,
          98,
          115,
          101,
          114,
          118,
          101,
          40,
          99,
          97,
          110,
          118,
          97,
          115,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          111,
          98,
          115,
          101,
          114,
          118,
          101,
          100,
          67,
          97,
          110,
          118,
          97,
          115,
          101,
          115,
          46,
          100,
          101,
          108,
          101,
          116,
          101,
          40,
          99,
          97,
          110,
          118,
          97,
          115,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          33,
          116,
          104,
          105,
          115,
          46,
          95,
          111,
          98,
          115,
          101,
          114,
          118,
          101,
          100,
          67,
          97,
          110,
          118,
          97,
          115,
          101,
          115,
          46,
          115,
          105,
          122,
          101,
          32,
          38,
          38,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          111,
          98,
          115,
          101,
          114,
          118,
          101,
          114,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          111,
          98,
          115,
          101,
          114,
          118,
          101,
          114,
          46,
          100,
          105,
          115,
          99,
          111,
          110,
          110,
          101,
          99,
          116,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          111,
          98,
          115,
          101,
          114,
          118,
          101,
          114,
          32,
          61,
          32,
          110,
          117,
          108,
          108,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          125,
          59,
          10,
          32,
          32,
          95,
          95,
          112,
          117,
          98,
          108,
          105,
          99,
          70,
          105,
          101,
          108,
          100,
          40,
          67,
          97,
          110,
          118,
          97,
          115,
          82,
          101,
          115,
          105,
          122,
          101,
          79,
          98,
          115,
          101,
          114,
          118,
          101,
          114,
          44,
          32,
          34,
          95,
          111,
          98,
          115,
          101,
          114,
          118,
          101,
          114,
          34,
          44,
          32,
          110,
          117,
          108,
          108,
          41,
          59,
          10,
          32,
          32,
          95,
          95,
          112,
          117,
          98,
          108,
          105,
          99,
          70,
          105,
          101,
          108,
          100,
          40,
          67,
          97,
          110,
          118,
          97,
          115,
          82,
          101,
          115,
          105,
          122,
          101,
          79,
          98,
          115,
          101,
          114,
          118,
          101,
          114,
          44,
          32,
          34,
          95,
          111,
          98,
          115,
          101,
          114,
          118,
          101,
          100,
          67,
          97,
          110,
          118,
          97,
          115,
          101,
          115,
          34,
          44,
          32,
          47,
          42,
          32,
          64,
          95,
          95,
          80,
          85,
          82,
          69,
          95,
          95,
          32,
          42,
          47,
          32,
          110,
          101,
          119,
          32,
          77,
          97,
          112,
          40,
          41,
          41,
          59,
          10,
          10,
          32,
          32,
          47,
          47,
          32,
          115,
          114,
          99,
          47,
          117,
          116,
          105,
          108,
          115,
          46,
          116,
          115,
          10,
          32,
          32,
          102,
          117,
          110,
          99,
          116,
          105,
          111,
          110,
          32,
          105,
          115,
          72,
          101,
          120,
          67,
          111,
          108,
          111,
          114,
          40,
          99,
          111,
          108,
          111,
          114,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          47,
          94,
          35,
          40,
          91,
          92,
          100,
          97,
          45,
          102,
          93,
          123,
          54,
          125,
          124,
          91,
          92,
          100,
          97,
          45,
          102,
          93,
          123,
          56,
          125,
          41,
          36,
          47,
          105,
          117,
          46,
          116,
          101,
          115,
          116,
          40,
          99,
          111,
          108,
          111,
          114,
          41,
          59,
          10,
          32,
          32,
          125,
          10,
          32,
          32,
          102,
          117,
          110,
          99,
          116,
          105,
          111,
          110,
          32,
          104,
          101,
          120,
          83,
          116,
          114,
          105,
          110,
          103,
          84,
          111,
          82,
          71,
          66,
          65,
          73,
          110,
          116,
          40,
          99,
          111,
          108,
          111,
          114,
          72,
          101,
          120,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          33,
          105,
          115,
          72,
          101,
          120,
          67,
          111,
          108,
          111,
          114,
          40,
          99,
          111,
          108,
          111,
          114,
          72,
          101,
          120,
          41,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          48,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          108,
          101,
          116,
          32,
          104,
          101,
          120,
          32,
          61,
          32,
          99,
          111,
          108,
          111,
          114,
          72,
          101,
          120,
          46,
          114,
          101,
          112,
          108,
          97,
          99,
          101,
          40,
          34,
          35,
          34,
          44,
          32,
          34,
          34,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          104,
          101,
          120,
          32,
          61,
          32,
          104,
          101,
          120,
          46,
          108,
          101,
          110,
          103,
          116,
          104,
          32,
          61,
          61,
          61,
          32,
          54,
          32,
          63,
          32,
          96,
          36,
          123,
          104,
          101,
          120,
          125,
          102,
          102,
          96,
          32,
          58,
          32,
          104,
          101,
          120,
          59,
          10,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          112,
          97,
          114,
          115,
          101,
          73,
          110,
          116,
          40,
          104,
          101,
          120,
          44,
          32,
          49,
          54,
          41,
          59,
          10,
          32,
          32,
          125,
          10,
          32,
          32,
          102,
          117,
          110,
          99,
          116,
          105,
          111,
          110,
          32,
          105,
          115,
          68,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          40,
          102,
          105,
          108,
          101,
          68,
          97,
          116,
          97,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          102,
          105,
          108,
          101,
          68,
          97,
          116,
          97,
          46,
          98,
          121,
          116,
          101,
          76,
          101,
          110,
          103,
          116,
          104,
          32,
          60,
          32,
          52,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          102,
          97,
          108,
          115,
          101,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          102,
          105,
          108,
          101,
          83,
          105,
          103,
          110,
          97,
          116,
          117,
          114,
          101,
          32,
          61,
          32,
          110,
          101,
          119,
          32,
          85,
          105,
          110,
          116,
          56,
          65,
          114,
          114,
          97,
          121,
          40,
          102,
          105,
          108,
          101,
          68,
          97,
          116,
          97,
          46,
          115,
          108,
          105,
          99,
          101,
          40,
          48,
          44,
          32,
          90,
          73,
          80,
          95,
          83,
          73,
          71,
          78,
          65,
          84,
          85,
          82,
          69,
          46,
          98,
          121,
          116,
          101,
          76,
          101,
          110,
          103,
          116,
          104,
          41,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          102,
          111,
          114,
          32,
          40,
          108,
          101,
          116,
          32,
          105,
          32,
          61,
          32,
          48,
          59,
          32,
          105,
          32,
          60,
          32,
          90,
          73,
          80,
          95,
          83,
          73,
          71,
          78,
          65,
          84,
          85,
          82,
          69,
          46,
          108,
          101,
          110,
          103,
          116,
          104,
          59,
          32,
          105,
          32,
          43,
          61,
          32,
          49,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          90,
          73,
          80,
          95,
          83,
          73,
          71,
          78,
          65,
          84,
          85,
          82,
          69,
          91,
          105,
          93,
          32,
          33,
          61,
          61,
          32,
          102,
          105,
          108,
          101,
          83,
          105,
          103,
          110,
          97,
          116,
          117,
          114,
          101,
          91,
          105,
          93,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          102,
          97,
          108,
          115,
          101,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          116,
          114,
          117,
          101,
          59,
          10,
          32,
          32,
          125,
          10,
          32,
          32,
          102,
          117,
          110,
          99,
          116,
          105,
          111,
          110,
          32,
          105,
          115,
          76,
          111,
          116,
          116,
          105,
          101,
          74,
          83,
          79,
          78,
          40,
          106,
          115,
          111,
          110,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          76,
          79,
          84,
          84,
          73,
          69,
          95,
          74,
          83,
          79,
          78,
          95,
          77,
          65,
          78,
          68,
          65,
          84,
          79,
          82,
          89,
          95,
          70,
          73,
          69,
          76,
          68,
          83,
          46,
          101,
          118,
          101,
          114,
          121,
          40,
          40,
          102,
          105,
          101,
          108,
          100,
          41,
          32,
          61,
          62,
          32,
          79,
          98,
          106,
          101,
          99,
          116,
          46,
          112,
          114,
          111,
          116,
          111,
          116,
          121,
          112,
          101,
          46,
          104,
          97,
          115,
          79,
          119,
          110,
          80,
          114,
          111,
          112,
          101,
          114,
          116,
          121,
          46,
          99,
          97,
          108,
          108,
          40,
          106,
          115,
          111,
          110,
          44,
          32,
          102,
          105,
          101,
          108,
          100,
          41,
          41,
          59,
          10,
          32,
          32,
          125,
          10,
          32,
          32,
          102,
          117,
          110,
          99,
          116,
          105,
          111,
          110,
          32,
          105,
          115,
          76,
          111,
          116,
          116,
          105,
          101,
          40,
          102,
          105,
          108,
          101,
          68,
          97,
          116,
          97,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          116,
          121,
          112,
          101,
          111,
          102,
          32,
          102,
          105,
          108,
          101,
          68,
          97,
          116,
          97,
          32,
          61,
          61,
          61,
          32,
          34,
          115,
          116,
          114,
          105,
          110,
          103,
          34,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          114,
          121,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          105,
          115,
          76,
          111,
          116,
          116,
          105,
          101,
          74,
          83,
          79,
          78,
          40,
          74,
          83,
          79,
          78,
          46,
          112,
          97,
          114,
          115,
          101,
          40,
          102,
          105,
          108,
          101,
          68,
          97,
          116,
          97,
          41,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          32,
          99,
          97,
          116,
          99,
          104,
          32,
          40,
          95,
          101,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          102,
          97,
          108,
          115,
          101,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          125,
          32,
          101,
          108,
          115,
          101,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          105,
          115,
          76,
          111,
          116,
          116,
          105,
          101,
          74,
          83,
          79,
          78,
          40,
          102,
          105,
          108,
          101,
          68,
          97,
          116,
          97,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          125,
          10,
          32,
          32,
          102,
          117,
          110,
          99,
          116,
          105,
          111,
          110,
          32,
          103,
          101,
          116,
          68,
          101,
          102,
          97,
          117,
          108,
          116,
          68,
          80,
          82,
          40,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          100,
          112,
          114,
          32,
          61,
          32,
          73,
          83,
          95,
          66,
          82,
          79,
          87,
          83,
          69,
          82,
          32,
          63,
          32,
          119,
          105,
          110,
          100,
          111,
          119,
          46,
          100,
          101,
          118,
          105,
          99,
          101,
          80,
          105,
          120,
          101,
          108,
          82,
          97,
          116,
          105,
          111,
          32,
          58,
          32,
          49,
          59,
          10,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          49,
          32,
          43,
          32,
          40,
          100,
          112,
          114,
          32,
          45,
          32,
          49,
          41,
          32,
          42,
          32,
          68,
          69,
          70,
          65,
          85,
          76,
          84,
          95,
          68,
          80,
          82,
          95,
          70,
          65,
          67,
          84,
          79,
          82,
          59,
          10,
          32,
          32,
          125,
          10,
          32,
          32,
          102,
          117,
          110,
          99,
          116,
          105,
          111,
          110,
          32,
          105,
          115,
          69,
          108,
          101,
          109,
          101,
          110,
          116,
          73,
          110,
          86,
          105,
          101,
          119,
          112,
          111,
          114,
          116,
          40,
          101,
          108,
          101,
          109,
          101,
          110,
          116,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          114,
          101,
          99,
          116,
          32,
          61,
          32,
          101,
          108,
          101,
          109,
          101,
          110,
          116,
          46,
          103,
          101,
          116,
          66,
          111,
          117,
          110,
          100,
          105,
          110,
          103,
          67,
          108,
          105,
          101,
          110,
          116,
          82,
          101,
          99,
          116,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          114,
          101,
          99,
          116,
          46,
          116,
          111,
          112,
          32,
          62,
          61,
          32,
          48,
          32,
          38,
          38,
          32,
          114,
          101,
          99,
          116,
          46,
          108,
          101,
          102,
          116,
          32,
          62,
          61,
          32,
          48,
          32,
          38,
          38,
          32,
          114,
          101,
          99,
          116,
          46,
          98,
          111,
          116,
          116,
          111,
          109,
          32,
          60,
          61,
          32,
          40,
          119,
          105,
          110,
          100,
          111,
          119,
          46,
          105,
          110,
          110,
          101,
          114,
          72,
          101,
          105,
          103,
          104,
          116,
          32,
          124,
          124,
          32,
          100,
          111,
          99,
          117,
          109,
          101,
          110,
          116,
          46,
          100,
          111,
          99,
          117,
          109,
          101,
          110,
          116,
          69,
          108,
          101,
          109,
          101,
          110,
          116,
          46,
          99,
          108,
          105,
          101,
          110,
          116,
          72,
          101,
          105,
          103,
          104,
          116,
          41,
          32,
          38,
          38,
          32,
          114,
          101,
          99,
          116,
          46,
          114,
          105,
          103,
          104,
          116,
          32,
          60,
          61,
          32,
          40,
          119,
          105,
          110,
          100,
          111,
          119,
          46,
          105,
          110,
          110,
          101,
          114,
          87,
          105,
          100,
          116,
          104,
          32,
          124,
          124,
          32,
          100,
          111,
          99,
          117,
          109,
          101,
          110,
          116,
          46,
          100,
          111,
          99,
          117,
          109,
          101,
          110,
          116,
          69,
          108,
          101,
          109,
          101,
          110,
          116,
          46,
          99,
          108,
          105,
          101,
          110,
          116,
          87,
          105,
          100,
          116,
          104,
          41,
          59,
          10,
          32,
          32,
          125,
          10,
          10,
          32,
          32,
          47,
          47,
          32,
          115,
          114,
          99,
          47,
          100,
          111,
          116,
          108,
          111,
          116,
          116,
          105,
          101,
          46,
          116,
          115,
          10,
          32,
          32,
          118,
          97,
          114,
          32,
          99,
          114,
          101,
          97,
          116,
          101,
          67,
          111,
          114,
          101,
          77,
          111,
          100,
          101,
          32,
          61,
          32,
          40,
          109,
          111,
          100,
          101,
          44,
          32,
          109,
          111,
          100,
          117,
          108,
          101,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          109,
          111,
          100,
          101,
          32,
          61,
          61,
          61,
          32,
          34,
          114,
          101,
          118,
          101,
          114,
          115,
          101,
          34,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          109,
          111,
          100,
          117,
          108,
          101,
          46,
          77,
          111,
          100,
          101,
          46,
          82,
          101,
          118,
          101,
          114,
          115,
          101,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          32,
          101,
          108,
          115,
          101,
          32,
          105,
          102,
          32,
          40,
          109,
          111,
          100,
          101,
          32,
          61,
          61,
          61,
          32,
          34,
          98,
          111,
          117,
          110,
          99,
          101,
          34,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          109,
          111,
          100,
          117,
          108,
          101,
          46,
          77,
          111,
          100,
          101,
          46,
          66,
          111,
          117,
          110,
          99,
          101,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          32,
          101,
          108,
          115,
          101,
          32,
          105,
          102,
          32,
          40,
          109,
          111,
          100,
          101,
          32,
          61,
          61,
          61,
          32,
          34,
          114,
          101,
          118,
          101,
          114,
          115,
          101,
          45,
          98,
          111,
          117,
          110,
          99,
          101,
          34,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          109,
          111,
          100,
          117,
          108,
          101,
          46,
          77,
          111,
          100,
          101,
          46,
          82,
          101,
          118,
          101,
          114,
          115,
          101,
          66,
          111,
          117,
          110,
          99,
          101,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          32,
          101,
          108,
          115,
          101,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          109,
          111,
          100,
          117,
          108,
          101,
          46,
          77,
          111,
          100,
          101,
          46,
          70,
          111,
          114,
          119,
          97,
          114,
          100,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          125,
          59,
          10,
          32,
          32,
          118,
          97,
          114,
          32,
          99,
          114,
          101,
          97,
          116,
          101,
          67,
          111,
          114,
          101,
          70,
          105,
          116,
          32,
          61,
          32,
          40,
          102,
          105,
          116,
          44,
          32,
          109,
          111,
          100,
          117,
          108,
          101,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          102,
          105,
          116,
          32,
          61,
          61,
          61,
          32,
          34,
          99,
          111,
          110,
          116,
          97,
          105,
          110,
          34,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          109,
          111,
          100,
          117,
          108,
          101,
          46,
          70,
          105,
          116,
          46,
          67,
          111,
          110,
          116,
          97,
          105,
          110,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          32,
          101,
          108,
          115,
          101,
          32,
          105,
          102,
          32,
          40,
          102,
          105,
          116,
          32,
          61,
          61,
          61,
          32,
          34,
          99,
          111,
          118,
          101,
          114,
          34,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          109,
          111,
          100,
          117,
          108,
          101,
          46,
          70,
          105,
          116,
          46,
          67,
          111,
          118,
          101,
          114,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          32,
          101,
          108,
          115,
          101,
          32,
          105,
          102,
          32,
          40,
          102,
          105,
          116,
          32,
          61,
          61,
          61,
          32,
          34,
          102,
          105,
          108,
          108,
          34,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          109,
          111,
          100,
          117,
          108,
          101,
          46,
          70,
          105,
          116,
          46,
          70,
          105,
          108,
          108,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          32,
          101,
          108,
          115,
          101,
          32,
          105,
          102,
          32,
          40,
          102,
          105,
          116,
          32,
          61,
          61,
          61,
          32,
          34,
          102,
          105,
          116,
          45,
          104,
          101,
          105,
          103,
          104,
          116,
          34,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          109,
          111,
          100,
          117,
          108,
          101,
          46,
          70,
          105,
          116,
          46,
          70,
          105,
          116,
          72,
          101,
          105,
          103,
          104,
          116,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          32,
          101,
          108,
          115,
          101,
          32,
          105,
          102,
          32,
          40,
          102,
          105,
          116,
          32,
          61,
          61,
          61,
          32,
          34,
          102,
          105,
          116,
          45,
          119,
          105,
          100,
          116,
          104,
          34,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          109,
          111,
          100,
          117,
          108,
          101,
          46,
          70,
          105,
          116,
          46,
          70,
          105,
          116,
          87,
          105,
          100,
          116,
          104,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          32,
          101,
          108,
          115,
          101,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          109,
          111,
          100,
          117,
          108,
          101,
          46,
          70,
          105,
          116,
          46,
          78,
          111,
          110,
          101,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          125,
          59,
          10,
          32,
          32,
          118,
          97,
          114,
          32,
          99,
          114,
          101,
          97,
          116,
          101,
          67,
          111,
          114,
          101,
          65,
          108,
          105,
          103,
          110,
          32,
          61,
          32,
          40,
          97,
          108,
          105,
          103,
          110,
          44,
          32,
          109,
          111,
          100,
          117,
          108,
          101,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          99,
          111,
          114,
          101,
          65,
          108,
          105,
          103,
          110,
          32,
          61,
          32,
          110,
          101,
          119,
          32,
          109,
          111,
          100,
          117,
          108,
          101,
          46,
          86,
          101,
          99,
          116,
          111,
          114,
          70,
          108,
          111,
          97,
          116,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          99,
          111,
          114,
          101,
          65,
          108,
          105,
          103,
          110,
          46,
          112,
          117,
          115,
          104,
          95,
          98,
          97,
          99,
          107,
          40,
          97,
          108,
          105,
          103,
          110,
          91,
          48,
          93,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          99,
          111,
          114,
          101,
          65,
          108,
          105,
          103,
          110,
          46,
          112,
          117,
          115,
          104,
          95,
          98,
          97,
          99,
          107,
          40,
          97,
          108,
          105,
          103,
          110,
          91,
          49,
          93,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          99,
          111,
          114,
          101,
          65,
          108,
          105,
          103,
          110,
          59,
          10,
          32,
          32,
          125,
          59,
          10,
          32,
          32,
          118,
          97,
          114,
          32,
          99,
          114,
          101,
          97,
          116,
          101,
          67,
          111,
          114,
          101,
          83,
          101,
          103,
          109,
          101,
          110,
          116,
          32,
          61,
          32,
          40,
          115,
          101,
          103,
          109,
          101,
          110,
          116,
          44,
          32,
          109,
          111,
          100,
          117,
          108,
          101,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          99,
          111,
          114,
          101,
          115,
          101,
          103,
          109,
          101,
          110,
          116,
          32,
          61,
          32,
          110,
          101,
          119,
          32,
          109,
          111,
          100,
          117,
          108,
          101,
          46,
          86,
          101,
          99,
          116,
          111,
          114,
          70,
          108,
          111,
          97,
          116,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          115,
          101,
          103,
          109,
          101,
          110,
          116,
          46,
          108,
          101,
          110,
          103,
          116,
          104,
          32,
          33,
          61,
          61,
          32,
          50,
          41,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          99,
          111,
          114,
          101,
          115,
          101,
          103,
          109,
          101,
          110,
          116,
          59,
          10,
          32,
          32,
          32,
          32,
          99,
          111,
          114,
          101,
          115,
          101,
          103,
          109,
          101,
          110,
          116,
          46,
          112,
          117,
          115,
          104,
          95,
          98,
          97,
          99,
          107,
          40,
          115,
          101,
          103,
          109,
          101,
          110,
          116,
          91,
          48,
          93,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          99,
          111,
          114,
          101,
          115,
          101,
          103,
          109,
          101,
          110,
          116,
          46,
          112,
          117,
          115,
          104,
          95,
          98,
          97,
          99,
          107,
          40,
          115,
          101,
          103,
          109,
          101,
          110,
          116,
          91,
          49,
          93,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          99,
          111,
          114,
          101,
          115,
          101,
          103,
          109,
          101,
          110,
          116,
          59,
          10,
          32,
          32,
          125,
          59,
          10,
          32,
          32,
          118,
          97,
          114,
          32,
          99,
          114,
          101,
          97,
          116,
          101,
          67,
          111,
          114,
          101,
          76,
          97,
          121,
          111,
          117,
          116,
          32,
          61,
          32,
          40,
          108,
          97,
          121,
          111,
          117,
          116,
          44,
          32,
          109,
          111,
          100,
          117,
          108,
          101,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          33,
          108,
          97,
          121,
          111,
          117,
          116,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          109,
          111,
          100,
          117,
          108,
          101,
          46,
          99,
          114,
          101,
          97,
          116,
          101,
          68,
          101,
          102,
          97,
          117,
          108,
          116,
          76,
          97,
          121,
          111,
          117,
          116,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          97,
          108,
          105,
          103,
          110,
          58,
          32,
          99,
          114,
          101,
          97,
          116,
          101,
          67,
          111,
          114,
          101,
          65,
          108,
          105,
          103,
          110,
          40,
          108,
          97,
          121,
          111,
          117,
          116,
          46,
          97,
          108,
          105,
          103,
          110,
          32,
          63,
          63,
          32,
          91,
          48,
          46,
          53,
          44,
          32,
          48,
          46,
          53,
          93,
          44,
          32,
          109,
          111,
          100,
          117,
          108,
          101,
          41,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          105,
          116,
          58,
          32,
          99,
          114,
          101,
          97,
          116,
          101,
          67,
          111,
          114,
          101,
          70,
          105,
          116,
          40,
          108,
          97,
          121,
          111,
          117,
          116,
          46,
          102,
          105,
          116,
          32,
          63,
          63,
          32,
          34,
          99,
          111,
          110,
          116,
          97,
          105,
          110,
          34,
          44,
          32,
          109,
          111,
          100,
          117,
          108,
          101,
          41,
          10,
          32,
          32,
          32,
          32,
          125,
          59,
          10,
          32,
          32,
          125,
          59,
          10,
          32,
          32,
          118,
          97,
          114,
          32,
          95,
          68,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          32,
          61,
          32,
          99,
          108,
          97,
          115,
          115,
          32,
          95,
          68,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          114,
          117,
          99,
          116,
          111,
          114,
          40,
          99,
          111,
          110,
          102,
          105,
          103,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          95,
          95,
          112,
          117,
          98,
          108,
          105,
          99,
          70,
          105,
          101,
          108,
          100,
          40,
          116,
          104,
          105,
          115,
          44,
          32,
          34,
          95,
          99,
          97,
          110,
          118,
          97,
          115,
          34,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          95,
          95,
          112,
          117,
          98,
          108,
          105,
          99,
          70,
          105,
          101,
          108,
          100,
          40,
          116,
          104,
          105,
          115,
          44,
          32,
          34,
          95,
          99,
          111,
          110,
          116,
          101,
          120,
          116,
          34,
          44,
          32,
          110,
          117,
          108,
          108,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          95,
          95,
          112,
          117,
          98,
          108,
          105,
          99,
          70,
          105,
          101,
          108,
          100,
          40,
          116,
          104,
          105,
          115,
          44,
          32,
          34,
          95,
          101,
          118,
          101,
          110,
          116,
          77,
          97,
          110,
          97,
          103,
          101,
          114,
          34,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          95,
          95,
          112,
          117,
          98,
          108,
          105,
          99,
          70,
          105,
          101,
          108,
          100,
          40,
          116,
          104,
          105,
          115,
          44,
          32,
          34,
          95,
          97,
          110,
          105,
          109,
          97,
          116,
          105,
          111,
          110,
          70,
          114,
          97,
          109,
          101,
          73,
          100,
          34,
          44,
          32,
          110,
          117,
          108,
          108,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          95,
          95,
          112,
          117,
          98,
          108,
          105,
          99,
          70,
          105,
          101,
          108,
          100,
          40,
          116,
          104,
          105,
          115,
          44,
          32,
          34,
          95,
          102,
          114,
          97,
          109,
          101,
          77,
          97,
          110,
          97,
          103,
          101,
          114,
          34,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          95,
          95,
          112,
          117,
          98,
          108,
          105,
          99,
          70,
          105,
          101,
          108,
          100,
          40,
          116,
          104,
          105,
          115,
          44,
          32,
          34,
          95,
          100,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          67,
          111,
          114,
          101,
          34,
          44,
          32,
          110,
          117,
          108,
          108,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          95,
          95,
          112,
          117,
          98,
          108,
          105,
          99,
          70,
          105,
          101,
          108,
          100,
          40,
          116,
          104,
          105,
          115,
          44,
          32,
          34,
          95,
          114,
          101,
          110,
          100,
          101,
          114,
          67,
          111,
          110,
          102,
          105,
          103,
          34,
          44,
          32,
          123,
          125,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          95,
          95,
          112,
          117,
          98,
          108,
          105,
          99,
          70,
          105,
          101,
          108,
          100,
          40,
          116,
          104,
          105,
          115,
          44,
          32,
          34,
          95,
          105,
          115,
          70,
          114,
          111,
          122,
          101,
          110,
          34,
          44,
          32,
          102,
          97,
          108,
          115,
          101,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          95,
          95,
          112,
          117,
          98,
          108,
          105,
          99,
          70,
          105,
          101,
          108,
          100,
          40,
          116,
          104,
          105,
          115,
          44,
          32,
          34,
          95,
          98,
          97,
          99,
          107,
          103,
          114,
          111,
          117,
          110,
          100,
          67,
          111,
          108,
          111,
          114,
          34,
          44,
          32,
          110,
          117,
          108,
          108,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          95,
          95,
          112,
          117,
          98,
          108,
          105,
          99,
          70,
          105,
          101,
          108,
          100,
          40,
          116,
          104,
          105,
          115,
          44,
          32,
          34,
          95,
          112,
          111,
          105,
          110,
          116,
          101,
          114,
          85,
          112,
          77,
          101,
          116,
          104,
          111,
          100,
          34,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          95,
          95,
          112,
          117,
          98,
          108,
          105,
          99,
          70,
          105,
          101,
          108,
          100,
          40,
          116,
          104,
          105,
          115,
          44,
          32,
          34,
          95,
          112,
          111,
          105,
          110,
          116,
          101,
          114,
          68,
          111,
          119,
          110,
          77,
          101,
          116,
          104,
          111,
          100,
          34,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          95,
          95,
          112,
          117,
          98,
          108,
          105,
          99,
          70,
          105,
          101,
          108,
          100,
          40,
          116,
          104,
          105,
          115,
          44,
          32,
          34,
          95,
          112,
          111,
          105,
          110,
          116,
          101,
          114,
          77,
          111,
          118,
          101,
          77,
          101,
          116,
          104,
          111,
          100,
          34,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          95,
          95,
          112,
          117,
          98,
          108,
          105,
          99,
          70,
          105,
          101,
          108,
          100,
          40,
          116,
          104,
          105,
          115,
          44,
          32,
          34,
          95,
          112,
          111,
          105,
          110,
          116,
          101,
          114,
          69,
          110,
          116,
          101,
          114,
          77,
          101,
          116,
          104,
          111,
          100,
          34,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          95,
          95,
          112,
          117,
          98,
          108,
          105,
          99,
          70,
          105,
          101,
          108,
          100,
          40,
          116,
          104,
          105,
          115,
          44,
          32,
          34,
          95,
          112,
          111,
          105,
          110,
          116,
          101,
          114,
          69,
          120,
          105,
          116,
          77,
          101,
          116,
          104,
          111,
          100,
          34,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          99,
          97,
          110,
          118,
          97,
          115,
          32,
          61,
          32,
          99,
          111,
          110,
          102,
          105,
          103,
          46,
          99,
          97,
          110,
          118,
          97,
          115,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          101,
          118,
          101,
          110,
          116,
          77,
          97,
          110,
          97,
          103,
          101,
          114,
          32,
          61,
          32,
          110,
          101,
          119,
          32,
          69,
          118,
          101,
          110,
          116,
          77,
          97,
          110,
          97,
          103,
          101,
          114,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          102,
          114,
          97,
          109,
          101,
          77,
          97,
          110,
          97,
          103,
          101,
          114,
          32,
          61,
          32,
          110,
          101,
          119,
          32,
          65,
          110,
          105,
          109,
          97,
          116,
          105,
          111,
          110,
          70,
          114,
          97,
          109,
          101,
          77,
          97,
          110,
          97,
          103,
          101,
          114,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          114,
          101,
          110,
          100,
          101,
          114,
          67,
          111,
          110,
          102,
          105,
          103,
          32,
          61,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          46,
          46,
          46,
          99,
          111,
          110,
          102,
          105,
          103,
          46,
          114,
          101,
          110,
          100,
          101,
          114,
          67,
          111,
          110,
          102,
          105,
          103,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          100,
          101,
          118,
          105,
          99,
          101,
          80,
          105,
          120,
          101,
          108,
          82,
          97,
          116,
          105,
          111,
          58,
          32,
          99,
          111,
          110,
          102,
          105,
          103,
          46,
          114,
          101,
          110,
          100,
          101,
          114,
          67,
          111,
          110,
          102,
          105,
          103,
          63,
          46,
          100,
          101,
          118,
          105,
          99,
          101,
          80,
          105,
          120,
          101,
          108,
          82,
          97,
          116,
          105,
          111,
          32,
          124,
          124,
          32,
          103,
          101,
          116,
          68,
          101,
          102,
          97,
          117,
          108,
          116,
          68,
          80,
          82,
          40,
          41,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          47,
          47,
          32,
          102,
          114,
          101,
          101,
          122,
          101,
          79,
          110,
          79,
          102,
          102,
          115,
          99,
          114,
          101,
          101,
          110,
          32,
          105,
          115,
          32,
          116,
          114,
          117,
          101,
          32,
          98,
          121,
          32,
          100,
          101,
          102,
          97,
          117,
          108,
          116,
          32,
          116,
          111,
          32,
          112,
          114,
          101,
          118,
          101,
          110,
          116,
          32,
          117,
          110,
          110,
          101,
          99,
          101,
          115,
          115,
          97,
          114,
          121,
          32,
          114,
          101,
          110,
          100,
          101,
          114,
          105,
          110,
          103,
          32,
          119,
          104,
          101,
          110,
          32,
          116,
          104,
          101,
          32,
          99,
          97,
          110,
          118,
          97,
          115,
          32,
          105,
          115,
          32,
          111,
          102,
          102,
          115,
          99,
          114,
          101,
          101,
          110,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          114,
          101,
          101,
          122,
          101,
          79,
          110,
          79,
          102,
          102,
          115,
          99,
          114,
          101,
          101,
          110,
          58,
          32,
          99,
          111,
          110,
          102,
          105,
          103,
          46,
          114,
          101,
          110,
          100,
          101,
          114,
          67,
          111,
          110,
          102,
          105,
          103,
          63,
          46,
          102,
          114,
          101,
          101,
          122,
          101,
          79,
          110,
          79,
          102,
          102,
          115,
          99,
          114,
          101,
          101,
          110,
          32,
          63,
          63,
          32,
          116,
          114,
          117,
          101,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          68,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          87,
          97,
          115,
          109,
          76,
          111,
          97,
          100,
          101,
          114,
          46,
          108,
          111,
          97,
          100,
          40,
          41,
          46,
          116,
          104,
          101,
          110,
          40,
          40,
          109,
          111,
          100,
          117,
          108,
          101,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          95,
          68,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          46,
          95,
          119,
          97,
          115,
          109,
          77,
          111,
          100,
          117,
          108,
          101,
          32,
          61,
          32,
          109,
          111,
          100,
          117,
          108,
          101,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          100,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          67,
          111,
          114,
          101,
          32,
          61,
          32,
          110,
          101,
          119,
          32,
          109,
          111,
          100,
          117,
          108,
          101,
          46,
          68,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          80,
          108,
          97,
          121,
          101,
          114,
          40,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          97,
          110,
          105,
          109,
          97,
          116,
          105,
          111,
          110,
          73,
          100,
          58,
          32,
          99,
          111,
          110,
          102,
          105,
          103,
          46,
          97,
          110,
          105,
          109,
          97,
          116,
          105,
          111,
          110,
          73,
          100,
          32,
          63,
          63,
          32,
          34,
          34,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          101,
          109,
          101,
          73,
          100,
          58,
          32,
          99,
          111,
          110,
          102,
          105,
          103,
          46,
          116,
          104,
          101,
          109,
          101,
          73,
          100,
          32,
          63,
          63,
          32,
          34,
          34,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          115,
          116,
          97,
          116,
          101,
          77,
          97,
          99,
          104,
          105,
          110,
          101,
          73,
          100,
          58,
          32,
          34,
          34,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          97,
          117,
          116,
          111,
          112,
          108,
          97,
          121,
          58,
          32,
          99,
          111,
          110,
          102,
          105,
          103,
          46,
          97,
          117,
          116,
          111,
          112,
          108,
          97,
          121,
          32,
          63,
          63,
          32,
          102,
          97,
          108,
          115,
          101,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          98,
          97,
          99,
          107,
          103,
          114,
          111,
          117,
          110,
          100,
          67,
          111,
          108,
          111,
          114,
          58,
          32,
          48,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          108,
          111,
          111,
          112,
          65,
          110,
          105,
          109,
          97,
          116,
          105,
          111,
          110,
          58,
          32,
          99,
          111,
          110,
          102,
          105,
          103,
          46,
          108,
          111,
          111,
          112,
          32,
          63,
          63,
          32,
          102,
          97,
          108,
          115,
          101,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          109,
          111,
          100,
          101,
          58,
          32,
          99,
          114,
          101,
          97,
          116,
          101,
          67,
          111,
          114,
          101,
          77,
          111,
          100,
          101,
          40,
          99,
          111,
          110,
          102,
          105,
          103,
          46,
          109,
          111,
          100,
          101,
          32,
          63,
          63,
          32,
          34,
          102,
          111,
          114,
          119,
          97,
          114,
          100,
          34,
          44,
          32,
          109,
          111,
          100,
          117,
          108,
          101,
          41,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          115,
          101,
          103,
          109,
          101,
          110,
          116,
          58,
          32,
          99,
          114,
          101,
          97,
          116,
          101,
          67,
          111,
          114,
          101,
          83,
          101,
          103,
          109,
          101,
          110,
          116,
          40,
          99,
          111,
          110,
          102,
          105,
          103,
          46,
          115,
          101,
          103,
          109,
          101,
          110,
          116,
          32,
          63,
          63,
          32,
          91,
          93,
          44,
          32,
          109,
          111,
          100,
          117,
          108,
          101,
          41,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          115,
          112,
          101,
          101,
          100,
          58,
          32,
          99,
          111,
          110,
          102,
          105,
          103,
          46,
          115,
          112,
          101,
          101,
          100,
          32,
          63,
          63,
          32,
          49,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          117,
          115,
          101,
          70,
          114,
          97,
          109,
          101,
          73,
          110,
          116,
          101,
          114,
          112,
          111,
          108,
          97,
          116,
          105,
          111,
          110,
          58,
          32,
          99,
          111,
          110,
          102,
          105,
          103,
          46,
          117,
          115,
          101,
          70,
          114,
          97,
          109,
          101,
          73,
          110,
          116,
          101,
          114,
          112,
          111,
          108,
          97,
          116,
          105,
          111,
          110,
          32,
          63,
          63,
          32,
          116,
          114,
          117,
          101,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          109,
          97,
          114,
          107,
          101,
          114,
          58,
          32,
          99,
          111,
          110,
          102,
          105,
          103,
          46,
          109,
          97,
          114,
          107,
          101,
          114,
          32,
          63,
          63,
          32,
          34,
          34,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          108,
          97,
          121,
          111,
          117,
          116,
          58,
          32,
          99,
          114,
          101,
          97,
          116,
          101,
          67,
          111,
          114,
          101,
          76,
          97,
          121,
          111,
          117,
          116,
          40,
          99,
          111,
          110,
          102,
          105,
          103,
          46,
          108,
          97,
          121,
          111,
          117,
          116,
          44,
          32,
          109,
          111,
          100,
          117,
          108,
          101,
          41,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          101,
          118,
          101,
          110,
          116,
          77,
          97,
          110,
          97,
          103,
          101,
          114,
          46,
          100,
          105,
          115,
          112,
          97,
          116,
          99,
          104,
          40,
          123,
          32,
          116,
          121,
          112,
          101,
          58,
          32,
          34,
          114,
          101,
          97,
          100,
          121,
          34,
          32,
          125,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          99,
          111,
          110,
          102,
          105,
          103,
          46,
          100,
          97,
          116,
          97,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          108,
          111,
          97,
          100,
          70,
          114,
          111,
          109,
          68,
          97,
          116,
          97,
          40,
          99,
          111,
          110,
          102,
          105,
          103,
          46,
          100,
          97,
          116,
          97,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          32,
          101,
          108,
          115,
          101,
          32,
          105,
          102,
          32,
          40,
          99,
          111,
          110,
          102,
          105,
          103,
          46,
          115,
          114,
          99,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          108,
          111,
          97,
          100,
          70,
          114,
          111,
          109,
          83,
          114,
          99,
          40,
          99,
          111,
          110,
          102,
          105,
          103,
          46,
          115,
          114,
          99,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          99,
          111,
          110,
          102,
          105,
          103,
          46,
          98,
          97,
          99,
          107,
          103,
          114,
          111,
          117,
          110,
          100,
          67,
          111,
          108,
          111,
          114,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          115,
          101,
          116,
          66,
          97,
          99,
          107,
          103,
          114,
          111,
          117,
          110,
          100,
          67,
          111,
          108,
          111,
          114,
          40,
          99,
          111,
          110,
          102,
          105,
          103,
          46,
          98,
          97,
          99,
          107,
          103,
          114,
          111,
          117,
          110,
          100,
          67,
          111,
          108,
          111,
          114,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          41,
          46,
          99,
          97,
          116,
          99,
          104,
          40,
          40,
          101,
          114,
          114,
          111,
          114,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          101,
          118,
          101,
          110,
          116,
          77,
          97,
          110,
          97,
          103,
          101,
          114,
          46,
          100,
          105,
          115,
          112,
          97,
          116,
          99,
          104,
          40,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          121,
          112,
          101,
          58,
          32,
          34,
          108,
          111,
          97,
          100,
          69,
          114,
          114,
          111,
          114,
          34,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          101,
          114,
          114,
          111,
          114,
          58,
          32,
          110,
          101,
          119,
          32,
          69,
          114,
          114,
          111,
          114,
          40,
          96,
          70,
          97,
          105,
          108,
          101,
          100,
          32,
          116,
          111,
          32,
          108,
          111,
          97,
          100,
          32,
          119,
          97,
          115,
          109,
          32,
          109,
          111,
          100,
          117,
          108,
          101,
          58,
          32,
          36,
          123,
          101,
          114,
          114,
          111,
          114,
          125,
          96,
          41,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          112,
          111,
          105,
          110,
          116,
          101,
          114,
          85,
          112,
          77,
          101,
          116,
          104,
          111,
          100,
          32,
          61,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          111,
          110,
          80,
          111,
          105,
          110,
          116,
          101,
          114,
          85,
          112,
          46,
          98,
          105,
          110,
          100,
          40,
          116,
          104,
          105,
          115,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          112,
          111,
          105,
          110,
          116,
          101,
          114,
          68,
          111,
          119,
          110,
          77,
          101,
          116,
          104,
          111,
          100,
          32,
          61,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          111,
          110,
          80,
          111,
          105,
          110,
          116,
          101,
          114,
          68,
          111,
          119,
          110,
          46,
          98,
          105,
          110,
          100,
          40,
          116,
          104,
          105,
          115,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          112,
          111,
          105,
          110,
          116,
          101,
          114,
          77,
          111,
          118,
          101,
          77,
          101,
          116,
          104,
          111,
          100,
          32,
          61,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          111,
          110,
          80,
          111,
          105,
          110,
          116,
          101,
          114,
          77,
          111,
          118,
          101,
          46,
          98,
          105,
          110,
          100,
          40,
          116,
          104,
          105,
          115,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          112,
          111,
          105,
          110,
          116,
          101,
          114,
          69,
          110,
          116,
          101,
          114,
          77,
          101,
          116,
          104,
          111,
          100,
          32,
          61,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          111,
          110,
          80,
          111,
          105,
          110,
          116,
          101,
          114,
          69,
          110,
          116,
          101,
          114,
          46,
          98,
          105,
          110,
          100,
          40,
          116,
          104,
          105,
          115,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          112,
          111,
          105,
          110,
          116,
          101,
          114,
          69,
          120,
          105,
          116,
          77,
          101,
          116,
          104,
          111,
          100,
          32,
          61,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          111,
          110,
          80,
          111,
          105,
          110,
          116,
          101,
          114,
          76,
          101,
          97,
          118,
          101,
          46,
          98,
          105,
          110,
          100,
          40,
          116,
          104,
          105,
          115,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          95,
          100,
          105,
          115,
          112,
          97,
          116,
          99,
          104,
          69,
          114,
          114,
          111,
          114,
          40,
          109,
          101,
          115,
          115,
          97,
          103,
          101,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          111,
          108,
          101,
          46,
          101,
          114,
          114,
          111,
          114,
          40,
          109,
          101,
          115,
          115,
          97,
          103,
          101,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          101,
          118,
          101,
          110,
          116,
          77,
          97,
          110,
          97,
          103,
          101,
          114,
          46,
          100,
          105,
          115,
          112,
          97,
          116,
          99,
          104,
          40,
          123,
          32,
          116,
          121,
          112,
          101,
          58,
          32,
          34,
          108,
          111,
          97,
          100,
          69,
          114,
          114,
          111,
          114,
          34,
          44,
          32,
          101,
          114,
          114,
          111,
          114,
          58,
          32,
          110,
          101,
          119,
          32,
          69,
          114,
          114,
          111,
          114,
          40,
          109,
          101,
          115,
          115,
          97,
          103,
          101,
          41,
          32,
          125,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          97,
          115,
          121,
          110,
          99,
          32,
          95,
          102,
          101,
          116,
          99,
          104,
          68,
          97,
          116,
          97,
          40,
          115,
          114,
          99,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          114,
          101,
          115,
          112,
          111,
          110,
          115,
          101,
          32,
          61,
          32,
          97,
          119,
          97,
          105,
          116,
          32,
          102,
          101,
          116,
          99,
          104,
          40,
          115,
          114,
          99,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          33,
          114,
          101,
          115,
          112,
          111,
          110,
          115,
          101,
          46,
          111,
          107,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          110,
          101,
          119,
          32,
          69,
          114,
          114,
          111,
          114,
          40,
          96,
          70,
          97,
          105,
          108,
          101,
          100,
          32,
          116,
          111,
          32,
          102,
          101,
          116,
          99,
          104,
          32,
          97,
          110,
          105,
          109,
          97,
          116,
          105,
          111,
          110,
          32,
          100,
          97,
          116,
          97,
          32,
          102,
          114,
          111,
          109,
          32,
          85,
          82,
          76,
          58,
          32,
          36,
          123,
          115,
          114,
          99,
          125,
          46,
          32,
          36,
          123,
          114,
          101,
          115,
          112,
          111,
          110,
          115,
          101,
          46,
          115,
          116,
          97,
          116,
          117,
          115,
          125,
          58,
          32,
          36,
          123,
          114,
          101,
          115,
          112,
          111,
          110,
          115,
          101,
          46,
          115,
          116,
          97,
          116,
          117,
          115,
          84,
          101,
          120,
          116,
          125,
          96,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          100,
          97,
          116,
          97,
          32,
          61,
          32,
          97,
          119,
          97,
          105,
          116,
          32,
          114,
          101,
          115,
          112,
          111,
          110,
          115,
          101,
          46,
          97,
          114,
          114,
          97,
          121,
          66,
          117,
          102,
          102,
          101,
          114,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          105,
          115,
          68,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          40,
          100,
          97,
          116,
          97,
          41,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          100,
          97,
          116,
          97,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          110,
          101,
          119,
          32,
          84,
          101,
          120,
          116,
          68,
          101,
          99,
          111,
          100,
          101,
          114,
          40,
          41,
          46,
          100,
          101,
          99,
          111,
          100,
          101,
          40,
          100,
          97,
          116,
          97,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          95,
          108,
          111,
          97,
          100,
          70,
          114,
          111,
          109,
          68,
          97,
          116,
          97,
          40,
          100,
          97,
          116,
          97,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          116,
          104,
          105,
          115,
          46,
          95,
          100,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          67,
          111,
          114,
          101,
          32,
          61,
          61,
          61,
          32,
          110,
          117,
          108,
          108,
          41,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          119,
          105,
          100,
          116,
          104,
          32,
          61,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          99,
          97,
          110,
          118,
          97,
          115,
          46,
          119,
          105,
          100,
          116,
          104,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          104,
          101,
          105,
          103,
          104,
          116,
          32,
          61,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          99,
          97,
          110,
          118,
          97,
          115,
          46,
          104,
          101,
          105,
          103,
          104,
          116,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          108,
          101,
          116,
          32,
          108,
          111,
          97,
          100,
          101,
          100,
          32,
          61,
          32,
          102,
          97,
          108,
          115,
          101,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          116,
          121,
          112,
          101,
          111,
          102,
          32,
          100,
          97,
          116,
          97,
          32,
          61,
          61,
          61,
          32,
          34,
          115,
          116,
          114,
          105,
          110,
          103,
          34,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          33,
          105,
          115,
          76,
          111,
          116,
          116,
          105,
          101,
          40,
          100,
          97,
          116,
          97,
          41,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          100,
          105,
          115,
          112,
          97,
          116,
          99,
          104,
          69,
          114,
          114,
          111,
          114,
          40,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          34,
          73,
          110,
          118,
          97,
          108,
          105,
          100,
          32,
          76,
          111,
          116,
          116,
          105,
          101,
          32,
          74,
          83,
          79,
          78,
          32,
          115,
          116,
          114,
          105,
          110,
          103,
          58,
          32,
          84,
          104,
          101,
          32,
          112,
          114,
          111,
          118,
          105,
          100,
          101,
          100,
          32,
          115,
          116,
          114,
          105,
          110,
          103,
          32,
          100,
          111,
          101,
          115,
          32,
          110,
          111,
          116,
          32,
          99,
          111,
          110,
          102,
          111,
          114,
          109,
          32,
          116,
          111,
          32,
          116,
          104,
          101,
          32,
          76,
          111,
          116,
          116,
          105,
          101,
          32,
          74,
          83,
          79,
          78,
          32,
          102,
          111,
          114,
          109,
          97,
          116,
          46,
          34,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          108,
          111,
          97,
          100,
          101,
          100,
          32,
          61,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          100,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          67,
          111,
          114,
          101,
          46,
          108,
          111,
          97,
          100,
          65,
          110,
          105,
          109,
          97,
          116,
          105,
          111,
          110,
          68,
          97,
          116,
          97,
          40,
          100,
          97,
          116,
          97,
          44,
          32,
          119,
          105,
          100,
          116,
          104,
          44,
          32,
          104,
          101,
          105,
          103,
          104,
          116,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          32,
          101,
          108,
          115,
          101,
          32,
          105,
          102,
          32,
          40,
          100,
          97,
          116,
          97,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          111,
          102,
          32,
          65,
          114,
          114,
          97,
          121,
          66,
          117,
          102,
          102,
          101,
          114,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          33,
          105,
          115,
          68,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          40,
          100,
          97,
          116,
          97,
          41,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          100,
          105,
          115,
          112,
          97,
          116,
          99,
          104,
          69,
          114,
          114,
          111,
          114,
          40,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          34,
          73,
          110,
          118,
          97,
          108,
          105,
          100,
          32,
          100,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          32,
          65,
          114,
          114,
          97,
          121,
          66,
          117,
          102,
          102,
          101,
          114,
          58,
          32,
          84,
          104,
          101,
          32,
          112,
          114,
          111,
          118,
          105,
          100,
          101,
          100,
          32,
          65,
          114,
          114,
          97,
          121,
          66,
          117,
          102,
          102,
          101,
          114,
          32,
          100,
          111,
          101,
          115,
          32,
          110,
          111,
          116,
          32,
          99,
          111,
          110,
          102,
          111,
          114,
          109,
          32,
          116,
          111,
          32,
          116,
          104,
          101,
          32,
          100,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          32,
          102,
          111,
          114,
          109,
          97,
          116,
          46,
          34,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          108,
          111,
          97,
          100,
          101,
          100,
          32,
          61,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          100,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          67,
          111,
          114,
          101,
          46,
          108,
          111,
          97,
          100,
          68,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          68,
          97,
          116,
          97,
          40,
          100,
          97,
          116,
          97,
          44,
          32,
          119,
          105,
          100,
          116,
          104,
          44,
          32,
          104,
          101,
          105,
          103,
          104,
          116,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          32,
          101,
          108,
          115,
          101,
          32,
          105,
          102,
          32,
          40,
          116,
          121,
          112,
          101,
          111,
          102,
          32,
          100,
          97,
          116,
          97,
          32,
          61,
          61,
          61,
          32,
          34,
          111,
          98,
          106,
          101,
          99,
          116,
          34,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          33,
          105,
          115,
          76,
          111,
          116,
          116,
          105,
          101,
          40,
          100,
          97,
          116,
          97,
          41,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          100,
          105,
          115,
          112,
          97,
          116,
          99,
          104,
          69,
          114,
          114,
          111,
          114,
          40,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          34,
          73,
          110,
          118,
          97,
          108,
          105,
          100,
          32,
          76,
          111,
          116,
          116,
          105,
          101,
          32,
          74,
          83,
          79,
          78,
          32,
          111,
          98,
          106,
          101,
          99,
          116,
          58,
          32,
          84,
          104,
          101,
          32,
          112,
          114,
          111,
          118,
          105,
          100,
          101,
          100,
          32,
          111,
          98,
          106,
          101,
          99,
          116,
          32,
          100,
          111,
          101,
          115,
          32,
          110,
          111,
          116,
          32,
          99,
          111,
          110,
          102,
          111,
          114,
          109,
          32,
          116,
          111,
          32,
          116,
          104,
          101,
          32,
          76,
          111,
          116,
          116,
          105,
          101,
          32,
          74,
          83,
          79,
          78,
          32,
          102,
          111,
          114,
          109,
          97,
          116,
          46,
          34,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          108,
          111,
          97,
          100,
          101,
          100,
          32,
          61,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          100,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          67,
          111,
          114,
          101,
          46,
          108,
          111,
          97,
          100,
          65,
          110,
          105,
          109,
          97,
          116,
          105,
          111,
          110,
          68,
          97,
          116,
          97,
          40,
          74,
          83,
          79,
          78,
          46,
          115,
          116,
          114,
          105,
          110,
          103,
          105,
          102,
          121,
          40,
          100,
          97,
          116,
          97,
          41,
          44,
          32,
          119,
          105,
          100,
          116,
          104,
          44,
          32,
          104,
          101,
          105,
          103,
          104,
          116,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          32,
          101,
          108,
          115,
          101,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          100,
          105,
          115,
          112,
          97,
          116,
          99,
          104,
          69,
          114,
          114,
          111,
          114,
          40,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          96,
          85,
          110,
          115,
          117,
          112,
          112,
          111,
          114,
          116,
          101,
          100,
          32,
          100,
          97,
          116,
          97,
          32,
          116,
          121,
          112,
          101,
          32,
          102,
          111,
          114,
          32,
          97,
          110,
          105,
          109,
          97,
          116,
          105,
          111,
          110,
          32,
          100,
          97,
          116,
          97,
          46,
          32,
          69,
          120,
          112,
          101,
          99,
          116,
          101,
          100,
          58,
          32,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          45,
          32,
          115,
          116,
          114,
          105,
          110,
          103,
          32,
          40,
          76,
          111,
          116,
          116,
          105,
          101,
          32,
          74,
          83,
          79,
          78,
          41,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          45,
          32,
          65,
          114,
          114,
          97,
          121,
          66,
          117,
          102,
          102,
          101,
          114,
          32,
          40,
          100,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          41,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          45,
          32,
          111,
          98,
          106,
          101,
          99,
          116,
          32,
          40,
          76,
          111,
          116,
          116,
          105,
          101,
          32,
          74,
          83,
          79,
          78,
          41,
          46,
          32,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          82,
          101,
          99,
          101,
          105,
          118,
          101,
          100,
          58,
          32,
          36,
          123,
          116,
          121,
          112,
          101,
          111,
          102,
          32,
          100,
          97,
          116,
          97,
          125,
          96,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          108,
          111,
          97,
          100,
          101,
          100,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          101,
          118,
          101,
          110,
          116,
          77,
          97,
          110,
          97,
          103,
          101,
          114,
          46,
          100,
          105,
          115,
          112,
          97,
          116,
          99,
          104,
          40,
          123,
          32,
          116,
          121,
          112,
          101,
          58,
          32,
          34,
          108,
          111,
          97,
          100,
          34,
          32,
          125,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          73,
          83,
          95,
          66,
          82,
          79,
          87,
          83,
          69,
          82,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          114,
          101,
          115,
          105,
          122,
          101,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          101,
          118,
          101,
          110,
          116,
          77,
          97,
          110,
          97,
          103,
          101,
          114,
          46,
          100,
          105,
          115,
          112,
          97,
          116,
          99,
          104,
          40,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          121,
          112,
          101,
          58,
          32,
          34,
          102,
          114,
          97,
          109,
          101,
          34,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          117,
          114,
          114,
          101,
          110,
          116,
          70,
          114,
          97,
          109,
          101,
          58,
          32,
          116,
          104,
          105,
          115,
          46,
          99,
          117,
          114,
          114,
          101,
          110,
          116,
          70,
          114,
          97,
          109,
          101,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          114,
          101,
          110,
          100,
          101,
          114,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          116,
          104,
          105,
          115,
          46,
          95,
          100,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          67,
          111,
          114,
          101,
          46,
          99,
          111,
          110,
          102,
          105,
          103,
          40,
          41,
          46,
          97,
          117,
          116,
          111,
          112,
          108,
          97,
          121,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          100,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          67,
          111,
          114,
          101,
          46,
          112,
          108,
          97,
          121,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          116,
          104,
          105,
          115,
          46,
          95,
          100,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          67,
          111,
          114,
          101,
          46,
          105,
          115,
          80,
          108,
          97,
          121,
          105,
          110,
          103,
          40,
          41,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          101,
          118,
          101,
          110,
          116,
          77,
          97,
          110,
          97,
          103,
          101,
          114,
          46,
          100,
          105,
          115,
          112,
          97,
          116,
          99,
          104,
          40,
          123,
          32,
          116,
          121,
          112,
          101,
          58,
          32,
          34,
          112,
          108,
          97,
          121,
          34,
          32,
          125,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          97,
          110,
          105,
          109,
          97,
          116,
          105,
          111,
          110,
          70,
          114,
          97,
          109,
          101,
          73,
          100,
          32,
          61,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          102,
          114,
          97,
          109,
          101,
          77,
          97,
          110,
          97,
          103,
          101,
          114,
          46,
          114,
          101,
          113,
          117,
          101,
          115,
          116,
          65,
          110,
          105,
          109,
          97,
          116,
          105,
          111,
          110,
          70,
          114,
          97,
          109,
          101,
          40,
          116,
          104,
          105,
          115,
          46,
          95,
          100,
          114,
          97,
          119,
          46,
          98,
          105,
          110,
          100,
          40,
          116,
          104,
          105,
          115,
          41,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          32,
          101,
          108,
          115,
          101,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          111,
          108,
          101,
          46,
          101,
          114,
          114,
          111,
          114,
          40,
          34,
          115,
          111,
          109,
          101,
          116,
          104,
          105,
          110,
          103,
          32,
          119,
          101,
          110,
          116,
          32,
          119,
          114,
          111,
          110,
          103,
          44,
          32,
          116,
          104,
          101,
          32,
          97,
          110,
          105,
          109,
          97,
          116,
          105,
          111,
          110,
          32,
          119,
          97,
          115,
          32,
          115,
          117,
          112,
          112,
          111,
          115,
          101,
          32,
          116,
          111,
          32,
          97,
          117,
          116,
          111,
          112,
          108,
          97,
          121,
          34,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          73,
          83,
          95,
          66,
          82,
          79,
          87,
          83,
          69,
          82,
          32,
          38,
          38,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          99,
          97,
          110,
          118,
          97,
          115,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          111,
          102,
          32,
          72,
          84,
          77,
          76,
          67,
          97,
          110,
          118,
          97,
          115,
          69,
          108,
          101,
          109,
          101,
          110,
          116,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          116,
          104,
          105,
          115,
          46,
          95,
          114,
          101,
          110,
          100,
          101,
          114,
          67,
          111,
          110,
          102,
          105,
          103,
          46,
          102,
          114,
          101,
          101,
          122,
          101,
          79,
          110,
          79,
          102,
          102,
          115,
          99,
          114,
          101,
          101,
          110,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          79,
          102,
          102,
          115,
          99,
          114,
          101,
          101,
          110,
          79,
          98,
          115,
          101,
          114,
          118,
          101,
          114,
          46,
          111,
          98,
          115,
          101,
          114,
          118,
          101,
          40,
          116,
          104,
          105,
          115,
          46,
          95,
          99,
          97,
          110,
          118,
          97,
          115,
          44,
          32,
          116,
          104,
          105,
          115,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          116,
          104,
          105,
          115,
          46,
          95,
          114,
          101,
          110,
          100,
          101,
          114,
          67,
          111,
          110,
          102,
          105,
          103,
          46,
          97,
          117,
          116,
          111,
          82,
          101,
          115,
          105,
          122,
          101,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          67,
          97,
          110,
          118,
          97,
          115,
          82,
          101,
          115,
          105,
          122,
          101,
          79,
          98,
          115,
          101,
          114,
          118,
          101,
          114,
          46,
          111,
          98,
          115,
          101,
          114,
          118,
          101,
          40,
          116,
          104,
          105,
          115,
          46,
          95,
          99,
          97,
          110,
          118,
          97,
          115,
          44,
          32,
          116,
          104,
          105,
          115,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          32,
          101,
          108,
          115,
          101,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          100,
          105,
          115,
          112,
          97,
          116,
          99,
          104,
          69,
          114,
          114,
          111,
          114,
          40,
          34,
          70,
          97,
          105,
          108,
          101,
          100,
          32,
          116,
          111,
          32,
          108,
          111,
          97,
          100,
          32,
          97,
          110,
          105,
          109,
          97,
          116,
          105,
          111,
          110,
          32,
          100,
          97,
          116,
          97,
          34,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          95,
          108,
          111,
          97,
          100,
          70,
          114,
          111,
          109,
          83,
          114,
          99,
          40,
          115,
          114,
          99,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          102,
          101,
          116,
          99,
          104,
          68,
          97,
          116,
          97,
          40,
          115,
          114,
          99,
          41,
          46,
          116,
          104,
          101,
          110,
          40,
          40,
          100,
          97,
          116,
          97,
          41,
          32,
          61,
          62,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          108,
          111,
          97,
          100,
          70,
          114,
          111,
          109,
          68,
          97,
          116,
          97,
          40,
          100,
          97,
          116,
          97,
          41,
          41,
          46,
          99,
          97,
          116,
          99,
          104,
          40,
          40,
          101,
          114,
          114,
          111,
          114,
          41,
          32,
          61,
          62,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          100,
          105,
          115,
          112,
          97,
          116,
          99,
          104,
          69,
          114,
          114,
          111,
          114,
          40,
          96,
          70,
          97,
          105,
          108,
          101,
          100,
          32,
          116,
          111,
          32,
          108,
          111,
          97,
          100,
          32,
          97,
          110,
          105,
          109,
          97,
          116,
          105,
          111,
          110,
          32,
          100,
          97,
          116,
          97,
          32,
          102,
          114,
          111,
          109,
          32,
          85,
          82,
          76,
          58,
          32,
          36,
          123,
          115,
          114,
          99,
          125,
          46,
          32,
          36,
          123,
          101,
          114,
          114,
          111,
          114,
          125,
          96,
          41,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          103,
          101,
          116,
          32,
          98,
          117,
          102,
          102,
          101,
          114,
          40,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          33,
          116,
          104,
          105,
          115,
          46,
          95,
          100,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          67,
          111,
          114,
          101,
          41,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          110,
          117,
          108,
          108,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          100,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          67,
          111,
          114,
          101,
          46,
          98,
          117,
          102,
          102,
          101,
          114,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          103,
          101,
          116,
          32,
          97,
          99,
          116,
          105,
          118,
          101,
          65,
          110,
          105,
          109,
          97,
          116,
          105,
          111,
          110,
          73,
          100,
          40,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          100,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          67,
          111,
          114,
          101,
          63,
          46,
          97,
          99,
          116,
          105,
          118,
          101,
          65,
          110,
          105,
          109,
          97,
          116,
          105,
          111,
          110,
          73,
          100,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          103,
          101,
          116,
          32,
          97,
          99,
          116,
          105,
          118,
          101,
          84,
          104,
          101,
          109,
          101,
          73,
          100,
          40,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          100,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          67,
          111,
          114,
          101,
          63,
          46,
          97,
          99,
          116,
          105,
          118,
          101,
          84,
          104,
          101,
          109,
          101,
          73,
          100,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          103,
          101,
          116,
          32,
          108,
          97,
          121,
          111,
          117,
          116,
          40,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          108,
          97,
          121,
          111,
          117,
          116,
          32,
          61,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          100,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          67,
          111,
          114,
          101,
          63,
          46,
          99,
          111,
          110,
          102,
          105,
          103,
          40,
          41,
          46,
          108,
          97,
          121,
          111,
          117,
          116,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          108,
          97,
          121,
          111,
          117,
          116,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          97,
          108,
          105,
          103,
          110,
          58,
          32,
          91,
          108,
          97,
          121,
          111,
          117,
          116,
          46,
          97,
          108,
          105,
          103,
          110,
          46,
          103,
          101,
          116,
          40,
          48,
          41,
          44,
          32,
          108,
          97,
          121,
          111,
          117,
          116,
          46,
          97,
          108,
          105,
          103,
          110,
          46,
          103,
          101,
          116,
          40,
          49,
          41,
          93,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          105,
          116,
          58,
          32,
          40,
          40,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          115,
          119,
          105,
          116,
          99,
          104,
          32,
          40,
          108,
          97,
          121,
          111,
          117,
          116,
          46,
          102,
          105,
          116,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          97,
          115,
          101,
          32,
          95,
          68,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          46,
          95,
          119,
          97,
          115,
          109,
          77,
          111,
          100,
          117,
          108,
          101,
          63,
          46,
          70,
          105,
          116,
          46,
          67,
          111,
          110,
          116,
          97,
          105,
          110,
          58,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          34,
          99,
          111,
          110,
          116,
          97,
          105,
          110,
          34,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          97,
          115,
          101,
          32,
          95,
          68,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          46,
          95,
          119,
          97,
          115,
          109,
          77,
          111,
          100,
          117,
          108,
          101,
          63,
          46,
          70,
          105,
          116,
          46,
          67,
          111,
          118,
          101,
          114,
          58,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          34,
          99,
          111,
          118,
          101,
          114,
          34,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          97,
          115,
          101,
          32,
          95,
          68,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          46,
          95,
          119,
          97,
          115,
          109,
          77,
          111,
          100,
          117,
          108,
          101,
          63,
          46,
          70,
          105,
          116,
          46,
          70,
          105,
          108,
          108,
          58,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          34,
          102,
          105,
          108,
          108,
          34,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          97,
          115,
          101,
          32,
          95,
          68,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          46,
          95,
          119,
          97,
          115,
          109,
          77,
          111,
          100,
          117,
          108,
          101,
          63,
          46,
          70,
          105,
          116,
          46,
          70,
          105,
          116,
          72,
          101,
          105,
          103,
          104,
          116,
          58,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          34,
          102,
          105,
          116,
          45,
          104,
          101,
          105,
          103,
          104,
          116,
          34,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          97,
          115,
          101,
          32,
          95,
          68,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          46,
          95,
          119,
          97,
          115,
          109,
          77,
          111,
          100,
          117,
          108,
          101,
          63,
          46,
          70,
          105,
          116,
          46,
          70,
          105,
          116,
          87,
          105,
          100,
          116,
          104,
          58,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          34,
          102,
          105,
          116,
          45,
          119,
          105,
          100,
          116,
          104,
          34,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          97,
          115,
          101,
          32,
          95,
          68,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          46,
          95,
          119,
          97,
          115,
          109,
          77,
          111,
          100,
          117,
          108,
          101,
          63,
          46,
          70,
          105,
          116,
          46,
          78,
          111,
          110,
          101,
          58,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          34,
          110,
          111,
          110,
          101,
          34,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          100,
          101,
          102,
          97,
          117,
          108,
          116,
          58,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          34,
          99,
          111,
          110,
          116,
          97,
          105,
          110,
          34,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          41,
          40,
          41,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          118,
          111,
          105,
          100,
          32,
          48,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          103,
          101,
          116,
          32,
          109,
          97,
          114,
          107,
          101,
          114,
          40,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          109,
          97,
          114,
          107,
          101,
          114,
          32,
          61,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          100,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          67,
          111,
          114,
          101,
          63,
          46,
          99,
          111,
          110,
          102,
          105,
          103,
          40,
          41,
          46,
          109,
          97,
          114,
          107,
          101,
          114,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          109,
          97,
          114,
          107,
          101,
          114,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          103,
          101,
          116,
          32,
          109,
          97,
          110,
          105,
          102,
          101,
          115,
          116,
          40,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          114,
          121,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          109,
          97,
          110,
          105,
          102,
          101,
          115,
          116,
          32,
          61,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          100,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          67,
          111,
          114,
          101,
          63,
          46,
          109,
          97,
          110,
          105,
          102,
          101,
          115,
          116,
          83,
          116,
          114,
          105,
          110,
          103,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          116,
          104,
          105,
          115,
          46,
          95,
          100,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          67,
          111,
          114,
          101,
          32,
          61,
          61,
          61,
          32,
          110,
          117,
          108,
          108,
          32,
          124,
          124,
          32,
          33,
          109,
          97,
          110,
          105,
          102,
          101,
          115,
          116,
          41,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          110,
          117,
          108,
          108,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          109,
          97,
          110,
          105,
          102,
          101,
          115,
          116,
          74,
          115,
          111,
          110,
          32,
          61,
          32,
          74,
          83,
          79,
          78,
          46,
          112,
          97,
          114,
          115,
          101,
          40,
          109,
          97,
          110,
          105,
          102,
          101,
          115,
          116,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          79,
          98,
          106,
          101,
          99,
          116,
          46,
          107,
          101,
          121,
          115,
          40,
          109,
          97,
          110,
          105,
          102,
          101,
          115,
          116,
          74,
          115,
          111,
          110,
          41,
          46,
          108,
          101,
          110,
          103,
          116,
          104,
          32,
          61,
          61,
          61,
          32,
          48,
          41,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          110,
          117,
          108,
          108,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          109,
          97,
          110,
          105,
          102,
          101,
          115,
          116,
          74,
          115,
          111,
          110,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          32,
          99,
          97,
          116,
          99,
          104,
          32,
          40,
          95,
          101,
          114,
          114,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          110,
          117,
          108,
          108,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          103,
          101,
          116,
          32,
          114,
          101,
          110,
          100,
          101,
          114,
          67,
          111,
          110,
          102,
          105,
          103,
          40,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          114,
          101,
          110,
          100,
          101,
          114,
          67,
          111,
          110,
          102,
          105,
          103,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          103,
          101,
          116,
          32,
          115,
          101,
          103,
          109,
          101,
          110,
          116,
          40,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          115,
          101,
          103,
          109,
          101,
          110,
          116,
          32,
          61,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          100,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          67,
          111,
          114,
          101,
          63,
          46,
          99,
          111,
          110,
          102,
          105,
          103,
          40,
          41,
          46,
          115,
          101,
          103,
          109,
          101,
          110,
          116,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          115,
          101,
          103,
          109,
          101,
          110,
          116,
          32,
          38,
          38,
          32,
          115,
          101,
          103,
          109,
          101,
          110,
          116,
          46,
          115,
          105,
          122,
          101,
          40,
          41,
          32,
          61,
          61,
          61,
          32,
          50,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          91,
          115,
          101,
          103,
          109,
          101,
          110,
          116,
          46,
          103,
          101,
          116,
          40,
          48,
          41,
          44,
          32,
          115,
          101,
          103,
          109,
          101,
          110,
          116,
          46,
          103,
          101,
          116,
          40,
          49,
          41,
          93,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          118,
          111,
          105,
          100,
          32,
          48,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          103,
          101,
          116,
          32,
          108,
          111,
          111,
          112,
          40,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          100,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          67,
          111,
          114,
          101,
          63,
          46,
          99,
          111,
          110,
          102,
          105,
          103,
          40,
          41,
          46,
          108,
          111,
          111,
          112,
          65,
          110,
          105,
          109,
          97,
          116,
          105,
          111,
          110,
          32,
          63,
          63,
          32,
          102,
          97,
          108,
          115,
          101,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          103,
          101,
          116,
          32,
          109,
          111,
          100,
          101,
          40,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          109,
          111,
          100,
          101,
          32,
          61,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          100,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          67,
          111,
          114,
          101,
          63,
          46,
          99,
          111,
          110,
          102,
          105,
          103,
          40,
          41,
          46,
          109,
          111,
          100,
          101,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          109,
          111,
          100,
          101,
          32,
          61,
          61,
          61,
          32,
          95,
          68,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          46,
          95,
          119,
          97,
          115,
          109,
          77,
          111,
          100,
          117,
          108,
          101,
          63,
          46,
          77,
          111,
          100,
          101,
          46,
          82,
          101,
          118,
          101,
          114,
          115,
          101,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          34,
          114,
          101,
          118,
          101,
          114,
          115,
          101,
          34,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          32,
          101,
          108,
          115,
          101,
          32,
          105,
          102,
          32,
          40,
          109,
          111,
          100,
          101,
          32,
          61,
          61,
          61,
          32,
          95,
          68,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          46,
          95,
          119,
          97,
          115,
          109,
          77,
          111,
          100,
          117,
          108,
          101,
          63,
          46,
          77,
          111,
          100,
          101,
          46,
          66,
          111,
          117,
          110,
          99,
          101,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          34,
          98,
          111,
          117,
          110,
          99,
          101,
          34,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          32,
          101,
          108,
          115,
          101,
          32,
          105,
          102,
          32,
          40,
          109,
          111,
          100,
          101,
          32,
          61,
          61,
          61,
          32,
          95,
          68,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          46,
          95,
          119,
          97,
          115,
          109,
          77,
          111,
          100,
          117,
          108,
          101,
          63,
          46,
          77,
          111,
          100,
          101,
          46,
          82,
          101,
          118,
          101,
          114,
          115,
          101,
          66,
          111,
          117,
          110,
          99,
          101,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          34,
          114,
          101,
          118,
          101,
          114,
          115,
          101,
          45,
          98,
          111,
          117,
          110,
          99,
          101,
          34,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          32,
          101,
          108,
          115,
          101,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          34,
          102,
          111,
          114,
          119,
          97,
          114,
          100,
          34,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          103,
          101,
          116,
          32,
          105,
          115,
          70,
          114,
          111,
          122,
          101,
          110,
          40,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          105,
          115,
          70,
          114,
          111,
          122,
          101,
          110,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          103,
          101,
          116,
          32,
          98,
          97,
          99,
          107,
          103,
          114,
          111,
          117,
          110,
          100,
          67,
          111,
          108,
          111,
          114,
          40,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          98,
          97,
          99,
          107,
          103,
          114,
          111,
          117,
          110,
          100,
          67,
          111,
          108,
          111,
          114,
          32,
          63,
          63,
          32,
          34,
          34,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          103,
          101,
          116,
          32,
          97,
          117,
          116,
          111,
          112,
          108,
          97,
          121,
          40,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          100,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          67,
          111,
          114,
          101,
          63,
          46,
          99,
          111,
          110,
          102,
          105,
          103,
          40,
          41,
          46,
          97,
          117,
          116,
          111,
          112,
          108,
          97,
          121,
          32,
          63,
          63,
          32,
          102,
          97,
          108,
          115,
          101,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          103,
          101,
          116,
          32,
          117,
          115,
          101,
          70,
          114,
          97,
          109,
          101,
          73,
          110,
          116,
          101,
          114,
          112,
          111,
          108,
          97,
          116,
          105,
          111,
          110,
          40,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          100,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          67,
          111,
          114,
          101,
          63,
          46,
          99,
          111,
          110,
          102,
          105,
          103,
          40,
          41,
          46,
          117,
          115,
          101,
          70,
          114,
          97,
          109,
          101,
          73,
          110,
          116,
          101,
          114,
          112,
          111,
          108,
          97,
          116,
          105,
          111,
          110,
          32,
          63,
          63,
          32,
          102,
          97,
          108,
          115,
          101,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          103,
          101,
          116,
          32,
          115,
          112,
          101,
          101,
          100,
          40,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          100,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          67,
          111,
          114,
          101,
          63,
          46,
          99,
          111,
          110,
          102,
          105,
          103,
          40,
          41,
          46,
          115,
          112,
          101,
          101,
          100,
          32,
          63,
          63,
          32,
          48,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          103,
          101,
          116,
          32,
          105,
          115,
          82,
          101,
          97,
          100,
          121,
          40,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          100,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          67,
          111,
          114,
          101,
          32,
          33,
          61,
          61,
          32,
          110,
          117,
          108,
          108,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          103,
          101,
          116,
          32,
          105,
          115,
          76,
          111,
          97,
          100,
          101,
          100,
          40,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          100,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          67,
          111,
          114,
          101,
          63,
          46,
          105,
          115,
          76,
          111,
          97,
          100,
          101,
          100,
          40,
          41,
          32,
          63,
          63,
          32,
          102,
          97,
          108,
          115,
          101,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          103,
          101,
          116,
          32,
          105,
          115,
          80,
          108,
          97,
          121,
          105,
          110,
          103,
          40,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          100,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          67,
          111,
          114,
          101,
          63,
          46,
          105,
          115,
          80,
          108,
          97,
          121,
          105,
          110,
          103,
          40,
          41,
          32,
          63,
          63,
          32,
          102,
          97,
          108,
          115,
          101,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          103,
          101,
          116,
          32,
          105,
          115,
          80,
          97,
          117,
          115,
          101,
          100,
          40,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          100,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          67,
          111,
          114,
          101,
          63,
          46,
          105,
          115,
          80,
          97,
          117,
          115,
          101,
          100,
          40,
          41,
          32,
          63,
          63,
          32,
          102,
          97,
          108,
          115,
          101,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          103,
          101,
          116,
          32,
          105,
          115,
          83,
          116,
          111,
          112,
          112,
          101,
          100,
          40,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          100,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          67,
          111,
          114,
          101,
          63,
          46,
          105,
          115,
          83,
          116,
          111,
          112,
          112,
          101,
          100,
          40,
          41,
          32,
          63,
          63,
          32,
          102,
          97,
          108,
          115,
          101,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          103,
          101,
          116,
          32,
          99,
          117,
          114,
          114,
          101,
          110,
          116,
          70,
          114,
          97,
          109,
          101,
          40,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          33,
          116,
          104,
          105,
          115,
          46,
          95,
          100,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          67,
          111,
          114,
          101,
          41,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          48,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          77,
          97,
          116,
          104,
          46,
          114,
          111,
          117,
          110,
          100,
          40,
          116,
          104,
          105,
          115,
          46,
          95,
          100,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          67,
          111,
          114,
          101,
          46,
          99,
          117,
          114,
          114,
          101,
          110,
          116,
          70,
          114,
          97,
          109,
          101,
          40,
          41,
          32,
          42,
          32,
          49,
          48,
          48,
          41,
          32,
          47,
          32,
          49,
          48,
          48,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          103,
          101,
          116,
          32,
          108,
          111,
          111,
          112,
          67,
          111,
          117,
          110,
          116,
          40,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          100,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          67,
          111,
          114,
          101,
          63,
          46,
          108,
          111,
          111,
          112,
          67,
          111,
          117,
          110,
          116,
          40,
          41,
          32,
          63,
          63,
          32,
          48,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          103,
          101,
          116,
          32,
          116,
          111,
          116,
          97,
          108,
          70,
          114,
          97,
          109,
          101,
          115,
          40,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          100,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          67,
          111,
          114,
          101,
          63,
          46,
          116,
          111,
          116,
          97,
          108,
          70,
          114,
          97,
          109,
          101,
          115,
          40,
          41,
          32,
          63,
          63,
          32,
          48,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          103,
          101,
          116,
          32,
          100,
          117,
          114,
          97,
          116,
          105,
          111,
          110,
          40,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          100,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          67,
          111,
          114,
          101,
          63,
          46,
          100,
          117,
          114,
          97,
          116,
          105,
          111,
          110,
          40,
          41,
          32,
          63,
          63,
          32,
          48,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          103,
          101,
          116,
          32,
          115,
          101,
          103,
          109,
          101,
          110,
          116,
          68,
          117,
          114,
          97,
          116,
          105,
          111,
          110,
          40,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          100,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          67,
          111,
          114,
          101,
          63,
          46,
          115,
          101,
          103,
          109,
          101,
          110,
          116,
          68,
          117,
          114,
          97,
          116,
          105,
          111,
          110,
          40,
          41,
          32,
          63,
          63,
          32,
          48,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          103,
          101,
          116,
          32,
          99,
          97,
          110,
          118,
          97,
          115,
          40,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          99,
          97,
          110,
          118,
          97,
          115,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          108,
          111,
          97,
          100,
          40,
          99,
          111,
          110,
          102,
          105,
          103,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          116,
          104,
          105,
          115,
          46,
          95,
          100,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          67,
          111,
          114,
          101,
          32,
          61,
          61,
          61,
          32,
          110,
          117,
          108,
          108,
          32,
          124,
          124,
          32,
          95,
          68,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          46,
          95,
          119,
          97,
          115,
          109,
          77,
          111,
          100,
          117,
          108,
          101,
          32,
          61,
          61,
          61,
          32,
          110,
          117,
          108,
          108,
          41,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          116,
          104,
          105,
          115,
          46,
          95,
          97,
          110,
          105,
          109,
          97,
          116,
          105,
          111,
          110,
          70,
          114,
          97,
          109,
          101,
          73,
          100,
          32,
          33,
          61,
          61,
          32,
          110,
          117,
          108,
          108,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          102,
          114,
          97,
          109,
          101,
          77,
          97,
          110,
          97,
          103,
          101,
          114,
          46,
          99,
          97,
          110,
          99,
          101,
          108,
          65,
          110,
          105,
          109,
          97,
          116,
          105,
          111,
          110,
          70,
          114,
          97,
          109,
          101,
          40,
          116,
          104,
          105,
          115,
          46,
          95,
          97,
          110,
          105,
          109,
          97,
          116,
          105,
          111,
          110,
          70,
          114,
          97,
          109,
          101,
          73,
          100,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          97,
          110,
          105,
          109,
          97,
          116,
          105,
          111,
          110,
          70,
          114,
          97,
          109,
          101,
          73,
          100,
          32,
          61,
          32,
          110,
          117,
          108,
          108,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          105,
          115,
          70,
          114,
          111,
          122,
          101,
          110,
          32,
          61,
          32,
          102,
          97,
          108,
          115,
          101,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          100,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          67,
          111,
          114,
          101,
          46,
          115,
          101,
          116,
          67,
          111,
          110,
          102,
          105,
          103,
          40,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          97,
          110,
          105,
          109,
          97,
          116,
          105,
          111,
          110,
          73,
          100,
          58,
          32,
          99,
          111,
          110,
          102,
          105,
          103,
          46,
          97,
          110,
          105,
          109,
          97,
          116,
          105,
          111,
          110,
          73,
          100,
          32,
          63,
          63,
          32,
          34,
          34,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          101,
          109,
          101,
          73,
          100,
          58,
          32,
          99,
          111,
          110,
          102,
          105,
          103,
          46,
          116,
          104,
          101,
          109,
          101,
          73,
          100,
          32,
          63,
          63,
          32,
          34,
          34,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          115,
          116,
          97,
          116,
          101,
          77,
          97,
          99,
          104,
          105,
          110,
          101,
          73,
          100,
          58,
          32,
          34,
          34,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          97,
          117,
          116,
          111,
          112,
          108,
          97,
          121,
          58,
          32,
          99,
          111,
          110,
          102,
          105,
          103,
          46,
          97,
          117,
          116,
          111,
          112,
          108,
          97,
          121,
          32,
          63,
          63,
          32,
          102,
          97,
          108,
          115,
          101,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          98,
          97,
          99,
          107,
          103,
          114,
          111,
          117,
          110,
          100,
          67,
          111,
          108,
          111,
          114,
          58,
          32,
          48,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          108,
          111,
          111,
          112,
          65,
          110,
          105,
          109,
          97,
          116,
          105,
          111,
          110,
          58,
          32,
          99,
          111,
          110,
          102,
          105,
          103,
          46,
          108,
          111,
          111,
          112,
          32,
          63,
          63,
          32,
          102,
          97,
          108,
          115,
          101,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          109,
          111,
          100,
          101,
          58,
          32,
          99,
          114,
          101,
          97,
          116,
          101,
          67,
          111,
          114,
          101,
          77,
          111,
          100,
          101,
          40,
          99,
          111,
          110,
          102,
          105,
          103,
          46,
          109,
          111,
          100,
          101,
          32,
          63,
          63,
          32,
          34,
          102,
          111,
          114,
          119,
          97,
          114,
          100,
          34,
          44,
          32,
          95,
          68,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          46,
          95,
          119,
          97,
          115,
          109,
          77,
          111,
          100,
          117,
          108,
          101,
          41,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          115,
          101,
          103,
          109,
          101,
          110,
          116,
          58,
          32,
          99,
          114,
          101,
          97,
          116,
          101,
          67,
          111,
          114,
          101,
          83,
          101,
          103,
          109,
          101,
          110,
          116,
          40,
          99,
          111,
          110,
          102,
          105,
          103,
          46,
          115,
          101,
          103,
          109,
          101,
          110,
          116,
          32,
          63,
          63,
          32,
          91,
          93,
          44,
          32,
          95,
          68,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          46,
          95,
          119,
          97,
          115,
          109,
          77,
          111,
          100,
          117,
          108,
          101,
          41,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          115,
          112,
          101,
          101,
          100,
          58,
          32,
          99,
          111,
          110,
          102,
          105,
          103,
          46,
          115,
          112,
          101,
          101,
          100,
          32,
          63,
          63,
          32,
          49,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          117,
          115,
          101,
          70,
          114,
          97,
          109,
          101,
          73,
          110,
          116,
          101,
          114,
          112,
          111,
          108,
          97,
          116,
          105,
          111,
          110,
          58,
          32,
          99,
          111,
          110,
          102,
          105,
          103,
          46,
          117,
          115,
          101,
          70,
          114,
          97,
          109,
          101,
          73,
          110,
          116,
          101,
          114,
          112,
          111,
          108,
          97,
          116,
          105,
          111,
          110,
          32,
          63,
          63,
          32,
          116,
          114,
          117,
          101,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          109,
          97,
          114,
          107,
          101,
          114,
          58,
          32,
          99,
          111,
          110,
          102,
          105,
          103,
          46,
          109,
          97,
          114,
          107,
          101,
          114,
          32,
          63,
          63,
          32,
          34,
          34,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          108,
          97,
          121,
          111,
          117,
          116,
          58,
          32,
          99,
          114,
          101,
          97,
          116,
          101,
          67,
          111,
          114,
          101,
          76,
          97,
          121,
          111,
          117,
          116,
          40,
          99,
          111,
          110,
          102,
          105,
          103,
          46,
          108,
          97,
          121,
          111,
          117,
          116,
          44,
          32,
          95,
          68,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          46,
          95,
          119,
          97,
          115,
          109,
          77,
          111,
          100,
          117,
          108,
          101,
          41,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          99,
          111,
          110,
          102,
          105,
          103,
          46,
          100,
          97,
          116,
          97,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          108,
          111,
          97,
          100,
          70,
          114,
          111,
          109,
          68,
          97,
          116,
          97,
          40,
          99,
          111,
          110,
          102,
          105,
          103,
          46,
          100,
          97,
          116,
          97,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          32,
          101,
          108,
          115,
          101,
          32,
          105,
          102,
          32,
          40,
          99,
          111,
          110,
          102,
          105,
          103,
          46,
          115,
          114,
          99,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          108,
          111,
          97,
          100,
          70,
          114,
          111,
          109,
          83,
          114,
          99,
          40,
          99,
          111,
          110,
          102,
          105,
          103,
          46,
          115,
          114,
          99,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          115,
          101,
          116,
          66,
          97,
          99,
          107,
          103,
          114,
          111,
          117,
          110,
          100,
          67,
          111,
          108,
          111,
          114,
          40,
          99,
          111,
          110,
          102,
          105,
          103,
          46,
          98,
          97,
          99,
          107,
          103,
          114,
          111,
          117,
          110,
          100,
          67,
          111,
          108,
          111,
          114,
          32,
          63,
          63,
          32,
          34,
          34,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          95,
          114,
          101,
          110,
          100,
          101,
          114,
          40,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          116,
          104,
          105,
          115,
          46,
          95,
          100,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          67,
          111,
          114,
          101,
          32,
          61,
          61,
          61,
          32,
          110,
          117,
          108,
          108,
          41,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          102,
          97,
          108,
          115,
          101,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          33,
          116,
          104,
          105,
          115,
          46,
          95,
          99,
          111,
          110,
          116,
          101,
          120,
          116,
          32,
          38,
          38,
          32,
          34,
          103,
          101,
          116,
          67,
          111,
          110,
          116,
          101,
          120,
          116,
          34,
          32,
          105,
          110,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          99,
          97,
          110,
          118,
          97,
          115,
          32,
          38,
          38,
          32,
          116,
          121,
          112,
          101,
          111,
          102,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          99,
          97,
          110,
          118,
          97,
          115,
          46,
          103,
          101,
          116,
          67,
          111,
          110,
          116,
          101,
          120,
          116,
          32,
          61,
          61,
          61,
          32,
          34,
          102,
          117,
          110,
          99,
          116,
          105,
          111,
          110,
          34,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          99,
          111,
          110,
          116,
          101,
          120,
          116,
          32,
          61,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          99,
          97,
          110,
          118,
          97,
          115,
          46,
          103,
          101,
          116,
          67,
          111,
          110,
          116,
          101,
          120,
          116,
          40,
          34,
          50,
          100,
          34,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          114,
          101,
          110,
          100,
          101,
          114,
          101,
          100,
          32,
          61,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          100,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          67,
          111,
          114,
          101,
          46,
          114,
          101,
          110,
          100,
          101,
          114,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          114,
          101,
          110,
          100,
          101,
          114,
          101,
          100,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          116,
          104,
          105,
          115,
          46,
          95,
          99,
          111,
          110,
          116,
          101,
          120,
          116,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          98,
          117,
          102,
          102,
          101,
          114,
          32,
          61,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          100,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          67,
          111,
          114,
          101,
          46,
          98,
          117,
          102,
          102,
          101,
          114,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          99,
          108,
          97,
          109,
          112,
          101,
          100,
          66,
          117,
          102,
          102,
          101,
          114,
          32,
          61,
          32,
          110,
          101,
          119,
          32,
          85,
          105,
          110,
          116,
          56,
          67,
          108,
          97,
          109,
          112,
          101,
          100,
          65,
          114,
          114,
          97,
          121,
          40,
          98,
          117,
          102,
          102,
          101,
          114,
          44,
          32,
          48,
          44,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          99,
          97,
          110,
          118,
          97,
          115,
          46,
          119,
          105,
          100,
          116,
          104,
          32,
          42,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          99,
          97,
          110,
          118,
          97,
          115,
          46,
          104,
          101,
          105,
          103,
          104,
          116,
          32,
          42,
          32,
          52,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          108,
          101,
          116,
          32,
          105,
          109,
          97,
          103,
          101,
          68,
          97,
          116,
          97,
          32,
          61,
          32,
          110,
          117,
          108,
          108,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          116,
          121,
          112,
          101,
          111,
          102,
          32,
          73,
          109,
          97,
          103,
          101,
          68,
          97,
          116,
          97,
          32,
          61,
          61,
          61,
          32,
          34,
          117,
          110,
          100,
          101,
          102,
          105,
          110,
          101,
          100,
          34,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          109,
          97,
          103,
          101,
          68,
          97,
          116,
          97,
          32,
          61,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          99,
          111,
          110,
          116,
          101,
          120,
          116,
          46,
          99,
          114,
          101,
          97,
          116,
          101,
          73,
          109,
          97,
          103,
          101,
          68,
          97,
          116,
          97,
          40,
          116,
          104,
          105,
          115,
          46,
          95,
          99,
          97,
          110,
          118,
          97,
          115,
          46,
          119,
          105,
          100,
          116,
          104,
          44,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          99,
          97,
          110,
          118,
          97,
          115,
          46,
          104,
          101,
          105,
          103,
          104,
          116,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          109,
          97,
          103,
          101,
          68,
          97,
          116,
          97,
          46,
          100,
          97,
          116,
          97,
          46,
          115,
          101,
          116,
          40,
          99,
          108,
          97,
          109,
          112,
          101,
          100,
          66,
          117,
          102,
          102,
          101,
          114,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          32,
          101,
          108,
          115,
          101,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          109,
          97,
          103,
          101,
          68,
          97,
          116,
          97,
          32,
          61,
          32,
          110,
          101,
          119,
          32,
          73,
          109,
          97,
          103,
          101,
          68,
          97,
          116,
          97,
          40,
          99,
          108,
          97,
          109,
          112,
          101,
          100,
          66,
          117,
          102,
          102,
          101,
          114,
          44,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          99,
          97,
          110,
          118,
          97,
          115,
          46,
          119,
          105,
          100,
          116,
          104,
          44,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          99,
          97,
          110,
          118,
          97,
          115,
          46,
          104,
          101,
          105,
          103,
          104,
          116,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          99,
          111,
          110,
          116,
          101,
          120,
          116,
          46,
          112,
          117,
          116,
          73,
          109,
          97,
          103,
          101,
          68,
          97,
          116,
          97,
          40,
          105,
          109,
          97,
          103,
          101,
          68,
          97,
          116,
          97,
          44,
          32,
          48,
          44,
          32,
          48,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          101,
          118,
          101,
          110,
          116,
          77,
          97,
          110,
          97,
          103,
          101,
          114,
          46,
          100,
          105,
          115,
          112,
          97,
          116,
          99,
          104,
          40,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          121,
          112,
          101,
          58,
          32,
          34,
          114,
          101,
          110,
          100,
          101,
          114,
          34,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          117,
          114,
          114,
          101,
          110,
          116,
          70,
          114,
          97,
          109,
          101,
          58,
          32,
          116,
          104,
          105,
          115,
          46,
          99,
          117,
          114,
          114,
          101,
          110,
          116,
          70,
          114,
          97,
          109,
          101,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          116,
          114,
          117,
          101,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          102,
          97,
          108,
          115,
          101,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          95,
          100,
          114,
          97,
          119,
          40,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          116,
          104,
          105,
          115,
          46,
          95,
          100,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          67,
          111,
          114,
          101,
          32,
          61,
          61,
          61,
          32,
          110,
          117,
          108,
          108,
          32,
          124,
          124,
          32,
          33,
          116,
          104,
          105,
          115,
          46,
          95,
          100,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          67,
          111,
          114,
          101,
          46,
          105,
          115,
          80,
          108,
          97,
          121,
          105,
          110,
          103,
          40,
          41,
          41,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          114,
          121,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          110,
          101,
          120,
          116,
          70,
          114,
          97,
          109,
          101,
          32,
          61,
          32,
          77,
          97,
          116,
          104,
          46,
          114,
          111,
          117,
          110,
          100,
          40,
          116,
          104,
          105,
          115,
          46,
          95,
          100,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          67,
          111,
          114,
          101,
          46,
          114,
          101,
          113,
          117,
          101,
          115,
          116,
          70,
          114,
          97,
          109,
          101,
          40,
          41,
          32,
          42,
          32,
          49,
          101,
          51,
          41,
          32,
          47,
          32,
          49,
          101,
          51,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          117,
          112,
          100,
          97,
          116,
          101,
          100,
          32,
          61,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          100,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          67,
          111,
          114,
          101,
          46,
          115,
          101,
          116,
          70,
          114,
          97,
          109,
          101,
          40,
          110,
          101,
          120,
          116,
          70,
          114,
          97,
          109,
          101,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          117,
          112,
          100,
          97,
          116,
          101,
          100,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          101,
          118,
          101,
          110,
          116,
          77,
          97,
          110,
          97,
          103,
          101,
          114,
          46,
          100,
          105,
          115,
          112,
          97,
          116,
          99,
          104,
          40,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          121,
          112,
          101,
          58,
          32,
          34,
          102,
          114,
          97,
          109,
          101,
          34,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          117,
          114,
          114,
          101,
          110,
          116,
          70,
          114,
          97,
          109,
          101,
          58,
          32,
          116,
          104,
          105,
          115,
          46,
          99,
          117,
          114,
          114,
          101,
          110,
          116,
          70,
          114,
          97,
          109,
          101,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          114,
          101,
          110,
          100,
          101,
          114,
          101,
          100,
          32,
          61,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          114,
          101,
          110,
          100,
          101,
          114,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          114,
          101,
          110,
          100,
          101,
          114,
          101,
          100,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          116,
          104,
          105,
          115,
          46,
          95,
          100,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          67,
          111,
          114,
          101,
          46,
          105,
          115,
          67,
          111,
          109,
          112,
          108,
          101,
          116,
          101,
          40,
          41,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          116,
          104,
          105,
          115,
          46,
          95,
          100,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          67,
          111,
          114,
          101,
          46,
          99,
          111,
          110,
          102,
          105,
          103,
          40,
          41,
          46,
          108,
          111,
          111,
          112,
          65,
          110,
          105,
          109,
          97,
          116,
          105,
          111,
          110,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          101,
          118,
          101,
          110,
          116,
          77,
          97,
          110,
          97,
          103,
          101,
          114,
          46,
          100,
          105,
          115,
          112,
          97,
          116,
          99,
          104,
          40,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          121,
          112,
          101,
          58,
          32,
          34,
          108,
          111,
          111,
          112,
          34,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          108,
          111,
          111,
          112,
          67,
          111,
          117,
          110,
          116,
          58,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          100,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          67,
          111,
          114,
          101,
          46,
          108,
          111,
          111,
          112,
          67,
          111,
          117,
          110,
          116,
          40,
          41,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          32,
          101,
          108,
          115,
          101,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          101,
          118,
          101,
          110,
          116,
          77,
          97,
          110,
          97,
          103,
          101,
          114,
          46,
          100,
          105,
          115,
          112,
          97,
          116,
          99,
          104,
          40,
          123,
          32,
          116,
          121,
          112,
          101,
          58,
          32,
          34,
          99,
          111,
          109,
          112,
          108,
          101,
          116,
          101,
          34,
          32,
          125,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          97,
          110,
          105,
          109,
          97,
          116,
          105,
          111,
          110,
          70,
          114,
          97,
          109,
          101,
          73,
          100,
          32,
          61,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          102,
          114,
          97,
          109,
          101,
          77,
          97,
          110,
          97,
          103,
          101,
          114,
          46,
          114,
          101,
          113,
          117,
          101,
          115,
          116,
          65,
          110,
          105,
          109,
          97,
          116,
          105,
          111,
          110,
          70,
          114,
          97,
          109,
          101,
          40,
          116,
          104,
          105,
          115,
          46,
          95,
          100,
          114,
          97,
          119,
          46,
          98,
          105,
          110,
          100,
          40,
          116,
          104,
          105,
          115,
          41,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          32,
          99,
          97,
          116,
          99,
          104,
          32,
          40,
          101,
          114,
          114,
          111,
          114,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          111,
          108,
          101,
          46,
          101,
          114,
          114,
          111,
          114,
          40,
          34,
          69,
          114,
          114,
          111,
          114,
          32,
          105,
          110,
          32,
          97,
          110,
          105,
          109,
          97,
          116,
          105,
          111,
          110,
          32,
          102,
          114,
          97,
          109,
          101,
          58,
          34,
          44,
          32,
          101,
          114,
          114,
          111,
          114,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          101,
          118,
          101,
          110,
          116,
          77,
          97,
          110,
          97,
          103,
          101,
          114,
          46,
          100,
          105,
          115,
          112,
          97,
          116,
          99,
          104,
          40,
          123,
          32,
          116,
          121,
          112,
          101,
          58,
          32,
          34,
          114,
          101,
          110,
          100,
          101,
          114,
          69,
          114,
          114,
          111,
          114,
          34,
          44,
          32,
          101,
          114,
          114,
          111,
          114,
          32,
          125,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          101,
          114,
          114,
          111,
          114,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          111,
          102,
          32,
          87,
          101,
          98,
          65,
          115,
          115,
          101,
          109,
          98,
          108,
          121,
          46,
          82,
          117,
          110,
          116,
          105,
          109,
          101,
          69,
          114,
          114,
          111,
          114,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          100,
          101,
          115,
          116,
          114,
          111,
          121,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          112,
          108,
          97,
          121,
          40,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          116,
          104,
          105,
          115,
          46,
          95,
          100,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          67,
          111,
          114,
          101,
          32,
          61,
          61,
          61,
          32,
          110,
          117,
          108,
          108,
          41,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          116,
          104,
          105,
          115,
          46,
          95,
          97,
          110,
          105,
          109,
          97,
          116,
          105,
          111,
          110,
          70,
          114,
          97,
          109,
          101,
          73,
          100,
          32,
          33,
          61,
          61,
          32,
          110,
          117,
          108,
          108,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          102,
          114,
          97,
          109,
          101,
          77,
          97,
          110,
          97,
          103,
          101,
          114,
          46,
          99,
          97,
          110,
          99,
          101,
          108,
          65,
          110,
          105,
          109,
          97,
          116,
          105,
          111,
          110,
          70,
          114,
          97,
          109,
          101,
          40,
          116,
          104,
          105,
          115,
          46,
          95,
          97,
          110,
          105,
          109,
          97,
          116,
          105,
          111,
          110,
          70,
          114,
          97,
          109,
          101,
          73,
          100,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          97,
          110,
          105,
          109,
          97,
          116,
          105,
          111,
          110,
          70,
          114,
          97,
          109,
          101,
          73,
          100,
          32,
          61,
          32,
          110,
          117,
          108,
          108,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          111,
          107,
          32,
          61,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          100,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          67,
          111,
          114,
          101,
          46,
          112,
          108,
          97,
          121,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          111,
          107,
          32,
          124,
          124,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          100,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          67,
          111,
          114,
          101,
          46,
          105,
          115,
          80,
          108,
          97,
          121,
          105,
          110,
          103,
          40,
          41,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          105,
          115,
          70,
          114,
          111,
          122,
          101,
          110,
          32,
          61,
          32,
          102,
          97,
          108,
          115,
          101,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          101,
          118,
          101,
          110,
          116,
          77,
          97,
          110,
          97,
          103,
          101,
          114,
          46,
          100,
          105,
          115,
          112,
          97,
          116,
          99,
          104,
          40,
          123,
          32,
          116,
          121,
          112,
          101,
          58,
          32,
          34,
          112,
          108,
          97,
          121,
          34,
          32,
          125,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          97,
          110,
          105,
          109,
          97,
          116,
          105,
          111,
          110,
          70,
          114,
          97,
          109,
          101,
          73,
          100,
          32,
          61,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          102,
          114,
          97,
          109,
          101,
          77,
          97,
          110,
          97,
          103,
          101,
          114,
          46,
          114,
          101,
          113,
          117,
          101,
          115,
          116,
          65,
          110,
          105,
          109,
          97,
          116,
          105,
          111,
          110,
          70,
          114,
          97,
          109,
          101,
          40,
          116,
          104,
          105,
          115,
          46,
          95,
          100,
          114,
          97,
          119,
          46,
          98,
          105,
          110,
          100,
          40,
          116,
          104,
          105,
          115,
          41,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          73,
          83,
          95,
          66,
          82,
          79,
          87,
          83,
          69,
          82,
          32,
          38,
          38,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          99,
          97,
          110,
          118,
          97,
          115,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          111,
          102,
          32,
          72,
          84,
          77,
          76,
          67,
          97,
          110,
          118,
          97,
          115,
          69,
          108,
          101,
          109,
          101,
          110,
          116,
          32,
          38,
          38,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          114,
          101,
          110,
          100,
          101,
          114,
          67,
          111,
          110,
          102,
          105,
          103,
          46,
          102,
          114,
          101,
          101,
          122,
          101,
          79,
          110,
          79,
          102,
          102,
          115,
          99,
          114,
          101,
          101,
          110,
          32,
          38,
          38,
          32,
          33,
          105,
          115,
          69,
          108,
          101,
          109,
          101,
          110,
          116,
          73,
          110,
          86,
          105,
          101,
          119,
          112,
          111,
          114,
          116,
          40,
          116,
          104,
          105,
          115,
          46,
          95,
          99,
          97,
          110,
          118,
          97,
          115,
          41,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          102,
          114,
          101,
          101,
          122,
          101,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          112,
          97,
          117,
          115,
          101,
          40,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          116,
          104,
          105,
          115,
          46,
          95,
          100,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          67,
          111,
          114,
          101,
          32,
          61,
          61,
          61,
          32,
          110,
          117,
          108,
          108,
          41,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          111,
          107,
          32,
          61,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          100,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          67,
          111,
          114,
          101,
          46,
          112,
          97,
          117,
          115,
          101,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          111,
          107,
          32,
          124,
          124,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          100,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          67,
          111,
          114,
          101,
          46,
          105,
          115,
          80,
          97,
          117,
          115,
          101,
          100,
          40,
          41,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          101,
          118,
          101,
          110,
          116,
          77,
          97,
          110,
          97,
          103,
          101,
          114,
          46,
          100,
          105,
          115,
          112,
          97,
          116,
          99,
          104,
          40,
          123,
          32,
          116,
          121,
          112,
          101,
          58,
          32,
          34,
          112,
          97,
          117,
          115,
          101,
          34,
          32,
          125,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          115,
          116,
          111,
          112,
          40,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          116,
          104,
          105,
          115,
          46,
          95,
          100,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          67,
          111,
          114,
          101,
          32,
          61,
          61,
          61,
          32,
          110,
          117,
          108,
          108,
          41,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          111,
          107,
          32,
          61,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          100,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          67,
          111,
          114,
          101,
          46,
          115,
          116,
          111,
          112,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          111,
          107,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          101,
          118,
          101,
          110,
          116,
          77,
          97,
          110,
          97,
          103,
          101,
          114,
          46,
          100,
          105,
          115,
          112,
          97,
          116,
          99,
          104,
          40,
          123,
          32,
          116,
          121,
          112,
          101,
          58,
          32,
          34,
          102,
          114,
          97,
          109,
          101,
          34,
          44,
          32,
          99,
          117,
          114,
          114,
          101,
          110,
          116,
          70,
          114,
          97,
          109,
          101,
          58,
          32,
          116,
          104,
          105,
          115,
          46,
          99,
          117,
          114,
          114,
          101,
          110,
          116,
          70,
          114,
          97,
          109,
          101,
          32,
          125,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          114,
          101,
          110,
          100,
          101,
          114,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          101,
          118,
          101,
          110,
          116,
          77,
          97,
          110,
          97,
          103,
          101,
          114,
          46,
          100,
          105,
          115,
          112,
          97,
          116,
          99,
          104,
          40,
          123,
          32,
          116,
          121,
          112,
          101,
          58,
          32,
          34,
          115,
          116,
          111,
          112,
          34,
          32,
          125,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          115,
          101,
          116,
          70,
          114,
          97,
          109,
          101,
          40,
          102,
          114,
          97,
          109,
          101,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          116,
          104,
          105,
          115,
          46,
          95,
          100,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          67,
          111,
          114,
          101,
          32,
          61,
          61,
          61,
          32,
          110,
          117,
          108,
          108,
          41,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          102,
          114,
          97,
          109,
          101,
          32,
          60,
          32,
          48,
          32,
          124,
          124,
          32,
          102,
          114,
          97,
          109,
          101,
          32,
          62,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          100,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          67,
          111,
          114,
          101,
          46,
          116,
          111,
          116,
          97,
          108,
          70,
          114,
          97,
          109,
          101,
          115,
          40,
          41,
          41,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          111,
          107,
          32,
          61,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          100,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          67,
          111,
          114,
          101,
          46,
          115,
          101,
          101,
          107,
          40,
          102,
          114,
          97,
          109,
          101,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          111,
          107,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          101,
          118,
          101,
          110,
          116,
          77,
          97,
          110,
          97,
          103,
          101,
          114,
          46,
          100,
          105,
          115,
          112,
          97,
          116,
          99,
          104,
          40,
          123,
          32,
          116,
          121,
          112,
          101,
          58,
          32,
          34,
          102,
          114,
          97,
          109,
          101,
          34,
          44,
          32,
          99,
          117,
          114,
          114,
          101,
          110,
          116,
          70,
          114,
          97,
          109,
          101,
          58,
          32,
          116,
          104,
          105,
          115,
          46,
          99,
          117,
          114,
          114,
          101,
          110,
          116,
          70,
          114,
          97,
          109,
          101,
          32,
          125,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          114,
          101,
          110,
          100,
          101,
          114,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          115,
          101,
          116,
          83,
          112,
          101,
          101,
          100,
          40,
          115,
          112,
          101,
          101,
          100,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          116,
          104,
          105,
          115,
          46,
          95,
          100,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          67,
          111,
          114,
          101,
          32,
          61,
          61,
          61,
          32,
          110,
          117,
          108,
          108,
          41,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          100,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          67,
          111,
          114,
          101,
          46,
          115,
          101,
          116,
          67,
          111,
          110,
          102,
          105,
          103,
          40,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          46,
          46,
          46,
          116,
          104,
          105,
          115,
          46,
          95,
          100,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          67,
          111,
          114,
          101,
          46,
          99,
          111,
          110,
          102,
          105,
          103,
          40,
          41,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          115,
          112,
          101,
          101,
          100,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          115,
          101,
          116,
          66,
          97,
          99,
          107,
          103,
          114,
          111,
          117,
          110,
          100,
          67,
          111,
          108,
          111,
          114,
          40,
          99,
          111,
          108,
          111,
          114,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          116,
          104,
          105,
          115,
          46,
          95,
          100,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          67,
          111,
          114,
          101,
          32,
          61,
          61,
          61,
          32,
          110,
          117,
          108,
          108,
          41,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          73,
          83,
          95,
          66,
          82,
          79,
          87,
          83,
          69,
          82,
          32,
          38,
          38,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          99,
          97,
          110,
          118,
          97,
          115,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          111,
          102,
          32,
          72,
          84,
          77,
          76,
          67,
          97,
          110,
          118,
          97,
          115,
          69,
          108,
          101,
          109,
          101,
          110,
          116,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          99,
          97,
          110,
          118,
          97,
          115,
          46,
          115,
          116,
          121,
          108,
          101,
          46,
          98,
          97,
          99,
          107,
          103,
          114,
          111,
          117,
          110,
          100,
          67,
          111,
          108,
          111,
          114,
          32,
          61,
          32,
          99,
          111,
          108,
          111,
          114,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          32,
          101,
          108,
          115,
          101,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          100,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          67,
          111,
          114,
          101,
          46,
          115,
          101,
          116,
          67,
          111,
          110,
          102,
          105,
          103,
          40,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          46,
          46,
          46,
          116,
          104,
          105,
          115,
          46,
          95,
          100,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          67,
          111,
          114,
          101,
          46,
          99,
          111,
          110,
          102,
          105,
          103,
          40,
          41,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          98,
          97,
          99,
          107,
          103,
          114,
          111,
          117,
          110,
          100,
          67,
          111,
          108,
          111,
          114,
          58,
          32,
          104,
          101,
          120,
          83,
          116,
          114,
          105,
          110,
          103,
          84,
          111,
          82,
          71,
          66,
          65,
          73,
          110,
          116,
          40,
          99,
          111,
          108,
          111,
          114,
          41,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          98,
          97,
          99,
          107,
          103,
          114,
          111,
          117,
          110,
          100,
          67,
          111,
          108,
          111,
          114,
          32,
          61,
          32,
          99,
          111,
          108,
          111,
          114,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          115,
          101,
          116,
          76,
          111,
          111,
          112,
          40,
          108,
          111,
          111,
          112,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          116,
          104,
          105,
          115,
          46,
          95,
          100,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          67,
          111,
          114,
          101,
          32,
          61,
          61,
          61,
          32,
          110,
          117,
          108,
          108,
          41,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          100,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          67,
          111,
          114,
          101,
          46,
          115,
          101,
          116,
          67,
          111,
          110,
          102,
          105,
          103,
          40,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          46,
          46,
          46,
          116,
          104,
          105,
          115,
          46,
          95,
          100,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          67,
          111,
          114,
          101,
          46,
          99,
          111,
          110,
          102,
          105,
          103,
          40,
          41,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          108,
          111,
          111,
          112,
          65,
          110,
          105,
          109,
          97,
          116,
          105,
          111,
          110,
          58,
          32,
          108,
          111,
          111,
          112,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          115,
          101,
          116,
          85,
          115,
          101,
          70,
          114,
          97,
          109,
          101,
          73,
          110,
          116,
          101,
          114,
          112,
          111,
          108,
          97,
          116,
          105,
          111,
          110,
          40,
          117,
          115,
          101,
          70,
          114,
          97,
          109,
          101,
          73,
          110,
          116,
          101,
          114,
          112,
          111,
          108,
          97,
          116,
          105,
          111,
          110,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          116,
          104,
          105,
          115,
          46,
          95,
          100,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          67,
          111,
          114,
          101,
          32,
          61,
          61,
          61,
          32,
          110,
          117,
          108,
          108,
          41,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          100,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          67,
          111,
          114,
          101,
          46,
          115,
          101,
          116,
          67,
          111,
          110,
          102,
          105,
          103,
          40,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          46,
          46,
          46,
          116,
          104,
          105,
          115,
          46,
          95,
          100,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          67,
          111,
          114,
          101,
          46,
          99,
          111,
          110,
          102,
          105,
          103,
          40,
          41,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          117,
          115,
          101,
          70,
          114,
          97,
          109,
          101,
          73,
          110,
          116,
          101,
          114,
          112,
          111,
          108,
          97,
          116,
          105,
          111,
          110,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          97,
          100,
          100,
          69,
          118,
          101,
          110,
          116,
          76,
          105,
          115,
          116,
          101,
          110,
          101,
          114,
          40,
          116,
          121,
          112,
          101,
          44,
          32,
          108,
          105,
          115,
          116,
          101,
          110,
          101,
          114,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          101,
          118,
          101,
          110,
          116,
          77,
          97,
          110,
          97,
          103,
          101,
          114,
          46,
          97,
          100,
          100,
          69,
          118,
          101,
          110,
          116,
          76,
          105,
          115,
          116,
          101,
          110,
          101,
          114,
          40,
          116,
          121,
          112,
          101,
          44,
          32,
          108,
          105,
          115,
          116,
          101,
          110,
          101,
          114,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          114,
          101,
          109,
          111,
          118,
          101,
          69,
          118,
          101,
          110,
          116,
          76,
          105,
          115,
          116,
          101,
          110,
          101,
          114,
          40,
          116,
          121,
          112,
          101,
          44,
          32,
          108,
          105,
          115,
          116,
          101,
          110,
          101,
          114,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          101,
          118,
          101,
          110,
          116,
          77,
          97,
          110,
          97,
          103,
          101,
          114,
          46,
          114,
          101,
          109,
          111,
          118,
          101,
          69,
          118,
          101,
          110,
          116,
          76,
          105,
          115,
          116,
          101,
          110,
          101,
          114,
          40,
          116,
          121,
          112,
          101,
          44,
          32,
          108,
          105,
          115,
          116,
          101,
          110,
          101,
          114,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          100,
          101,
          115,
          116,
          114,
          111,
          121,
          40,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          116,
          104,
          105,
          115,
          46,
          95,
          97,
          110,
          105,
          109,
          97,
          116,
          105,
          111,
          110,
          70,
          114,
          97,
          109,
          101,
          73,
          100,
          32,
          33,
          61,
          61,
          32,
          110,
          117,
          108,
          108,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          102,
          114,
          97,
          109,
          101,
          77,
          97,
          110,
          97,
          103,
          101,
          114,
          46,
          99,
          97,
          110,
          99,
          101,
          108,
          65,
          110,
          105,
          109,
          97,
          116,
          105,
          111,
          110,
          70,
          114,
          97,
          109,
          101,
          40,
          116,
          104,
          105,
          115,
          46,
          95,
          97,
          110,
          105,
          109,
          97,
          116,
          105,
          111,
          110,
          70,
          114,
          97,
          109,
          101,
          73,
          100,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          97,
          110,
          105,
          109,
          97,
          116,
          105,
          111,
          110,
          70,
          114,
          97,
          109,
          101,
          73,
          100,
          32,
          61,
          32,
          110,
          117,
          108,
          108,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          73,
          83,
          95,
          66,
          82,
          79,
          87,
          83,
          69,
          82,
          32,
          38,
          38,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          99,
          97,
          110,
          118,
          97,
          115,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          111,
          102,
          32,
          72,
          84,
          77,
          76,
          67,
          97,
          110,
          118,
          97,
          115,
          69,
          108,
          101,
          109,
          101,
          110,
          116,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          79,
          102,
          102,
          115,
          99,
          114,
          101,
          101,
          110,
          79,
          98,
          115,
          101,
          114,
          118,
          101,
          114,
          46,
          117,
          110,
          111,
          98,
          115,
          101,
          114,
          118,
          101,
          40,
          116,
          104,
          105,
          115,
          46,
          95,
          99,
          97,
          110,
          118,
          97,
          115,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          67,
          97,
          110,
          118,
          97,
          115,
          82,
          101,
          115,
          105,
          122,
          101,
          79,
          98,
          115,
          101,
          114,
          118,
          101,
          114,
          46,
          117,
          110,
          111,
          98,
          115,
          101,
          114,
          118,
          101,
          40,
          116,
          104,
          105,
          115,
          46,
          95,
          99,
          97,
          110,
          118,
          97,
          115,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          100,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          67,
          111,
          114,
          101,
          63,
          46,
          100,
          101,
          108,
          101,
          116,
          101,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          100,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          67,
          111,
          114,
          101,
          32,
          61,
          32,
          110,
          117,
          108,
          108,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          99,
          111,
          110,
          116,
          101,
          120,
          116,
          32,
          61,
          32,
          110,
          117,
          108,
          108,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          101,
          118,
          101,
          110,
          116,
          77,
          97,
          110,
          97,
          103,
          101,
          114,
          46,
          100,
          105,
          115,
          112,
          97,
          116,
          99,
          104,
          40,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          121,
          112,
          101,
          58,
          32,
          34,
          100,
          101,
          115,
          116,
          114,
          111,
          121,
          34,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          101,
          118,
          101,
          110,
          116,
          77,
          97,
          110,
          97,
          103,
          101,
          114,
          46,
          114,
          101,
          109,
          111,
          118,
          101,
          65,
          108,
          108,
          69,
          118,
          101,
          110,
          116,
          76,
          105,
          115,
          116,
          101,
          110,
          101,
          114,
          115,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          99,
          108,
          101,
          97,
          110,
          117,
          112,
          83,
          116,
          97,
          116,
          101,
          77,
          97,
          99,
          104,
          105,
          110,
          101,
          76,
          105,
          115,
          116,
          101,
          110,
          101,
          114,
          115,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          102,
          114,
          101,
          101,
          122,
          101,
          40,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          116,
          104,
          105,
          115,
          46,
          95,
          97,
          110,
          105,
          109,
          97,
          116,
          105,
          111,
          110,
          70,
          114,
          97,
          109,
          101,
          73,
          100,
          32,
          61,
          61,
          61,
          32,
          110,
          117,
          108,
          108,
          41,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          102,
          114,
          97,
          109,
          101,
          77,
          97,
          110,
          97,
          103,
          101,
          114,
          46,
          99,
          97,
          110,
          99,
          101,
          108,
          65,
          110,
          105,
          109,
          97,
          116,
          105,
          111,
          110,
          70,
          114,
          97,
          109,
          101,
          40,
          116,
          104,
          105,
          115,
          46,
          95,
          97,
          110,
          105,
          109,
          97,
          116,
          105,
          111,
          110,
          70,
          114,
          97,
          109,
          101,
          73,
          100,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          97,
          110,
          105,
          109,
          97,
          116,
          105,
          111,
          110,
          70,
          114,
          97,
          109,
          101,
          73,
          100,
          32,
          61,
          32,
          110,
          117,
          108,
          108,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          105,
          115,
          70,
          114,
          111,
          122,
          101,
          110,
          32,
          61,
          32,
          116,
          114,
          117,
          101,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          101,
          118,
          101,
          110,
          116,
          77,
          97,
          110,
          97,
          103,
          101,
          114,
          46,
          100,
          105,
          115,
          112,
          97,
          116,
          99,
          104,
          40,
          123,
          32,
          116,
          121,
          112,
          101,
          58,
          32,
          34,
          102,
          114,
          101,
          101,
          122,
          101,
          34,
          32,
          125,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          117,
          110,
          102,
          114,
          101,
          101,
          122,
          101,
          40,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          116,
          104,
          105,
          115,
          46,
          95,
          97,
          110,
          105,
          109,
          97,
          116,
          105,
          111,
          110,
          70,
          114,
          97,
          109,
          101,
          73,
          100,
          32,
          33,
          61,
          61,
          32,
          110,
          117,
          108,
          108,
          41,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          97,
          110,
          105,
          109,
          97,
          116,
          105,
          111,
          110,
          70,
          114,
          97,
          109,
          101,
          73,
          100,
          32,
          61,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          102,
          114,
          97,
          109,
          101,
          77,
          97,
          110,
          97,
          103,
          101,
          114,
          46,
          114,
          101,
          113,
          117,
          101,
          115,
          116,
          65,
          110,
          105,
          109,
          97,
          116,
          105,
          111,
          110,
          70,
          114,
          97,
          109,
          101,
          40,
          116,
          104,
          105,
          115,
          46,
          95,
          100,
          114,
          97,
          119,
          46,
          98,
          105,
          110,
          100,
          40,
          116,
          104,
          105,
          115,
          41,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          105,
          115,
          70,
          114,
          111,
          122,
          101,
          110,
          32,
          61,
          32,
          102,
          97,
          108,
          115,
          101,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          101,
          118,
          101,
          110,
          116,
          77,
          97,
          110,
          97,
          103,
          101,
          114,
          46,
          100,
          105,
          115,
          112,
          97,
          116,
          99,
          104,
          40,
          123,
          32,
          116,
          121,
          112,
          101,
          58,
          32,
          34,
          117,
          110,
          102,
          114,
          101,
          101,
          122,
          101,
          34,
          32,
          125,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          114,
          101,
          115,
          105,
          122,
          101,
          40,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          33,
          116,
          104,
          105,
          115,
          46,
          95,
          100,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          67,
          111,
          114,
          101,
          32,
          124,
          124,
          32,
          33,
          116,
          104,
          105,
          115,
          46,
          105,
          115,
          76,
          111,
          97,
          100,
          101,
          100,
          41,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          73,
          83,
          95,
          66,
          82,
          79,
          87,
          83,
          69,
          82,
          32,
          38,
          38,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          99,
          97,
          110,
          118,
          97,
          115,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          111,
          102,
          32,
          72,
          84,
          77,
          76,
          67,
          97,
          110,
          118,
          97,
          115,
          69,
          108,
          101,
          109,
          101,
          110,
          116,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          100,
          112,
          114,
          32,
          61,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          114,
          101,
          110,
          100,
          101,
          114,
          67,
          111,
          110,
          102,
          105,
          103,
          46,
          100,
          101,
          118,
          105,
          99,
          101,
          80,
          105,
          120,
          101,
          108,
          82,
          97,
          116,
          105,
          111,
          32,
          124,
          124,
          32,
          119,
          105,
          110,
          100,
          111,
          119,
          46,
          100,
          101,
          118,
          105,
          99,
          101,
          80,
          105,
          120,
          101,
          108,
          82,
          97,
          116,
          105,
          111,
          32,
          124,
          124,
          32,
          49,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          123,
          32,
          104,
          101,
          105,
          103,
          104,
          116,
          58,
          32,
          99,
          108,
          105,
          101,
          110,
          116,
          72,
          101,
          105,
          103,
          104,
          116,
          44,
          32,
          119,
          105,
          100,
          116,
          104,
          58,
          32,
          99,
          108,
          105,
          101,
          110,
          116,
          87,
          105,
          100,
          116,
          104,
          32,
          125,
          32,
          61,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          99,
          97,
          110,
          118,
          97,
          115,
          46,
          103,
          101,
          116,
          66,
          111,
          117,
          110,
          100,
          105,
          110,
          103,
          67,
          108,
          105,
          101,
          110,
          116,
          82,
          101,
          99,
          116,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          99,
          108,
          105,
          101,
          110,
          116,
          72,
          101,
          105,
          103,
          104,
          116,
          32,
          33,
          61,
          61,
          32,
          48,
          32,
          38,
          38,
          32,
          99,
          108,
          105,
          101,
          110,
          116,
          87,
          105,
          100,
          116,
          104,
          32,
          33,
          61,
          61,
          32,
          48,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          99,
          97,
          110,
          118,
          97,
          115,
          46,
          119,
          105,
          100,
          116,
          104,
          32,
          61,
          32,
          99,
          108,
          105,
          101,
          110,
          116,
          87,
          105,
          100,
          116,
          104,
          32,
          42,
          32,
          100,
          112,
          114,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          99,
          97,
          110,
          118,
          97,
          115,
          46,
          104,
          101,
          105,
          103,
          104,
          116,
          32,
          61,
          32,
          99,
          108,
          105,
          101,
          110,
          116,
          72,
          101,
          105,
          103,
          104,
          116,
          32,
          42,
          32,
          100,
          112,
          114,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          111,
          107,
          32,
          61,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          100,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          67,
          111,
          114,
          101,
          46,
          114,
          101,
          115,
          105,
          122,
          101,
          40,
          116,
          104,
          105,
          115,
          46,
          95,
          99,
          97,
          110,
          118,
          97,
          115,
          46,
          119,
          105,
          100,
          116,
          104,
          44,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          99,
          97,
          110,
          118,
          97,
          115,
          46,
          104,
          101,
          105,
          103,
          104,
          116,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          111,
          107,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          114,
          101,
          110,
          100,
          101,
          114,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          115,
          101,
          116,
          83,
          101,
          103,
          109,
          101,
          110,
          116,
          40,
          115,
          116,
          97,
          114,
          116,
          70,
          114,
          97,
          109,
          101,
          44,
          32,
          101,
          110,
          100,
          70,
          114,
          97,
          109,
          101,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          116,
          104,
          105,
          115,
          46,
          95,
          100,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          67,
          111,
          114,
          101,
          32,
          61,
          61,
          61,
          32,
          110,
          117,
          108,
          108,
          32,
          124,
          124,
          32,
          95,
          68,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          46,
          95,
          119,
          97,
          115,
          109,
          77,
          111,
          100,
          117,
          108,
          101,
          32,
          61,
          61,
          61,
          32,
          110,
          117,
          108,
          108,
          41,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          100,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          67,
          111,
          114,
          101,
          46,
          115,
          101,
          116,
          67,
          111,
          110,
          102,
          105,
          103,
          40,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          46,
          46,
          46,
          116,
          104,
          105,
          115,
          46,
          95,
          100,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          67,
          111,
          114,
          101,
          46,
          99,
          111,
          110,
          102,
          105,
          103,
          40,
          41,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          115,
          101,
          103,
          109,
          101,
          110,
          116,
          58,
          32,
          99,
          114,
          101,
          97,
          116,
          101,
          67,
          111,
          114,
          101,
          83,
          101,
          103,
          109,
          101,
          110,
          116,
          40,
          91,
          115,
          116,
          97,
          114,
          116,
          70,
          114,
          97,
          109,
          101,
          44,
          32,
          101,
          110,
          100,
          70,
          114,
          97,
          109,
          101,
          93,
          44,
          32,
          95,
          68,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          46,
          95,
          119,
          97,
          115,
          109,
          77,
          111,
          100,
          117,
          108,
          101,
          41,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          115,
          101,
          116,
          77,
          111,
          100,
          101,
          40,
          109,
          111,
          100,
          101,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          116,
          104,
          105,
          115,
          46,
          95,
          100,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          67,
          111,
          114,
          101,
          32,
          61,
          61,
          61,
          32,
          110,
          117,
          108,
          108,
          32,
          124,
          124,
          32,
          95,
          68,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          46,
          95,
          119,
          97,
          115,
          109,
          77,
          111,
          100,
          117,
          108,
          101,
          32,
          61,
          61,
          61,
          32,
          110,
          117,
          108,
          108,
          41,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          100,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          67,
          111,
          114,
          101,
          46,
          115,
          101,
          116,
          67,
          111,
          110,
          102,
          105,
          103,
          40,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          46,
          46,
          46,
          116,
          104,
          105,
          115,
          46,
          95,
          100,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          67,
          111,
          114,
          101,
          46,
          99,
          111,
          110,
          102,
          105,
          103,
          40,
          41,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          109,
          111,
          100,
          101,
          58,
          32,
          99,
          114,
          101,
          97,
          116,
          101,
          67,
          111,
          114,
          101,
          77,
          111,
          100,
          101,
          40,
          109,
          111,
          100,
          101,
          44,
          32,
          95,
          68,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          46,
          95,
          119,
          97,
          115,
          109,
          77,
          111,
          100,
          117,
          108,
          101,
          41,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          115,
          101,
          116,
          82,
          101,
          110,
          100,
          101,
          114,
          67,
          111,
          110,
          102,
          105,
          103,
          40,
          99,
          111,
          110,
          102,
          105,
          103,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          123,
          32,
          100,
          101,
          118,
          105,
          99,
          101,
          80,
          105,
          120,
          101,
          108,
          82,
          97,
          116,
          105,
          111,
          44,
          32,
          102,
          114,
          101,
          101,
          122,
          101,
          79,
          110,
          79,
          102,
          102,
          115,
          99,
          114,
          101,
          101,
          110,
          44,
          32,
          46,
          46,
          46,
          114,
          101,
          115,
          116,
          67,
          111,
          110,
          102,
          105,
          103,
          32,
          125,
          32,
          61,
          32,
          99,
          111,
          110,
          102,
          105,
          103,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          114,
          101,
          110,
          100,
          101,
          114,
          67,
          111,
          110,
          102,
          105,
          103,
          32,
          61,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          46,
          46,
          46,
          116,
          104,
          105,
          115,
          46,
          95,
          114,
          101,
          110,
          100,
          101,
          114,
          67,
          111,
          110,
          102,
          105,
          103,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          46,
          46,
          46,
          114,
          101,
          115,
          116,
          67,
          111,
          110,
          102,
          105,
          103,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          47,
          47,
          32,
          100,
          101,
          118,
          105,
          99,
          101,
          80,
          105,
          120,
          101,
          108,
          82,
          97,
          116,
          105,
          111,
          32,
          105,
          115,
          32,
          97,
          32,
          115,
          112,
          101,
          99,
          105,
          97,
          108,
          32,
          99,
          97,
          115,
          101,
          44,
          32,
          105,
          116,
          32,
          115,
          104,
          111,
          117,
          108,
          100,
          32,
          98,
          101,
          32,
          115,
          101,
          116,
          32,
          116,
          111,
          32,
          116,
          104,
          101,
          32,
          100,
          101,
          102,
          97,
          117,
          108,
          116,
          32,
          118,
          97,
          108,
          117,
          101,
          32,
          105,
          102,
          32,
          105,
          116,
          39,
          115,
          32,
          110,
          111,
          116,
          32,
          112,
          114,
          111,
          118,
          105,
          100,
          101,
          100,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          100,
          101,
          118,
          105,
          99,
          101,
          80,
          105,
          120,
          101,
          108,
          82,
          97,
          116,
          105,
          111,
          58,
          32,
          100,
          101,
          118,
          105,
          99,
          101,
          80,
          105,
          120,
          101,
          108,
          82,
          97,
          116,
          105,
          111,
          32,
          124,
          124,
          32,
          103,
          101,
          116,
          68,
          101,
          102,
          97,
          117,
          108,
          116,
          68,
          80,
          82,
          40,
          41,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          114,
          101,
          101,
          122,
          101,
          79,
          110,
          79,
          102,
          102,
          115,
          99,
          114,
          101,
          101,
          110,
          58,
          32,
          102,
          114,
          101,
          101,
          122,
          101,
          79,
          110,
          79,
          102,
          102,
          115,
          99,
          114,
          101,
          101,
          110,
          32,
          63,
          63,
          32,
          116,
          114,
          117,
          101,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          73,
          83,
          95,
          66,
          82,
          79,
          87,
          83,
          69,
          82,
          32,
          38,
          38,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          99,
          97,
          110,
          118,
          97,
          115,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          111,
          102,
          32,
          72,
          84,
          77,
          76,
          67,
          97,
          110,
          118,
          97,
          115,
          69,
          108,
          101,
          109,
          101,
          110,
          116,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          116,
          104,
          105,
          115,
          46,
          95,
          114,
          101,
          110,
          100,
          101,
          114,
          67,
          111,
          110,
          102,
          105,
          103,
          46,
          97,
          117,
          116,
          111,
          82,
          101,
          115,
          105,
          122,
          101,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          67,
          97,
          110,
          118,
          97,
          115,
          82,
          101,
          115,
          105,
          122,
          101,
          79,
          98,
          115,
          101,
          114,
          118,
          101,
          114,
          46,
          111,
          98,
          115,
          101,
          114,
          118,
          101,
          40,
          116,
          104,
          105,
          115,
          46,
          95,
          99,
          97,
          110,
          118,
          97,
          115,
          44,
          32,
          116,
          104,
          105,
          115,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          32,
          101,
          108,
          115,
          101,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          67,
          97,
          110,
          118,
          97,
          115,
          82,
          101,
          115,
          105,
          122,
          101,
          79,
          98,
          115,
          101,
          114,
          118,
          101,
          114,
          46,
          117,
          110,
          111,
          98,
          115,
          101,
          114,
          118,
          101,
          40,
          116,
          104,
          105,
          115,
          46,
          95,
          99,
          97,
          110,
          118,
          97,
          115,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          116,
          104,
          105,
          115,
          46,
          95,
          114,
          101,
          110,
          100,
          101,
          114,
          67,
          111,
          110,
          102,
          105,
          103,
          46,
          102,
          114,
          101,
          101,
          122,
          101,
          79,
          110,
          79,
          102,
          102,
          115,
          99,
          114,
          101,
          101,
          110,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          79,
          102,
          102,
          115,
          99,
          114,
          101,
          101,
          110,
          79,
          98,
          115,
          101,
          114,
          118,
          101,
          114,
          46,
          111,
          98,
          115,
          101,
          114,
          118,
          101,
          40,
          116,
          104,
          105,
          115,
          46,
          95,
          99,
          97,
          110,
          118,
          97,
          115,
          44,
          32,
          116,
          104,
          105,
          115,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          32,
          101,
          108,
          115,
          101,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          79,
          102,
          102,
          115,
          99,
          114,
          101,
          101,
          110,
          79,
          98,
          115,
          101,
          114,
          118,
          101,
          114,
          46,
          117,
          110,
          111,
          98,
          115,
          101,
          114,
          118,
          101,
          40,
          116,
          104,
          105,
          115,
          46,
          95,
          99,
          97,
          110,
          118,
          97,
          115,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          116,
          104,
          105,
          115,
          46,
          95,
          105,
          115,
          70,
          114,
          111,
          122,
          101,
          110,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          117,
          110,
          102,
          114,
          101,
          101,
          122,
          101,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          108,
          111,
          97,
          100,
          65,
          110,
          105,
          109,
          97,
          116,
          105,
          111,
          110,
          40,
          97,
          110,
          105,
          109,
          97,
          116,
          105,
          111,
          110,
          73,
          100,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          116,
          104,
          105,
          115,
          46,
          95,
          100,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          67,
          111,
          114,
          101,
          32,
          61,
          61,
          61,
          32,
          110,
          117,
          108,
          108,
          32,
          124,
          124,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          100,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          67,
          111,
          114,
          101,
          46,
          97,
          99,
          116,
          105,
          118,
          101,
          65,
          110,
          105,
          109,
          97,
          116,
          105,
          111,
          110,
          73,
          100,
          40,
          41,
          32,
          61,
          61,
          61,
          32,
          97,
          110,
          105,
          109,
          97,
          116,
          105,
          111,
          110,
          73,
          100,
          41,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          108,
          111,
          97,
          100,
          101,
          100,
          32,
          61,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          100,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          67,
          111,
          114,
          101,
          46,
          108,
          111,
          97,
          100,
          65,
          110,
          105,
          109,
          97,
          116,
          105,
          111,
          110,
          40,
          97,
          110,
          105,
          109,
          97,
          116,
          105,
          111,
          110,
          73,
          100,
          44,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          99,
          97,
          110,
          118,
          97,
          115,
          46,
          119,
          105,
          100,
          116,
          104,
          44,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          99,
          97,
          110,
          118,
          97,
          115,
          46,
          104,
          101,
          105,
          103,
          104,
          116,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          108,
          111,
          97,
          100,
          101,
          100,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          101,
          118,
          101,
          110,
          116,
          77,
          97,
          110,
          97,
          103,
          101,
          114,
          46,
          100,
          105,
          115,
          112,
          97,
          116,
          99,
          104,
          40,
          123,
          32,
          116,
          121,
          112,
          101,
          58,
          32,
          34,
          108,
          111,
          97,
          100,
          34,
          32,
          125,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          114,
          101,
          115,
          105,
          122,
          101,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          32,
          101,
          108,
          115,
          101,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          101,
          118,
          101,
          110,
          116,
          77,
          97,
          110,
          97,
          103,
          101,
          114,
          46,
          100,
          105,
          115,
          112,
          97,
          116,
          99,
          104,
          40,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          121,
          112,
          101,
          58,
          32,
          34,
          108,
          111,
          97,
          100,
          69,
          114,
          114,
          111,
          114,
          34,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          101,
          114,
          114,
          111,
          114,
          58,
          32,
          110,
          101,
          119,
          32,
          69,
          114,
          114,
          111,
          114,
          40,
          96,
          70,
          97,
          105,
          108,
          101,
          100,
          32,
          116,
          111,
          32,
          97,
          110,
          105,
          109,
          97,
          116,
          105,
          111,
          110,
          32,
          58,
          36,
          123,
          97,
          110,
          105,
          109,
          97,
          116,
          105,
          111,
          110,
          73,
          100,
          125,
          96,
          41,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          115,
          101,
          116,
          77,
          97,
          114,
          107,
          101,
          114,
          40,
          109,
          97,
          114,
          107,
          101,
          114,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          116,
          104,
          105,
          115,
          46,
          95,
          100,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          67,
          111,
          114,
          101,
          32,
          61,
          61,
          61,
          32,
          110,
          117,
          108,
          108,
          41,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          100,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          67,
          111,
          114,
          101,
          46,
          115,
          101,
          116,
          67,
          111,
          110,
          102,
          105,
          103,
          40,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          46,
          46,
          46,
          116,
          104,
          105,
          115,
          46,
          95,
          100,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          67,
          111,
          114,
          101,
          46,
          99,
          111,
          110,
          102,
          105,
          103,
          40,
          41,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          109,
          97,
          114,
          107,
          101,
          114,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          109,
          97,
          114,
          107,
          101,
          114,
          115,
          40,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          109,
          97,
          114,
          107,
          101,
          114,
          115,
          32,
          61,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          100,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          67,
          111,
          114,
          101,
          63,
          46,
          109,
          97,
          114,
          107,
          101,
          114,
          115,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          109,
          97,
          114,
          107,
          101,
          114,
          115,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          114,
          101,
          115,
          117,
          108,
          116,
          32,
          61,
          32,
          91,
          93,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          111,
          114,
          32,
          40,
          108,
          101,
          116,
          32,
          105,
          32,
          61,
          32,
          48,
          59,
          32,
          105,
          32,
          60,
          32,
          109,
          97,
          114,
          107,
          101,
          114,
          115,
          46,
          115,
          105,
          122,
          101,
          40,
          41,
          59,
          32,
          105,
          32,
          43,
          61,
          32,
          49,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          109,
          97,
          114,
          107,
          101,
          114,
          32,
          61,
          32,
          109,
          97,
          114,
          107,
          101,
          114,
          115,
          46,
          103,
          101,
          116,
          40,
          105,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          115,
          117,
          108,
          116,
          46,
          112,
          117,
          115,
          104,
          40,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          110,
          97,
          109,
          101,
          58,
          32,
          109,
          97,
          114,
          107,
          101,
          114,
          46,
          110,
          97,
          109,
          101,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          105,
          109,
          101,
          58,
          32,
          109,
          97,
          114,
          107,
          101,
          114,
          46,
          116,
          105,
          109,
          101,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          100,
          117,
          114,
          97,
          116,
          105,
          111,
          110,
          58,
          32,
          109,
          97,
          114,
          107,
          101,
          114,
          46,
          100,
          117,
          114,
          97,
          116,
          105,
          111,
          110,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          114,
          101,
          115,
          117,
          108,
          116,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          91,
          93,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          115,
          101,
          116,
          84,
          104,
          101,
          109,
          101,
          40,
          116,
          104,
          101,
          109,
          101,
          73,
          100,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          116,
          104,
          105,
          115,
          46,
          95,
          100,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          67,
          111,
          114,
          101,
          32,
          61,
          61,
          61,
          32,
          110,
          117,
          108,
          108,
          41,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          102,
          97,
          108,
          115,
          101,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          108,
          111,
          97,
          100,
          101,
          100,
          32,
          61,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          100,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          67,
          111,
          114,
          101,
          46,
          115,
          101,
          116,
          84,
          104,
          101,
          109,
          101,
          40,
          116,
          104,
          101,
          109,
          101,
          73,
          100,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          114,
          101,
          110,
          100,
          101,
          114,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          108,
          111,
          97,
          100,
          101,
          100,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          114,
          101,
          115,
          101,
          116,
          84,
          104,
          101,
          109,
          101,
          40,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          116,
          104,
          105,
          115,
          46,
          95,
          100,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          67,
          111,
          114,
          101,
          32,
          61,
          61,
          61,
          32,
          110,
          117,
          108,
          108,
          41,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          102,
          97,
          108,
          115,
          101,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          100,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          67,
          111,
          114,
          101,
          46,
          114,
          101,
          115,
          101,
          116,
          84,
          104,
          101,
          109,
          101,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          115,
          101,
          116,
          84,
          104,
          101,
          109,
          101,
          68,
          97,
          116,
          97,
          40,
          116,
          104,
          101,
          109,
          101,
          68,
          97,
          116,
          97,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          116,
          104,
          105,
          115,
          46,
          95,
          100,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          67,
          111,
          114,
          101,
          32,
          61,
          61,
          61,
          32,
          110,
          117,
          108,
          108,
          41,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          102,
          97,
          108,
          115,
          101,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          108,
          111,
          97,
          100,
          101,
          100,
          32,
          61,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          100,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          67,
          111,
          114,
          101,
          46,
          115,
          101,
          116,
          84,
          104,
          101,
          109,
          101,
          68,
          97,
          116,
          97,
          40,
          116,
          104,
          101,
          109,
          101,
          68,
          97,
          116,
          97,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          114,
          101,
          110,
          100,
          101,
          114,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          108,
          111,
          97,
          100,
          101,
          100,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          115,
          101,
          116,
          83,
          108,
          111,
          116,
          115,
          40,
          115,
          108,
          111,
          116,
          115,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          116,
          104,
          105,
          115,
          46,
          95,
          100,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          67,
          111,
          114,
          101,
          32,
          61,
          61,
          61,
          32,
          110,
          117,
          108,
          108,
          41,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          100,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          67,
          111,
          114,
          101,
          46,
          115,
          101,
          116,
          83,
          108,
          111,
          116,
          115,
          40,
          115,
          108,
          111,
          116,
          115,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          115,
          101,
          116,
          76,
          97,
          121,
          111,
          117,
          116,
          40,
          108,
          97,
          121,
          111,
          117,
          116,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          116,
          104,
          105,
          115,
          46,
          95,
          100,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          67,
          111,
          114,
          101,
          32,
          61,
          61,
          61,
          32,
          110,
          117,
          108,
          108,
          32,
          124,
          124,
          32,
          95,
          68,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          46,
          95,
          119,
          97,
          115,
          109,
          77,
          111,
          100,
          117,
          108,
          101,
          32,
          61,
          61,
          61,
          32,
          110,
          117,
          108,
          108,
          41,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          100,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          67,
          111,
          114,
          101,
          46,
          115,
          101,
          116,
          67,
          111,
          110,
          102,
          105,
          103,
          40,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          46,
          46,
          46,
          116,
          104,
          105,
          115,
          46,
          95,
          100,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          67,
          111,
          114,
          101,
          46,
          99,
          111,
          110,
          102,
          105,
          103,
          40,
          41,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          108,
          97,
          121,
          111,
          117,
          116,
          58,
          32,
          99,
          114,
          101,
          97,
          116,
          101,
          67,
          111,
          114,
          101,
          76,
          97,
          121,
          111,
          117,
          116,
          40,
          108,
          97,
          121,
          111,
          117,
          116,
          44,
          32,
          95,
          68,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          46,
          95,
          119,
          97,
          115,
          109,
          77,
          111,
          100,
          117,
          108,
          101,
          41,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          115,
          101,
          116,
          86,
          105,
          101,
          119,
          112,
          111,
          114,
          116,
          40,
          120,
          44,
          32,
          121,
          44,
          32,
          119,
          105,
          100,
          116,
          104,
          44,
          32,
          104,
          101,
          105,
          103,
          104,
          116,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          116,
          104,
          105,
          115,
          46,
          95,
          100,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          67,
          111,
          114,
          101,
          32,
          61,
          61,
          61,
          32,
          110,
          117,
          108,
          108,
          41,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          102,
          97,
          108,
          115,
          101,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          100,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          67,
          111,
          114,
          101,
          46,
          115,
          101,
          116,
          86,
          105,
          101,
          119,
          112,
          111,
          114,
          116,
          40,
          120,
          44,
          32,
          121,
          44,
          32,
          119,
          105,
          100,
          116,
          104,
          44,
          32,
          104,
          101,
          105,
          103,
          104,
          116,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          115,
          116,
          97,
          116,
          105,
          99,
          32,
          115,
          101,
          116,
          87,
          97,
          115,
          109,
          85,
          114,
          108,
          40,
          117,
          114,
          108,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          68,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          87,
          97,
          115,
          109,
          76,
          111,
          97,
          100,
          101,
          114,
          46,
          115,
          101,
          116,
          87,
          97,
          115,
          109,
          85,
          114,
          108,
          40,
          117,
          114,
          108,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          108,
          111,
          97,
          100,
          83,
          116,
          97,
          116,
          101,
          77,
          97,
          99,
          104,
          105,
          110,
          101,
          40,
          115,
          116,
          97,
          116,
          101,
          77,
          97,
          99,
          104,
          105,
          110,
          101,
          73,
          100,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          100,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          67,
          111,
          114,
          101,
          63,
          46,
          115,
          116,
          97,
          116,
          101,
          77,
          97,
          99,
          104,
          105,
          110,
          101,
          76,
          111,
          97,
          100,
          40,
          115,
          116,
          97,
          116,
          101,
          77,
          97,
          99,
          104,
          105,
          110,
          101,
          73,
          100,
          41,
          32,
          63,
          63,
          32,
          102,
          97,
          108,
          115,
          101,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          115,
          116,
          97,
          114,
          116,
          83,
          116,
          97,
          116,
          101,
          77,
          97,
          99,
          104,
          105,
          110,
          101,
          40,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          95,
          68,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          46,
          95,
          119,
          97,
          115,
          109,
          77,
          111,
          100,
          117,
          108,
          101,
          32,
          61,
          61,
          61,
          32,
          110,
          117,
          108,
          108,
          32,
          124,
          124,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          100,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          67,
          111,
          114,
          101,
          32,
          61,
          61,
          61,
          32,
          110,
          117,
          108,
          108,
          41,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          102,
          97,
          108,
          115,
          101,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          111,
          112,
          101,
          110,
          85,
          114,
          108,
          32,
          61,
          32,
          95,
          68,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          46,
          95,
          119,
          97,
          115,
          109,
          77,
          111,
          100,
          117,
          108,
          101,
          46,
          99,
          114,
          101,
          97,
          116,
          101,
          68,
          101,
          102,
          97,
          117,
          108,
          116,
          79,
          112,
          101,
          110,
          85,
          82,
          76,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          115,
          116,
          97,
          114,
          116,
          101,
          100,
          32,
          61,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          100,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          67,
          111,
          114,
          101,
          46,
          115,
          116,
          97,
          116,
          101,
          77,
          97,
          99,
          104,
          105,
          110,
          101,
          83,
          116,
          97,
          114,
          116,
          40,
          111,
          112,
          101,
          110,
          85,
          114,
          108,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          115,
          116,
          97,
          114,
          116,
          101,
          100,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          115,
          101,
          116,
          117,
          112,
          83,
          116,
          97,
          116,
          101,
          77,
          97,
          99,
          104,
          105,
          110,
          101,
          76,
          105,
          115,
          116,
          101,
          110,
          101,
          114,
          115,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          115,
          116,
          97,
          114,
          116,
          101,
          100,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          115,
          116,
          111,
          112,
          83,
          116,
          97,
          116,
          101,
          77,
          97,
          99,
          104,
          105,
          110,
          101,
          40,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          115,
          116,
          111,
          112,
          112,
          101,
          100,
          32,
          61,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          100,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          67,
          111,
          114,
          101,
          63,
          46,
          115,
          116,
          97,
          116,
          101,
          77,
          97,
          99,
          104,
          105,
          110,
          101,
          83,
          116,
          111,
          112,
          40,
          41,
          32,
          63,
          63,
          32,
          102,
          97,
          108,
          115,
          101,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          115,
          116,
          111,
          112,
          112,
          101,
          100,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          99,
          108,
          101,
          97,
          110,
          117,
          112,
          83,
          116,
          97,
          116,
          101,
          77,
          97,
          99,
          104,
          105,
          110,
          101,
          76,
          105,
          115,
          116,
          101,
          110,
          101,
          114,
          115,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          115,
          116,
          111,
          112,
          112,
          101,
          100,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          95,
          103,
          101,
          116,
          80,
          111,
          105,
          110,
          116,
          101,
          114,
          80,
          111,
          115,
          105,
          116,
          105,
          111,
          110,
          40,
          101,
          118,
          101,
          110,
          116,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          114,
          101,
          99,
          116,
          32,
          61,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          99,
          97,
          110,
          118,
          97,
          115,
          46,
          103,
          101,
          116,
          66,
          111,
          117,
          110,
          100,
          105,
          110,
          103,
          67,
          108,
          105,
          101,
          110,
          116,
          82,
          101,
          99,
          116,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          115,
          99,
          97,
          108,
          101,
          88,
          32,
          61,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          99,
          97,
          110,
          118,
          97,
          115,
          46,
          119,
          105,
          100,
          116,
          104,
          32,
          47,
          32,
          114,
          101,
          99,
          116,
          46,
          119,
          105,
          100,
          116,
          104,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          115,
          99,
          97,
          108,
          101,
          89,
          32,
          61,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          99,
          97,
          110,
          118,
          97,
          115,
          46,
          104,
          101,
          105,
          103,
          104,
          116,
          32,
          47,
          32,
          114,
          101,
          99,
          116,
          46,
          104,
          101,
          105,
          103,
          104,
          116,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          100,
          101,
          118,
          105,
          99,
          101,
          80,
          105,
          120,
          101,
          108,
          82,
          97,
          116,
          105,
          111,
          32,
          61,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          114,
          101,
          110,
          100,
          101,
          114,
          67,
          111,
          110,
          102,
          105,
          103,
          46,
          100,
          101,
          118,
          105,
          99,
          101,
          80,
          105,
          120,
          101,
          108,
          82,
          97,
          116,
          105,
          111,
          32,
          124,
          124,
          32,
          119,
          105,
          110,
          100,
          111,
          119,
          46,
          100,
          101,
          118,
          105,
          99,
          101,
          80,
          105,
          120,
          101,
          108,
          82,
          97,
          116,
          105,
          111,
          32,
          124,
          124,
          32,
          49,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          120,
          32,
          61,
          32,
          40,
          101,
          118,
          101,
          110,
          116,
          46,
          99,
          108,
          105,
          101,
          110,
          116,
          88,
          32,
          45,
          32,
          114,
          101,
          99,
          116,
          46,
          108,
          101,
          102,
          116,
          41,
          32,
          42,
          32,
          115,
          99,
          97,
          108,
          101,
          88,
          32,
          47,
          32,
          100,
          101,
          118,
          105,
          99,
          101,
          80,
          105,
          120,
          101,
          108,
          82,
          97,
          116,
          105,
          111,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          121,
          32,
          61,
          32,
          40,
          101,
          118,
          101,
          110,
          116,
          46,
          99,
          108,
          105,
          101,
          110,
          116,
          89,
          32,
          45,
          32,
          114,
          101,
          99,
          116,
          46,
          116,
          111,
          112,
          41,
          32,
          42,
          32,
          115,
          99,
          97,
          108,
          101,
          89,
          32,
          47,
          32,
          100,
          101,
          118,
          105,
          99,
          101,
          80,
          105,
          120,
          101,
          108,
          82,
          97,
          116,
          105,
          111,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          120,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          121,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          95,
          111,
          110,
          80,
          111,
          105,
          110,
          116,
          101,
          114,
          85,
          112,
          40,
          101,
          118,
          101,
          110,
          116,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          123,
          32,
          120,
          44,
          32,
          121,
          32,
          125,
          32,
          61,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          103,
          101,
          116,
          80,
          111,
          105,
          110,
          116,
          101,
          114,
          80,
          111,
          115,
          105,
          116,
          105,
          111,
          110,
          40,
          101,
          118,
          101,
          110,
          116,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          112,
          111,
          115,
          116,
          80,
          111,
          105,
          110,
          116,
          101,
          114,
          85,
          112,
          69,
          118,
          101,
          110,
          116,
          40,
          120,
          44,
          32,
          121,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          95,
          111,
          110,
          80,
          111,
          105,
          110,
          116,
          101,
          114,
          68,
          111,
          119,
          110,
          40,
          101,
          118,
          101,
          110,
          116,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          123,
          32,
          120,
          44,
          32,
          121,
          32,
          125,
          32,
          61,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          103,
          101,
          116,
          80,
          111,
          105,
          110,
          116,
          101,
          114,
          80,
          111,
          115,
          105,
          116,
          105,
          111,
          110,
          40,
          101,
          118,
          101,
          110,
          116,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          112,
          111,
          115,
          116,
          80,
          111,
          105,
          110,
          116,
          101,
          114,
          68,
          111,
          119,
          110,
          69,
          118,
          101,
          110,
          116,
          40,
          120,
          44,
          32,
          121,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          95,
          111,
          110,
          80,
          111,
          105,
          110,
          116,
          101,
          114,
          77,
          111,
          118,
          101,
          40,
          101,
          118,
          101,
          110,
          116,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          123,
          32,
          120,
          44,
          32,
          121,
          32,
          125,
          32,
          61,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          103,
          101,
          116,
          80,
          111,
          105,
          110,
          116,
          101,
          114,
          80,
          111,
          115,
          105,
          116,
          105,
          111,
          110,
          40,
          101,
          118,
          101,
          110,
          116,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          112,
          111,
          115,
          116,
          80,
          111,
          105,
          110,
          116,
          101,
          114,
          77,
          111,
          118,
          101,
          69,
          118,
          101,
          110,
          116,
          40,
          120,
          44,
          32,
          121,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          95,
          111,
          110,
          80,
          111,
          105,
          110,
          116,
          101,
          114,
          69,
          110,
          116,
          101,
          114,
          40,
          101,
          118,
          101,
          110,
          116,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          123,
          32,
          120,
          44,
          32,
          121,
          32,
          125,
          32,
          61,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          103,
          101,
          116,
          80,
          111,
          105,
          110,
          116,
          101,
          114,
          80,
          111,
          115,
          105,
          116,
          105,
          111,
          110,
          40,
          101,
          118,
          101,
          110,
          116,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          112,
          111,
          115,
          116,
          80,
          111,
          105,
          110,
          116,
          101,
          114,
          69,
          110,
          116,
          101,
          114,
          69,
          118,
          101,
          110,
          116,
          40,
          120,
          44,
          32,
          121,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          95,
          111,
          110,
          80,
          111,
          105,
          110,
          116,
          101,
          114,
          76,
          101,
          97,
          118,
          101,
          40,
          101,
          118,
          101,
          110,
          116,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          123,
          32,
          120,
          44,
          32,
          121,
          32,
          125,
          32,
          61,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          103,
          101,
          116,
          80,
          111,
          105,
          110,
          116,
          101,
          114,
          80,
          111,
          115,
          105,
          116,
          105,
          111,
          110,
          40,
          101,
          118,
          101,
          110,
          116,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          112,
          111,
          115,
          116,
          80,
          111,
          105,
          110,
          116,
          101,
          114,
          69,
          120,
          105,
          116,
          69,
          118,
          101,
          110,
          116,
          40,
          120,
          44,
          32,
          121,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          112,
          111,
          115,
          116,
          80,
          111,
          105,
          110,
          116,
          101,
          114,
          85,
          112,
          69,
          118,
          101,
          110,
          116,
          40,
          120,
          44,
          32,
          121,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          100,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          67,
          111,
          114,
          101,
          63,
          46,
          115,
          116,
          97,
          116,
          101,
          77,
          97,
          99,
          104,
          105,
          110,
          101,
          80,
          111,
          115,
          116,
          80,
          111,
          105,
          110,
          116,
          101,
          114,
          85,
          112,
          69,
          118,
          101,
          110,
          116,
          40,
          120,
          44,
          32,
          121,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          112,
          111,
          115,
          116,
          80,
          111,
          105,
          110,
          116,
          101,
          114,
          68,
          111,
          119,
          110,
          69,
          118,
          101,
          110,
          116,
          40,
          120,
          44,
          32,
          121,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          100,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          67,
          111,
          114,
          101,
          63,
          46,
          115,
          116,
          97,
          116,
          101,
          77,
          97,
          99,
          104,
          105,
          110,
          101,
          80,
          111,
          115,
          116,
          80,
          111,
          105,
          110,
          116,
          101,
          114,
          68,
          111,
          119,
          110,
          69,
          118,
          101,
          110,
          116,
          40,
          120,
          44,
          32,
          121,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          112,
          111,
          115,
          116,
          80,
          111,
          105,
          110,
          116,
          101,
          114,
          77,
          111,
          118,
          101,
          69,
          118,
          101,
          110,
          116,
          40,
          120,
          44,
          32,
          121,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          100,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          67,
          111,
          114,
          101,
          63,
          46,
          115,
          116,
          97,
          116,
          101,
          77,
          97,
          99,
          104,
          105,
          110,
          101,
          80,
          111,
          115,
          116,
          80,
          111,
          105,
          110,
          116,
          101,
          114,
          77,
          111,
          118,
          101,
          69,
          118,
          101,
          110,
          116,
          40,
          120,
          44,
          32,
          121,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          112,
          111,
          115,
          116,
          80,
          111,
          105,
          110,
          116,
          101,
          114,
          69,
          110,
          116,
          101,
          114,
          69,
          118,
          101,
          110,
          116,
          40,
          120,
          44,
          32,
          121,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          100,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          67,
          111,
          114,
          101,
          63,
          46,
          115,
          116,
          97,
          116,
          101,
          77,
          97,
          99,
          104,
          105,
          110,
          101,
          80,
          111,
          115,
          116,
          80,
          111,
          105,
          110,
          116,
          101,
          114,
          69,
          110,
          116,
          101,
          114,
          69,
          118,
          101,
          110,
          116,
          40,
          120,
          44,
          32,
          121,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          112,
          111,
          115,
          116,
          80,
          111,
          105,
          110,
          116,
          101,
          114,
          69,
          120,
          105,
          116,
          69,
          118,
          101,
          110,
          116,
          40,
          120,
          44,
          32,
          121,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          100,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          67,
          111,
          114,
          101,
          63,
          46,
          115,
          116,
          97,
          116,
          101,
          77,
          97,
          99,
          104,
          105,
          110,
          101,
          80,
          111,
          115,
          116,
          80,
          111,
          105,
          110,
          116,
          101,
          114,
          69,
          120,
          105,
          116,
          69,
          118,
          101,
          110,
          116,
          40,
          120,
          44,
          32,
          121,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          103,
          101,
          116,
          83,
          116,
          97,
          116,
          101,
          77,
          97,
          99,
          104,
          105,
          110,
          101,
          76,
          105,
          115,
          116,
          101,
          110,
          101,
          114,
          115,
          40,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          33,
          116,
          104,
          105,
          115,
          46,
          95,
          100,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          67,
          111,
          114,
          101,
          41,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          91,
          93,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          108,
          105,
          115,
          116,
          101,
          110,
          101,
          114,
          115,
          86,
          101,
          99,
          116,
          111,
          114,
          32,
          61,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          100,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          67,
          111,
          114,
          101,
          46,
          115,
          116,
          97,
          116,
          101,
          77,
          97,
          99,
          104,
          105,
          110,
          101,
          70,
          114,
          97,
          109,
          101,
          119,
          111,
          114,
          107,
          83,
          101,
          116,
          117,
          112,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          108,
          105,
          115,
          116,
          101,
          110,
          101,
          114,
          115,
          32,
          61,
          32,
          91,
          93,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          111,
          114,
          32,
          40,
          108,
          101,
          116,
          32,
          105,
          32,
          61,
          32,
          48,
          59,
          32,
          105,
          32,
          60,
          32,
          108,
          105,
          115,
          116,
          101,
          110,
          101,
          114,
          115,
          86,
          101,
          99,
          116,
          111,
          114,
          46,
          115,
          105,
          122,
          101,
          40,
          41,
          59,
          32,
          105,
          32,
          43,
          61,
          32,
          49,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          108,
          105,
          115,
          116,
          101,
          110,
          101,
          114,
          115,
          46,
          112,
          117,
          115,
          104,
          40,
          108,
          105,
          115,
          116,
          101,
          110,
          101,
          114,
          115,
          86,
          101,
          99,
          116,
          111,
          114,
          46,
          103,
          101,
          116,
          40,
          105,
          41,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          108,
          105,
          115,
          116,
          101,
          110,
          101,
          114,
          115,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          95,
          115,
          101,
          116,
          117,
          112,
          83,
          116,
          97,
          116,
          101,
          77,
          97,
          99,
          104,
          105,
          110,
          101,
          76,
          105,
          115,
          116,
          101,
          110,
          101,
          114,
          115,
          40,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          73,
          83,
          95,
          66,
          82,
          79,
          87,
          83,
          69,
          82,
          32,
          38,
          38,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          99,
          97,
          110,
          118,
          97,
          115,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          111,
          102,
          32,
          72,
          84,
          77,
          76,
          67,
          97,
          110,
          118,
          97,
          115,
          69,
          108,
          101,
          109,
          101,
          110,
          116,
          32,
          38,
          38,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          100,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          67,
          111,
          114,
          101,
          32,
          33,
          61,
          61,
          32,
          110,
          117,
          108,
          108,
          32,
          38,
          38,
          32,
          116,
          104,
          105,
          115,
          46,
          105,
          115,
          76,
          111,
          97,
          100,
          101,
          100,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          108,
          105,
          115,
          116,
          101,
          110,
          101,
          114,
          115,
          32,
          61,
          32,
          116,
          104,
          105,
          115,
          46,
          103,
          101,
          116,
          83,
          116,
          97,
          116,
          101,
          77,
          97,
          99,
          104,
          105,
          110,
          101,
          76,
          105,
          115,
          116,
          101,
          110,
          101,
          114,
          115,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          108,
          105,
          115,
          116,
          101,
          110,
          101,
          114,
          115,
          46,
          105,
          110,
          99,
          108,
          117,
          100,
          101,
          115,
          40,
          34,
          80,
          111,
          105,
          110,
          116,
          101,
          114,
          85,
          112,
          34,
          41,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          99,
          97,
          110,
          118,
          97,
          115,
          46,
          97,
          100,
          100,
          69,
          118,
          101,
          110,
          116,
          76,
          105,
          115,
          116,
          101,
          110,
          101,
          114,
          40,
          34,
          112,
          111,
          105,
          110,
          116,
          101,
          114,
          117,
          112,
          34,
          44,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          112,
          111,
          105,
          110,
          116,
          101,
          114,
          85,
          112,
          77,
          101,
          116,
          104,
          111,
          100,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          108,
          105,
          115,
          116,
          101,
          110,
          101,
          114,
          115,
          46,
          105,
          110,
          99,
          108,
          117,
          100,
          101,
          115,
          40,
          34,
          80,
          111,
          105,
          110,
          116,
          101,
          114,
          68,
          111,
          119,
          110,
          34,
          41,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          99,
          97,
          110,
          118,
          97,
          115,
          46,
          97,
          100,
          100,
          69,
          118,
          101,
          110,
          116,
          76,
          105,
          115,
          116,
          101,
          110,
          101,
          114,
          40,
          34,
          112,
          111,
          105,
          110,
          116,
          101,
          114,
          100,
          111,
          119,
          110,
          34,
          44,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          112,
          111,
          105,
          110,
          116,
          101,
          114,
          68,
          111,
          119,
          110,
          77,
          101,
          116,
          104,
          111,
          100,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          108,
          105,
          115,
          116,
          101,
          110,
          101,
          114,
          115,
          46,
          105,
          110,
          99,
          108,
          117,
          100,
          101,
          115,
          40,
          34,
          80,
          111,
          105,
          110,
          116,
          101,
          114,
          77,
          111,
          118,
          101,
          34,
          41,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          99,
          97,
          110,
          118,
          97,
          115,
          46,
          97,
          100,
          100,
          69,
          118,
          101,
          110,
          116,
          76,
          105,
          115,
          116,
          101,
          110,
          101,
          114,
          40,
          34,
          112,
          111,
          105,
          110,
          116,
          101,
          114,
          109,
          111,
          118,
          101,
          34,
          44,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          112,
          111,
          105,
          110,
          116,
          101,
          114,
          77,
          111,
          118,
          101,
          77,
          101,
          116,
          104,
          111,
          100,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          108,
          105,
          115,
          116,
          101,
          110,
          101,
          114,
          115,
          46,
          105,
          110,
          99,
          108,
          117,
          100,
          101,
          115,
          40,
          34,
          80,
          111,
          105,
          110,
          116,
          101,
          114,
          69,
          110,
          116,
          101,
          114,
          34,
          41,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          99,
          97,
          110,
          118,
          97,
          115,
          46,
          97,
          100,
          100,
          69,
          118,
          101,
          110,
          116,
          76,
          105,
          115,
          116,
          101,
          110,
          101,
          114,
          40,
          34,
          112,
          111,
          105,
          110,
          116,
          101,
          114,
          101,
          110,
          116,
          101,
          114,
          34,
          44,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          112,
          111,
          105,
          110,
          116,
          101,
          114,
          69,
          110,
          116,
          101,
          114,
          77,
          101,
          116,
          104,
          111,
          100,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          108,
          105,
          115,
          116,
          101,
          110,
          101,
          114,
          115,
          46,
          105,
          110,
          99,
          108,
          117,
          100,
          101,
          115,
          40,
          34,
          80,
          111,
          105,
          110,
          116,
          101,
          114,
          69,
          120,
          105,
          116,
          34,
          41,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          99,
          97,
          110,
          118,
          97,
          115,
          46,
          97,
          100,
          100,
          69,
          118,
          101,
          110,
          116,
          76,
          105,
          115,
          116,
          101,
          110,
          101,
          114,
          40,
          34,
          112,
          111,
          105,
          110,
          116,
          101,
          114,
          108,
          101,
          97,
          118,
          101,
          34,
          44,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          112,
          111,
          105,
          110,
          116,
          101,
          114,
          69,
          120,
          105,
          116,
          77,
          101,
          116,
          104,
          111,
          100,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          95,
          99,
          108,
          101,
          97,
          110,
          117,
          112,
          83,
          116,
          97,
          116,
          101,
          77,
          97,
          99,
          104,
          105,
          110,
          101,
          76,
          105,
          115,
          116,
          101,
          110,
          101,
          114,
          115,
          40,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          73,
          83,
          95,
          66,
          82,
          79,
          87,
          83,
          69,
          82,
          32,
          38,
          38,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          99,
          97,
          110,
          118,
          97,
          115,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          111,
          102,
          32,
          72,
          84,
          77,
          76,
          67,
          97,
          110,
          118,
          97,
          115,
          69,
          108,
          101,
          109,
          101,
          110,
          116,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          99,
          97,
          110,
          118,
          97,
          115,
          46,
          114,
          101,
          109,
          111,
          118,
          101,
          69,
          118,
          101,
          110,
          116,
          76,
          105,
          115,
          116,
          101,
          110,
          101,
          114,
          40,
          34,
          112,
          111,
          105,
          110,
          116,
          101,
          114,
          117,
          112,
          34,
          44,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          112,
          111,
          105,
          110,
          116,
          101,
          114,
          85,
          112,
          77,
          101,
          116,
          104,
          111,
          100,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          99,
          97,
          110,
          118,
          97,
          115,
          46,
          114,
          101,
          109,
          111,
          118,
          101,
          69,
          118,
          101,
          110,
          116,
          76,
          105,
          115,
          116,
          101,
          110,
          101,
          114,
          40,
          34,
          112,
          111,
          105,
          110,
          116,
          101,
          114,
          100,
          111,
          119,
          110,
          34,
          44,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          112,
          111,
          105,
          110,
          116,
          101,
          114,
          68,
          111,
          119,
          110,
          77,
          101,
          116,
          104,
          111,
          100,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          99,
          97,
          110,
          118,
          97,
          115,
          46,
          114,
          101,
          109,
          111,
          118,
          101,
          69,
          118,
          101,
          110,
          116,
          76,
          105,
          115,
          116,
          101,
          110,
          101,
          114,
          40,
          34,
          112,
          111,
          105,
          110,
          116,
          101,
          114,
          109,
          111,
          118,
          101,
          34,
          44,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          112,
          111,
          105,
          110,
          116,
          101,
          114,
          77,
          111,
          118,
          101,
          77,
          101,
          116,
          104,
          111,
          100,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          99,
          97,
          110,
          118,
          97,
          115,
          46,
          114,
          101,
          109,
          111,
          118,
          101,
          69,
          118,
          101,
          110,
          116,
          76,
          105,
          115,
          116,
          101,
          110,
          101,
          114,
          40,
          34,
          112,
          111,
          105,
          110,
          116,
          101,
          114,
          101,
          110,
          116,
          101,
          114,
          34,
          44,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          112,
          111,
          105,
          110,
          116,
          101,
          114,
          69,
          110,
          116,
          101,
          114,
          77,
          101,
          116,
          104,
          111,
          100,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          99,
          97,
          110,
          118,
          97,
          115,
          46,
          114,
          101,
          109,
          111,
          118,
          101,
          69,
          118,
          101,
          110,
          116,
          76,
          105,
          115,
          116,
          101,
          110,
          101,
          114,
          40,
          34,
          112,
          111,
          105,
          110,
          116,
          101,
          114,
          108,
          101,
          97,
          118,
          101,
          34,
          44,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          112,
          111,
          105,
          110,
          116,
          101,
          114,
          69,
          120,
          105,
          116,
          77,
          101,
          116,
          104,
          111,
          100,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          108,
          111,
          97,
          100,
          83,
          116,
          97,
          116,
          101,
          77,
          97,
          99,
          104,
          105,
          110,
          101,
          68,
          97,
          116,
          97,
          40,
          115,
          116,
          97,
          116,
          101,
          77,
          97,
          99,
          104,
          105,
          110,
          101,
          68,
          97,
          116,
          97,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          100,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          67,
          111,
          114,
          101,
          63,
          46,
          115,
          116,
          97,
          116,
          101,
          77,
          97,
          99,
          104,
          105,
          110,
          101,
          76,
          111,
          97,
          100,
          68,
          97,
          116,
          97,
          40,
          115,
          116,
          97,
          116,
          101,
          77,
          97,
          99,
          104,
          105,
          110,
          101,
          68,
          97,
          116,
          97,
          41,
          32,
          63,
          63,
          32,
          102,
          97,
          108,
          115,
          101,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          97,
          110,
          105,
          109,
          97,
          116,
          105,
          111,
          110,
          83,
          105,
          122,
          101,
          40,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          119,
          105,
          100,
          116,
          104,
          32,
          61,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          100,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          67,
          111,
          114,
          101,
          63,
          46,
          97,
          110,
          105,
          109,
          97,
          116,
          105,
          111,
          110,
          83,
          105,
          122,
          101,
          40,
          41,
          46,
          103,
          101,
          116,
          40,
          48,
          41,
          32,
          63,
          63,
          32,
          48,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          104,
          101,
          105,
          103,
          104,
          116,
          32,
          61,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          100,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          67,
          111,
          114,
          101,
          63,
          46,
          97,
          110,
          105,
          109,
          97,
          116,
          105,
          111,
          110,
          83,
          105,
          122,
          101,
          40,
          41,
          46,
          103,
          101,
          116,
          40,
          49,
          41,
          32,
          63,
          63,
          32,
          48,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          119,
          105,
          100,
          116,
          104,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          104,
          101,
          105,
          103,
          104,
          116,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          115,
          101,
          116,
          83,
          116,
          97,
          116,
          101,
          77,
          97,
          99,
          104,
          105,
          110,
          101,
          66,
          111,
          111,
          108,
          101,
          97,
          110,
          67,
          111,
          110,
          116,
          101,
          120,
          116,
          40,
          110,
          97,
          109,
          101,
          44,
          32,
          118,
          97,
          108,
          117,
          101,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          100,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          67,
          111,
          114,
          101,
          63,
          46,
          115,
          116,
          97,
          116,
          101,
          77,
          97,
          99,
          104,
          105,
          110,
          101,
          83,
          101,
          116,
          66,
          111,
          111,
          108,
          101,
          97,
          110,
          73,
          110,
          112,
          117,
          116,
          40,
          110,
          97,
          109,
          101,
          44,
          32,
          118,
          97,
          108,
          117,
          101,
          41,
          32,
          63,
          63,
          32,
          102,
          97,
          108,
          115,
          101,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          115,
          101,
          116,
          83,
          116,
          97,
          116,
          101,
          77,
          97,
          99,
          104,
          105,
          110,
          101,
          78,
          117,
          109,
          101,
          114,
          105,
          99,
          67,
          111,
          110,
          116,
          101,
          120,
          116,
          40,
          110,
          97,
          109,
          101,
          44,
          32,
          118,
          97,
          108,
          117,
          101,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          100,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          67,
          111,
          114,
          101,
          63,
          46,
          115,
          116,
          97,
          116,
          101,
          77,
          97,
          99,
          104,
          105,
          110,
          101,
          83,
          101,
          116,
          78,
          117,
          109,
          101,
          114,
          105,
          99,
          73,
          110,
          112,
          117,
          116,
          40,
          110,
          97,
          109,
          101,
          44,
          32,
          118,
          97,
          108,
          117,
          101,
          41,
          32,
          63,
          63,
          32,
          102,
          97,
          108,
          115,
          101,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          115,
          101,
          116,
          83,
          116,
          97,
          116,
          101,
          77,
          97,
          99,
          104,
          105,
          110,
          101,
          83,
          116,
          114,
          105,
          110,
          103,
          67,
          111,
          110,
          116,
          101,
          120,
          116,
          40,
          110,
          97,
          109,
          101,
          44,
          32,
          118,
          97,
          108,
          117,
          101,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          100,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          67,
          111,
          114,
          101,
          63,
          46,
          115,
          116,
          97,
          116,
          101,
          77,
          97,
          99,
          104,
          105,
          110,
          101,
          83,
          101,
          116,
          83,
          116,
          114,
          105,
          110,
          103,
          73,
          110,
          112,
          117,
          116,
          40,
          110,
          97,
          109,
          101,
          44,
          32,
          118,
          97,
          108,
          117,
          101,
          41,
          32,
          63,
          63,
          32,
          102,
          97,
          108,
          115,
          101,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          47,
          42,
          42,
          10,
          32,
          32,
          32,
          32,
          32,
          42,
          32,
          71,
          101,
          116,
          32,
          116,
          104,
          101,
          32,
          79,
          114,
          105,
          101,
          110,
          116,
          101,
          100,
          32,
          66,
          111,
          117,
          110,
          100,
          105,
          110,
          103,
          32,
          66,
          111,
          120,
          32,
          40,
          79,
          66,
          66,
          41,
          32,
          112,
          111,
          105,
          110,
          116,
          115,
          32,
          111,
          102,
          32,
          97,
          32,
          108,
          97,
          121,
          101,
          114,
          32,
          98,
          121,
          32,
          105,
          116,
          115,
          32,
          110,
          97,
          109,
          101,
          10,
          32,
          32,
          32,
          32,
          32,
          42,
          32,
          64,
          112,
          97,
          114,
          97,
          109,
          32,
          108,
          97,
          121,
          101,
          114,
          78,
          97,
          109,
          101,
          32,
          45,
          32,
          84,
          104,
          101,
          32,
          110,
          97,
          109,
          101,
          32,
          111,
          102,
          32,
          116,
          104,
          101,
          32,
          108,
          97,
          121,
          101,
          114,
          10,
          32,
          32,
          32,
          32,
          32,
          42,
          32,
          64,
          114,
          101,
          116,
          117,
          114,
          110,
          115,
          32,
          65,
          110,
          32,
          97,
          114,
          114,
          97,
          121,
          32,
          111,
          102,
          32,
          56,
          32,
          110,
          117,
          109,
          98,
          101,
          114,
          115,
          32,
          114,
          101,
          112,
          114,
          101,
          115,
          101,
          110,
          116,
          105,
          110,
          103,
          32,
          52,
          32,
          112,
          111,
          105,
          110,
          116,
          115,
          32,
          40,
          120,
          44,
          121,
          41,
          32,
          111,
          102,
          32,
          116,
          104,
          101,
          32,
          79,
          66,
          66,
          32,
          105,
          110,
          32,
          99,
          108,
          111,
          99,
          107,
          119,
          105,
          115,
          101,
          32,
          111,
          114,
          100,
          101,
          114,
          32,
          115,
          116,
          97,
          114,
          116,
          105,
          110,
          103,
          32,
          102,
          114,
          111,
          109,
          32,
          116,
          111,
          112,
          45,
          108,
          101,
          102,
          116,
          10,
          32,
          32,
          32,
          32,
          32,
          42,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          91,
          120,
          48,
          44,
          32,
          121,
          48,
          44,
          32,
          120,
          49,
          44,
          32,
          121,
          49,
          44,
          32,
          120,
          50,
          44,
          32,
          121,
          50,
          44,
          32,
          120,
          51,
          44,
          32,
          121,
          51,
          93,
          10,
          32,
          32,
          32,
          32,
          32,
          42,
          10,
          32,
          32,
          32,
          32,
          32,
          42,
          32,
          64,
          101,
          120,
          97,
          109,
          112,
          108,
          101,
          10,
          32,
          32,
          32,
          32,
          32,
          42,
          32,
          96,
          96,
          96,
          116,
          121,
          112,
          101,
          115,
          99,
          114,
          105,
          112,
          116,
          10,
          32,
          32,
          32,
          32,
          32,
          42,
          32,
          47,
          47,
          32,
          68,
          114,
          97,
          119,
          32,
          97,
          32,
          112,
          111,
          108,
          121,
          103,
          111,
          110,
          32,
          97,
          114,
          111,
          117,
          110,
          100,
          32,
          116,
          104,
          101,
          32,
          108,
          97,
          121,
          101,
          114,
          32,
          39,
          76,
          97,
          121,
          101,
          114,
          32,
          49,
          39,
          10,
          32,
          32,
          32,
          32,
          32,
          42,
          32,
          100,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          46,
          97,
          100,
          100,
          69,
          118,
          101,
          110,
          116,
          76,
          105,
          115,
          116,
          101,
          110,
          101,
          114,
          40,
          39,
          114,
          101,
          110,
          100,
          101,
          114,
          39,
          44,
          32,
          40,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          42,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          111,
          98,
          98,
          80,
          111,
          105,
          110,
          116,
          115,
          32,
          61,
          32,
          100,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          46,
          103,
          101,
          116,
          76,
          97,
          121,
          101,
          114,
          66,
          111,
          117,
          110,
          100,
          105,
          110,
          103,
          66,
          111,
          120,
          40,
          39,
          76,
          97,
          121,
          101,
          114,
          32,
          49,
          39,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          42,
          10,
          32,
          32,
          32,
          32,
          32,
          42,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          111,
          98,
          98,
          80,
          111,
          105,
          110,
          116,
          115,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          42,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          116,
          101,
          120,
          116,
          46,
          98,
          101,
          103,
          105,
          110,
          80,
          97,
          116,
          104,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          42,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          116,
          101,
          120,
          116,
          46,
          109,
          111,
          118,
          101,
          84,
          111,
          40,
          111,
          98,
          98,
          80,
          111,
          105,
          110,
          116,
          115,
          91,
          48,
          93,
          44,
          32,
          111,
          98,
          98,
          80,
          111,
          105,
          110,
          116,
          115,
          91,
          49,
          93,
          41,
          59,
          32,
          47,
          47,
          32,
          70,
          105,
          114,
          115,
          116,
          32,
          112,
          111,
          105,
          110,
          116,
          10,
          32,
          32,
          32,
          32,
          32,
          42,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          116,
          101,
          120,
          116,
          46,
          108,
          105,
          110,
          101,
          84,
          111,
          40,
          111,
          98,
          98,
          80,
          111,
          105,
          110,
          116,
          115,
          91,
          50,
          93,
          44,
          32,
          111,
          98,
          98,
          80,
          111,
          105,
          110,
          116,
          115,
          91,
          51,
          93,
          41,
          59,
          32,
          47,
          47,
          32,
          83,
          101,
          99,
          111,
          110,
          100,
          32,
          112,
          111,
          105,
          110,
          116,
          10,
          32,
          32,
          32,
          32,
          32,
          42,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          116,
          101,
          120,
          116,
          46,
          108,
          105,
          110,
          101,
          84,
          111,
          40,
          111,
          98,
          98,
          80,
          111,
          105,
          110,
          116,
          115,
          91,
          52,
          93,
          44,
          32,
          111,
          98,
          98,
          80,
          111,
          105,
          110,
          116,
          115,
          91,
          53,
          93,
          41,
          59,
          32,
          47,
          47,
          32,
          84,
          104,
          105,
          114,
          100,
          32,
          112,
          111,
          105,
          110,
          116,
          10,
          32,
          32,
          32,
          32,
          32,
          42,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          116,
          101,
          120,
          116,
          46,
          108,
          105,
          110,
          101,
          84,
          111,
          40,
          111,
          98,
          98,
          80,
          111,
          105,
          110,
          116,
          115,
          91,
          54,
          93,
          44,
          32,
          111,
          98,
          98,
          80,
          111,
          105,
          110,
          116,
          115,
          91,
          55,
          93,
          41,
          59,
          32,
          47,
          47,
          32,
          70,
          111,
          117,
          114,
          116,
          104,
          32,
          112,
          111,
          105,
          110,
          116,
          10,
          32,
          32,
          32,
          32,
          32,
          42,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          116,
          101,
          120,
          116,
          46,
          99,
          108,
          111,
          115,
          101,
          80,
          97,
          116,
          104,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          42,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          116,
          101,
          120,
          116,
          46,
          115,
          116,
          114,
          111,
          107,
          101,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          42,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          42,
          32,
          125,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          42,
          32,
          96,
          96,
          96,
          10,
          32,
          32,
          32,
          32,
          32,
          42,
          47,
          10,
          32,
          32,
          32,
          32,
          103,
          101,
          116,
          76,
          97,
          121,
          101,
          114,
          66,
          111,
          117,
          110,
          100,
          105,
          110,
          103,
          66,
          111,
          120,
          40,
          108,
          97,
          121,
          101,
          114,
          78,
          97,
          109,
          101,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          98,
          111,
          117,
          110,
          100,
          115,
          32,
          61,
          32,
          116,
          104,
          105,
          115,
          46,
          95,
          100,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          67,
          111,
          114,
          101,
          63,
          46,
          103,
          101,
          116,
          76,
          97,
          121,
          101,
          114,
          66,
          111,
          117,
          110,
          100,
          115,
          40,
          108,
          97,
          121,
          101,
          114,
          78,
          97,
          109,
          101,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          33,
          98,
          111,
          117,
          110,
          100,
          115,
          41,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          118,
          111,
          105,
          100,
          32,
          48,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          98,
          111,
          117,
          110,
          100,
          115,
          46,
          115,
          105,
          122,
          101,
          40,
          41,
          32,
          33,
          61,
          61,
          32,
          56,
          41,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          118,
          111,
          105,
          100,
          32,
          48,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          112,
          111,
          105,
          110,
          116,
          115,
          32,
          61,
          32,
          91,
          93,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          102,
          111,
          114,
          32,
          40,
          108,
          101,
          116,
          32,
          105,
          32,
          61,
          32,
          48,
          59,
          32,
          105,
          32,
          60,
          32,
          56,
          59,
          32,
          105,
          32,
          43,
          61,
          32,
          49,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          112,
          111,
          105,
          110,
          116,
          115,
          46,
          112,
          117,
          115,
          104,
          40,
          98,
          111,
          117,
          110,
          100,
          115,
          46,
          103,
          101,
          116,
          40,
          105,
          41,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          112,
          111,
          105,
          110,
          116,
          115,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          115,
          116,
          97,
          116,
          105,
          99,
          32,
          116,
          114,
          97,
          110,
          115,
          102,
          111,
          114,
          109,
          84,
          104,
          101,
          109,
          101,
          84,
          111,
          76,
          111,
          116,
          116,
          105,
          101,
          83,
          108,
          111,
          116,
          115,
          40,
          116,
          104,
          101,
          109,
          101,
          44,
          32,
          115,
          108,
          111,
          116,
          115,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          95,
          68,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          46,
          95,
          119,
          97,
          115,
          109,
          77,
          111,
          100,
          117,
          108,
          101,
          63,
          46,
          116,
          114,
          97,
          110,
          115,
          102,
          111,
          114,
          109,
          84,
          104,
          101,
          109,
          101,
          84,
          111,
          76,
          111,
          116,
          116,
          105,
          101,
          83,
          108,
          111,
          116,
          115,
          40,
          116,
          104,
          101,
          109,
          101,
          44,
          32,
          115,
          108,
          111,
          116,
          115,
          41,
          32,
          63,
          63,
          32,
          34,
          34,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          125,
          59,
          10,
          32,
          32,
          95,
          95,
          112,
          117,
          98,
          108,
          105,
          99,
          70,
          105,
          101,
          108,
          100,
          40,
          95,
          68,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          44,
          32,
          34,
          95,
          119,
          97,
          115,
          109,
          77,
          111,
          100,
          117,
          108,
          101,
          34,
          44,
          32,
          110,
          117,
          108,
          108,
          41,
          59,
          10,
          32,
          32,
          118,
          97,
          114,
          32,
          68,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          32,
          61,
          32,
          95,
          68,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          59,
          10,
          10,
          32,
          32,
          47,
          47,
          32,
          115,
          114,
          99,
          47,
          119,
          111,
          114,
          107,
          101,
          114,
          47,
          100,
          111,
          116,
          108,
          111,
          116,
          116,
          105,
          101,
          46,
          119,
          111,
          114,
          107,
          101,
          114,
          46,
          116,
          115,
          10,
          32,
          32,
          118,
          97,
          114,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          115,
          77,
          97,
          112,
          32,
          61,
          32,
          47,
          42,
          32,
          64,
          95,
          95,
          80,
          85,
          82,
          69,
          95,
          95,
          32,
          42,
          47,
          32,
          110,
          101,
          119,
          32,
          77,
          97,
          112,
          40,
          41,
          59,
          10,
          32,
          32,
          118,
          97,
          114,
          32,
          101,
          118,
          101,
          110,
          116,
          72,
          97,
          110,
          100,
          108,
          101,
          114,
          77,
          97,
          112,
          32,
          61,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          114,
          101,
          97,
          100,
          121,
          58,
          32,
          40,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          41,
          32,
          61,
          62,
          32,
          40,
          101,
          118,
          101,
          110,
          116,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          114,
          101,
          115,
          112,
          111,
          110,
          115,
          101,
          32,
          61,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          100,
          58,
          32,
          34,
          34,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          109,
          101,
          116,
          104,
          111,
          100,
          58,
          32,
          34,
          111,
          110,
          82,
          101,
          97,
          100,
          121,
          34,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          115,
          117,
          108,
          116,
          58,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          101,
          118,
          101,
          110,
          116,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          115,
          101,
          108,
          102,
          46,
          112,
          111,
          115,
          116,
          77,
          101,
          115,
          115,
          97,
          103,
          101,
          40,
          114,
          101,
          115,
          112,
          111,
          110,
          115,
          101,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          44,
          10,
          32,
          32,
          32,
          32,
          99,
          111,
          109,
          112,
          108,
          101,
          116,
          101,
          58,
          32,
          40,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          41,
          32,
          61,
          62,
          32,
          40,
          101,
          118,
          101,
          110,
          116,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          114,
          101,
          115,
          112,
          111,
          110,
          115,
          101,
          32,
          61,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          100,
          58,
          32,
          34,
          34,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          109,
          101,
          116,
          104,
          111,
          100,
          58,
          32,
          34,
          111,
          110,
          67,
          111,
          109,
          112,
          108,
          101,
          116,
          101,
          34,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          115,
          117,
          108,
          116,
          58,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          101,
          118,
          101,
          110,
          116,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          115,
          101,
          108,
          102,
          46,
          112,
          111,
          115,
          116,
          77,
          101,
          115,
          115,
          97,
          103,
          101,
          40,
          114,
          101,
          115,
          112,
          111,
          110,
          115,
          101,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          44,
          10,
          32,
          32,
          32,
          32,
          108,
          111,
          97,
          100,
          58,
          32,
          40,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          41,
          32,
          61,
          62,
          32,
          40,
          101,
          118,
          101,
          110,
          116,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          108,
          111,
          97,
          100,
          69,
          118,
          101,
          110,
          116,
          32,
          61,
          32,
          101,
          118,
          101,
          110,
          116,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          114,
          101,
          115,
          112,
          111,
          110,
          115,
          101,
          32,
          61,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          100,
          58,
          32,
          34,
          34,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          109,
          101,
          116,
          104,
          111,
          100,
          58,
          32,
          34,
          111,
          110,
          76,
          111,
          97,
          100,
          34,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          115,
          117,
          108,
          116,
          58,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          101,
          118,
          101,
          110,
          116,
          58,
          32,
          108,
          111,
          97,
          100,
          69,
          118,
          101,
          110,
          116,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          115,
          101,
          108,
          102,
          46,
          112,
          111,
          115,
          116,
          77,
          101,
          115,
          115,
          97,
          103,
          101,
          40,
          114,
          101,
          115,
          112,
          111,
          110,
          115,
          101,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          44,
          10,
          32,
          32,
          32,
          32,
          108,
          111,
          97,
          100,
          69,
          114,
          114,
          111,
          114,
          58,
          32,
          40,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          41,
          32,
          61,
          62,
          32,
          40,
          101,
          118,
          101,
          110,
          116,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          108,
          111,
          97,
          100,
          69,
          114,
          114,
          111,
          114,
          69,
          118,
          101,
          110,
          116,
          32,
          61,
          32,
          101,
          118,
          101,
          110,
          116,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          114,
          101,
          115,
          112,
          111,
          110,
          115,
          101,
          32,
          61,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          100,
          58,
          32,
          34,
          34,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          109,
          101,
          116,
          104,
          111,
          100,
          58,
          32,
          34,
          111,
          110,
          76,
          111,
          97,
          100,
          69,
          114,
          114,
          111,
          114,
          34,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          115,
          117,
          108,
          116,
          58,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          101,
          118,
          101,
          110,
          116,
          58,
          32,
          108,
          111,
          97,
          100,
          69,
          114,
          114,
          111,
          114,
          69,
          118,
          101,
          110,
          116,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          115,
          101,
          108,
          102,
          46,
          112,
          111,
          115,
          116,
          77,
          101,
          115,
          115,
          97,
          103,
          101,
          40,
          114,
          101,
          115,
          112,
          111,
          110,
          115,
          101,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          44,
          10,
          32,
          32,
          32,
          32,
          114,
          101,
          110,
          100,
          101,
          114,
          69,
          114,
          114,
          111,
          114,
          58,
          32,
          40,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          41,
          32,
          61,
          62,
          32,
          40,
          101,
          118,
          101,
          110,
          116,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          114,
          101,
          110,
          100,
          101,
          114,
          69,
          114,
          114,
          111,
          114,
          69,
          118,
          101,
          110,
          116,
          32,
          61,
          32,
          101,
          118,
          101,
          110,
          116,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          114,
          101,
          115,
          112,
          111,
          110,
          115,
          101,
          32,
          61,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          100,
          58,
          32,
          34,
          34,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          109,
          101,
          116,
          104,
          111,
          100,
          58,
          32,
          34,
          111,
          110,
          82,
          101,
          110,
          100,
          101,
          114,
          69,
          114,
          114,
          111,
          114,
          34,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          115,
          117,
          108,
          116,
          58,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          101,
          118,
          101,
          110,
          116,
          58,
          32,
          114,
          101,
          110,
          100,
          101,
          114,
          69,
          114,
          114,
          111,
          114,
          69,
          118,
          101,
          110,
          116,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          115,
          101,
          108,
          102,
          46,
          112,
          111,
          115,
          116,
          77,
          101,
          115,
          115,
          97,
          103,
          101,
          40,
          114,
          101,
          115,
          112,
          111,
          110,
          115,
          101,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          44,
          10,
          32,
          32,
          32,
          32,
          108,
          111,
          111,
          112,
          58,
          32,
          40,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          41,
          32,
          61,
          62,
          32,
          40,
          101,
          118,
          101,
          110,
          116,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          108,
          111,
          111,
          112,
          69,
          118,
          101,
          110,
          116,
          32,
          61,
          32,
          101,
          118,
          101,
          110,
          116,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          114,
          101,
          115,
          112,
          111,
          110,
          115,
          101,
          32,
          61,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          100,
          58,
          32,
          34,
          34,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          109,
          101,
          116,
          104,
          111,
          100,
          58,
          32,
          34,
          111,
          110,
          76,
          111,
          111,
          112,
          34,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          115,
          117,
          108,
          116,
          58,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          101,
          118,
          101,
          110,
          116,
          58,
          32,
          108,
          111,
          111,
          112,
          69,
          118,
          101,
          110,
          116,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          115,
          101,
          108,
          102,
          46,
          112,
          111,
          115,
          116,
          77,
          101,
          115,
          115,
          97,
          103,
          101,
          40,
          114,
          101,
          115,
          112,
          111,
          110,
          115,
          101,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          44,
          10,
          32,
          32,
          32,
          32,
          112,
          108,
          97,
          121,
          58,
          32,
          40,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          41,
          32,
          61,
          62,
          32,
          40,
          101,
          118,
          101,
          110,
          116,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          112,
          108,
          97,
          121,
          69,
          118,
          101,
          110,
          116,
          32,
          61,
          32,
          101,
          118,
          101,
          110,
          116,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          114,
          101,
          115,
          112,
          111,
          110,
          115,
          101,
          32,
          61,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          100,
          58,
          32,
          34,
          34,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          109,
          101,
          116,
          104,
          111,
          100,
          58,
          32,
          34,
          111,
          110,
          80,
          108,
          97,
          121,
          34,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          115,
          117,
          108,
          116,
          58,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          101,
          118,
          101,
          110,
          116,
          58,
          32,
          112,
          108,
          97,
          121,
          69,
          118,
          101,
          110,
          116,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          115,
          101,
          108,
          102,
          46,
          112,
          111,
          115,
          116,
          77,
          101,
          115,
          115,
          97,
          103,
          101,
          40,
          114,
          101,
          115,
          112,
          111,
          110,
          115,
          101,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          44,
          10,
          32,
          32,
          32,
          32,
          112,
          97,
          117,
          115,
          101,
          58,
          32,
          40,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          41,
          32,
          61,
          62,
          32,
          40,
          101,
          118,
          101,
          110,
          116,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          112,
          97,
          117,
          115,
          101,
          69,
          118,
          101,
          110,
          116,
          32,
          61,
          32,
          101,
          118,
          101,
          110,
          116,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          114,
          101,
          115,
          112,
          111,
          110,
          115,
          101,
          32,
          61,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          100,
          58,
          32,
          34,
          34,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          109,
          101,
          116,
          104,
          111,
          100,
          58,
          32,
          34,
          111,
          110,
          80,
          97,
          117,
          115,
          101,
          34,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          115,
          117,
          108,
          116,
          58,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          101,
          118,
          101,
          110,
          116,
          58,
          32,
          112,
          97,
          117,
          115,
          101,
          69,
          118,
          101,
          110,
          116,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          115,
          101,
          108,
          102,
          46,
          112,
          111,
          115,
          116,
          77,
          101,
          115,
          115,
          97,
          103,
          101,
          40,
          114,
          101,
          115,
          112,
          111,
          110,
          115,
          101,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          44,
          10,
          32,
          32,
          32,
          32,
          115,
          116,
          111,
          112,
          58,
          32,
          40,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          41,
          32,
          61,
          62,
          32,
          40,
          101,
          118,
          101,
          110,
          116,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          115,
          116,
          111,
          112,
          69,
          118,
          101,
          110,
          116,
          32,
          61,
          32,
          101,
          118,
          101,
          110,
          116,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          114,
          101,
          115,
          112,
          111,
          110,
          115,
          101,
          32,
          61,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          100,
          58,
          32,
          34,
          34,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          109,
          101,
          116,
          104,
          111,
          100,
          58,
          32,
          34,
          111,
          110,
          83,
          116,
          111,
          112,
          34,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          115,
          117,
          108,
          116,
          58,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          101,
          118,
          101,
          110,
          116,
          58,
          32,
          115,
          116,
          111,
          112,
          69,
          118,
          101,
          110,
          116,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          115,
          101,
          108,
          102,
          46,
          112,
          111,
          115,
          116,
          77,
          101,
          115,
          115,
          97,
          103,
          101,
          40,
          114,
          101,
          115,
          112,
          111,
          110,
          115,
          101,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          44,
          10,
          32,
          32,
          32,
          32,
          102,
          114,
          97,
          109,
          101,
          58,
          32,
          40,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          41,
          32,
          61,
          62,
          32,
          40,
          101,
          118,
          101,
          110,
          116,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          102,
          114,
          97,
          109,
          101,
          69,
          118,
          101,
          110,
          116,
          32,
          61,
          32,
          101,
          118,
          101,
          110,
          116,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          114,
          101,
          115,
          112,
          111,
          110,
          115,
          101,
          32,
          61,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          100,
          58,
          32,
          34,
          34,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          109,
          101,
          116,
          104,
          111,
          100,
          58,
          32,
          34,
          111,
          110,
          70,
          114,
          97,
          109,
          101,
          34,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          115,
          117,
          108,
          116,
          58,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          101,
          118,
          101,
          110,
          116,
          58,
          32,
          102,
          114,
          97,
          109,
          101,
          69,
          118,
          101,
          110,
          116,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          115,
          101,
          108,
          102,
          46,
          112,
          111,
          115,
          116,
          77,
          101,
          115,
          115,
          97,
          103,
          101,
          40,
          114,
          101,
          115,
          112,
          111,
          110,
          115,
          101,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          44,
          10,
          32,
          32,
          32,
          32,
          114,
          101,
          110,
          100,
          101,
          114,
          58,
          32,
          40,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          41,
          32,
          61,
          62,
          32,
          40,
          101,
          118,
          101,
          110,
          116,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          114,
          101,
          110,
          100,
          101,
          114,
          69,
          118,
          101,
          110,
          116,
          32,
          61,
          32,
          101,
          118,
          101,
          110,
          116,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          114,
          101,
          115,
          112,
          111,
          110,
          115,
          101,
          32,
          61,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          100,
          58,
          32,
          34,
          34,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          109,
          101,
          116,
          104,
          111,
          100,
          58,
          32,
          34,
          111,
          110,
          82,
          101,
          110,
          100,
          101,
          114,
          34,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          115,
          117,
          108,
          116,
          58,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          101,
          118,
          101,
          110,
          116,
          58,
          32,
          114,
          101,
          110,
          100,
          101,
          114,
          69,
          118,
          101,
          110,
          116,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          115,
          101,
          108,
          102,
          46,
          112,
          111,
          115,
          116,
          77,
          101,
          115,
          115,
          97,
          103,
          101,
          40,
          114,
          101,
          115,
          112,
          111,
          110,
          115,
          101,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          44,
          10,
          32,
          32,
          32,
          32,
          102,
          114,
          101,
          101,
          122,
          101,
          58,
          32,
          40,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          41,
          32,
          61,
          62,
          32,
          40,
          101,
          118,
          101,
          110,
          116,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          102,
          114,
          101,
          101,
          122,
          101,
          69,
          118,
          101,
          110,
          116,
          32,
          61,
          32,
          101,
          118,
          101,
          110,
          116,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          114,
          101,
          115,
          112,
          111,
          110,
          115,
          101,
          32,
          61,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          100,
          58,
          32,
          34,
          34,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          109,
          101,
          116,
          104,
          111,
          100,
          58,
          32,
          34,
          111,
          110,
          70,
          114,
          101,
          101,
          122,
          101,
          34,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          115,
          117,
          108,
          116,
          58,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          101,
          118,
          101,
          110,
          116,
          58,
          32,
          102,
          114,
          101,
          101,
          122,
          101,
          69,
          118,
          101,
          110,
          116,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          115,
          101,
          108,
          102,
          46,
          112,
          111,
          115,
          116,
          77,
          101,
          115,
          115,
          97,
          103,
          101,
          40,
          114,
          101,
          115,
          112,
          111,
          110,
          115,
          101,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          44,
          10,
          32,
          32,
          32,
          32,
          117,
          110,
          102,
          114,
          101,
          101,
          122,
          101,
          58,
          32,
          40,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          41,
          32,
          61,
          62,
          32,
          40,
          101,
          118,
          101,
          110,
          116,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          117,
          110,
          102,
          114,
          101,
          101,
          122,
          101,
          69,
          118,
          101,
          110,
          116,
          32,
          61,
          32,
          101,
          118,
          101,
          110,
          116,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          114,
          101,
          115,
          112,
          111,
          110,
          115,
          101,
          32,
          61,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          100,
          58,
          32,
          34,
          34,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          109,
          101,
          116,
          104,
          111,
          100,
          58,
          32,
          34,
          111,
          110,
          85,
          110,
          102,
          114,
          101,
          101,
          122,
          101,
          34,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          115,
          117,
          108,
          116,
          58,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          101,
          118,
          101,
          110,
          116,
          58,
          32,
          117,
          110,
          102,
          114,
          101,
          101,
          122,
          101,
          69,
          118,
          101,
          110,
          116,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          115,
          101,
          108,
          102,
          46,
          112,
          111,
          115,
          116,
          77,
          101,
          115,
          115,
          97,
          103,
          101,
          40,
          114,
          101,
          115,
          112,
          111,
          110,
          115,
          101,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          44,
          10,
          32,
          32,
          32,
          32,
          100,
          101,
          115,
          116,
          114,
          111,
          121,
          58,
          32,
          40,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          41,
          32,
          61,
          62,
          32,
          40,
          101,
          118,
          101,
          110,
          116,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          100,
          101,
          115,
          116,
          114,
          111,
          121,
          69,
          118,
          101,
          110,
          116,
          32,
          61,
          32,
          101,
          118,
          101,
          110,
          116,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          114,
          101,
          115,
          112,
          111,
          110,
          115,
          101,
          32,
          61,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          100,
          58,
          32,
          34,
          34,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          109,
          101,
          116,
          104,
          111,
          100,
          58,
          32,
          34,
          111,
          110,
          68,
          101,
          115,
          116,
          114,
          111,
          121,
          34,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          115,
          117,
          108,
          116,
          58,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          101,
          118,
          101,
          110,
          116,
          58,
          32,
          100,
          101,
          115,
          116,
          114,
          111,
          121,
          69,
          118,
          101,
          110,
          116,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          115,
          101,
          108,
          102,
          46,
          112,
          111,
          115,
          116,
          77,
          101,
          115,
          115,
          97,
          103,
          101,
          40,
          114,
          101,
          115,
          112,
          111,
          110,
          115,
          101,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          125,
          59,
          10,
          32,
          32,
          118,
          97,
          114,
          32,
          99,
          111,
          109,
          109,
          97,
          110,
          100,
          115,
          32,
          61,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          103,
          101,
          116,
          68,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          73,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          83,
          116,
          97,
          116,
          101,
          40,
          114,
          101,
          113,
          117,
          101,
          115,
          116,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          32,
          61,
          32,
          114,
          101,
          113,
          117,
          101,
          115,
          116,
          46,
          112,
          97,
          114,
          97,
          109,
          115,
          46,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          32,
          61,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          115,
          77,
          97,
          112,
          46,
          103,
          101,
          116,
          40,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          33,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          110,
          101,
          119,
          32,
          69,
          114,
          114,
          111,
          114,
          40,
          96,
          73,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          32,
          119,
          105,
          116,
          104,
          32,
          105,
          100,
          32,
          36,
          123,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          125,
          32,
          100,
          111,
          101,
          115,
          32,
          110,
          111,
          116,
          32,
          101,
          120,
          105,
          115,
          116,
          46,
          96,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          115,
          116,
          97,
          116,
          101,
          32,
          61,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          108,
          111,
          111,
          112,
          67,
          111,
          117,
          110,
          116,
          58,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          46,
          108,
          111,
          111,
          112,
          67,
          111,
          117,
          110,
          116,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          115,
          76,
          111,
          97,
          100,
          101,
          100,
          58,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          46,
          105,
          115,
          76,
          111,
          97,
          100,
          101,
          100,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          115,
          80,
          97,
          117,
          115,
          101,
          100,
          58,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          46,
          105,
          115,
          80,
          97,
          117,
          115,
          101,
          100,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          115,
          80,
          108,
          97,
          121,
          105,
          110,
          103,
          58,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          46,
          105,
          115,
          80,
          108,
          97,
          121,
          105,
          110,
          103,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          115,
          83,
          116,
          111,
          112,
          112,
          101,
          100,
          58,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          46,
          105,
          115,
          83,
          116,
          111,
          112,
          112,
          101,
          100,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          115,
          70,
          114,
          111,
          122,
          101,
          110,
          58,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          46,
          105,
          115,
          70,
          114,
          111,
          122,
          101,
          110,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          108,
          111,
          111,
          112,
          58,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          46,
          108,
          111,
          111,
          112,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          109,
          111,
          100,
          101,
          58,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          46,
          109,
          111,
          100,
          101,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          115,
          112,
          101,
          101,
          100,
          58,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          46,
          115,
          112,
          101,
          101,
          100,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          117,
          114,
          114,
          101,
          110,
          116,
          70,
          114,
          97,
          109,
          101,
          58,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          46,
          99,
          117,
          114,
          114,
          101,
          110,
          116,
          70,
          114,
          97,
          109,
          101,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          111,
          116,
          97,
          108,
          70,
          114,
          97,
          109,
          101,
          115,
          58,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          46,
          116,
          111,
          116,
          97,
          108,
          70,
          114,
          97,
          109,
          101,
          115,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          100,
          117,
          114,
          97,
          116,
          105,
          111,
          110,
          58,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          46,
          100,
          117,
          114,
          97,
          116,
          105,
          111,
          110,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          117,
          115,
          101,
          70,
          114,
          97,
          109,
          101,
          73,
          110,
          116,
          101,
          114,
          112,
          111,
          108,
          97,
          116,
          105,
          111,
          110,
          58,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          46,
          117,
          115,
          101,
          70,
          114,
          97,
          109,
          101,
          73,
          110,
          116,
          101,
          114,
          112,
          111,
          108,
          97,
          116,
          105,
          111,
          110,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          110,
          100,
          101,
          114,
          67,
          111,
          110,
          102,
          105,
          103,
          58,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          46,
          114,
          101,
          110,
          100,
          101,
          114,
          67,
          111,
          110,
          102,
          105,
          103,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          109,
          97,
          114,
          107,
          101,
          114,
          58,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          46,
          109,
          97,
          114,
          107,
          101,
          114,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          98,
          97,
          99,
          107,
          103,
          114,
          111,
          117,
          110,
          100,
          67,
          111,
          108,
          111,
          114,
          58,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          46,
          98,
          97,
          99,
          107,
          103,
          114,
          111,
          117,
          110,
          100,
          67,
          111,
          108,
          111,
          114,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          109,
          97,
          114,
          107,
          101,
          114,
          115,
          58,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          46,
          109,
          97,
          114,
          107,
          101,
          114,
          115,
          40,
          41,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          97,
          99,
          116,
          105,
          118,
          101,
          65,
          110,
          105,
          109,
          97,
          116,
          105,
          111,
          110,
          73,
          100,
          58,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          46,
          97,
          99,
          116,
          105,
          118,
          101,
          65,
          110,
          105,
          109,
          97,
          116,
          105,
          111,
          110,
          73,
          100,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          97,
          99,
          116,
          105,
          118,
          101,
          84,
          104,
          101,
          109,
          101,
          73,
          100,
          58,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          46,
          97,
          99,
          116,
          105,
          118,
          101,
          84,
          104,
          101,
          109,
          101,
          73,
          100,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          97,
          117,
          116,
          111,
          112,
          108,
          97,
          121,
          58,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          46,
          97,
          117,
          116,
          111,
          112,
          108,
          97,
          121,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          115,
          101,
          103,
          109,
          101,
          110,
          116,
          58,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          46,
          115,
          101,
          103,
          109,
          101,
          110,
          116,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          108,
          97,
          121,
          111,
          117,
          116,
          58,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          46,
          108,
          97,
          121,
          111,
          117,
          116,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          115,
          101,
          103,
          109,
          101,
          110,
          116,
          68,
          117,
          114,
          97,
          116,
          105,
          111,
          110,
          58,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          46,
          115,
          101,
          103,
          109,
          101,
          110,
          116,
          68,
          117,
          114,
          97,
          116,
          105,
          111,
          110,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          115,
          82,
          101,
          97,
          100,
          121,
          58,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          46,
          105,
          115,
          82,
          101,
          97,
          100,
          121,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          109,
          97,
          110,
          105,
          102,
          101,
          115,
          116,
          58,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          46,
          109,
          97,
          110,
          105,
          102,
          101,
          115,
          116,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          115,
          116,
          97,
          116,
          101,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          44,
          10,
          32,
          32,
          32,
          32,
          115,
          101,
          116,
          76,
          97,
          121,
          111,
          117,
          116,
          40,
          114,
          101,
          113,
          117,
          101,
          115,
          116,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          32,
          61,
          32,
          114,
          101,
          113,
          117,
          101,
          115,
          116,
          46,
          112,
          97,
          114,
          97,
          109,
          115,
          46,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          108,
          97,
          121,
          111,
          117,
          116,
          32,
          61,
          32,
          114,
          101,
          113,
          117,
          101,
          115,
          116,
          46,
          112,
          97,
          114,
          97,
          109,
          115,
          46,
          108,
          97,
          121,
          111,
          117,
          116,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          32,
          61,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          115,
          77,
          97,
          112,
          46,
          103,
          101,
          116,
          40,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          33,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          110,
          101,
          119,
          32,
          69,
          114,
          114,
          111,
          114,
          40,
          96,
          73,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          32,
          119,
          105,
          116,
          104,
          32,
          105,
          100,
          32,
          36,
          123,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          125,
          32,
          100,
          111,
          101,
          115,
          32,
          110,
          111,
          116,
          32,
          101,
          120,
          105,
          115,
          116,
          46,
          96,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          46,
          115,
          101,
          116,
          76,
          97,
          121,
          111,
          117,
          116,
          40,
          108,
          97,
          121,
          111,
          117,
          116,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          115,
          117,
          99,
          99,
          101,
          115,
          115,
          58,
          32,
          116,
          114,
          117,
          101,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          44,
          10,
          32,
          32,
          32,
          32,
          103,
          101,
          116,
          83,
          116,
          97,
          116,
          101,
          77,
          97,
          99,
          104,
          105,
          110,
          101,
          76,
          105,
          115,
          116,
          101,
          110,
          101,
          114,
          115,
          40,
          114,
          101,
          113,
          117,
          101,
          115,
          116,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          32,
          61,
          32,
          114,
          101,
          113,
          117,
          101,
          115,
          116,
          46,
          112,
          97,
          114,
          97,
          109,
          115,
          46,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          32,
          61,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          115,
          77,
          97,
          112,
          46,
          103,
          101,
          116,
          40,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          33,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          110,
          101,
          119,
          32,
          69,
          114,
          114,
          111,
          114,
          40,
          96,
          73,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          32,
          119,
          105,
          116,
          104,
          32,
          105,
          100,
          32,
          36,
          123,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          125,
          32,
          100,
          111,
          101,
          115,
          32,
          110,
          111,
          116,
          32,
          101,
          120,
          105,
          115,
          116,
          46,
          96,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          46,
          103,
          101,
          116,
          83,
          116,
          97,
          116,
          101,
          77,
          97,
          99,
          104,
          105,
          110,
          101,
          76,
          105,
          115,
          116,
          101,
          110,
          101,
          114,
          115,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          44,
          10,
          32,
          32,
          32,
          32,
          112,
          111,
          115,
          116,
          80,
          111,
          105,
          110,
          116,
          101,
          114,
          68,
          111,
          119,
          110,
          69,
          118,
          101,
          110,
          116,
          40,
          114,
          101,
          113,
          117,
          101,
          115,
          116,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          32,
          61,
          32,
          114,
          101,
          113,
          117,
          101,
          115,
          116,
          46,
          112,
          97,
          114,
          97,
          109,
          115,
          46,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          120,
          32,
          61,
          32,
          114,
          101,
          113,
          117,
          101,
          115,
          116,
          46,
          112,
          97,
          114,
          97,
          109,
          115,
          46,
          120,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          121,
          32,
          61,
          32,
          114,
          101,
          113,
          117,
          101,
          115,
          116,
          46,
          112,
          97,
          114,
          97,
          109,
          115,
          46,
          121,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          32,
          61,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          115,
          77,
          97,
          112,
          46,
          103,
          101,
          116,
          40,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          33,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          110,
          101,
          119,
          32,
          69,
          114,
          114,
          111,
          114,
          40,
          96,
          73,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          32,
          119,
          105,
          116,
          104,
          32,
          105,
          100,
          32,
          36,
          123,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          125,
          32,
          100,
          111,
          101,
          115,
          32,
          110,
          111,
          116,
          32,
          101,
          120,
          105,
          115,
          116,
          46,
          96,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          46,
          112,
          111,
          115,
          116,
          80,
          111,
          105,
          110,
          116,
          101,
          114,
          68,
          111,
          119,
          110,
          69,
          118,
          101,
          110,
          116,
          40,
          120,
          44,
          32,
          121,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          44,
          10,
          32,
          32,
          32,
          32,
          112,
          111,
          115,
          116,
          80,
          111,
          105,
          110,
          116,
          101,
          114,
          69,
          110,
          116,
          101,
          114,
          69,
          118,
          101,
          110,
          116,
          40,
          114,
          101,
          113,
          117,
          101,
          115,
          116,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          32,
          61,
          32,
          114,
          101,
          113,
          117,
          101,
          115,
          116,
          46,
          112,
          97,
          114,
          97,
          109,
          115,
          46,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          120,
          32,
          61,
          32,
          114,
          101,
          113,
          117,
          101,
          115,
          116,
          46,
          112,
          97,
          114,
          97,
          109,
          115,
          46,
          120,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          121,
          32,
          61,
          32,
          114,
          101,
          113,
          117,
          101,
          115,
          116,
          46,
          112,
          97,
          114,
          97,
          109,
          115,
          46,
          121,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          32,
          61,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          115,
          77,
          97,
          112,
          46,
          103,
          101,
          116,
          40,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          33,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          110,
          101,
          119,
          32,
          69,
          114,
          114,
          111,
          114,
          40,
          96,
          73,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          32,
          119,
          105,
          116,
          104,
          32,
          105,
          100,
          32,
          36,
          123,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          125,
          32,
          100,
          111,
          101,
          115,
          32,
          110,
          111,
          116,
          32,
          101,
          120,
          105,
          115,
          116,
          46,
          96,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          46,
          112,
          111,
          115,
          116,
          80,
          111,
          105,
          110,
          116,
          101,
          114,
          69,
          110,
          116,
          101,
          114,
          69,
          118,
          101,
          110,
          116,
          40,
          120,
          44,
          32,
          121,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          44,
          10,
          32,
          32,
          32,
          32,
          112,
          111,
          115,
          116,
          80,
          111,
          105,
          110,
          116,
          101,
          114,
          69,
          120,
          105,
          116,
          69,
          118,
          101,
          110,
          116,
          40,
          114,
          101,
          113,
          117,
          101,
          115,
          116,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          32,
          61,
          32,
          114,
          101,
          113,
          117,
          101,
          115,
          116,
          46,
          112,
          97,
          114,
          97,
          109,
          115,
          46,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          120,
          32,
          61,
          32,
          114,
          101,
          113,
          117,
          101,
          115,
          116,
          46,
          112,
          97,
          114,
          97,
          109,
          115,
          46,
          120,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          121,
          32,
          61,
          32,
          114,
          101,
          113,
          117,
          101,
          115,
          116,
          46,
          112,
          97,
          114,
          97,
          109,
          115,
          46,
          121,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          32,
          61,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          115,
          77,
          97,
          112,
          46,
          103,
          101,
          116,
          40,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          33,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          110,
          101,
          119,
          32,
          69,
          114,
          114,
          111,
          114,
          40,
          96,
          73,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          32,
          119,
          105,
          116,
          104,
          32,
          105,
          100,
          32,
          36,
          123,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          125,
          32,
          100,
          111,
          101,
          115,
          32,
          110,
          111,
          116,
          32,
          101,
          120,
          105,
          115,
          116,
          46,
          96,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          46,
          112,
          111,
          115,
          116,
          80,
          111,
          105,
          110,
          116,
          101,
          114,
          69,
          120,
          105,
          116,
          69,
          118,
          101,
          110,
          116,
          40,
          120,
          44,
          32,
          121,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          44,
          10,
          32,
          32,
          32,
          32,
          112,
          111,
          115,
          116,
          80,
          111,
          105,
          110,
          116,
          101,
          114,
          77,
          111,
          118,
          101,
          69,
          118,
          101,
          110,
          116,
          40,
          114,
          101,
          113,
          117,
          101,
          115,
          116,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          32,
          61,
          32,
          114,
          101,
          113,
          117,
          101,
          115,
          116,
          46,
          112,
          97,
          114,
          97,
          109,
          115,
          46,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          120,
          32,
          61,
          32,
          114,
          101,
          113,
          117,
          101,
          115,
          116,
          46,
          112,
          97,
          114,
          97,
          109,
          115,
          46,
          120,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          121,
          32,
          61,
          32,
          114,
          101,
          113,
          117,
          101,
          115,
          116,
          46,
          112,
          97,
          114,
          97,
          109,
          115,
          46,
          121,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          32,
          61,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          115,
          77,
          97,
          112,
          46,
          103,
          101,
          116,
          40,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          33,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          110,
          101,
          119,
          32,
          69,
          114,
          114,
          111,
          114,
          40,
          96,
          73,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          32,
          119,
          105,
          116,
          104,
          32,
          105,
          100,
          32,
          36,
          123,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          125,
          32,
          100,
          111,
          101,
          115,
          32,
          110,
          111,
          116,
          32,
          101,
          120,
          105,
          115,
          116,
          46,
          96,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          46,
          112,
          111,
          115,
          116,
          80,
          111,
          105,
          110,
          116,
          101,
          114,
          77,
          111,
          118,
          101,
          69,
          118,
          101,
          110,
          116,
          40,
          120,
          44,
          32,
          121,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          44,
          10,
          32,
          32,
          32,
          32,
          112,
          111,
          115,
          116,
          80,
          111,
          105,
          110,
          116,
          101,
          114,
          85,
          112,
          69,
          118,
          101,
          110,
          116,
          40,
          114,
          101,
          113,
          117,
          101,
          115,
          116,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          32,
          61,
          32,
          114,
          101,
          113,
          117,
          101,
          115,
          116,
          46,
          112,
          97,
          114,
          97,
          109,
          115,
          46,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          120,
          32,
          61,
          32,
          114,
          101,
          113,
          117,
          101,
          115,
          116,
          46,
          112,
          97,
          114,
          97,
          109,
          115,
          46,
          120,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          121,
          32,
          61,
          32,
          114,
          101,
          113,
          117,
          101,
          115,
          116,
          46,
          112,
          97,
          114,
          97,
          109,
          115,
          46,
          121,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          32,
          61,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          115,
          77,
          97,
          112,
          46,
          103,
          101,
          116,
          40,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          33,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          110,
          101,
          119,
          32,
          69,
          114,
          114,
          111,
          114,
          40,
          96,
          73,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          32,
          119,
          105,
          116,
          104,
          32,
          105,
          100,
          32,
          36,
          123,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          125,
          32,
          100,
          111,
          101,
          115,
          32,
          110,
          111,
          116,
          32,
          101,
          120,
          105,
          115,
          116,
          46,
          96,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          46,
          112,
          111,
          115,
          116,
          80,
          111,
          105,
          110,
          116,
          101,
          114,
          85,
          112,
          69,
          118,
          101,
          110,
          116,
          40,
          120,
          44,
          32,
          121,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          44,
          10,
          32,
          32,
          32,
          32,
          115,
          116,
          97,
          114,
          116,
          83,
          116,
          97,
          116,
          101,
          77,
          97,
          99,
          104,
          105,
          110,
          101,
          40,
          114,
          101,
          113,
          117,
          101,
          115,
          116,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          32,
          61,
          32,
          114,
          101,
          113,
          117,
          101,
          115,
          116,
          46,
          112,
          97,
          114,
          97,
          109,
          115,
          46,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          32,
          61,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          115,
          77,
          97,
          112,
          46,
          103,
          101,
          116,
          40,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          33,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          110,
          101,
          119,
          32,
          69,
          114,
          114,
          111,
          114,
          40,
          96,
          73,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          32,
          119,
          105,
          116,
          104,
          32,
          105,
          100,
          32,
          36,
          123,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          125,
          32,
          100,
          111,
          101,
          115,
          32,
          110,
          111,
          116,
          32,
          101,
          120,
          105,
          115,
          116,
          46,
          96,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          46,
          115,
          116,
          97,
          114,
          116,
          83,
          116,
          97,
          116,
          101,
          77,
          97,
          99,
          104,
          105,
          110,
          101,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          44,
          10,
          32,
          32,
          32,
          32,
          115,
          116,
          111,
          112,
          83,
          116,
          97,
          116,
          101,
          77,
          97,
          99,
          104,
          105,
          110,
          101,
          40,
          114,
          101,
          113,
          117,
          101,
          115,
          116,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          32,
          61,
          32,
          114,
          101,
          113,
          117,
          101,
          115,
          116,
          46,
          112,
          97,
          114,
          97,
          109,
          115,
          46,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          32,
          61,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          115,
          77,
          97,
          112,
          46,
          103,
          101,
          116,
          40,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          33,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          110,
          101,
          119,
          32,
          69,
          114,
          114,
          111,
          114,
          40,
          96,
          73,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          32,
          119,
          105,
          116,
          104,
          32,
          105,
          100,
          32,
          36,
          123,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          125,
          32,
          100,
          111,
          101,
          115,
          32,
          110,
          111,
          116,
          32,
          101,
          120,
          105,
          115,
          116,
          46,
          96,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          46,
          115,
          116,
          111,
          112,
          83,
          116,
          97,
          116,
          101,
          77,
          97,
          99,
          104,
          105,
          110,
          101,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          44,
          10,
          32,
          32,
          32,
          32,
          108,
          111,
          97,
          100,
          83,
          116,
          97,
          116,
          101,
          77,
          97,
          99,
          104,
          105,
          110,
          101,
          40,
          114,
          101,
          113,
          117,
          101,
          115,
          116,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          32,
          61,
          32,
          114,
          101,
          113,
          117,
          101,
          115,
          116,
          46,
          112,
          97,
          114,
          97,
          109,
          115,
          46,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          115,
          116,
          97,
          116,
          101,
          77,
          97,
          99,
          104,
          105,
          110,
          101,
          73,
          100,
          32,
          61,
          32,
          114,
          101,
          113,
          117,
          101,
          115,
          116,
          46,
          112,
          97,
          114,
          97,
          109,
          115,
          46,
          115,
          116,
          97,
          116,
          101,
          77,
          97,
          99,
          104,
          105,
          110,
          101,
          73,
          100,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          32,
          61,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          115,
          77,
          97,
          112,
          46,
          103,
          101,
          116,
          40,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          33,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          110,
          101,
          119,
          32,
          69,
          114,
          114,
          111,
          114,
          40,
          96,
          73,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          32,
          119,
          105,
          116,
          104,
          32,
          105,
          100,
          32,
          36,
          123,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          125,
          32,
          100,
          111,
          101,
          115,
          32,
          110,
          111,
          116,
          32,
          101,
          120,
          105,
          115,
          116,
          46,
          96,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          46,
          108,
          111,
          97,
          100,
          83,
          116,
          97,
          116,
          101,
          77,
          97,
          99,
          104,
          105,
          110,
          101,
          40,
          115,
          116,
          97,
          116,
          101,
          77,
          97,
          99,
          104,
          105,
          110,
          101,
          73,
          100,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          44,
          10,
          32,
          32,
          32,
          32,
          108,
          111,
          97,
          100,
          83,
          116,
          97,
          116,
          101,
          77,
          97,
          99,
          104,
          105,
          110,
          101,
          68,
          97,
          116,
          97,
          40,
          114,
          101,
          113,
          117,
          101,
          115,
          116,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          32,
          61,
          32,
          114,
          101,
          113,
          117,
          101,
          115,
          116,
          46,
          112,
          97,
          114,
          97,
          109,
          115,
          46,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          115,
          116,
          97,
          116,
          101,
          77,
          97,
          99,
          104,
          105,
          110,
          101,
          68,
          97,
          116,
          97,
          32,
          61,
          32,
          114,
          101,
          113,
          117,
          101,
          115,
          116,
          46,
          112,
          97,
          114,
          97,
          109,
          115,
          46,
          115,
          116,
          97,
          116,
          101,
          77,
          97,
          99,
          104,
          105,
          110,
          101,
          68,
          97,
          116,
          97,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          32,
          61,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          115,
          77,
          97,
          112,
          46,
          103,
          101,
          116,
          40,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          33,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          110,
          101,
          119,
          32,
          69,
          114,
          114,
          111,
          114,
          40,
          96,
          73,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          32,
          119,
          105,
          116,
          104,
          32,
          105,
          100,
          32,
          36,
          123,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          125,
          32,
          100,
          111,
          101,
          115,
          32,
          110,
          111,
          116,
          32,
          101,
          120,
          105,
          115,
          116,
          46,
          96,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          46,
          108,
          111,
          97,
          100,
          83,
          116,
          97,
          116,
          101,
          77,
          97,
          99,
          104,
          105,
          110,
          101,
          68,
          97,
          116,
          97,
          40,
          115,
          116,
          97,
          116,
          101,
          77,
          97,
          99,
          104,
          105,
          110,
          101,
          68,
          97,
          116,
          97,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          44,
          10,
          32,
          32,
          32,
          32,
          99,
          114,
          101,
          97,
          116,
          101,
          58,
          32,
          40,
          114,
          101,
          113,
          117,
          101,
          115,
          116,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          32,
          61,
          32,
          114,
          101,
          113,
          117,
          101,
          115,
          116,
          46,
          112,
          97,
          114,
          97,
          109,
          115,
          46,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          99,
          111,
          110,
          102,
          105,
          103,
          32,
          61,
          32,
          114,
          101,
          113,
          117,
          101,
          115,
          116,
          46,
          112,
          97,
          114,
          97,
          109,
          115,
          46,
          99,
          111,
          110,
          102,
          105,
          103,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          119,
          105,
          100,
          116,
          104,
          32,
          61,
          32,
          114,
          101,
          113,
          117,
          101,
          115,
          116,
          46,
          112,
          97,
          114,
          97,
          109,
          115,
          46,
          119,
          105,
          100,
          116,
          104,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          104,
          101,
          105,
          103,
          104,
          116,
          32,
          61,
          32,
          114,
          101,
          113,
          117,
          101,
          115,
          116,
          46,
          112,
          97,
          114,
          97,
          109,
          115,
          46,
          104,
          101,
          105,
          103,
          104,
          116,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          115,
          77,
          97,
          112,
          46,
          104,
          97,
          115,
          40,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          41,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          110,
          101,
          119,
          32,
          69,
          114,
          114,
          111,
          114,
          40,
          96,
          73,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          32,
          119,
          105,
          116,
          104,
          32,
          105,
          100,
          32,
          36,
          123,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          125,
          32,
          97,
          108,
          114,
          101,
          97,
          100,
          121,
          32,
          101,
          120,
          105,
          115,
          116,
          115,
          46,
          96,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          32,
          61,
          32,
          110,
          101,
          119,
          32,
          68,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          40,
          99,
          111,
          110,
          102,
          105,
          103,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          46,
          99,
          97,
          110,
          118,
          97,
          115,
          46,
          104,
          101,
          105,
          103,
          104,
          116,
          32,
          61,
          32,
          104,
          101,
          105,
          103,
          104,
          116,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          46,
          99,
          97,
          110,
          118,
          97,
          115,
          46,
          119,
          105,
          100,
          116,
          104,
          32,
          61,
          32,
          119,
          105,
          100,
          116,
          104,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          115,
          77,
          97,
          112,
          46,
          115,
          101,
          116,
          40,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          44,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          101,
          118,
          101,
          110,
          116,
          115,
          32,
          61,
          32,
          91,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          34,
          99,
          111,
          109,
          112,
          108,
          101,
          116,
          101,
          34,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          34,
          102,
          114,
          97,
          109,
          101,
          34,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          34,
          108,
          111,
          97,
          100,
          34,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          34,
          108,
          111,
          97,
          100,
          69,
          114,
          114,
          111,
          114,
          34,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          34,
          114,
          101,
          110,
          100,
          101,
          114,
          69,
          114,
          114,
          111,
          114,
          34,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          34,
          108,
          111,
          111,
          112,
          34,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          34,
          112,
          97,
          117,
          115,
          101,
          34,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          34,
          112,
          108,
          97,
          121,
          34,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          34,
          115,
          116,
          111,
          112,
          34,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          34,
          100,
          101,
          115,
          116,
          114,
          111,
          121,
          34,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          34,
          102,
          114,
          101,
          101,
          122,
          101,
          34,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          34,
          117,
          110,
          102,
          114,
          101,
          101,
          122,
          101,
          34,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          34,
          114,
          101,
          110,
          100,
          101,
          114,
          34,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          34,
          114,
          101,
          97,
          100,
          121,
          34,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          93,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          101,
          118,
          101,
          110,
          116,
          115,
          46,
          102,
          111,
          114,
          69,
          97,
          99,
          104,
          40,
          40,
          101,
          118,
          101,
          110,
          116,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          46,
          97,
          100,
          100,
          69,
          118,
          101,
          110,
          116,
          76,
          105,
          115,
          116,
          101,
          110,
          101,
          114,
          40,
          101,
          118,
          101,
          110,
          116,
          44,
          32,
          101,
          118,
          101,
          110,
          116,
          72,
          97,
          110,
          100,
          108,
          101,
          114,
          77,
          97,
          112,
          91,
          101,
          118,
          101,
          110,
          116,
          93,
          40,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          41,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          44,
          10,
          32,
          32,
          32,
          32,
          100,
          101,
          115,
          116,
          114,
          111,
          121,
          58,
          32,
          40,
          114,
          101,
          113,
          117,
          101,
          115,
          116,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          32,
          61,
          32,
          114,
          101,
          113,
          117,
          101,
          115,
          116,
          46,
          112,
          97,
          114,
          97,
          109,
          115,
          46,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          32,
          61,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          115,
          77,
          97,
          112,
          46,
          103,
          101,
          116,
          40,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          33,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          41,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          46,
          100,
          101,
          115,
          116,
          114,
          111,
          121,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          115,
          77,
          97,
          112,
          46,
          100,
          101,
          108,
          101,
          116,
          101,
          40,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          44,
          10,
          32,
          32,
          32,
          32,
          102,
          114,
          101,
          101,
          122,
          101,
          58,
          32,
          40,
          114,
          101,
          113,
          117,
          101,
          115,
          116,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          32,
          61,
          32,
          114,
          101,
          113,
          117,
          101,
          115,
          116,
          46,
          112,
          97,
          114,
          97,
          109,
          115,
          46,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          32,
          61,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          115,
          77,
          97,
          112,
          46,
          103,
          101,
          116,
          40,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          33,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          110,
          101,
          119,
          32,
          69,
          114,
          114,
          111,
          114,
          40,
          96,
          73,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          32,
          119,
          105,
          116,
          104,
          32,
          105,
          100,
          32,
          36,
          123,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          125,
          32,
          100,
          111,
          101,
          115,
          32,
          110,
          111,
          116,
          32,
          101,
          120,
          105,
          115,
          116,
          46,
          96,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          46,
          102,
          114,
          101,
          101,
          122,
          101,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          44,
          10,
          32,
          32,
          32,
          32,
          108,
          111,
          97,
          100,
          58,
          32,
          40,
          114,
          101,
          113,
          117,
          101,
          115,
          116,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          32,
          61,
          32,
          114,
          101,
          113,
          117,
          101,
          115,
          116,
          46,
          112,
          97,
          114,
          97,
          109,
          115,
          46,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          99,
          111,
          110,
          102,
          105,
          103,
          32,
          61,
          32,
          114,
          101,
          113,
          117,
          101,
          115,
          116,
          46,
          112,
          97,
          114,
          97,
          109,
          115,
          46,
          99,
          111,
          110,
          102,
          105,
          103,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          32,
          61,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          115,
          77,
          97,
          112,
          46,
          103,
          101,
          116,
          40,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          33,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          110,
          101,
          119,
          32,
          69,
          114,
          114,
          111,
          114,
          40,
          96,
          73,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          32,
          119,
          105,
          116,
          104,
          32,
          105,
          100,
          32,
          36,
          123,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          125,
          32,
          100,
          111,
          101,
          115,
          32,
          110,
          111,
          116,
          32,
          101,
          120,
          105,
          115,
          116,
          46,
          96,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          46,
          108,
          111,
          97,
          100,
          40,
          99,
          111,
          110,
          102,
          105,
          103,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          44,
          10,
          32,
          32,
          32,
          32,
          108,
          111,
          97,
          100,
          65,
          110,
          105,
          109,
          97,
          116,
          105,
          111,
          110,
          58,
          32,
          40,
          114,
          101,
          113,
          117,
          101,
          115,
          116,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          32,
          61,
          32,
          114,
          101,
          113,
          117,
          101,
          115,
          116,
          46,
          112,
          97,
          114,
          97,
          109,
          115,
          46,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          97,
          110,
          105,
          109,
          97,
          116,
          105,
          111,
          110,
          73,
          100,
          32,
          61,
          32,
          114,
          101,
          113,
          117,
          101,
          115,
          116,
          46,
          112,
          97,
          114,
          97,
          109,
          115,
          46,
          97,
          110,
          105,
          109,
          97,
          116,
          105,
          111,
          110,
          73,
          100,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          32,
          61,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          115,
          77,
          97,
          112,
          46,
          103,
          101,
          116,
          40,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          33,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          110,
          101,
          119,
          32,
          69,
          114,
          114,
          111,
          114,
          40,
          96,
          73,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          32,
          119,
          105,
          116,
          104,
          32,
          105,
          100,
          32,
          36,
          123,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          125,
          32,
          100,
          111,
          101,
          115,
          32,
          110,
          111,
          116,
          32,
          101,
          120,
          105,
          115,
          116,
          46,
          96,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          46,
          108,
          111,
          97,
          100,
          65,
          110,
          105,
          109,
          97,
          116,
          105,
          111,
          110,
          40,
          97,
          110,
          105,
          109,
          97,
          116,
          105,
          111,
          110,
          73,
          100,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          44,
          10,
          32,
          32,
          32,
          32,
          115,
          101,
          116,
          84,
          104,
          101,
          109,
          101,
          58,
          32,
          40,
          114,
          101,
          113,
          117,
          101,
          115,
          116,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          32,
          61,
          32,
          114,
          101,
          113,
          117,
          101,
          115,
          116,
          46,
          112,
          97,
          114,
          97,
          109,
          115,
          46,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          116,
          104,
          101,
          109,
          101,
          73,
          100,
          32,
          61,
          32,
          114,
          101,
          113,
          117,
          101,
          115,
          116,
          46,
          112,
          97,
          114,
          97,
          109,
          115,
          46,
          116,
          104,
          101,
          109,
          101,
          73,
          100,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          32,
          61,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          115,
          77,
          97,
          112,
          46,
          103,
          101,
          116,
          40,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          33,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          110,
          101,
          119,
          32,
          69,
          114,
          114,
          111,
          114,
          40,
          96,
          73,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          32,
          119,
          105,
          116,
          104,
          32,
          105,
          100,
          32,
          36,
          123,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          125,
          32,
          100,
          111,
          101,
          115,
          32,
          110,
          111,
          116,
          32,
          101,
          120,
          105,
          115,
          116,
          46,
          96,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          46,
          115,
          101,
          116,
          84,
          104,
          101,
          109,
          101,
          40,
          116,
          104,
          101,
          109,
          101,
          73,
          100,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          44,
          10,
          32,
          32,
          32,
          32,
          115,
          101,
          116,
          84,
          104,
          101,
          109,
          101,
          68,
          97,
          116,
          97,
          58,
          32,
          40,
          114,
          101,
          113,
          117,
          101,
          115,
          116,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          32,
          61,
          32,
          114,
          101,
          113,
          117,
          101,
          115,
          116,
          46,
          112,
          97,
          114,
          97,
          109,
          115,
          46,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          116,
          104,
          101,
          109,
          101,
          68,
          97,
          116,
          97,
          32,
          61,
          32,
          114,
          101,
          113,
          117,
          101,
          115,
          116,
          46,
          112,
          97,
          114,
          97,
          109,
          115,
          46,
          116,
          104,
          101,
          109,
          101,
          68,
          97,
          116,
          97,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          32,
          61,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          115,
          77,
          97,
          112,
          46,
          103,
          101,
          116,
          40,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          33,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          110,
          101,
          119,
          32,
          69,
          114,
          114,
          111,
          114,
          40,
          96,
          73,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          32,
          119,
          105,
          116,
          104,
          32,
          105,
          100,
          32,
          36,
          123,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          125,
          32,
          100,
          111,
          101,
          115,
          32,
          110,
          111,
          116,
          32,
          101,
          120,
          105,
          115,
          116,
          46,
          96,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          46,
          115,
          101,
          116,
          84,
          104,
          101,
          109,
          101,
          68,
          97,
          116,
          97,
          40,
          116,
          104,
          101,
          109,
          101,
          68,
          97,
          116,
          97,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          44,
          10,
          32,
          32,
          32,
          32,
          112,
          97,
          117,
          115,
          101,
          58,
          32,
          40,
          114,
          101,
          113,
          117,
          101,
          115,
          116,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          32,
          61,
          32,
          114,
          101,
          113,
          117,
          101,
          115,
          116,
          46,
          112,
          97,
          114,
          97,
          109,
          115,
          46,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          32,
          61,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          115,
          77,
          97,
          112,
          46,
          103,
          101,
          116,
          40,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          33,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          110,
          101,
          119,
          32,
          69,
          114,
          114,
          111,
          114,
          40,
          96,
          73,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          32,
          119,
          105,
          116,
          104,
          32,
          105,
          100,
          32,
          36,
          123,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          125,
          32,
          100,
          111,
          101,
          115,
          32,
          110,
          111,
          116,
          32,
          101,
          120,
          105,
          115,
          116,
          46,
          96,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          46,
          112,
          97,
          117,
          115,
          101,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          44,
          10,
          32,
          32,
          32,
          32,
          112,
          108,
          97,
          121,
          58,
          32,
          40,
          114,
          101,
          113,
          117,
          101,
          115,
          116,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          32,
          61,
          32,
          114,
          101,
          113,
          117,
          101,
          115,
          116,
          46,
          112,
          97,
          114,
          97,
          109,
          115,
          46,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          32,
          61,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          115,
          77,
          97,
          112,
          46,
          103,
          101,
          116,
          40,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          33,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          110,
          101,
          119,
          32,
          69,
          114,
          114,
          111,
          114,
          40,
          96,
          73,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          32,
          119,
          105,
          116,
          104,
          32,
          105,
          100,
          32,
          36,
          123,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          125,
          32,
          100,
          111,
          101,
          115,
          32,
          110,
          111,
          116,
          32,
          101,
          120,
          105,
          115,
          116,
          46,
          96,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          46,
          112,
          108,
          97,
          121,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          44,
          10,
          32,
          32,
          32,
          32,
          114,
          101,
          115,
          105,
          122,
          101,
          58,
          32,
          40,
          114,
          101,
          113,
          117,
          101,
          115,
          116,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          32,
          61,
          32,
          114,
          101,
          113,
          117,
          101,
          115,
          116,
          46,
          112,
          97,
          114,
          97,
          109,
          115,
          46,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          119,
          105,
          100,
          116,
          104,
          32,
          61,
          32,
          114,
          101,
          113,
          117,
          101,
          115,
          116,
          46,
          112,
          97,
          114,
          97,
          109,
          115,
          46,
          119,
          105,
          100,
          116,
          104,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          104,
          101,
          105,
          103,
          104,
          116,
          32,
          61,
          32,
          114,
          101,
          113,
          117,
          101,
          115,
          116,
          46,
          112,
          97,
          114,
          97,
          109,
          115,
          46,
          104,
          101,
          105,
          103,
          104,
          116,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          32,
          61,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          115,
          77,
          97,
          112,
          46,
          103,
          101,
          116,
          40,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          33,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          110,
          101,
          119,
          32,
          69,
          114,
          114,
          111,
          114,
          40,
          96,
          73,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          32,
          119,
          105,
          116,
          104,
          32,
          105,
          100,
          32,
          36,
          123,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          125,
          32,
          100,
          111,
          101,
          115,
          32,
          110,
          111,
          116,
          32,
          101,
          120,
          105,
          115,
          116,
          46,
          96,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          46,
          99,
          97,
          110,
          118,
          97,
          115,
          46,
          104,
          101,
          105,
          103,
          104,
          116,
          32,
          61,
          32,
          104,
          101,
          105,
          103,
          104,
          116,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          46,
          99,
          97,
          110,
          118,
          97,
          115,
          46,
          119,
          105,
          100,
          116,
          104,
          32,
          61,
          32,
          119,
          105,
          100,
          116,
          104,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          46,
          114,
          101,
          115,
          105,
          122,
          101,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          115,
          117,
          99,
          99,
          101,
          115,
          115,
          58,
          32,
          116,
          114,
          117,
          101,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          44,
          10,
          32,
          32,
          32,
          32,
          115,
          101,
          116,
          66,
          97,
          99,
          107,
          103,
          114,
          111,
          117,
          110,
          100,
          67,
          111,
          108,
          111,
          114,
          58,
          32,
          40,
          114,
          101,
          113,
          117,
          101,
          115,
          116,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          32,
          61,
          32,
          114,
          101,
          113,
          117,
          101,
          115,
          116,
          46,
          112,
          97,
          114,
          97,
          109,
          115,
          46,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          98,
          97,
          99,
          107,
          103,
          114,
          111,
          117,
          110,
          100,
          67,
          111,
          108,
          111,
          114,
          32,
          61,
          32,
          114,
          101,
          113,
          117,
          101,
          115,
          116,
          46,
          112,
          97,
          114,
          97,
          109,
          115,
          46,
          98,
          97,
          99,
          107,
          103,
          114,
          111,
          117,
          110,
          100,
          67,
          111,
          108,
          111,
          114,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          32,
          61,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          115,
          77,
          97,
          112,
          46,
          103,
          101,
          116,
          40,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          33,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          110,
          101,
          119,
          32,
          69,
          114,
          114,
          111,
          114,
          40,
          96,
          73,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          32,
          119,
          105,
          116,
          104,
          32,
          105,
          100,
          32,
          36,
          123,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          125,
          32,
          100,
          111,
          101,
          115,
          32,
          110,
          111,
          116,
          32,
          101,
          120,
          105,
          115,
          116,
          46,
          96,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          46,
          115,
          101,
          116,
          66,
          97,
          99,
          107,
          103,
          114,
          111,
          117,
          110,
          100,
          67,
          111,
          108,
          111,
          114,
          40,
          98,
          97,
          99,
          107,
          103,
          114,
          111,
          117,
          110,
          100,
          67,
          111,
          108,
          111,
          114,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          44,
          10,
          32,
          32,
          32,
          32,
          115,
          101,
          116,
          70,
          114,
          97,
          109,
          101,
          58,
          32,
          40,
          114,
          101,
          113,
          117,
          101,
          115,
          116,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          32,
          61,
          32,
          114,
          101,
          113,
          117,
          101,
          115,
          116,
          46,
          112,
          97,
          114,
          97,
          109,
          115,
          46,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          102,
          114,
          97,
          109,
          101,
          32,
          61,
          32,
          114,
          101,
          113,
          117,
          101,
          115,
          116,
          46,
          112,
          97,
          114,
          97,
          109,
          115,
          46,
          102,
          114,
          97,
          109,
          101,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          32,
          61,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          115,
          77,
          97,
          112,
          46,
          103,
          101,
          116,
          40,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          33,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          110,
          101,
          119,
          32,
          69,
          114,
          114,
          111,
          114,
          40,
          96,
          73,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          32,
          119,
          105,
          116,
          104,
          32,
          105,
          100,
          32,
          36,
          123,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          125,
          32,
          100,
          111,
          101,
          115,
          32,
          110,
          111,
          116,
          32,
          101,
          120,
          105,
          115,
          116,
          46,
          96,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          46,
          115,
          101,
          116,
          70,
          114,
          97,
          109,
          101,
          40,
          102,
          114,
          97,
          109,
          101,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          44,
          10,
          32,
          32,
          32,
          32,
          115,
          101,
          116,
          77,
          111,
          100,
          101,
          58,
          32,
          40,
          114,
          101,
          113,
          117,
          101,
          115,
          116,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          32,
          61,
          32,
          114,
          101,
          113,
          117,
          101,
          115,
          116,
          46,
          112,
          97,
          114,
          97,
          109,
          115,
          46,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          109,
          111,
          100,
          101,
          32,
          61,
          32,
          114,
          101,
          113,
          117,
          101,
          115,
          116,
          46,
          112,
          97,
          114,
          97,
          109,
          115,
          46,
          109,
          111,
          100,
          101,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          32,
          61,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          115,
          77,
          97,
          112,
          46,
          103,
          101,
          116,
          40,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          33,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          110,
          101,
          119,
          32,
          69,
          114,
          114,
          111,
          114,
          40,
          96,
          73,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          32,
          119,
          105,
          116,
          104,
          32,
          105,
          100,
          32,
          36,
          123,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          125,
          32,
          100,
          111,
          101,
          115,
          32,
          110,
          111,
          116,
          32,
          101,
          120,
          105,
          115,
          116,
          46,
          96,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          46,
          115,
          101,
          116,
          77,
          111,
          100,
          101,
          40,
          109,
          111,
          100,
          101,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          44,
          10,
          32,
          32,
          32,
          32,
          115,
          101,
          116,
          82,
          101,
          110,
          100,
          101,
          114,
          67,
          111,
          110,
          102,
          105,
          103,
          58,
          32,
          40,
          114,
          101,
          113,
          117,
          101,
          115,
          116,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          32,
          61,
          32,
          114,
          101,
          113,
          117,
          101,
          115,
          116,
          46,
          112,
          97,
          114,
          97,
          109,
          115,
          46,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          114,
          101,
          110,
          100,
          101,
          114,
          67,
          111,
          110,
          102,
          105,
          103,
          32,
          61,
          32,
          114,
          101,
          113,
          117,
          101,
          115,
          116,
          46,
          112,
          97,
          114,
          97,
          109,
          115,
          46,
          114,
          101,
          110,
          100,
          101,
          114,
          67,
          111,
          110,
          102,
          105,
          103,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          32,
          61,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          115,
          77,
          97,
          112,
          46,
          103,
          101,
          116,
          40,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          33,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          110,
          101,
          119,
          32,
          69,
          114,
          114,
          111,
          114,
          40,
          96,
          73,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          32,
          119,
          105,
          116,
          104,
          32,
          105,
          100,
          32,
          36,
          123,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          125,
          32,
          100,
          111,
          101,
          115,
          32,
          110,
          111,
          116,
          32,
          101,
          120,
          105,
          115,
          116,
          46,
          96,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          46,
          115,
          101,
          116,
          82,
          101,
          110,
          100,
          101,
          114,
          67,
          111,
          110,
          102,
          105,
          103,
          40,
          114,
          101,
          110,
          100,
          101,
          114,
          67,
          111,
          110,
          102,
          105,
          103,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          44,
          10,
          32,
          32,
          32,
          32,
          115,
          101,
          116,
          83,
          101,
          103,
          109,
          101,
          110,
          116,
          58,
          32,
          40,
          114,
          101,
          113,
          117,
          101,
          115,
          116,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          32,
          61,
          32,
          114,
          101,
          113,
          117,
          101,
          115,
          116,
          46,
          112,
          97,
          114,
          97,
          109,
          115,
          46,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          115,
          101,
          103,
          109,
          101,
          110,
          116,
          32,
          61,
          32,
          114,
          101,
          113,
          117,
          101,
          115,
          116,
          46,
          112,
          97,
          114,
          97,
          109,
          115,
          46,
          115,
          101,
          103,
          109,
          101,
          110,
          116,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          32,
          61,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          115,
          77,
          97,
          112,
          46,
          103,
          101,
          116,
          40,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          33,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          110,
          101,
          119,
          32,
          69,
          114,
          114,
          111,
          114,
          40,
          96,
          73,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          32,
          119,
          105,
          116,
          104,
          32,
          105,
          100,
          32,
          36,
          123,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          125,
          32,
          100,
          111,
          101,
          115,
          32,
          110,
          111,
          116,
          32,
          101,
          120,
          105,
          115,
          116,
          46,
          96,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          46,
          115,
          101,
          116,
          83,
          101,
          103,
          109,
          101,
          110,
          116,
          40,
          115,
          101,
          103,
          109,
          101,
          110,
          116,
          91,
          48,
          93,
          44,
          32,
          115,
          101,
          103,
          109,
          101,
          110,
          116,
          91,
          49,
          93,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          44,
          10,
          32,
          32,
          32,
          32,
          115,
          101,
          116,
          83,
          112,
          101,
          101,
          100,
          58,
          32,
          40,
          114,
          101,
          113,
          117,
          101,
          115,
          116,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          32,
          61,
          32,
          114,
          101,
          113,
          117,
          101,
          115,
          116,
          46,
          112,
          97,
          114,
          97,
          109,
          115,
          46,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          115,
          112,
          101,
          101,
          100,
          32,
          61,
          32,
          114,
          101,
          113,
          117,
          101,
          115,
          116,
          46,
          112,
          97,
          114,
          97,
          109,
          115,
          46,
          115,
          112,
          101,
          101,
          100,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          32,
          61,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          115,
          77,
          97,
          112,
          46,
          103,
          101,
          116,
          40,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          33,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          110,
          101,
          119,
          32,
          69,
          114,
          114,
          111,
          114,
          40,
          96,
          73,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          32,
          119,
          105,
          116,
          104,
          32,
          105,
          100,
          32,
          36,
          123,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          125,
          32,
          100,
          111,
          101,
          115,
          32,
          110,
          111,
          116,
          32,
          101,
          120,
          105,
          115,
          116,
          46,
          96,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          46,
          115,
          101,
          116,
          83,
          112,
          101,
          101,
          100,
          40,
          115,
          112,
          101,
          101,
          100,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          44,
          10,
          32,
          32,
          32,
          32,
          115,
          101,
          116,
          85,
          115,
          101,
          70,
          114,
          97,
          109,
          101,
          73,
          110,
          116,
          101,
          114,
          112,
          111,
          108,
          97,
          116,
          105,
          111,
          110,
          58,
          32,
          40,
          114,
          101,
          113,
          117,
          101,
          115,
          116,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          32,
          61,
          32,
          114,
          101,
          113,
          117,
          101,
          115,
          116,
          46,
          112,
          97,
          114,
          97,
          109,
          115,
          46,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          117,
          115,
          101,
          70,
          114,
          97,
          109,
          101,
          73,
          110,
          116,
          101,
          114,
          112,
          111,
          108,
          97,
          116,
          105,
          111,
          110,
          32,
          61,
          32,
          114,
          101,
          113,
          117,
          101,
          115,
          116,
          46,
          112,
          97,
          114,
          97,
          109,
          115,
          46,
          117,
          115,
          101,
          70,
          114,
          97,
          109,
          101,
          73,
          110,
          116,
          101,
          114,
          112,
          111,
          108,
          97,
          116,
          105,
          111,
          110,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          32,
          61,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          115,
          77,
          97,
          112,
          46,
          103,
          101,
          116,
          40,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          33,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          110,
          101,
          119,
          32,
          69,
          114,
          114,
          111,
          114,
          40,
          96,
          73,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          32,
          119,
          105,
          116,
          104,
          32,
          105,
          100,
          32,
          36,
          123,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          125,
          32,
          100,
          111,
          101,
          115,
          32,
          110,
          111,
          116,
          32,
          101,
          120,
          105,
          115,
          116,
          46,
          96,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          46,
          115,
          101,
          116,
          85,
          115,
          101,
          70,
          114,
          97,
          109,
          101,
          73,
          110,
          116,
          101,
          114,
          112,
          111,
          108,
          97,
          116,
          105,
          111,
          110,
          40,
          117,
          115,
          101,
          70,
          114,
          97,
          109,
          101,
          73,
          110,
          116,
          101,
          114,
          112,
          111,
          108,
          97,
          116,
          105,
          111,
          110,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          44,
          10,
          32,
          32,
          32,
          32,
          115,
          101,
          116,
          87,
          97,
          115,
          109,
          85,
          114,
          108,
          58,
          32,
          40,
          114,
          101,
          113,
          117,
          101,
          115,
          116,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          68,
          111,
          116,
          76,
          111,
          116,
          116,
          105,
          101,
          46,
          115,
          101,
          116,
          87,
          97,
          115,
          109,
          85,
          114,
          108,
          40,
          114,
          101,
          113,
          117,
          101,
          115,
          116,
          46,
          112,
          97,
          114,
          97,
          109,
          115,
          46,
          117,
          114,
          108,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          44,
          10,
          32,
          32,
          32,
          32,
          115,
          116,
          111,
          112,
          58,
          32,
          40,
          114,
          101,
          113,
          117,
          101,
          115,
          116,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          32,
          61,
          32,
          114,
          101,
          113,
          117,
          101,
          115,
          116,
          46,
          112,
          97,
          114,
          97,
          109,
          115,
          46,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          32,
          61,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          115,
          77,
          97,
          112,
          46,
          103,
          101,
          116,
          40,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          33,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          110,
          101,
          119,
          32,
          69,
          114,
          114,
          111,
          114,
          40,
          96,
          73,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          32,
          119,
          105,
          116,
          104,
          32,
          105,
          100,
          32,
          36,
          123,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          125,
          32,
          100,
          111,
          101,
          115,
          32,
          110,
          111,
          116,
          32,
          101,
          120,
          105,
          115,
          116,
          46,
          96,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          46,
          115,
          116,
          111,
          112,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          44,
          10,
          32,
          32,
          32,
          32,
          117,
          110,
          102,
          114,
          101,
          101,
          122,
          101,
          58,
          32,
          40,
          114,
          101,
          113,
          117,
          101,
          115,
          116,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          32,
          61,
          32,
          114,
          101,
          113,
          117,
          101,
          115,
          116,
          46,
          112,
          97,
          114,
          97,
          109,
          115,
          46,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          32,
          61,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          115,
          77,
          97,
          112,
          46,
          103,
          101,
          116,
          40,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          33,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          110,
          101,
          119,
          32,
          69,
          114,
          114,
          111,
          114,
          40,
          96,
          73,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          32,
          119,
          105,
          116,
          104,
          32,
          105,
          100,
          32,
          36,
          123,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          125,
          32,
          100,
          111,
          101,
          115,
          32,
          110,
          111,
          116,
          32,
          101,
          120,
          105,
          115,
          116,
          46,
          96,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          46,
          117,
          110,
          102,
          114,
          101,
          101,
          122,
          101,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          44,
          10,
          32,
          32,
          32,
          32,
          115,
          101,
          116,
          86,
          105,
          101,
          119,
          112,
          111,
          114,
          116,
          40,
          114,
          101,
          113,
          117,
          101,
          115,
          116,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          32,
          61,
          32,
          114,
          101,
          113,
          117,
          101,
          115,
          116,
          46,
          112,
          97,
          114,
          97,
          109,
          115,
          46,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          120,
          32,
          61,
          32,
          114,
          101,
          113,
          117,
          101,
          115,
          116,
          46,
          112,
          97,
          114,
          97,
          109,
          115,
          46,
          120,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          121,
          32,
          61,
          32,
          114,
          101,
          113,
          117,
          101,
          115,
          116,
          46,
          112,
          97,
          114,
          97,
          109,
          115,
          46,
          121,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          119,
          105,
          100,
          116,
          104,
          32,
          61,
          32,
          114,
          101,
          113,
          117,
          101,
          115,
          116,
          46,
          112,
          97,
          114,
          97,
          109,
          115,
          46,
          119,
          105,
          100,
          116,
          104,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          104,
          101,
          105,
          103,
          104,
          116,
          32,
          61,
          32,
          114,
          101,
          113,
          117,
          101,
          115,
          116,
          46,
          112,
          97,
          114,
          97,
          109,
          115,
          46,
          104,
          101,
          105,
          103,
          104,
          116,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          32,
          61,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          115,
          77,
          97,
          112,
          46,
          103,
          101,
          116,
          40,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          33,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          110,
          101,
          119,
          32,
          69,
          114,
          114,
          111,
          114,
          40,
          96,
          73,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          32,
          119,
          105,
          116,
          104,
          32,
          105,
          100,
          32,
          36,
          123,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          125,
          32,
          100,
          111,
          101,
          115,
          32,
          110,
          111,
          116,
          32,
          101,
          120,
          105,
          115,
          116,
          46,
          96,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          46,
          115,
          101,
          116,
          86,
          105,
          101,
          119,
          112,
          111,
          114,
          116,
          40,
          120,
          44,
          32,
          121,
          44,
          32,
          119,
          105,
          100,
          116,
          104,
          44,
          32,
          104,
          101,
          105,
          103,
          104,
          116,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          44,
          10,
          32,
          32,
          32,
          32,
          97,
          110,
          105,
          109,
          97,
          116,
          105,
          111,
          110,
          83,
          105,
          122,
          101,
          40,
          114,
          101,
          113,
          117,
          101,
          115,
          116,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          32,
          61,
          32,
          114,
          101,
          113,
          117,
          101,
          115,
          116,
          46,
          112,
          97,
          114,
          97,
          109,
          115,
          46,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          32,
          61,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          115,
          77,
          97,
          112,
          46,
          103,
          101,
          116,
          40,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          33,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          110,
          101,
          119,
          32,
          69,
          114,
          114,
          111,
          114,
          40,
          96,
          73,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          32,
          119,
          105,
          116,
          104,
          32,
          105,
          100,
          32,
          36,
          123,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          125,
          32,
          100,
          111,
          101,
          115,
          32,
          110,
          111,
          116,
          32,
          101,
          120,
          105,
          115,
          116,
          46,
          96,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          123,
          32,
          104,
          101,
          105,
          103,
          104,
          116,
          44,
          32,
          119,
          105,
          100,
          116,
          104,
          32,
          125,
          32,
          61,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          46,
          97,
          110,
          105,
          109,
          97,
          116,
          105,
          111,
          110,
          83,
          105,
          122,
          101,
          40,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          104,
          101,
          105,
          103,
          104,
          116,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          119,
          105,
          100,
          116,
          104,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          44,
          10,
          32,
          32,
          32,
          32,
          115,
          101,
          116,
          77,
          97,
          114,
          107,
          101,
          114,
          40,
          114,
          101,
          113,
          117,
          101,
          115,
          116,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          32,
          61,
          32,
          114,
          101,
          113,
          117,
          101,
          115,
          116,
          46,
          112,
          97,
          114,
          97,
          109,
          115,
          46,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          109,
          97,
          114,
          107,
          101,
          114,
          32,
          61,
          32,
          114,
          101,
          113,
          117,
          101,
          115,
          116,
          46,
          112,
          97,
          114,
          97,
          109,
          115,
          46,
          109,
          97,
          114,
          107,
          101,
          114,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          32,
          61,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          115,
          77,
          97,
          112,
          46,
          103,
          101,
          116,
          40,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          33,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          110,
          101,
          119,
          32,
          69,
          114,
          114,
          111,
          114,
          40,
          96,
          73,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          32,
          119,
          105,
          116,
          104,
          32,
          105,
          100,
          32,
          36,
          123,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          125,
          32,
          100,
          111,
          101,
          115,
          32,
          110,
          111,
          116,
          32,
          101,
          120,
          105,
          115,
          116,
          46,
          96,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          46,
          115,
          101,
          116,
          77,
          97,
          114,
          107,
          101,
          114,
          40,
          109,
          97,
          114,
          107,
          101,
          114,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          115,
          117,
          99,
          99,
          101,
          115,
          115,
          58,
          32,
          116,
          114,
          117,
          101,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          44,
          10,
          32,
          32,
          32,
          32,
          115,
          101,
          116,
          76,
          111,
          111,
          112,
          40,
          114,
          101,
          113,
          117,
          101,
          115,
          116,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          32,
          61,
          32,
          114,
          101,
          113,
          117,
          101,
          115,
          116,
          46,
          112,
          97,
          114,
          97,
          109,
          115,
          46,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          108,
          111,
          111,
          112,
          32,
          61,
          32,
          114,
          101,
          113,
          117,
          101,
          115,
          116,
          46,
          112,
          97,
          114,
          97,
          109,
          115,
          46,
          108,
          111,
          111,
          112,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          32,
          61,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          115,
          77,
          97,
          112,
          46,
          103,
          101,
          116,
          40,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          33,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          110,
          101,
          119,
          32,
          69,
          114,
          114,
          111,
          114,
          40,
          96,
          73,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          32,
          119,
          105,
          116,
          104,
          32,
          105,
          100,
          32,
          36,
          123,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          73,
          100,
          125,
          32,
          100,
          111,
          101,
          115,
          32,
          110,
          111,
          116,
          32,
          101,
          120,
          105,
          115,
          116,
          46,
          96,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          110,
          115,
          116,
          97,
          110,
          99,
          101,
          46,
          115,
          101,
          116,
          76,
          111,
          111,
          112,
          40,
          108,
          111,
          111,
          112,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          115,
          117,
          99,
          99,
          101,
          115,
          115,
          58,
          32,
          116,
          114,
          117,
          101,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          125,
          59,
          10,
          32,
          32,
          102,
          117,
          110,
          99,
          116,
          105,
          111,
          110,
          32,
          101,
          120,
          101,
          99,
          117,
          116,
          101,
          67,
          111,
          109,
          109,
          97,
          110,
          100,
          40,
          114,
          112,
          99,
          82,
          101,
          113,
          117,
          101,
          115,
          116,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          109,
          101,
          116,
          104,
          111,
          100,
          32,
          61,
          32,
          114,
          112,
          99,
          82,
          101,
          113,
          117,
          101,
          115,
          116,
          46,
          109,
          101,
          116,
          104,
          111,
          100,
          59,
          10,
          32,
          32,
          32,
          32,
          105,
          102,
          32,
          40,
          116,
          121,
          112,
          101,
          111,
          102,
          32,
          99,
          111,
          109,
          109,
          97,
          110,
          100,
          115,
          91,
          109,
          101,
          116,
          104,
          111,
          100,
          93,
          32,
          61,
          61,
          61,
          32,
          34,
          102,
          117,
          110,
          99,
          116,
          105,
          111,
          110,
          34,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          116,
          117,
          114,
          110,
          32,
          99,
          111,
          109,
          109,
          97,
          110,
          100,
          115,
          91,
          109,
          101,
          116,
          104,
          111,
          100,
          93,
          40,
          114,
          112,
          99,
          82,
          101,
          113,
          117,
          101,
          115,
          116,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          32,
          101,
          108,
          115,
          101,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          116,
          104,
          114,
          111,
          119,
          32,
          110,
          101,
          119,
          32,
          69,
          114,
          114,
          111,
          114,
          40,
          96,
          77,
          101,
          116,
          104,
          111,
          100,
          32,
          36,
          123,
          109,
          101,
          116,
          104,
          111,
          100,
          125,
          32,
          105,
          115,
          32,
          110,
          111,
          116,
          32,
          105,
          109,
          112,
          108,
          101,
          109,
          101,
          110,
          116,
          101,
          100,
          32,
          105,
          110,
          32,
          99,
          111,
          109,
          109,
          97,
          110,
          100,
          115,
          46,
          96,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          125,
          10,
          32,
          32,
          115,
          101,
          108,
          102,
          46,
          111,
          110,
          109,
          101,
          115,
          115,
          97,
          103,
          101,
          32,
          61,
          32,
          40,
          101,
          118,
          101,
          110,
          116,
          41,
          32,
          61,
          62,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          116,
          114,
          121,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          114,
          101,
          115,
          117,
          108,
          116,
          32,
          61,
          32,
          101,
          120,
          101,
          99,
          117,
          116,
          101,
          67,
          111,
          109,
          109,
          97,
          110,
          100,
          40,
          101,
          118,
          101,
          110,
          116,
          46,
          100,
          97,
          116,
          97,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          114,
          101,
          115,
          112,
          111,
          110,
          115,
          101,
          32,
          61,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          100,
          58,
          32,
          101,
          118,
          101,
          110,
          116,
          46,
          100,
          97,
          116,
          97,
          46,
          105,
          100,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          109,
          101,
          116,
          104,
          111,
          100,
          58,
          32,
          101,
          118,
          101,
          110,
          116,
          46,
          100,
          97,
          116,
          97,
          46,
          109,
          101,
          116,
          104,
          111,
          100,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          114,
          101,
          115,
          117,
          108,
          116,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          115,
          101,
          108,
          102,
          46,
          112,
          111,
          115,
          116,
          77,
          101,
          115,
          115,
          97,
          103,
          101,
          40,
          114,
          101,
          115,
          112,
          111,
          110,
          115,
          101,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          32,
          99,
          97,
          116,
          99,
          104,
          32,
          40,
          101,
          114,
          114,
          111,
          114,
          41,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          99,
          111,
          110,
          115,
          116,
          32,
          101,
          114,
          114,
          111,
          114,
          82,
          101,
          115,
          112,
          111,
          110,
          115,
          101,
          32,
          61,
          32,
          123,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          105,
          100,
          58,
          32,
          101,
          118,
          101,
          110,
          116,
          46,
          100,
          97,
          116,
          97,
          46,
          105,
          100,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          109,
          101,
          116,
          104,
          111,
          100,
          58,
          32,
          101,
          118,
          101,
          110,
          116,
          46,
          100,
          97,
          116,
          97,
          46,
          109,
          101,
          116,
          104,
          111,
          100,
          44,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          32,
          101,
          114,
          114,
          111,
          114,
          58,
          32,
          101,
          114,
          114,
          111,
          114,
          46,
          109,
          101,
          115,
          115,
          97,
          103,
          101,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          125,
          59,
          10,
          32,
          32,
          32,
          32,
          32,
          32,
          115,
          101,
          108,
          102,
          46,
          112,
          111,
          115,
          116,
          77,
          101,
          115,
          115,
          97,
          103,
          101,
          40,
          101,
          114,
          114,
          111,
          114,
          82,
          101,
          115,
          112,
          111,
          110,
          115,
          101,
          41,
          59,
          10,
          32,
          32,
          32,
          32,
          125,
          10,
          32,
          32,
          125,
          59,
          10,
          32,
          32,
          118,
          97,
          114,
          32,
          100,
          117,
          109,
          109,
          121,
          32,
          61,
          32,
          34,
          34,
          59,
          10,
          32,
          32,
          118,
          97,
          114,
          32,
          100,
          111,
          116,
          108,
          111,
          116,
          116,
          105,
          101,
          95,
          119,
          111,
          114,
          107,
          101,
          114,
          95,
          100,
          101,
          102,
          97,
          117,
          108,
          116,
          32,
          61,
          32,
          100,
          117,
          109,
          109,
          121,
          59,
          10,
          125,
          41,
          40,
          41,
          59,
          10
        ])
      ], {
        type: "application/javascript"
      }), e = URL.createObjectURL(n), t = new Worker(e);
      return URL.revokeObjectURL(e), t;
    }
  }, UR = NR, BR = class {
    constructor() {
      Ce(this, "_workers", /* @__PURE__ */ new Map()), Ce(this, "_animationWorkerMap", /* @__PURE__ */ new Map());
    }
    getWorker(n) {
      return this._workers.has(n) || this._workers.set(n, new UR()), this._workers.get(n);
    }
    assignAnimationToWorker(n, e) {
      this._animationWorkerMap.set(n, e);
    }
    unassignAnimationFromWorker(n) {
      this._animationWorkerMap.delete(n);
    }
    sendMessage(n, e, t) {
      this.getWorker(n).postMessage(e, t || []);
    }
    terminateWorker(n) {
      let e = this._workers.get(n);
      e && (e.terminate(), this._workers.delete(n));
    }
  };
  function ym(n, e) {
    if (n instanceof HTMLCanvasElement) {
      let { height: t, width: i } = n.getBoundingClientRect();
      if (t !== 0 && i !== 0) return {
        width: i * e,
        height: t * e
      };
    }
    return {
      width: n.width,
      height: n.height
    };
  }
  function xm() {
    return Date.now().toString(36) + Math.random().toString(36).substr(2, 9);
  }
  var Sm = class Zr {
    constructor(e) {
      var _a2, _b2;
      Ce(this, "_eventManager", new Xv()), Ce(this, "_id"), Ce(this, "_worker"), Ce(this, "_canvas"), Ce(this, "_dotLottieInstanceState", {
        loopCount: 0,
        markers: [],
        autoplay: false,
        backgroundColor: "",
        currentFrame: 0,
        duration: 0,
        loop: false,
        mode: "forward",
        segment: [
          0,
          0
        ],
        segmentDuration: 0,
        speed: 1,
        totalFrames: 0,
        isLoaded: false,
        isPlaying: false,
        isPaused: false,
        isStopped: true,
        isFrozen: false,
        useFrameInterpolation: false,
        renderConfig: {
          devicePixelRatio: ss()
        },
        activeAnimationId: "",
        activeThemeId: "",
        layout: void 0,
        marker: void 0,
        isReady: false,
        manifest: null
      }), Ce(this, "_created", false), Ce(this, "_pointerUpMethod"), Ce(this, "_pointerDownMethod"), Ce(this, "_pointerMoveMethod"), Ce(this, "_pointerEnterMethod"), Ce(this, "_pointerExitMethod"), this._canvas = e.canvas, this._id = `dotlottie-${xm()}`;
      let t = e.workerId || "defaultWorker";
      this._worker = Zr._workerManager.getWorker(t), Zr._workerManager.assignAnimationToWorker(this._id, t), Zr._wasmUrl && this._sendMessage("setWasmUrl", {
        url: Zr._wasmUrl
      }), this._create({
        ...e,
        renderConfig: {
          ...e.renderConfig,
          devicePixelRatio: ((_a2 = e.renderConfig) == null ? void 0 : _a2.devicePixelRatio) || ss(),
          freezeOnOffscreen: ((_b2 = e.renderConfig) == null ? void 0 : _b2.freezeOnOffscreen) ?? true
        }
      }), this._worker.addEventListener("message", this._handleWorkerEvent.bind(this)), this._pointerUpMethod = this._onPointerUp.bind(this), this._pointerDownMethod = this._onPointerDown.bind(this), this._pointerMoveMethod = this._onPointerMove.bind(this), this._pointerEnterMethod = this._onPointerEnter.bind(this), this._pointerExitMethod = this._onPointerLeave.bind(this);
    }
    async _handleWorkerEvent(e) {
      let t = e.data;
      t.id || (t.method === "onLoad" && t.result.instanceId === this._id && (await this._updateDotLottieInstanceState(), this._eventManager.dispatch(t.result.event), Mn && this._canvas instanceof HTMLCanvasElement && (this._dotLottieInstanceState.renderConfig.freezeOnOffscreen && Ni.observe(this._canvas, this), this._dotLottieInstanceState.renderConfig.autoResize && Ui.observe(this._canvas, this))), t.method === "onComplete" && t.result.instanceId === this._id && (await this._updateDotLottieInstanceState(), this._eventManager.dispatch(t.result.event)), t.method === "onDestroy" && t.result.instanceId === this._id && this._eventManager.dispatch(t.result.event), t.method === "onUnfreeze" && t.result.instanceId === this._id && (await this._updateDotLottieInstanceState(), this._dotLottieInstanceState.isFrozen = false, this._eventManager.dispatch(t.result.event)), t.method === "onFrame" && t.result.instanceId === this._id && (this._dotLottieInstanceState.currentFrame = t.result.event.currentFrame, this._eventManager.dispatch(t.result.event)), t.method === "onRender" && t.result.instanceId === this._id && this._eventManager.dispatch(t.result.event), t.method === "onFreeze" && t.result.instanceId === this._id && (await this._updateDotLottieInstanceState(), this._eventManager.dispatch(t.result.event)), t.method === "onPause" && t.result.instanceId === this._id && (await this._updateDotLottieInstanceState(), this._eventManager.dispatch(t.result.event)), t.method === "onPlay" && t.result.instanceId === this._id && (await this._updateDotLottieInstanceState(), this._eventManager.dispatch(t.result.event)), t.method === "onStop" && t.result.instanceId === this._id && (await this._updateDotLottieInstanceState(), this._eventManager.dispatch(t.result.event)), t.method === "onLoadError" && t.result.instanceId === this._id && (await this._updateDotLottieInstanceState(), this._eventManager.dispatch(t.result.event)), t.method === "onRenderError" && t.result.instanceId === this._id && this._eventManager.dispatch(t.result.event), t.method === "onReady" && t.result.instanceId === this._id && (await this._updateDotLottieInstanceState(), this._eventManager.dispatch(t.result.event)), t.method === "onLoop" && t.result.instanceId === this._id && (await this._updateDotLottieInstanceState(), this._eventManager.dispatch(t.result.event)));
    }
    async _create(e) {
      var _a2;
      let t;
      this._canvas instanceof HTMLCanvasElement ? t = this._canvas.transferControlToOffscreen() : t = this._canvas;
      let { instanceId: i } = await this._sendMessage("create", {
        instanceId: this._id,
        config: {
          ...e,
          canvas: t
        },
        ...ym(this._canvas, ((_a2 = e.renderConfig) == null ? void 0 : _a2.devicePixelRatio) || ss())
      }, [
        t
      ]);
      if (i !== this._id) throw new Error("Instance ID mismatch");
      this._created = true, await this._updateDotLottieInstanceState();
    }
    get loopCount() {
      return this._dotLottieInstanceState.loopCount;
    }
    get isLoaded() {
      return this._dotLottieInstanceState.isLoaded;
    }
    get isPlaying() {
      return this._dotLottieInstanceState.isPlaying;
    }
    get isPaused() {
      return this._dotLottieInstanceState.isPaused;
    }
    get isStopped() {
      return this._dotLottieInstanceState.isStopped;
    }
    get currentFrame() {
      return this._dotLottieInstanceState.currentFrame;
    }
    get isFrozen() {
      return this._dotLottieInstanceState.isFrozen;
    }
    get segmentDuration() {
      return this._dotLottieInstanceState.segmentDuration;
    }
    get totalFrames() {
      return this._dotLottieInstanceState.totalFrames;
    }
    get segment() {
      return this._dotLottieInstanceState.segment;
    }
    get speed() {
      return this._dotLottieInstanceState.speed;
    }
    get duration() {
      return this._dotLottieInstanceState.duration;
    }
    get isReady() {
      return this._dotLottieInstanceState.isReady;
    }
    get mode() {
      return this._dotLottieInstanceState.mode;
    }
    get canvas() {
      return this._canvas;
    }
    get autoplay() {
      return this._dotLottieInstanceState.autoplay;
    }
    get backgroundColor() {
      return this._dotLottieInstanceState.backgroundColor;
    }
    get loop() {
      return this._dotLottieInstanceState.loop;
    }
    get useFrameInterpolation() {
      return this._dotLottieInstanceState.useFrameInterpolation;
    }
    get renderConfig() {
      return this._dotLottieInstanceState.renderConfig;
    }
    get manifest() {
      return this._dotLottieInstanceState.manifest;
    }
    get activeAnimationId() {
      return this._dotLottieInstanceState.activeAnimationId;
    }
    get marker() {
      return this._dotLottieInstanceState.marker;
    }
    get activeThemeId() {
      return this._dotLottieInstanceState.activeThemeId;
    }
    get layout() {
      return this._dotLottieInstanceState.layout;
    }
    async play() {
      this._created && (await this._sendMessage("play", {
        instanceId: this._id
      }), await this._updateDotLottieInstanceState(), Mn && this._canvas instanceof HTMLCanvasElement && this._dotLottieInstanceState.renderConfig.freezeOnOffscreen && !$v(this._canvas) && await this.freeze());
    }
    async pause() {
      this._created && (await this._sendMessage("pause", {
        instanceId: this._id
      }), await this._updateDotLottieInstanceState());
    }
    async stop() {
      this._created && (await this._sendMessage("stop", {
        instanceId: this._id
      }), await this._updateDotLottieInstanceState());
    }
    async setSpeed(e) {
      this._created && (await this._sendMessage("setSpeed", {
        instanceId: this._id,
        speed: e
      }), await this._updateDotLottieInstanceState());
    }
    async setMode(e) {
      this._created && (await this._sendMessage("setMode", {
        instanceId: this._id,
        mode: e
      }), await this._updateDotLottieInstanceState());
    }
    async setFrame(e) {
      this._created && (await this._sendMessage("setFrame", {
        frame: e,
        instanceId: this._id
      }), await this._updateDotLottieInstanceState());
    }
    async setSegment(e, t) {
      this._created && (await this._sendMessage("setSegment", {
        instanceId: this._id,
        segment: [
          e,
          t
        ]
      }), await this._updateDotLottieInstanceState());
    }
    async setRenderConfig(e) {
      if (!this._created) return;
      let { devicePixelRatio: t, freezeOnOffscreen: i, ...r } = e;
      await this._sendMessage("setRenderConfig", {
        instanceId: this._id,
        renderConfig: {
          ...this._dotLottieInstanceState.renderConfig,
          ...r,
          devicePixelRatio: t || ss(),
          freezeOnOffscreen: i ?? true
        }
      }), await this._updateDotLottieInstanceState(), Mn && this._canvas instanceof HTMLCanvasElement && (this._dotLottieInstanceState.renderConfig.autoResize ? Ui.observe(this._canvas, this) : Ui.unobserve(this._canvas), this._dotLottieInstanceState.renderConfig.freezeOnOffscreen ? Ni.observe(this._canvas, this) : (Ni.unobserve(this._canvas), this._dotLottieInstanceState.isFrozen && await this.unfreeze()));
    }
    async setUseFrameInterpolation(e) {
      this._created && (await this._sendMessage("setUseFrameInterpolation", {
        instanceId: this._id,
        useFrameInterpolation: e
      }), await this._updateDotLottieInstanceState());
    }
    async setTheme(e) {
      if (!this._created) return false;
      let t = this._sendMessage("setTheme", {
        instanceId: this._id,
        themeId: e
      });
      return await this._updateDotLottieInstanceState(), t;
    }
    async load(e) {
      this._created && (await this._sendMessage("load", {
        config: e,
        instanceId: this._id
      }), await this._updateDotLottieInstanceState());
    }
    async setLoop(e) {
      this._created && (await this._sendMessage("setLoop", {
        instanceId: this._id,
        loop: e
      }), await this._updateDotLottieInstanceState());
    }
    async resize() {
      if (!this._created) return;
      let { height: e, width: t } = ym(this._canvas, this._dotLottieInstanceState.renderConfig.devicePixelRatio || ss());
      await this._sendMessage("resize", {
        height: e,
        instanceId: this._id,
        width: t
      }), await this._updateDotLottieInstanceState();
    }
    async destroy() {
      this._created && (this._created = false, await this._sendMessage("destroy", {
        instanceId: this._id
      }), this._cleanupStateMachineListeners(), Zr._workerManager.unassignAnimationFromWorker(this._id), this._eventManager.removeAllEventListeners(), Mn && this._canvas instanceof HTMLCanvasElement && (Ni.unobserve(this._canvas), Ui.unobserve(this._canvas)));
    }
    async freeze() {
      this._created && (await this._sendMessage("freeze", {
        instanceId: this._id
      }), await this._updateDotLottieInstanceState());
    }
    async unfreeze() {
      this._created && (await this._sendMessage("unfreeze", {
        instanceId: this._id
      }), await this._updateDotLottieInstanceState());
    }
    async setBackgroundColor(e) {
      this._created && (await this._sendMessage("setBackgroundColor", {
        instanceId: this._id,
        backgroundColor: e
      }), await this._updateDotLottieInstanceState());
    }
    async loadAnimation(e) {
      this._created && (await this._sendMessage("loadAnimation", {
        animationId: e,
        instanceId: this._id
      }), await this._updateDotLottieInstanceState());
    }
    async setLayout(e) {
      this._created && (await this._sendMessage("setLayout", {
        instanceId: this._id,
        layout: e
      }), await this._updateDotLottieInstanceState());
    }
    async _updateDotLottieInstanceState() {
      if (!this._created) return;
      let e = await this._sendMessage("getDotLottieInstanceState", {
        instanceId: this._id
      });
      this._dotLottieInstanceState = e.state;
    }
    markers() {
      return this._dotLottieInstanceState.markers;
    }
    async setMarker(e) {
      this._created && (await this._sendMessage("setMarker", {
        instanceId: this._id,
        marker: e
      }), await this._updateDotLottieInstanceState());
    }
    async setThemeData(e) {
      if (!this._created) return false;
      let t = await this._sendMessage("setThemeData", {
        instanceId: this._id,
        themeData: e
      });
      return await this._updateDotLottieInstanceState(), t;
    }
    async setViewport(e, t, i, r) {
      return this._created ? this._sendMessage("setViewport", {
        x: e,
        y: t,
        width: i,
        height: r,
        instanceId: this._id
      }) : false;
    }
    async animationSize() {
      return this._created ? this._sendMessage("animationSize", {
        instanceId: this._id
      }) : {
        height: 0,
        width: 0
      };
    }
    async _sendMessage(e, t, i) {
      let r = {
        id: `dotlottie-request-${xm()}`,
        method: e,
        params: t
      };
      return this._worker.postMessage(r, i || []), new Promise((s, o) => {
        let a = (l) => {
          let c = l.data;
          c.id === r.id && (this._worker.removeEventListener("message", a), c.error ? o(new Error(`Failed to execute method ${e}: ${c.error}`)) : s(c.result));
        };
        this._worker.addEventListener("message", a);
      });
    }
    addEventListener(e, t) {
      this._eventManager.addEventListener(e, t);
    }
    removeEventListener(e, t) {
      this._eventManager.removeEventListener(e, t);
    }
    static setWasmUrl(e) {
      Zr._wasmUrl = e;
    }
    async loadStateMachine(e) {
      if (!this._created) return false;
      let t = await this._sendMessage("loadStateMachine", {
        instanceId: this._id,
        stateMachineId: e
      });
      return await this._updateDotLottieInstanceState(), t;
    }
    async loadStateMachineData(e) {
      if (!this._created) return false;
      let t = await this._sendMessage("loadStateMachineData", {
        instanceId: this._id,
        stateMachineData: e
      });
      return await this._updateDotLottieInstanceState(), t;
    }
    async startStateMachine() {
      if (!this._created) return false;
      this._setupStateMachineListeners();
      let e = await this._sendMessage("startStateMachine", {
        instanceId: this._id
      });
      return await this._updateDotLottieInstanceState(), e;
    }
    async stopStateMachine() {
      return this._created ? (this._cleanupStateMachineListeners(), this._sendMessage("stopStateMachine", {
        instanceId: this._id
      })) : false;
    }
    async getStateMachineListeners() {
      return this._created ? this._sendMessage("getStateMachineListeners", {
        instanceId: this._id
      }) : [];
    }
    _getPointerPosition(e) {
      let t = this._canvas.getBoundingClientRect(), i = this._canvas.width / t.width, r = this._canvas.height / t.height, s = this._dotLottieInstanceState.renderConfig.devicePixelRatio || window.devicePixelRatio || 1, o = (e.clientX - t.left) * i / s, a = (e.clientY - t.top) * r / s;
      return {
        x: o,
        y: a
      };
    }
    _onPointerUp(e) {
      let { x: t, y: i } = this._getPointerPosition(e);
      this._sendMessage("postPointerUpEvent", {
        instanceId: this._id,
        x: t,
        y: i
      });
    }
    _onPointerDown(e) {
      let { x: t, y: i } = this._getPointerPosition(e);
      this._sendMessage("postPointerDownEvent", {
        instanceId: this._id,
        x: t,
        y: i
      });
    }
    _onPointerMove(e) {
      let { x: t, y: i } = this._getPointerPosition(e);
      this._sendMessage("postPointerMoveEvent", {
        instanceId: this._id,
        x: t,
        y: i
      });
    }
    _onPointerEnter(e) {
      let { x: t, y: i } = this._getPointerPosition(e);
      this._sendMessage("postPointerEnterEvent", {
        instanceId: this._id,
        x: t,
        y: i
      });
    }
    _onPointerLeave(e) {
      let { x: t, y: i } = this._getPointerPosition(e);
      this._sendMessage("postPointerExitEvent", {
        instanceId: this._id,
        x: t,
        y: i
      });
    }
    async _setupStateMachineListeners() {
      if (Mn && this._canvas instanceof HTMLCanvasElement && this.isLoaded) {
        let e = await this._sendMessage("getStateMachineListeners", {
          instanceId: this._id
        });
        e.includes("PointerUp") && this._canvas.addEventListener("pointerup", this._pointerUpMethod), e.includes("PointerDown") && this._canvas.addEventListener("pointerdown", this._pointerDownMethod), e.includes("PointerMove") && this._canvas.addEventListener("pointermove", this._pointerMoveMethod), e.includes("PointerEnter") && this._canvas.addEventListener("pointerenter", this._pointerEnterMethod), e.includes("PointerExit") && this._canvas.addEventListener("pointerleave", this._pointerExitMethod);
      }
    }
    _cleanupStateMachineListeners() {
      Mn && this._canvas instanceof HTMLCanvasElement && (this._canvas.removeEventListener("pointerup", this._pointerUpMethod), this._canvas.removeEventListener("pointerdown", this._pointerDownMethod), this._canvas.removeEventListener("pointermove", this._pointerMoveMethod), this._canvas.removeEventListener("pointerenter", this._pointerEnterMethod), this._canvas.removeEventListener("pointerleave", this._pointerExitMethod));
    }
  };
  Ce(Sm, "_workerManager", new BR()), Ce(Sm, "_wasmUrl", "");
  var HR = xi({
    props: {
      animationId: {
        type: String,
        required: false
      },
      autoplay: {
        type: Boolean,
        required: false
      },
      backgroundColor: {
        type: String,
        required: false
      },
      data: {
        type: [
          String,
          ArrayBuffer
        ],
        required: false
      },
      loop: {
        type: Boolean,
        required: false
      },
      mode: {
        type: String,
        required: false
      },
      renderConfig: {
        type: Object,
        required: false
      },
      segment: {
        type: Array,
        required: false
      },
      speed: {
        type: Number,
        required: false
      },
      src: {
        type: String,
        required: false
      },
      useFrameInterpolation: {
        type: Boolean,
        required: false
      },
      marker: {
        type: String,
        required: false
      },
      playOnHover: {
        type: Boolean,
        required: false
      },
      themeData: {
        type: String,
        required: false
      },
      themeId: {
        type: String,
        required: false
      }
    },
    setup(n, { attrs: e, expose: t }) {
      const i = vn(void 0), { animationId: r, backgroundColor: s, loop: o, marker: a, mode: l, playOnHover: c, segment: u, speed: h, themeId: d, useFrameInterpolation: f } = X7(n);
      let m = null;
      je(() => s == null ? void 0 : s.value, (p) => {
        m && typeof p < "u" && m.setBackgroundColor(p);
      }), je(() => a == null ? void 0 : a.value, (p) => {
        m && typeof p < "u" && m.setMarker(p);
      }), je(() => o == null ? void 0 : o.value, (p) => {
        m && typeof p < "u" && m.setLoop(p);
      }), je(() => l == null ? void 0 : l.value, (p) => {
        m && typeof p < "u" && m.setMode(p);
      }), je(() => u == null ? void 0 : u.value, (p) => {
        if (!m) return;
        const g = p == null ? void 0 : p[0], y = p == null ? void 0 : p[1];
        typeof g == "number" && typeof y == "number" && m.setSegment(g, y);
      }), je(() => h == null ? void 0 : h.value, (p) => {
        m && typeof p < "u" && m.setSpeed(p);
      }), je(() => f == null ? void 0 : f.value, (p) => {
        m && typeof p < "u" && m.setUseFrameInterpolation(p);
      }), je(() => r == null ? void 0 : r.value, (p) => {
        m && m.isLoaded && typeof p < "u" && p !== m.activeAnimationId && m.loadAnimation(p);
      }), je(() => n.themeData, (p) => {
        m && typeof p < "u" && m.setTheme(p);
      }), je(() => d == null ? void 0 : d.value, (p) => {
        m && typeof p < "u" && m.setTheme(p);
      });
      function _(p) {
        p.type === "mouseenter" ? m == null ? void 0 : m.play() : m == null ? void 0 : m.pause();
      }
      return je(() => c == null ? void 0 : c.value, (p) => {
        var _a2, _b2, _c2, _d2;
        m && typeof p < "u" && p ? ((_a2 = i.value) == null ? void 0 : _a2.addEventListener("mouseenter", _), (_b2 = i.value) == null ? void 0 : _b2.addEventListener("mouseleave", _)) : ((_c2 = i.value) == null ? void 0 : _c2.removeEventListener("mouseenter", _), (_d2 = i.value) == null ? void 0 : _d2.removeEventListener("mouseleave", _));
      }), v2(() => {
        if (!i.value) return;
        let p = n.autoplay;
        typeof (c == null ? void 0 : c.value) < "u" && c.value && (p = false), m = new kR({
          canvas: i.value,
          ...n,
          autoplay: p
        }), (c == null ? void 0 : c.value) && (i.value.addEventListener("mouseenter", _), i.value.addEventListener("mouseleave", _));
      }), Os(() => {
        var _a2, _b2;
        (_a2 = i.value) == null ? void 0 : _a2.addEventListener("mouseenter", _), (_b2 = i.value) == null ? void 0 : _b2.addEventListener("mouseleave", _), m == null ? void 0 : m.destroy();
      }), t({
        getDotLottieInstance: () => m
      }), () => Xt("div", {
        ...e
      }, Xt("canvas", {
        style: "height: 100%; width: 100%",
        ref: i
      }));
    }
  });
  function zR(n, e) {
    let t, i, r;
    const s = pe(true), o = () => {
      s.value = true, r();
    };
    je(n, o, {
      flush: "sync"
    });
    const a = typeof e == "function" ? e : e.get, l = typeof e == "function" ? void 0 : e.set, c = j7((u, h) => (i = u, r = h, {
      get() {
        return s.value && (t = a(t), s.value = false), i(), t;
      },
      set(d) {
        l == null ? void 0 : l(d);
      }
    }));
    return Object.isExtensible(c) && (c.trigger = o), c;
  }
  function xa(n) {
    return uf() ? (T7(n), true) : false;
  }
  const xh = /* @__PURE__ */ new WeakMap(), VR = (...n) => {
    var e;
    const t = n[0], i = (e = O3()) == null ? void 0 : e.proxy;
    if (i == null && !ks()) throw new Error("injectLocal must be called in setup");
    return i && xh.has(i) && t in xh.get(i) ? xh.get(i)[t] : fn(...n);
  };
  rt = function(n, e) {
    return Pe(n);
  };
  const Cf = typeof window < "u" && typeof document < "u";
  typeof WorkerGlobalScope < "u" && globalThis instanceof WorkerGlobalScope;
  const Yv = (n) => n != null, GR = Object.prototype.toString, WR = (n) => GR.call(n) === "[object Object]", a2 = () => {
  }, jR = XR();
  function XR() {
    var n, e;
    return Cf && ((n = window == null ? void 0 : window.navigator) == null ? void 0 : n.userAgent) && (/iP(?:ad|hone|od)/.test(window.navigator.userAgent) || ((e = window == null ? void 0 : window.navigator) == null ? void 0 : e.maxTouchPoints) > 2 && /iPad|Macintosh/.test(window == null ? void 0 : window.navigator.userAgent));
  }
  function $R(...n) {
    if (n.length !== 1) return $7(...n);
    const e = n[0];
    return typeof e == "function" ? va(j7(() => ({
      get: e,
      set: a2
    }))) : vn(e);
  }
  function Kv(n, e) {
    function t(...i) {
      return new Promise((r, s) => {
        Promise.resolve(n(() => e.apply(this, i), {
          fn: e,
          thisArg: this,
          args: i
        })).then(r).catch(s);
      });
    }
    return t;
  }
  const Jv = (n) => n();
  function qR(...n) {
    let e = 0, t, i = true, r = a2, s, o, a, l, c;
    !yt(n[0]) && typeof n[0] == "object" ? { delay: o, trailing: a = true, leading: l = true, rejectOnCancel: c = false } = n[0] : [o, a = true, l = true, c = false] = n;
    const u = () => {
      t && (clearTimeout(t), t = void 0, r(), r = a2);
    };
    return (d) => {
      const f = $t(o), m = Date.now() - e, _ = () => s = d();
      return u(), f <= 0 ? (e = Date.now(), _()) : (m > f && (l || !i) ? (e = Date.now(), _()) : a && (s = new Promise((p, g) => {
        r = c ? g : p, t = setTimeout(() => {
          e = Date.now(), i = true, p(_()), u();
        }, Math.max(0, f - m));
      })), !l && !t && (t = setTimeout(() => i = true, f)), i = false, s);
    };
  }
  function YR(n = Jv, e = {}) {
    const { initialState: t = "active" } = e, i = $R(t === "active");
    function r() {
      i.value = false;
    }
    function s() {
      i.value = true;
    }
    const o = (...a) => {
      i.value && n(...a);
    };
    return {
      isActive: va(i),
      pause: r,
      resume: s,
      eventFilter: o
    };
  }
  function KR(n) {
    let e;
    function t() {
      return e || (e = n()), e;
    }
    return t.reset = async () => {
      const i = e;
      e = void 0, i && await i;
    }, t;
  }
  function Em(n) {
    return n.endsWith("rem") ? Number.parseFloat(n) * 16 : Number.parseFloat(n);
  }
  function v0(n) {
    return Array.isArray(n) ? n : [
      n
    ];
  }
  function JR(n) {
    return O3();
  }
  AV = function(n, e = 200, t = false, i = true, r = false) {
    return Kv(qR(e, t, i, r), n);
  };
  zt = function(...n) {
    if (n.length === 2) {
      const [e, t] = n;
      e.value = t;
    }
    if (n.length === 3) {
      const [e, t, i] = n;
      e[t] = i;
    }
  };
  function QR(n, e, t = {}) {
    const { eventFilter: i = Jv, ...r } = t;
    return je(n, Kv(i, e), r);
  }
  function ZR(n, e, t = {}) {
    const { eventFilter: i, initialState: r = "active", ...s } = t, { eventFilter: o, pause: a, resume: l, isActive: c } = YR(i, {
      initialState: r
    });
    return {
      stop: QR(n, e, {
        ...s,
        eventFilter: o
      }),
      pause: a,
      resume: l,
      isActive: c
    };
  }
  function Qv(n, e = true, t) {
    JR() ? v2(n, t) : e ? n() : e2(n);
  }
  function eP(n, e, t = {}) {
    const { immediate: i = true, immediateCallback: r = false } = t, s = pe(false);
    let o = null;
    function a() {
      o && (clearTimeout(o), o = null);
    }
    function l() {
      s.value = false, a();
    }
    function c(...u) {
      r && n(), a(), s.value = true, o = setTimeout(() => {
        s.value = false, o = null, n(...u);
      }, $t(e));
    }
    return i && (s.value = true, Cf && c()), xa(l), {
      isPending: QE(s),
      start: c,
      stop: l
    };
  }
  function Zv(n, e, t) {
    return je(n, e, {
      ...t,
      immediate: true
    });
  }
  e8 = function(n, e, t) {
    const i = je(n, (...r) => (e2(() => i()), e(...r)), t);
    return i;
  };
  const ti = Cf ? window : void 0, t8 = Cf ? window.navigator : void 0;
  function P2(n) {
    var e;
    const t = $t(n);
    return (e = t == null ? void 0 : t.$el) != null ? e : t;
  }
  function un(...n) {
    const e = [], t = () => {
      e.forEach((a) => a()), e.length = 0;
    }, i = (a, l, c, u) => (a.addEventListener(l, c, u), () => a.removeEventListener(l, c, u)), r = qe(() => {
      const a = v0($t(n[0])).filter((l) => l != null);
      return a.every((l) => typeof l != "string") ? a : void 0;
    }), s = Zv(() => {
      var a, l;
      return [
        (l = (a = r.value) == null ? void 0 : a.map((c) => P2(c))) != null ? l : [
          ti
        ].filter((c) => c != null),
        v0($t(r.value ? n[1] : n[0])),
        v0(Pe(r.value ? n[2] : n[1])),
        $t(r.value ? n[3] : n[2])
      ];
    }, ([a, l, c, u]) => {
      if (t(), !(a == null ? void 0 : a.length) || !(l == null ? void 0 : l.length) || !(c == null ? void 0 : c.length)) return;
      const h = WR(u) ? {
        ...u
      } : u;
      e.push(...a.flatMap((d) => l.flatMap((f) => c.map((m) => i(d, f, m, h)))));
    }, {
      flush: "post"
    }), o = () => {
      s(), t();
    };
    return xa(t), o;
  }
  let wm = false;
  DV = function(n, e, t = {}) {
    const { window: i = ti, ignore: r = [], capture: s = true, detectIframe: o = false, controls: a = false } = t;
    if (!i) return a ? {
      stop: a2,
      cancel: a2,
      trigger: a2
    } : a2;
    if (jR && !wm) {
      wm = true;
      const p = {
        passive: true
      };
      Array.from(i.document.body.children).forEach((g) => un(g, "click", a2, p)), un(i.document.documentElement, "click", a2, p);
    }
    let l = true;
    const c = (p) => $t(r).some((g) => {
      if (typeof g == "string") return Array.from(i.document.querySelectorAll(g)).some((y) => y === p.target || p.composedPath().includes(y));
      {
        const y = P2(g);
        return y && (p.target === y || p.composedPath().includes(y));
      }
    });
    function u(p) {
      const g = $t(p);
      return g && g.$.subTree.shapeFlag === 16;
    }
    function h(p, g) {
      const y = $t(p), b = y.$.subTree && y.$.subTree.children;
      return b == null || !Array.isArray(b) ? false : b.some((v) => v.el === g.target || g.composedPath().includes(v.el));
    }
    const d = (p) => {
      const g = P2(n);
      if (p.target != null && !(!(g instanceof Element) && u(n) && h(n, p)) && !(!g || g === p.target || p.composedPath().includes(g))) {
        if ("detail" in p && p.detail === 0 && (l = !c(p)), !l) {
          l = true;
          return;
        }
        e(p);
      }
    };
    let f = false;
    const m = [
      un(i, "click", (p) => {
        f || (f = true, setTimeout(() => {
          f = false;
        }, 0), d(p));
      }, {
        passive: true,
        capture: s
      }),
      un(i, "pointerdown", (p) => {
        const g = P2(n);
        l = !c(p) && !!(g && !p.composedPath().includes(g));
      }, {
        passive: true
      }),
      o && un(i, "blur", (p) => {
        setTimeout(() => {
          var g;
          const y = P2(n);
          ((g = i.document.activeElement) == null ? void 0 : g.tagName) === "IFRAME" && !(y == null ? void 0 : y.contains(i.document.activeElement)) && e(p);
        }, 0);
      }, {
        passive: true
      })
    ].filter(Boolean), _ = () => m.forEach((p) => p());
    return a ? {
      stop: _,
      cancel: () => {
        l = false;
      },
      trigger: (p) => {
        l = true, d(p), l = false;
      }
    } : _;
  };
  function tP() {
    const n = pe(false), e = O3();
    return e && v2(() => {
      n.value = true;
    }, e), n;
  }
  function Sa(n) {
    const e = tP();
    return qe(() => (e.value, !!n()));
  }
  function nP(n, e, t = {}) {
    const { window: i = ti, ...r } = t;
    let s;
    const o = Sa(() => i && "MutationObserver" in i), a = () => {
      s && (s.disconnect(), s = void 0);
    }, l = qe(() => {
      const d = $t(n), f = v0(d).map(P2).filter(Yv);
      return new Set(f);
    }), c = je(() => l.value, (d) => {
      a(), o.value && d.size && (s = new MutationObserver(e), d.forEach((f) => s.observe(f, r)));
    }, {
      immediate: true,
      flush: "post"
    }), u = () => s == null ? void 0 : s.takeRecords(), h = () => {
      c(), a();
    };
    return xa(h), {
      isSupported: o,
      stop: h,
      takeRecords: u
    };
  }
  function iP(n, e = {}) {
    const { immediate: t = true, fpsLimit: i = void 0, window: r = ti, once: s = false } = e, o = pe(false), a = qe(() => i ? 1e3 / $t(i) : null);
    let l = 0, c = null;
    function u(f) {
      if (!o.value || !r) return;
      l || (l = f);
      const m = f - l;
      if (a.value && m < a.value) {
        c = r.requestAnimationFrame(u);
        return;
      }
      if (l = f, n({
        delta: m,
        timestamp: f
      }), s) {
        o.value = false, c = null;
        return;
      }
      c = r.requestAnimationFrame(u);
    }
    function h() {
      !o.value && r && (o.value = true, l = 0, c = r.requestAnimationFrame(u));
    }
    function d() {
      o.value = false, c != null && r && (r.cancelAnimationFrame(c), c = null);
    }
    return t && h(), xa(d), {
      isActive: va(o),
      pause: d,
      resume: h
    };
  }
  const rP = Symbol("vueuse-ssr-width");
  function sP() {
    const n = ks() ? VR(rP, null) : null;
    return typeof n == "number" ? n : void 0;
  }
  function n8(n, e = {}) {
    const { window: t = ti, ssrWidth: i = sP() } = e, r = Sa(() => t && "matchMedia" in t && typeof t.matchMedia == "function"), s = pe(typeof i == "number"), o = pe(), a = pe(false), l = (c) => {
      a.value = c.matches;
    };
    return vu(() => {
      if (s.value) {
        s.value = !r.value;
        const c = $t(n).split(",");
        a.value = c.some((u) => {
          const h = u.includes("not all"), d = u.match(/\(\s*min-width:\s*(-?\d+(?:\.\d*)?[a-z]+\s*)\)/), f = u.match(/\(\s*max-width:\s*(-?\d+(?:\.\d*)?[a-z]+\s*)\)/);
          let m = !!(d || f);
          return d && m && (m = i >= Em(d[1])), f && m && (m = i <= Em(f[1])), h ? !m : m;
        });
        return;
      }
      r.value && (o.value = t.matchMedia($t(n)), a.value = o.value.matches);
    }), un(o, "change", l, {
      passive: true
    }), qe(() => a.value);
  }
  function Mm(n, e = {}) {
    const { controls: t = false, navigator: i = t8 } = e, r = Sa(() => i && "permissions" in i), s = pe(), o = typeof n == "string" ? {
      name: n
    } : n, a = pe(), l = () => {
      var u, h;
      a.value = (h = (u = s.value) == null ? void 0 : u.state) != null ? h : "prompt";
    };
    un(s, "change", l, {
      passive: true
    });
    const c = KR(async () => {
      if (r.value) {
        if (!s.value) try {
          s.value = await i.permissions.query(o);
        } catch {
          s.value = void 0;
        } finally {
          l();
        }
        if (t) return We(s.value);
      }
    });
    return c(), t ? {
      state: a,
      isSupported: r,
      query: c
    } : a;
  }
  RV = function(n = {}) {
    const { navigator: e = t8, read: t = false, source: i, copiedDuring: r = 1500, legacy: s = false } = n, o = Sa(() => e && "clipboard" in e), a = Mm("clipboard-read"), l = Mm("clipboard-write"), c = qe(() => o.value || s), u = pe(""), h = pe(false), d = eP(() => h.value = false, r, {
      immediate: false
    });
    async function f() {
      let y = !(o.value && g(a.value));
      if (!y) try {
        u.value = await e.clipboard.readText();
      } catch {
        y = true;
      }
      y && (u.value = p());
    }
    c.value && t && un([
      "copy",
      "cut"
    ], f, {
      passive: true
    });
    async function m(y = $t(i)) {
      if (c.value && y != null) {
        let b = !(o.value && g(l.value));
        if (!b) try {
          await e.clipboard.writeText(y);
        } catch {
          b = true;
        }
        b && _(y), u.value = y, h.value = true, d.start();
      }
    }
    function _(y) {
      const b = document.createElement("textarea");
      b.value = y ?? "", b.style.position = "absolute", b.style.opacity = "0", document.body.appendChild(b), b.select(), document.execCommand("copy"), b.remove();
    }
    function p() {
      var y, b, v;
      return (v = (b = (y = document == null ? void 0 : document.getSelection) == null ? void 0 : y.call(document)) == null ? void 0 : b.toString()) != null ? v : "";
    }
    function g(y) {
      return y === "granted" || y === "prompt";
    }
    return {
      isSupported: c,
      text: u,
      copied: h,
      copy: m
    };
  };
  oP = function(n) {
    const e = O3(), t = zR(() => null, () => e.proxy.$el);
    return mp(t.trigger), v2(t.trigger), t;
  };
  aP = function(n = {}) {
    const { window: e = ti } = n, t = pe(1), i = n8(() => `(resolution: ${t.value}dppx)`, n);
    let r = a2;
    return e && (r = Zv(i, () => t.value = e.devicePixelRatio)), {
      pixelRatio: va(t),
      stop: r
    };
  };
  lP = function(n, e, t = {}) {
    const { window: i = ti, ...r } = t;
    let s;
    const o = Sa(() => i && "ResizeObserver" in i), a = () => {
      s && (s.disconnect(), s = void 0);
    }, l = qe(() => {
      const h = $t(n);
      return Array.isArray(h) ? h.map((d) => P2(d)) : [
        P2(h)
      ];
    }), c = je(l, (h) => {
      if (a(), o.value && i) {
        s = new ResizeObserver(e);
        for (const d of h) d && s.observe(d, r);
      }
    }, {
      immediate: true,
      flush: "post"
    }), u = () => {
      a(), c();
    };
    return xa(u), {
      isSupported: o,
      stop: u
    };
  };
  nr = function(n, e = {}) {
    const { reset: t = true, windowResize: i = true, windowScroll: r = true, immediate: s = true, updateTiming: o = "sync" } = e, a = pe(0), l = pe(0), c = pe(0), u = pe(0), h = pe(0), d = pe(0), f = pe(0), m = pe(0);
    function _() {
      const g = P2(n);
      if (!g) {
        t && (a.value = 0, l.value = 0, c.value = 0, u.value = 0, h.value = 0, d.value = 0, f.value = 0, m.value = 0);
        return;
      }
      const y = g.getBoundingClientRect();
      a.value = y.height, l.value = y.bottom, c.value = y.left, u.value = y.right, h.value = y.top, d.value = y.width, f.value = y.x, m.value = y.y;
    }
    function p() {
      o === "sync" ? _() : o === "next-frame" && requestAnimationFrame(() => _());
    }
    return lP(n, p), je(() => P2(n), (g) => !g && p()), nP(n, p, {
      attributeFilter: [
        "style",
        "class"
      ]
    }), r && un("scroll", p, {
      capture: true,
      passive: true
    }), i && un("resize", p, {
      passive: true
    }), Qv(() => {
      s && p();
    }), {
      height: a,
      bottom: l,
      left: c,
      right: u,
      top: h,
      width: d,
      x: f,
      y: m,
      update: p
    };
  };
  function cP(n, e, t = {}) {
    const { root: i, rootMargin: r = "0px", threshold: s = 0, window: o = ti, immediate: a = true } = t, l = Sa(() => o && "IntersectionObserver" in o), c = qe(() => {
      const m = $t(n);
      return v0(m).map(P2).filter(Yv);
    });
    let u = a2;
    const h = pe(a), d = l.value ? je(() => [
      c.value,
      P2(i),
      h.value
    ], ([m, _]) => {
      if (u(), !h.value || !m.length) return;
      const p = new IntersectionObserver(e, {
        root: P2(_),
        rootMargin: r,
        threshold: s
      });
      m.forEach((g) => g && p.observe(g)), u = () => {
        p.disconnect(), u = a2;
      };
    }, {
      immediate: a,
      flush: "post"
    }) : a2, f = () => {
      u(), d(), h.value = false;
    };
    return xa(f), {
      isSupported: l,
      isActive: h,
      pause() {
        u(), h.value = false;
      },
      resume() {
        h.value = true;
      },
      stop: f
    };
  }
  PV = function(n, e = {}) {
    const { window: t = ti, scrollTarget: i, threshold: r = 0, rootMargin: s, once: o = false } = e, a = pe(false), { stop: l } = cP(n, (c) => {
      let u = a.value, h = 0;
      for (const d of c) d.time >= h && (h = d.time, u = d.isIntersecting);
      a.value = u, o && e8(a, () => {
        l();
      });
    }, {
      root: i,
      window: t,
      threshold: r,
      rootMargin: $t(s)
    });
    return a;
  };
  LV = function(n) {
    var e;
    const t = pe(0);
    if (typeof performance > "u") return t;
    const i = (e = void 0) != null ? e : 10;
    let r = performance.now(), s = 0;
    return iP(() => {
      if (s += 1, s >= i) {
        const o = performance.now(), a = o - r;
        t.value = Math.round(1e3 / (a / s)), r = o, s = 0;
      }
    }), t;
  };
  const uP = {
    ctrl: "control",
    command: "meta",
    cmd: "meta",
    option: "alt",
    up: "arrowup",
    down: "arrowdown",
    left: "arrowleft",
    right: "arrowright"
  };
  IV = function(n = {}) {
    const { reactive: e = false, target: t = ti, aliasMap: i = uP, passive: r = true, onEventFired: s = a2 } = n, o = k2(/* @__PURE__ */ new Set()), a = {
      toJSON() {
        return {};
      },
      current: o
    }, l = e ? k2(a) : a, c = /* @__PURE__ */ new Set(), u = /* @__PURE__ */ new Set();
    function h(_, p) {
      _ in l && (e ? l[_] = p : l[_].value = p);
    }
    function d() {
      o.clear();
      for (const _ of u) h(_, false);
    }
    function f(_, p) {
      var g, y;
      const b = (g = _.key) == null ? void 0 : g.toLowerCase(), x = [
        (y = _.code) == null ? void 0 : y.toLowerCase(),
        b
      ].filter(Boolean);
      b && (p ? o.add(b) : o.delete(b));
      for (const C of x) u.add(C), h(C, p);
      b === "meta" && !p ? (c.forEach((C) => {
        o.delete(C), h(C, false);
      }), c.clear()) : typeof _.getModifierState == "function" && _.getModifierState("Meta") && p && [
        ...o,
        ...x
      ].forEach((C) => c.add(C));
    }
    un(t, "keydown", (_) => (f(_, true), s(_)), {
      passive: r
    }), un(t, "keyup", (_) => (f(_, false), s(_)), {
      passive: r
    }), un("blur", d, {
      passive: r
    }), un("focus", d, {
      passive: r
    });
    const m = new Proxy(l, {
      get(_, p, g) {
        if (typeof p != "string") return Reflect.get(_, p, g);
        if (p = p.toLowerCase(), p in i && (p = i[p]), !(p in l)) if (/[+_-]/.test(p)) {
          const b = p.split(/[+_-]/g).map((v) => v.trim());
          l[p] = qe(() => b.map((v) => $t(m[v])).every(Boolean));
        } else l[p] = pe(false);
        const y = Reflect.get(_, p, g);
        return e ? $t(y) : y;
      }
    });
    return m;
  };
  function i8(n = "history", e = {}) {
    const { initialValue: t = {}, removeNullishValues: i = true, removeFalsyValues: r = false, write: s = true, writeMode: o = "replace", window: a = ti } = e;
    if (!a) return k2(t);
    const l = k2({});
    function c() {
      if (n === "history") return a.location.search || "";
      if (n === "hash") {
        const b = a.location.hash || "", v = b.indexOf("?");
        return v > 0 ? b.slice(v) : "";
      } else return (a.location.hash || "").replace(/^#/, "");
    }
    function u(b) {
      const v = b.toString();
      if (n === "history") return `${v ? `?${v}` : ""}${a.location.hash || ""}`;
      if (n === "hash-params") return `${a.location.search || ""}${v ? `#${v}` : ""}`;
      const x = a.location.hash || "#", C = x.indexOf("?");
      return C > 0 ? `${a.location.search || ""}${x.slice(0, C)}${v ? `?${v}` : ""}` : `${a.location.search || ""}${x}${v ? `?${v}` : ""}`;
    }
    function h() {
      return new URLSearchParams(c());
    }
    function d(b) {
      const v = new Set(Object.keys(l));
      for (const x of b.keys()) {
        const C = b.getAll(x);
        l[x] = C.length > 1 ? C : b.get(x) || "", v.delete(x);
      }
      Array.from(v).forEach((x) => delete l[x]);
    }
    const { pause: f, resume: m } = ZR(l, () => {
      const b = new URLSearchParams("");
      Object.keys(l).forEach((v) => {
        const x = l[v];
        Array.isArray(x) ? x.forEach((C) => b.append(v, C)) : i && x == null || r && !x ? b.delete(v) : b.set(v, x);
      }), _(b, false);
    }, {
      deep: true
    });
    function _(b, v) {
      f(), v && d(b), o === "replace" ? a.history.replaceState(a.history.state, a.document.title, a.location.pathname + u(b)) : a.history.pushState(a.history.state, a.document.title, a.location.pathname + u(b)), m();
    }
    function p() {
      s && _(h(), true);
    }
    const g = {
      passive: true
    };
    un(a, "popstate", p, g), n !== "history" && un(a, "hashchange", p, g);
    const y = h();
    return y.keys().next().value ? d(y) : Object.assign(l, t), l;
  }
  FV = function(n = {}) {
    const { window: e = ti, initialWidth: t = Number.POSITIVE_INFINITY, initialHeight: i = Number.POSITIVE_INFINITY, listenOrientation: r = true, includeScrollbar: s = true, type: o = "inner" } = n, a = pe(t), l = pe(i), c = () => {
      if (e) if (o === "outer") a.value = e.outerWidth, l.value = e.outerHeight;
      else if (o === "visual" && e.visualViewport) {
        const { width: h, height: d, scale: f } = e.visualViewport;
        a.value = Math.round(h * f), l.value = Math.round(d * f);
      } else s ? (a.value = e.innerWidth, l.value = e.innerHeight) : (a.value = e.document.documentElement.clientWidth, l.value = e.document.documentElement.clientHeight);
    };
    c(), Qv(c);
    const u = {
      passive: true
    };
    if (un("resize", c, u), e && o === "visual" && e.visualViewport && un(e.visualViewport, "resize", c, u), r) {
      const h = n8("(orientation: portrait)");
      je(h, () => c());
    }
    return {
      width: a,
      height: l
    };
  };
  let fP, Tm, hP, r8, dP, c3, _r, Fo, Cm, Am, Dm, pP, os, mP, gP, _P, bP, vP, yP, xP, SP, S4, E4, EP, wP, MP, TP, CP, AP, DP, RP, PP, w4, M4, T4, ta, C4, A4, D4, R4, s8, LP, IP, UP, Rm, zP, o8, na, ia, L4, Af, ra, Bi, Iu, t2, a8, Ka, Wc, Hi, qi, l8, c8, J0, Up, wr, Bp, Hp, Q0, u8, f8, h8, Z0, el, zp, Df, d8, Vp, Gp, jc, Xc, $c, qc, I4, F4, O4, k4, N4, U4, B4, H4, z4, V4, G4, W4, j4, X4, $4, q4, Y4, K4, J4, Q4, Z4, Yc, e9, t9, p8, n9, i9, r9, tl, nl, Sh, Pm, Lm, Im, VP, GP, m8, s9, WP, jP, Rf, XP, rr, Fu, nt, Gs, Fm, $P, qP, YP, g8, KP, JP, QP, ZP, o9, Om, zi, Ou;
  Np = "177";
  OV = {
    ROTATE: 0,
    DOLLY: 1,
    PAN: 2
  };
  kV = {
    ROTATE: 0,
    PAN: 1,
    DOLLY_PAN: 2,
    DOLLY_ROTATE: 3
  };
  fP = 0;
  Tm = 1;
  hP = 2;
  r8 = 1;
  dP = 2;
  c3 = 3;
  D3 = 0;
  h2 = 1;
  Oi = 2;
  _r = 0;
  Fo = 1;
  Cm = 2;
  Am = 3;
  Dm = 4;
  pP = 5;
  os = 100;
  mP = 101;
  gP = 102;
  _P = 103;
  bP = 104;
  vP = 200;
  yP = 201;
  xP = 202;
  SP = 203;
  S4 = 204;
  E4 = 205;
  EP = 206;
  wP = 207;
  MP = 208;
  TP = 209;
  CP = 210;
  AP = 211;
  DP = 212;
  RP = 213;
  PP = 214;
  w4 = 0;
  M4 = 1;
  T4 = 2;
  ta = 3;
  C4 = 4;
  A4 = 5;
  D4 = 6;
  R4 = 7;
  s8 = 0;
  LP = 1;
  IP = 2;
  br = 0;
  FP = 1;
  OP = 2;
  kP = 3;
  NP = 4;
  UP = 5;
  BP = 6;
  HP = 7;
  Rm = "attached";
  zP = "detached";
  o8 = 300;
  na = 301;
  ia = 302;
  P4 = 303;
  L4 = 304;
  Af = 306;
  ra = 1e3;
  Bi = 1001;
  Iu = 1002;
  t2 = 1003;
  a8 = 1004;
  Ka = 1005;
  Pn = 1006;
  Wc = 1007;
  Hi = 1008;
  qi = 1009;
  l8 = 1010;
  c8 = 1011;
  J0 = 1012;
  Up = 1013;
  wr = 1014;
  L2 = 1015;
  Tl = 1016;
  Bp = 1017;
  Hp = 1018;
  Q0 = 1020;
  u8 = 35902;
  f8 = 1021;
  h8 = 1022;
  f2 = 1023;
  Z0 = 1026;
  el = 1027;
  zp = 1028;
  Df = 1029;
  d8 = 1030;
  Vp = 1031;
  Gp = 1033;
  jc = 33776;
  Xc = 33777;
  $c = 33778;
  qc = 33779;
  I4 = 35840;
  F4 = 35841;
  O4 = 35842;
  k4 = 35843;
  N4 = 36196;
  U4 = 37492;
  B4 = 37496;
  H4 = 37808;
  z4 = 37809;
  V4 = 37810;
  G4 = 37811;
  W4 = 37812;
  j4 = 37813;
  X4 = 37814;
  $4 = 37815;
  q4 = 37816;
  Y4 = 37817;
  K4 = 37818;
  J4 = 37819;
  Q4 = 37820;
  Z4 = 37821;
  Yc = 36492;
  e9 = 36494;
  t9 = 36495;
  p8 = 36283;
  n9 = 36284;
  i9 = 36285;
  r9 = 36286;
  tl = 2300;
  nl = 2301;
  Sh = 2302;
  Pm = 2400;
  Lm = 2401;
  Im = 2402;
  VP = 2500;
  GP = 0;
  m8 = 1;
  s9 = 2;
  WP = 3200;
  jP = 3201;
  Rf = 0;
  XP = 1;
  rr = "";
  Wt = "srgb";
  kn = "srgb-linear";
  Fu = "linear";
  nt = "srgb";
  Gs = 7680;
  Fm = 519;
  $P = 512;
  qP = 513;
  YP = 514;
  g8 = 515;
  KP = 516;
  JP = 517;
  QP = 518;
  ZP = 519;
  o9 = 35044;
  Om = "300 es";
  zi = 2e3;
  Ou = 2001;
  let Us = class {
    addEventListener(e, t) {
      this._listeners === void 0 && (this._listeners = {});
      const i = this._listeners;
      i[e] === void 0 && (i[e] = []), i[e].indexOf(t) === -1 && i[e].push(t);
    }
    hasEventListener(e, t) {
      const i = this._listeners;
      return i === void 0 ? false : i[e] !== void 0 && i[e].indexOf(t) !== -1;
    }
    removeEventListener(e, t) {
      const i = this._listeners;
      if (i === void 0) return;
      const r = i[e];
      if (r !== void 0) {
        const s = r.indexOf(t);
        s !== -1 && r.splice(s, 1);
      }
    }
    dispatchEvent(e) {
      const t = this._listeners;
      if (t === void 0) return;
      const i = t[e.type];
      if (i !== void 0) {
        e.target = this;
        const r = i.slice(0);
        for (let s = 0, o = r.length; s < o; s++) r[s].call(this, e);
        e.target = null;
      }
    }
  };
  const xn = [
    "00",
    "01",
    "02",
    "03",
    "04",
    "05",
    "06",
    "07",
    "08",
    "09",
    "0a",
    "0b",
    "0c",
    "0d",
    "0e",
    "0f",
    "10",
    "11",
    "12",
    "13",
    "14",
    "15",
    "16",
    "17",
    "18",
    "19",
    "1a",
    "1b",
    "1c",
    "1d",
    "1e",
    "1f",
    "20",
    "21",
    "22",
    "23",
    "24",
    "25",
    "26",
    "27",
    "28",
    "29",
    "2a",
    "2b",
    "2c",
    "2d",
    "2e",
    "2f",
    "30",
    "31",
    "32",
    "33",
    "34",
    "35",
    "36",
    "37",
    "38",
    "39",
    "3a",
    "3b",
    "3c",
    "3d",
    "3e",
    "3f",
    "40",
    "41",
    "42",
    "43",
    "44",
    "45",
    "46",
    "47",
    "48",
    "49",
    "4a",
    "4b",
    "4c",
    "4d",
    "4e",
    "4f",
    "50",
    "51",
    "52",
    "53",
    "54",
    "55",
    "56",
    "57",
    "58",
    "59",
    "5a",
    "5b",
    "5c",
    "5d",
    "5e",
    "5f",
    "60",
    "61",
    "62",
    "63",
    "64",
    "65",
    "66",
    "67",
    "68",
    "69",
    "6a",
    "6b",
    "6c",
    "6d",
    "6e",
    "6f",
    "70",
    "71",
    "72",
    "73",
    "74",
    "75",
    "76",
    "77",
    "78",
    "79",
    "7a",
    "7b",
    "7c",
    "7d",
    "7e",
    "7f",
    "80",
    "81",
    "82",
    "83",
    "84",
    "85",
    "86",
    "87",
    "88",
    "89",
    "8a",
    "8b",
    "8c",
    "8d",
    "8e",
    "8f",
    "90",
    "91",
    "92",
    "93",
    "94",
    "95",
    "96",
    "97",
    "98",
    "99",
    "9a",
    "9b",
    "9c",
    "9d",
    "9e",
    "9f",
    "a0",
    "a1",
    "a2",
    "a3",
    "a4",
    "a5",
    "a6",
    "a7",
    "a8",
    "a9",
    "aa",
    "ab",
    "ac",
    "ad",
    "ae",
    "af",
    "b0",
    "b1",
    "b2",
    "b3",
    "b4",
    "b5",
    "b6",
    "b7",
    "b8",
    "b9",
    "ba",
    "bb",
    "bc",
    "bd",
    "be",
    "bf",
    "c0",
    "c1",
    "c2",
    "c3",
    "c4",
    "c5",
    "c6",
    "c7",
    "c8",
    "c9",
    "ca",
    "cb",
    "cc",
    "cd",
    "ce",
    "cf",
    "d0",
    "d1",
    "d2",
    "d3",
    "d4",
    "d5",
    "d6",
    "d7",
    "d8",
    "d9",
    "da",
    "db",
    "dc",
    "dd",
    "de",
    "df",
    "e0",
    "e1",
    "e2",
    "e3",
    "e4",
    "e5",
    "e6",
    "e7",
    "e8",
    "e9",
    "ea",
    "eb",
    "ec",
    "ed",
    "ee",
    "ef",
    "f0",
    "f1",
    "f2",
    "f3",
    "f4",
    "f5",
    "f6",
    "f7",
    "f8",
    "f9",
    "fa",
    "fb",
    "fc",
    "fd",
    "fe",
    "ff"
  ];
  let km = 1234567;
  const y0 = Math.PI / 180, sa = 180 / Math.PI;
  function gi() {
    const n = Math.random() * 4294967295 | 0, e = Math.random() * 4294967295 | 0, t = Math.random() * 4294967295 | 0, i = Math.random() * 4294967295 | 0;
    return (xn[n & 255] + xn[n >> 8 & 255] + xn[n >> 16 & 255] + xn[n >> 24 & 255] + "-" + xn[e & 255] + xn[e >> 8 & 255] + "-" + xn[e >> 16 & 15 | 64] + xn[e >> 24 & 255] + "-" + xn[t & 63 | 128] + xn[t >> 8 & 255] + "-" + xn[t >> 16 & 255] + xn[t >> 24 & 255] + xn[i & 255] + xn[i >> 8 & 255] + xn[i >> 16 & 255] + xn[i >> 24 & 255]).toLowerCase();
  }
  function Ae(n, e, t) {
    return Math.max(e, Math.min(t, n));
  }
  function Wp(n, e) {
    return (n % e + e) % e;
  }
  function eL(n, e, t, i, r) {
    return i + (n - e) * (r - i) / (t - e);
  }
  function tL(n, e, t) {
    return n !== e ? (t - n) / (e - n) : 0;
  }
  function x0(n, e, t) {
    return (1 - t) * n + t * e;
  }
  function nL(n, e, t, i) {
    return x0(n, e, 1 - Math.exp(-t * i));
  }
  function iL(n, e = 1) {
    return e - Math.abs(Wp(n, e * 2) - e);
  }
  function rL(n, e, t) {
    return n <= e ? 0 : n >= t ? 1 : (n = (n - e) / (t - e), n * n * (3 - 2 * n));
  }
  function sL(n, e, t) {
    return n <= e ? 0 : n >= t ? 1 : (n = (n - e) / (t - e), n * n * n * (n * (n * 6 - 15) + 10));
  }
  function oL(n, e) {
    return n + Math.floor(Math.random() * (e - n + 1));
  }
  function aL(n, e) {
    return n + Math.random() * (e - n);
  }
  function lL(n) {
    return n * (0.5 - Math.random());
  }
  function cL(n) {
    n !== void 0 && (km = n);
    let e = km += 1831565813;
    return e = Math.imul(e ^ e >>> 15, e | 1), e ^= e + Math.imul(e ^ e >>> 7, e | 61), ((e ^ e >>> 14) >>> 0) / 4294967296;
  }
  function uL(n) {
    return n * y0;
  }
  function fL(n) {
    return n * sa;
  }
  function hL(n) {
    return (n & n - 1) === 0 && n !== 0;
  }
  function dL(n) {
    return Math.pow(2, Math.ceil(Math.log(n) / Math.LN2));
  }
  function pL(n) {
    return Math.pow(2, Math.floor(Math.log(n) / Math.LN2));
  }
  function mL(n, e, t, i, r) {
    const s = Math.cos, o = Math.sin, a = s(t / 2), l = o(t / 2), c = s((e + i) / 2), u = o((e + i) / 2), h = s((e - i) / 2), d = o((e - i) / 2), f = s((i - e) / 2), m = o((i - e) / 2);
    switch (r) {
      case "XYX":
        n.set(a * u, l * h, l * d, a * c);
        break;
      case "YZY":
        n.set(l * d, a * u, l * h, a * c);
        break;
      case "ZXZ":
        n.set(l * h, l * d, a * u, a * c);
        break;
      case "XZX":
        n.set(a * u, l * m, l * f, a * c);
        break;
      case "YXY":
        n.set(l * f, a * u, l * m, a * c);
        break;
      case "ZYZ":
        n.set(l * m, l * f, a * u, a * c);
        break;
      default:
        console.warn("THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: " + r);
    }
  }
  function fi(n, e) {
    switch (e.constructor) {
      case Float32Array:
        return n;
      case Uint32Array:
        return n / 4294967295;
      case Uint16Array:
        return n / 65535;
      case Uint8Array:
        return n / 255;
      case Int32Array:
        return Math.max(n / 2147483647, -1);
      case Int16Array:
        return Math.max(n / 32767, -1);
      case Int8Array:
        return Math.max(n / 127, -1);
      default:
        throw new Error("Invalid component type.");
    }
  }
  function et(n, e) {
    switch (e.constructor) {
      case Float32Array:
        return n;
      case Uint32Array:
        return Math.round(n * 4294967295);
      case Uint16Array:
        return Math.round(n * 65535);
      case Uint8Array:
        return Math.round(n * 255);
      case Int32Array:
        return Math.round(n * 2147483647);
      case Int16Array:
        return Math.round(n * 32767);
      case Int8Array:
        return Math.round(n * 127);
      default:
        throw new Error("Invalid component type.");
    }
  }
  gL = {
    DEG2RAD: y0,
    RAD2DEG: sa,
    generateUUID: gi,
    clamp: Ae,
    euclideanModulo: Wp,
    mapLinear: eL,
    inverseLerp: tL,
    lerp: x0,
    damp: nL,
    pingpong: iL,
    smoothstep: rL,
    smootherstep: sL,
    randInt: oL,
    randFloat: aL,
    randFloatSpread: lL,
    seededRandom: cL,
    degToRad: uL,
    radToDeg: fL,
    isPowerOfTwo: hL,
    ceilPowerOfTwo: dL,
    floorPowerOfTwo: pL,
    setQuaternionFromProperEuler: mL,
    normalize: et,
    denormalize: fi
  };
  Ue = class {
    constructor(e = 0, t = 0) {
      Ue.prototype.isVector2 = true, this.x = e, this.y = t;
    }
    get width() {
      return this.x;
    }
    set width(e) {
      this.x = e;
    }
    get height() {
      return this.y;
    }
    set height(e) {
      this.y = e;
    }
    set(e, t) {
      return this.x = e, this.y = t, this;
    }
    setScalar(e) {
      return this.x = e, this.y = e, this;
    }
    setX(e) {
      return this.x = e, this;
    }
    setY(e) {
      return this.y = e, this;
    }
    setComponent(e, t) {
      switch (e) {
        case 0:
          this.x = t;
          break;
        case 1:
          this.y = t;
          break;
        default:
          throw new Error("index is out of range: " + e);
      }
      return this;
    }
    getComponent(e) {
      switch (e) {
        case 0:
          return this.x;
        case 1:
          return this.y;
        default:
          throw new Error("index is out of range: " + e);
      }
    }
    clone() {
      return new this.constructor(this.x, this.y);
    }
    copy(e) {
      return this.x = e.x, this.y = e.y, this;
    }
    add(e) {
      return this.x += e.x, this.y += e.y, this;
    }
    addScalar(e) {
      return this.x += e, this.y += e, this;
    }
    addVectors(e, t) {
      return this.x = e.x + t.x, this.y = e.y + t.y, this;
    }
    addScaledVector(e, t) {
      return this.x += e.x * t, this.y += e.y * t, this;
    }
    sub(e) {
      return this.x -= e.x, this.y -= e.y, this;
    }
    subScalar(e) {
      return this.x -= e, this.y -= e, this;
    }
    subVectors(e, t) {
      return this.x = e.x - t.x, this.y = e.y - t.y, this;
    }
    multiply(e) {
      return this.x *= e.x, this.y *= e.y, this;
    }
    multiplyScalar(e) {
      return this.x *= e, this.y *= e, this;
    }
    divide(e) {
      return this.x /= e.x, this.y /= e.y, this;
    }
    divideScalar(e) {
      return this.multiplyScalar(1 / e);
    }
    applyMatrix3(e) {
      const t = this.x, i = this.y, r = e.elements;
      return this.x = r[0] * t + r[3] * i + r[6], this.y = r[1] * t + r[4] * i + r[7], this;
    }
    min(e) {
      return this.x = Math.min(this.x, e.x), this.y = Math.min(this.y, e.y), this;
    }
    max(e) {
      return this.x = Math.max(this.x, e.x), this.y = Math.max(this.y, e.y), this;
    }
    clamp(e, t) {
      return this.x = Ae(this.x, e.x, t.x), this.y = Ae(this.y, e.y, t.y), this;
    }
    clampScalar(e, t) {
      return this.x = Ae(this.x, e, t), this.y = Ae(this.y, e, t), this;
    }
    clampLength(e, t) {
      const i = this.length();
      return this.divideScalar(i || 1).multiplyScalar(Ae(i, e, t));
    }
    floor() {
      return this.x = Math.floor(this.x), this.y = Math.floor(this.y), this;
    }
    ceil() {
      return this.x = Math.ceil(this.x), this.y = Math.ceil(this.y), this;
    }
    round() {
      return this.x = Math.round(this.x), this.y = Math.round(this.y), this;
    }
    roundToZero() {
      return this.x = Math.trunc(this.x), this.y = Math.trunc(this.y), this;
    }
    negate() {
      return this.x = -this.x, this.y = -this.y, this;
    }
    dot(e) {
      return this.x * e.x + this.y * e.y;
    }
    cross(e) {
      return this.x * e.y - this.y * e.x;
    }
    lengthSq() {
      return this.x * this.x + this.y * this.y;
    }
    length() {
      return Math.sqrt(this.x * this.x + this.y * this.y);
    }
    manhattanLength() {
      return Math.abs(this.x) + Math.abs(this.y);
    }
    normalize() {
      return this.divideScalar(this.length() || 1);
    }
    angle() {
      return Math.atan2(-this.y, -this.x) + Math.PI;
    }
    angleTo(e) {
      const t = Math.sqrt(this.lengthSq() * e.lengthSq());
      if (t === 0) return Math.PI / 2;
      const i = this.dot(e) / t;
      return Math.acos(Ae(i, -1, 1));
    }
    distanceTo(e) {
      return Math.sqrt(this.distanceToSquared(e));
    }
    distanceToSquared(e) {
      const t = this.x - e.x, i = this.y - e.y;
      return t * t + i * i;
    }
    manhattanDistanceTo(e) {
      return Math.abs(this.x - e.x) + Math.abs(this.y - e.y);
    }
    setLength(e) {
      return this.normalize().multiplyScalar(e);
    }
    lerp(e, t) {
      return this.x += (e.x - this.x) * t, this.y += (e.y - this.y) * t, this;
    }
    lerpVectors(e, t, i) {
      return this.x = e.x + (t.x - e.x) * i, this.y = e.y + (t.y - e.y) * i, this;
    }
    equals(e) {
      return e.x === this.x && e.y === this.y;
    }
    fromArray(e, t = 0) {
      return this.x = e[t], this.y = e[t + 1], this;
    }
    toArray(e = [], t = 0) {
      return e[t] = this.x, e[t + 1] = this.y, e;
    }
    fromBufferAttribute(e, t) {
      return this.x = e.getX(t), this.y = e.getY(t), this;
    }
    rotateAround(e, t) {
      const i = Math.cos(t), r = Math.sin(t), s = this.x - e.x, o = this.y - e.y;
      return this.x = s * i - o * r + e.x, this.y = s * r + o * i + e.y, this;
    }
    random() {
      return this.x = Math.random(), this.y = Math.random(), this;
    }
    *[Symbol.iterator]() {
      yield this.x, yield this.y;
    }
  };
  Pr = class {
    constructor(e = 0, t = 0, i = 0, r = 1) {
      this.isQuaternion = true, this._x = e, this._y = t, this._z = i, this._w = r;
    }
    static slerpFlat(e, t, i, r, s, o, a) {
      let l = i[r + 0], c = i[r + 1], u = i[r + 2], h = i[r + 3];
      const d = s[o + 0], f = s[o + 1], m = s[o + 2], _ = s[o + 3];
      if (a === 0) {
        e[t + 0] = l, e[t + 1] = c, e[t + 2] = u, e[t + 3] = h;
        return;
      }
      if (a === 1) {
        e[t + 0] = d, e[t + 1] = f, e[t + 2] = m, e[t + 3] = _;
        return;
      }
      if (h !== _ || l !== d || c !== f || u !== m) {
        let p = 1 - a;
        const g = l * d + c * f + u * m + h * _, y = g >= 0 ? 1 : -1, b = 1 - g * g;
        if (b > Number.EPSILON) {
          const x = Math.sqrt(b), C = Math.atan2(x, g * y);
          p = Math.sin(p * C) / x, a = Math.sin(a * C) / x;
        }
        const v = a * y;
        if (l = l * p + d * v, c = c * p + f * v, u = u * p + m * v, h = h * p + _ * v, p === 1 - a) {
          const x = 1 / Math.sqrt(l * l + c * c + u * u + h * h);
          l *= x, c *= x, u *= x, h *= x;
        }
      }
      e[t] = l, e[t + 1] = c, e[t + 2] = u, e[t + 3] = h;
    }
    static multiplyQuaternionsFlat(e, t, i, r, s, o) {
      const a = i[r], l = i[r + 1], c = i[r + 2], u = i[r + 3], h = s[o], d = s[o + 1], f = s[o + 2], m = s[o + 3];
      return e[t] = a * m + u * h + l * f - c * d, e[t + 1] = l * m + u * d + c * h - a * f, e[t + 2] = c * m + u * f + a * d - l * h, e[t + 3] = u * m - a * h - l * d - c * f, e;
    }
    get x() {
      return this._x;
    }
    set x(e) {
      this._x = e, this._onChangeCallback();
    }
    get y() {
      return this._y;
    }
    set y(e) {
      this._y = e, this._onChangeCallback();
    }
    get z() {
      return this._z;
    }
    set z(e) {
      this._z = e, this._onChangeCallback();
    }
    get w() {
      return this._w;
    }
    set w(e) {
      this._w = e, this._onChangeCallback();
    }
    set(e, t, i, r) {
      return this._x = e, this._y = t, this._z = i, this._w = r, this._onChangeCallback(), this;
    }
    clone() {
      return new this.constructor(this._x, this._y, this._z, this._w);
    }
    copy(e) {
      return this._x = e.x, this._y = e.y, this._z = e.z, this._w = e.w, this._onChangeCallback(), this;
    }
    setFromEuler(e, t = true) {
      const i = e._x, r = e._y, s = e._z, o = e._order, a = Math.cos, l = Math.sin, c = a(i / 2), u = a(r / 2), h = a(s / 2), d = l(i / 2), f = l(r / 2), m = l(s / 2);
      switch (o) {
        case "XYZ":
          this._x = d * u * h + c * f * m, this._y = c * f * h - d * u * m, this._z = c * u * m + d * f * h, this._w = c * u * h - d * f * m;
          break;
        case "YXZ":
          this._x = d * u * h + c * f * m, this._y = c * f * h - d * u * m, this._z = c * u * m - d * f * h, this._w = c * u * h + d * f * m;
          break;
        case "ZXY":
          this._x = d * u * h - c * f * m, this._y = c * f * h + d * u * m, this._z = c * u * m + d * f * h, this._w = c * u * h - d * f * m;
          break;
        case "ZYX":
          this._x = d * u * h - c * f * m, this._y = c * f * h + d * u * m, this._z = c * u * m - d * f * h, this._w = c * u * h + d * f * m;
          break;
        case "YZX":
          this._x = d * u * h + c * f * m, this._y = c * f * h + d * u * m, this._z = c * u * m - d * f * h, this._w = c * u * h - d * f * m;
          break;
        case "XZY":
          this._x = d * u * h - c * f * m, this._y = c * f * h - d * u * m, this._z = c * u * m + d * f * h, this._w = c * u * h + d * f * m;
          break;
        default:
          console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: " + o);
      }
      return t === true && this._onChangeCallback(), this;
    }
    setFromAxisAngle(e, t) {
      const i = t / 2, r = Math.sin(i);
      return this._x = e.x * r, this._y = e.y * r, this._z = e.z * r, this._w = Math.cos(i), this._onChangeCallback(), this;
    }
    setFromRotationMatrix(e) {
      const t = e.elements, i = t[0], r = t[4], s = t[8], o = t[1], a = t[5], l = t[9], c = t[2], u = t[6], h = t[10], d = i + a + h;
      if (d > 0) {
        const f = 0.5 / Math.sqrt(d + 1);
        this._w = 0.25 / f, this._x = (u - l) * f, this._y = (s - c) * f, this._z = (o - r) * f;
      } else if (i > a && i > h) {
        const f = 2 * Math.sqrt(1 + i - a - h);
        this._w = (u - l) / f, this._x = 0.25 * f, this._y = (r + o) / f, this._z = (s + c) / f;
      } else if (a > h) {
        const f = 2 * Math.sqrt(1 + a - i - h);
        this._w = (s - c) / f, this._x = (r + o) / f, this._y = 0.25 * f, this._z = (l + u) / f;
      } else {
        const f = 2 * Math.sqrt(1 + h - i - a);
        this._w = (o - r) / f, this._x = (s + c) / f, this._y = (l + u) / f, this._z = 0.25 * f;
      }
      return this._onChangeCallback(), this;
    }
    setFromUnitVectors(e, t) {
      let i = e.dot(t) + 1;
      return i < Number.EPSILON ? (i = 0, Math.abs(e.x) > Math.abs(e.z) ? (this._x = -e.y, this._y = e.x, this._z = 0, this._w = i) : (this._x = 0, this._y = -e.z, this._z = e.y, this._w = i)) : (this._x = e.y * t.z - e.z * t.y, this._y = e.z * t.x - e.x * t.z, this._z = e.x * t.y - e.y * t.x, this._w = i), this.normalize();
    }
    angleTo(e) {
      return 2 * Math.acos(Math.abs(Ae(this.dot(e), -1, 1)));
    }
    rotateTowards(e, t) {
      const i = this.angleTo(e);
      if (i === 0) return this;
      const r = Math.min(1, t / i);
      return this.slerp(e, r), this;
    }
    identity() {
      return this.set(0, 0, 0, 1);
    }
    invert() {
      return this.conjugate();
    }
    conjugate() {
      return this._x *= -1, this._y *= -1, this._z *= -1, this._onChangeCallback(), this;
    }
    dot(e) {
      return this._x * e._x + this._y * e._y + this._z * e._z + this._w * e._w;
    }
    lengthSq() {
      return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;
    }
    length() {
      return Math.sqrt(this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w);
    }
    normalize() {
      let e = this.length();
      return e === 0 ? (this._x = 0, this._y = 0, this._z = 0, this._w = 1) : (e = 1 / e, this._x = this._x * e, this._y = this._y * e, this._z = this._z * e, this._w = this._w * e), this._onChangeCallback(), this;
    }
    multiply(e) {
      return this.multiplyQuaternions(this, e);
    }
    premultiply(e) {
      return this.multiplyQuaternions(e, this);
    }
    multiplyQuaternions(e, t) {
      const i = e._x, r = e._y, s = e._z, o = e._w, a = t._x, l = t._y, c = t._z, u = t._w;
      return this._x = i * u + o * a + r * c - s * l, this._y = r * u + o * l + s * a - i * c, this._z = s * u + o * c + i * l - r * a, this._w = o * u - i * a - r * l - s * c, this._onChangeCallback(), this;
    }
    slerp(e, t) {
      if (t === 0) return this;
      if (t === 1) return this.copy(e);
      const i = this._x, r = this._y, s = this._z, o = this._w;
      let a = o * e._w + i * e._x + r * e._y + s * e._z;
      if (a < 0 ? (this._w = -e._w, this._x = -e._x, this._y = -e._y, this._z = -e._z, a = -a) : this.copy(e), a >= 1) return this._w = o, this._x = i, this._y = r, this._z = s, this;
      const l = 1 - a * a;
      if (l <= Number.EPSILON) {
        const f = 1 - t;
        return this._w = f * o + t * this._w, this._x = f * i + t * this._x, this._y = f * r + t * this._y, this._z = f * s + t * this._z, this.normalize(), this;
      }
      const c = Math.sqrt(l), u = Math.atan2(c, a), h = Math.sin((1 - t) * u) / c, d = Math.sin(t * u) / c;
      return this._w = o * h + this._w * d, this._x = i * h + this._x * d, this._y = r * h + this._y * d, this._z = s * h + this._z * d, this._onChangeCallback(), this;
    }
    slerpQuaternions(e, t, i) {
      return this.copy(e).slerp(t, i);
    }
    random() {
      const e = 2 * Math.PI * Math.random(), t = 2 * Math.PI * Math.random(), i = Math.random(), r = Math.sqrt(1 - i), s = Math.sqrt(i);
      return this.set(r * Math.sin(e), r * Math.cos(e), s * Math.sin(t), s * Math.cos(t));
    }
    equals(e) {
      return e._x === this._x && e._y === this._y && e._z === this._z && e._w === this._w;
    }
    fromArray(e, t = 0) {
      return this._x = e[t], this._y = e[t + 1], this._z = e[t + 2], this._w = e[t + 3], this._onChangeCallback(), this;
    }
    toArray(e = [], t = 0) {
      return e[t] = this._x, e[t + 1] = this._y, e[t + 2] = this._z, e[t + 3] = this._w, e;
    }
    fromBufferAttribute(e, t) {
      return this._x = e.getX(t), this._y = e.getY(t), this._z = e.getZ(t), this._w = e.getW(t), this._onChangeCallback(), this;
    }
    toJSON() {
      return this.toArray();
    }
    _onChange(e) {
      return this._onChangeCallback = e, this;
    }
    _onChangeCallback() {
    }
    *[Symbol.iterator]() {
      yield this._x, yield this._y, yield this._z, yield this._w;
    }
  };
  u1 = class {
    constructor(e = 0, t = 0, i = 0) {
      u1.prototype.isVector3 = true, this.x = e, this.y = t, this.z = i;
    }
    set(e, t, i) {
      return i === void 0 && (i = this.z), this.x = e, this.y = t, this.z = i, this;
    }
    setScalar(e) {
      return this.x = e, this.y = e, this.z = e, this;
    }
    setX(e) {
      return this.x = e, this;
    }
    setY(e) {
      return this.y = e, this;
    }
    setZ(e) {
      return this.z = e, this;
    }
    setComponent(e, t) {
      switch (e) {
        case 0:
          this.x = t;
          break;
        case 1:
          this.y = t;
          break;
        case 2:
          this.z = t;
          break;
        default:
          throw new Error("index is out of range: " + e);
      }
      return this;
    }
    getComponent(e) {
      switch (e) {
        case 0:
          return this.x;
        case 1:
          return this.y;
        case 2:
          return this.z;
        default:
          throw new Error("index is out of range: " + e);
      }
    }
    clone() {
      return new this.constructor(this.x, this.y, this.z);
    }
    copy(e) {
      return this.x = e.x, this.y = e.y, this.z = e.z, this;
    }
    add(e) {
      return this.x += e.x, this.y += e.y, this.z += e.z, this;
    }
    addScalar(e) {
      return this.x += e, this.y += e, this.z += e, this;
    }
    addVectors(e, t) {
      return this.x = e.x + t.x, this.y = e.y + t.y, this.z = e.z + t.z, this;
    }
    addScaledVector(e, t) {
      return this.x += e.x * t, this.y += e.y * t, this.z += e.z * t, this;
    }
    sub(e) {
      return this.x -= e.x, this.y -= e.y, this.z -= e.z, this;
    }
    subScalar(e) {
      return this.x -= e, this.y -= e, this.z -= e, this;
    }
    subVectors(e, t) {
      return this.x = e.x - t.x, this.y = e.y - t.y, this.z = e.z - t.z, this;
    }
    multiply(e) {
      return this.x *= e.x, this.y *= e.y, this.z *= e.z, this;
    }
    multiplyScalar(e) {
      return this.x *= e, this.y *= e, this.z *= e, this;
    }
    multiplyVectors(e, t) {
      return this.x = e.x * t.x, this.y = e.y * t.y, this.z = e.z * t.z, this;
    }
    applyEuler(e) {
      return this.applyQuaternion(Nm.setFromEuler(e));
    }
    applyAxisAngle(e, t) {
      return this.applyQuaternion(Nm.setFromAxisAngle(e, t));
    }
    applyMatrix3(e) {
      const t = this.x, i = this.y, r = this.z, s = e.elements;
      return this.x = s[0] * t + s[3] * i + s[6] * r, this.y = s[1] * t + s[4] * i + s[7] * r, this.z = s[2] * t + s[5] * i + s[8] * r, this;
    }
    applyNormalMatrix(e) {
      return this.applyMatrix3(e).normalize();
    }
    applyMatrix4(e) {
      const t = this.x, i = this.y, r = this.z, s = e.elements, o = 1 / (s[3] * t + s[7] * i + s[11] * r + s[15]);
      return this.x = (s[0] * t + s[4] * i + s[8] * r + s[12]) * o, this.y = (s[1] * t + s[5] * i + s[9] * r + s[13]) * o, this.z = (s[2] * t + s[6] * i + s[10] * r + s[14]) * o, this;
    }
    applyQuaternion(e) {
      const t = this.x, i = this.y, r = this.z, s = e.x, o = e.y, a = e.z, l = e.w, c = 2 * (o * r - a * i), u = 2 * (a * t - s * r), h = 2 * (s * i - o * t);
      return this.x = t + l * c + o * h - a * u, this.y = i + l * u + a * c - s * h, this.z = r + l * h + s * u - o * c, this;
    }
    project(e) {
      return this.applyMatrix4(e.matrixWorldInverse).applyMatrix4(e.projectionMatrix);
    }
    unproject(e) {
      return this.applyMatrix4(e.projectionMatrixInverse).applyMatrix4(e.matrixWorld);
    }
    transformDirection(e) {
      const t = this.x, i = this.y, r = this.z, s = e.elements;
      return this.x = s[0] * t + s[4] * i + s[8] * r, this.y = s[1] * t + s[5] * i + s[9] * r, this.z = s[2] * t + s[6] * i + s[10] * r, this.normalize();
    }
    divide(e) {
      return this.x /= e.x, this.y /= e.y, this.z /= e.z, this;
    }
    divideScalar(e) {
      return this.multiplyScalar(1 / e);
    }
    min(e) {
      return this.x = Math.min(this.x, e.x), this.y = Math.min(this.y, e.y), this.z = Math.min(this.z, e.z), this;
    }
    max(e) {
      return this.x = Math.max(this.x, e.x), this.y = Math.max(this.y, e.y), this.z = Math.max(this.z, e.z), this;
    }
    clamp(e, t) {
      return this.x = Ae(this.x, e.x, t.x), this.y = Ae(this.y, e.y, t.y), this.z = Ae(this.z, e.z, t.z), this;
    }
    clampScalar(e, t) {
      return this.x = Ae(this.x, e, t), this.y = Ae(this.y, e, t), this.z = Ae(this.z, e, t), this;
    }
    clampLength(e, t) {
      const i = this.length();
      return this.divideScalar(i || 1).multiplyScalar(Ae(i, e, t));
    }
    floor() {
      return this.x = Math.floor(this.x), this.y = Math.floor(this.y), this.z = Math.floor(this.z), this;
    }
    ceil() {
      return this.x = Math.ceil(this.x), this.y = Math.ceil(this.y), this.z = Math.ceil(this.z), this;
    }
    round() {
      return this.x = Math.round(this.x), this.y = Math.round(this.y), this.z = Math.round(this.z), this;
    }
    roundToZero() {
      return this.x = Math.trunc(this.x), this.y = Math.trunc(this.y), this.z = Math.trunc(this.z), this;
    }
    negate() {
      return this.x = -this.x, this.y = -this.y, this.z = -this.z, this;
    }
    dot(e) {
      return this.x * e.x + this.y * e.y + this.z * e.z;
    }
    lengthSq() {
      return this.x * this.x + this.y * this.y + this.z * this.z;
    }
    length() {
      return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
    }
    manhattanLength() {
      return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z);
    }
    normalize() {
      return this.divideScalar(this.length() || 1);
    }
    setLength(e) {
      return this.normalize().multiplyScalar(e);
    }
    lerp(e, t) {
      return this.x += (e.x - this.x) * t, this.y += (e.y - this.y) * t, this.z += (e.z - this.z) * t, this;
    }
    lerpVectors(e, t, i) {
      return this.x = e.x + (t.x - e.x) * i, this.y = e.y + (t.y - e.y) * i, this.z = e.z + (t.z - e.z) * i, this;
    }
    cross(e) {
      return this.crossVectors(this, e);
    }
    crossVectors(e, t) {
      const i = e.x, r = e.y, s = e.z, o = t.x, a = t.y, l = t.z;
      return this.x = r * l - s * a, this.y = s * o - i * l, this.z = i * a - r * o, this;
    }
    projectOnVector(e) {
      const t = e.lengthSq();
      if (t === 0) return this.set(0, 0, 0);
      const i = e.dot(this) / t;
      return this.copy(e).multiplyScalar(i);
    }
    projectOnPlane(e) {
      return Eh.copy(this).projectOnVector(e), this.sub(Eh);
    }
    reflect(e) {
      return this.sub(Eh.copy(e).multiplyScalar(2 * this.dot(e)));
    }
    angleTo(e) {
      const t = Math.sqrt(this.lengthSq() * e.lengthSq());
      if (t === 0) return Math.PI / 2;
      const i = this.dot(e) / t;
      return Math.acos(Ae(i, -1, 1));
    }
    distanceTo(e) {
      return Math.sqrt(this.distanceToSquared(e));
    }
    distanceToSquared(e) {
      const t = this.x - e.x, i = this.y - e.y, r = this.z - e.z;
      return t * t + i * i + r * r;
    }
    manhattanDistanceTo(e) {
      return Math.abs(this.x - e.x) + Math.abs(this.y - e.y) + Math.abs(this.z - e.z);
    }
    setFromSpherical(e) {
      return this.setFromSphericalCoords(e.radius, e.phi, e.theta);
    }
    setFromSphericalCoords(e, t, i) {
      const r = Math.sin(t) * e;
      return this.x = r * Math.sin(i), this.y = Math.cos(t) * e, this.z = r * Math.cos(i), this;
    }
    setFromCylindrical(e) {
      return this.setFromCylindricalCoords(e.radius, e.theta, e.y);
    }
    setFromCylindricalCoords(e, t, i) {
      return this.x = e * Math.sin(t), this.y = i, this.z = e * Math.cos(t), this;
    }
    setFromMatrixPosition(e) {
      const t = e.elements;
      return this.x = t[12], this.y = t[13], this.z = t[14], this;
    }
    setFromMatrixScale(e) {
      const t = this.setFromMatrixColumn(e, 0).length(), i = this.setFromMatrixColumn(e, 1).length(), r = this.setFromMatrixColumn(e, 2).length();
      return this.x = t, this.y = i, this.z = r, this;
    }
    setFromMatrixColumn(e, t) {
      return this.fromArray(e.elements, t * 4);
    }
    setFromMatrix3Column(e, t) {
      return this.fromArray(e.elements, t * 3);
    }
    setFromEuler(e) {
      return this.x = e._x, this.y = e._y, this.z = e._z, this;
    }
    setFromColor(e) {
      return this.x = e.r, this.y = e.g, this.z = e.b, this;
    }
    equals(e) {
      return e.x === this.x && e.y === this.y && e.z === this.z;
    }
    fromArray(e, t = 0) {
      return this.x = e[t], this.y = e[t + 1], this.z = e[t + 2], this;
    }
    toArray(e = [], t = 0) {
      return e[t] = this.x, e[t + 1] = this.y, e[t + 2] = this.z, e;
    }
    fromBufferAttribute(e, t) {
      return this.x = e.getX(t), this.y = e.getY(t), this.z = e.getZ(t), this;
    }
    random() {
      return this.x = Math.random(), this.y = Math.random(), this.z = Math.random(), this;
    }
    randomDirection() {
      const e = Math.random() * Math.PI * 2, t = Math.random() * 2 - 1, i = Math.sqrt(1 - t * t);
      return this.x = i * Math.cos(e), this.y = t, this.z = i * Math.sin(e), this;
    }
    *[Symbol.iterator]() {
      yield this.x, yield this.y, yield this.z;
    }
  };
  const Eh = new u1(), Nm = new Pr();
  class Te {
    constructor(e, t, i, r, s, o, a, l, c) {
      Te.prototype.isMatrix3 = true, this.elements = [
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1
      ], e !== void 0 && this.set(e, t, i, r, s, o, a, l, c);
    }
    set(e, t, i, r, s, o, a, l, c) {
      const u = this.elements;
      return u[0] = e, u[1] = r, u[2] = a, u[3] = t, u[4] = s, u[5] = l, u[6] = i, u[7] = o, u[8] = c, this;
    }
    identity() {
      return this.set(1, 0, 0, 0, 1, 0, 0, 0, 1), this;
    }
    copy(e) {
      const t = this.elements, i = e.elements;
      return t[0] = i[0], t[1] = i[1], t[2] = i[2], t[3] = i[3], t[4] = i[4], t[5] = i[5], t[6] = i[6], t[7] = i[7], t[8] = i[8], this;
    }
    extractBasis(e, t, i) {
      return e.setFromMatrix3Column(this, 0), t.setFromMatrix3Column(this, 1), i.setFromMatrix3Column(this, 2), this;
    }
    setFromMatrix4(e) {
      const t = e.elements;
      return this.set(t[0], t[4], t[8], t[1], t[5], t[9], t[2], t[6], t[10]), this;
    }
    multiply(e) {
      return this.multiplyMatrices(this, e);
    }
    premultiply(e) {
      return this.multiplyMatrices(e, this);
    }
    multiplyMatrices(e, t) {
      const i = e.elements, r = t.elements, s = this.elements, o = i[0], a = i[3], l = i[6], c = i[1], u = i[4], h = i[7], d = i[2], f = i[5], m = i[8], _ = r[0], p = r[3], g = r[6], y = r[1], b = r[4], v = r[7], x = r[2], C = r[5], A = r[8];
      return s[0] = o * _ + a * y + l * x, s[3] = o * p + a * b + l * C, s[6] = o * g + a * v + l * A, s[1] = c * _ + u * y + h * x, s[4] = c * p + u * b + h * C, s[7] = c * g + u * v + h * A, s[2] = d * _ + f * y + m * x, s[5] = d * p + f * b + m * C, s[8] = d * g + f * v + m * A, this;
    }
    multiplyScalar(e) {
      const t = this.elements;
      return t[0] *= e, t[3] *= e, t[6] *= e, t[1] *= e, t[4] *= e, t[7] *= e, t[2] *= e, t[5] *= e, t[8] *= e, this;
    }
    determinant() {
      const e = this.elements, t = e[0], i = e[1], r = e[2], s = e[3], o = e[4], a = e[5], l = e[6], c = e[7], u = e[8];
      return t * o * u - t * a * c - i * s * u + i * a * l + r * s * c - r * o * l;
    }
    invert() {
      const e = this.elements, t = e[0], i = e[1], r = e[2], s = e[3], o = e[4], a = e[5], l = e[6], c = e[7], u = e[8], h = u * o - a * c, d = a * l - u * s, f = c * s - o * l, m = t * h + i * d + r * f;
      if (m === 0) return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0);
      const _ = 1 / m;
      return e[0] = h * _, e[1] = (r * c - u * i) * _, e[2] = (a * i - r * o) * _, e[3] = d * _, e[4] = (u * t - r * l) * _, e[5] = (r * s - a * t) * _, e[6] = f * _, e[7] = (i * l - c * t) * _, e[8] = (o * t - i * s) * _, this;
    }
    transpose() {
      let e;
      const t = this.elements;
      return e = t[1], t[1] = t[3], t[3] = e, e = t[2], t[2] = t[6], t[6] = e, e = t[5], t[5] = t[7], t[7] = e, this;
    }
    getNormalMatrix(e) {
      return this.setFromMatrix4(e).invert().transpose();
    }
    transposeIntoArray(e) {
      const t = this.elements;
      return e[0] = t[0], e[1] = t[3], e[2] = t[6], e[3] = t[1], e[4] = t[4], e[5] = t[7], e[6] = t[2], e[7] = t[5], e[8] = t[8], this;
    }
    setUvTransform(e, t, i, r, s, o, a) {
      const l = Math.cos(s), c = Math.sin(s);
      return this.set(i * l, i * c, -i * (l * o + c * a) + o + e, -r * c, r * l, -r * (-c * o + l * a) + a + t, 0, 0, 1), this;
    }
    scale(e, t) {
      return this.premultiply(wh.makeScale(e, t)), this;
    }
    rotate(e) {
      return this.premultiply(wh.makeRotation(-e)), this;
    }
    translate(e, t) {
      return this.premultiply(wh.makeTranslation(e, t)), this;
    }
    makeTranslation(e, t) {
      return e.isVector2 ? this.set(1, 0, e.x, 0, 1, e.y, 0, 0, 1) : this.set(1, 0, e, 0, 1, t, 0, 0, 1), this;
    }
    makeRotation(e) {
      const t = Math.cos(e), i = Math.sin(e);
      return this.set(t, -i, 0, i, t, 0, 0, 0, 1), this;
    }
    makeScale(e, t) {
      return this.set(e, 0, 0, 0, t, 0, 0, 0, 1), this;
    }
    equals(e) {
      const t = this.elements, i = e.elements;
      for (let r = 0; r < 9; r++) if (t[r] !== i[r]) return false;
      return true;
    }
    fromArray(e, t = 0) {
      for (let i = 0; i < 9; i++) this.elements[i] = e[i + t];
      return this;
    }
    toArray(e = [], t = 0) {
      const i = this.elements;
      return e[t] = i[0], e[t + 1] = i[1], e[t + 2] = i[2], e[t + 3] = i[3], e[t + 4] = i[4], e[t + 5] = i[5], e[t + 6] = i[6], e[t + 7] = i[7], e[t + 8] = i[8], e;
    }
    clone() {
      return new this.constructor().fromArray(this.elements);
    }
  }
  const wh = new Te();
  function _8(n) {
    for (let e = n.length - 1; e >= 0; --e) if (n[e] >= 65535) return true;
    return false;
  }
  function il(n) {
    return document.createElementNS("http://www.w3.org/1999/xhtml", n);
  }
  function _L() {
    const n = il("canvas");
    return n.style.display = "block", n;
  }
  const Um = {};
  function Oo(n) {
    n in Um || (Um[n] = true, console.warn(n));
  }
  function bL(n, e, t) {
    return new Promise(function(i, r) {
      function s() {
        switch (n.clientWaitSync(e, n.SYNC_FLUSH_COMMANDS_BIT, 0)) {
          case n.WAIT_FAILED:
            r();
            break;
          case n.TIMEOUT_EXPIRED:
            setTimeout(s, t);
            break;
          default:
            i();
        }
      }
      setTimeout(s, t);
    });
  }
  function vL(n) {
    const e = n.elements;
    e[2] = 0.5 * e[2] + 0.5 * e[3], e[6] = 0.5 * e[6] + 0.5 * e[7], e[10] = 0.5 * e[10] + 0.5 * e[11], e[14] = 0.5 * e[14] + 0.5 * e[15];
  }
  function yL(n) {
    const e = n.elements;
    e[11] === -1 ? (e[10] = -e[10] - 1, e[14] = -e[14]) : (e[10] = -e[10], e[14] = -e[14] + 1);
  }
  const Bm = new Te().set(0.4123908, 0.3575843, 0.1804808, 0.212639, 0.7151687, 0.0721923, 0.0193308, 0.1191948, 0.9505322), Hm = new Te().set(3.2409699, -1.5373832, -0.4986108, -0.9692436, 1.8759675, 0.0415551, 0.0556301, -0.203977, 1.0569715);
  function xL() {
    const n = {
      enabled: true,
      workingColorSpace: kn,
      spaces: {},
      convert: function(r, s, o) {
        return this.enabled === false || s === o || !s || !o || (this.spaces[s].transfer === nt && (r.r = T3(r.r), r.g = T3(r.g), r.b = T3(r.b)), this.spaces[s].primaries !== this.spaces[o].primaries && (r.applyMatrix3(this.spaces[s].toXYZ), r.applyMatrix3(this.spaces[o].fromXYZ)), this.spaces[o].transfer === nt && (r.r = ko(r.r), r.g = ko(r.g), r.b = ko(r.b))), r;
      },
      workingToColorSpace: function(r, s) {
        return this.convert(r, this.workingColorSpace, s);
      },
      colorSpaceToWorking: function(r, s) {
        return this.convert(r, s, this.workingColorSpace);
      },
      getPrimaries: function(r) {
        return this.spaces[r].primaries;
      },
      getTransfer: function(r) {
        return r === rr ? Fu : this.spaces[r].transfer;
      },
      getLuminanceCoefficients: function(r, s = this.workingColorSpace) {
        return r.fromArray(this.spaces[s].luminanceCoefficients);
      },
      define: function(r) {
        Object.assign(this.spaces, r);
      },
      _getMatrix: function(r, s, o) {
        return r.copy(this.spaces[s].toXYZ).multiply(this.spaces[o].fromXYZ);
      },
      _getDrawingBufferColorSpace: function(r) {
        return this.spaces[r].outputColorSpaceConfig.drawingBufferColorSpace;
      },
      _getUnpackColorSpace: function(r = this.workingColorSpace) {
        return this.spaces[r].workingColorSpaceConfig.unpackColorSpace;
      },
      fromWorkingColorSpace: function(r, s) {
        return Oo("THREE.ColorManagement: .fromWorkingColorSpace() has been renamed to .workingToColorSpace()."), n.workingToColorSpace(r, s);
      },
      toWorkingColorSpace: function(r, s) {
        return Oo("THREE.ColorManagement: .toWorkingColorSpace() has been renamed to .colorSpaceToWorking()."), n.colorSpaceToWorking(r, s);
      }
    }, e = [
      0.64,
      0.33,
      0.3,
      0.6,
      0.15,
      0.06
    ], t = [
      0.2126,
      0.7152,
      0.0722
    ], i = [
      0.3127,
      0.329
    ];
    return n.define({
      [kn]: {
        primaries: e,
        whitePoint: i,
        transfer: Fu,
        toXYZ: Bm,
        fromXYZ: Hm,
        luminanceCoefficients: t,
        workingColorSpaceConfig: {
          unpackColorSpace: Wt
        },
        outputColorSpaceConfig: {
          drawingBufferColorSpace: Wt
        }
      },
      [Wt]: {
        primaries: e,
        whitePoint: i,
        transfer: nt,
        toXYZ: Bm,
        fromXYZ: Hm,
        luminanceCoefficients: t,
        outputColorSpaceConfig: {
          drawingBufferColorSpace: Wt
        }
      }
    }), n;
  }
  const ze = xL();
  function T3(n) {
    return n < 0.04045 ? n * 0.0773993808 : Math.pow(n * 0.9478672986 + 0.0521327014, 2.4);
  }
  function ko(n) {
    return n < 31308e-7 ? n * 12.92 : 1.055 * Math.pow(n, 0.41666) - 0.055;
  }
  let Ws;
  class SL {
    static getDataURL(e, t = "image/png") {
      if (/^data:/i.test(e.src) || typeof HTMLCanvasElement > "u") return e.src;
      let i;
      if (e instanceof HTMLCanvasElement) i = e;
      else {
        Ws === void 0 && (Ws = il("canvas")), Ws.width = e.width, Ws.height = e.height;
        const r = Ws.getContext("2d");
        e instanceof ImageData ? r.putImageData(e, 0, 0) : r.drawImage(e, 0, 0, e.width, e.height), i = Ws;
      }
      return i.toDataURL(t);
    }
    static sRGBToLinear(e) {
      if (typeof HTMLImageElement < "u" && e instanceof HTMLImageElement || typeof HTMLCanvasElement < "u" && e instanceof HTMLCanvasElement || typeof ImageBitmap < "u" && e instanceof ImageBitmap) {
        const t = il("canvas");
        t.width = e.width, t.height = e.height;
        const i = t.getContext("2d");
        i.drawImage(e, 0, 0, e.width, e.height);
        const r = i.getImageData(0, 0, e.width, e.height), s = r.data;
        for (let o = 0; o < s.length; o++) s[o] = T3(s[o] / 255) * 255;
        return i.putImageData(r, 0, 0), t;
      } else if (e.data) {
        const t = e.data.slice(0);
        for (let i = 0; i < t.length; i++) t instanceof Uint8Array || t instanceof Uint8ClampedArray ? t[i] = Math.floor(T3(t[i] / 255) * 255) : t[i] = T3(t[i]);
        return {
          data: t,
          width: e.width,
          height: e.height
        };
      } else return console.warn("THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied."), e;
    }
  }
  let EL = 0;
  class jp {
    constructor(e = null) {
      this.isSource = true, Object.defineProperty(this, "id", {
        value: EL++
      }), this.uuid = gi(), this.data = e, this.dataReady = true, this.version = 0;
    }
    getSize(e) {
      const t = this.data;
      return t instanceof HTMLVideoElement ? e.set(t.videoWidth, t.videoHeight) : t !== null ? e.set(t.width, t.height, t.depth || 0) : e.set(0, 0, 0), e;
    }
    set needsUpdate(e) {
      e === true && this.version++;
    }
    toJSON(e) {
      const t = e === void 0 || typeof e == "string";
      if (!t && e.images[this.uuid] !== void 0) return e.images[this.uuid];
      const i = {
        uuid: this.uuid,
        url: ""
      }, r = this.data;
      if (r !== null) {
        let s;
        if (Array.isArray(r)) {
          s = [];
          for (let o = 0, a = r.length; o < a; o++) r[o].isDataTexture ? s.push(Mh(r[o].image)) : s.push(Mh(r[o]));
        } else s = Mh(r);
        i.url = s;
      }
      return t || (e.images[this.uuid] = i), i;
    }
  }
  function Mh(n) {
    return typeof HTMLImageElement < "u" && n instanceof HTMLImageElement || typeof HTMLCanvasElement < "u" && n instanceof HTMLCanvasElement || typeof ImageBitmap < "u" && n instanceof ImageBitmap ? SL.getDataURL(n) : n.data ? {
      data: Array.from(n.data),
      width: n.width,
      height: n.height,
      type: n.data.constructor.name
    } : (console.warn("THREE.Texture: Unable to serialize Texture."), {});
  }
  let wL = 0;
  const Th = new u1();
  class hn extends Us {
    constructor(e = hn.DEFAULT_IMAGE, t = hn.DEFAULT_MAPPING, i = Bi, r = Bi, s = Pn, o = Hi, a = f2, l = qi, c = hn.DEFAULT_ANISOTROPY, u = rr) {
      super(), this.isTexture = true, Object.defineProperty(this, "id", {
        value: wL++
      }), this.uuid = gi(), this.name = "", this.source = new jp(e), this.mipmaps = [], this.mapping = t, this.channel = 0, this.wrapS = i, this.wrapT = r, this.magFilter = s, this.minFilter = o, this.anisotropy = c, this.format = a, this.internalFormat = null, this.type = l, this.offset = new Ue(0, 0), this.repeat = new Ue(1, 1), this.center = new Ue(0, 0), this.rotation = 0, this.matrixAutoUpdate = true, this.matrix = new Te(), this.generateMipmaps = true, this.premultiplyAlpha = false, this.flipY = true, this.unpackAlignment = 4, this.colorSpace = u, this.userData = {}, this.updateRanges = [], this.version = 0, this.onUpdate = null, this.renderTarget = null, this.isRenderTargetTexture = false, this.isArrayTexture = !!(e && e.depth && e.depth > 1), this.pmremVersion = 0;
    }
    get width() {
      return this.source.getSize(Th).x;
    }
    get height() {
      return this.source.getSize(Th).y;
    }
    get depth() {
      return this.source.getSize(Th).z;
    }
    get image() {
      return this.source.data;
    }
    set image(e = null) {
      this.source.data = e;
    }
    updateMatrix() {
      this.matrix.setUvTransform(this.offset.x, this.offset.y, this.repeat.x, this.repeat.y, this.rotation, this.center.x, this.center.y);
    }
    addUpdateRange(e, t) {
      this.updateRanges.push({
        start: e,
        count: t
      });
    }
    clearUpdateRanges() {
      this.updateRanges.length = 0;
    }
    clone() {
      return new this.constructor().copy(this);
    }
    copy(e) {
      return this.name = e.name, this.source = e.source, this.mipmaps = e.mipmaps.slice(0), this.mapping = e.mapping, this.channel = e.channel, this.wrapS = e.wrapS, this.wrapT = e.wrapT, this.magFilter = e.magFilter, this.minFilter = e.minFilter, this.anisotropy = e.anisotropy, this.format = e.format, this.internalFormat = e.internalFormat, this.type = e.type, this.offset.copy(e.offset), this.repeat.copy(e.repeat), this.center.copy(e.center), this.rotation = e.rotation, this.matrixAutoUpdate = e.matrixAutoUpdate, this.matrix.copy(e.matrix), this.generateMipmaps = e.generateMipmaps, this.premultiplyAlpha = e.premultiplyAlpha, this.flipY = e.flipY, this.unpackAlignment = e.unpackAlignment, this.colorSpace = e.colorSpace, this.renderTarget = e.renderTarget, this.isRenderTargetTexture = e.isRenderTargetTexture, this.isArrayTexture = e.isArrayTexture, this.userData = JSON.parse(JSON.stringify(e.userData)), this.needsUpdate = true, this;
    }
    setValues(e) {
      for (const t in e) {
        const i = e[t];
        if (i === void 0) {
          console.warn(`THREE.Texture.setValues(): parameter '${t}' has value of undefined.`);
          continue;
        }
        const r = this[t];
        if (r === void 0) {
          console.warn(`THREE.Texture.setValues(): property '${t}' does not exist.`);
          continue;
        }
        r && i && r.isVector2 && i.isVector2 || r && i && r.isVector3 && i.isVector3 || r && i && r.isMatrix3 && i.isMatrix3 ? r.copy(i) : this[t] = i;
      }
    }
    toJSON(e) {
      const t = e === void 0 || typeof e == "string";
      if (!t && e.textures[this.uuid] !== void 0) return e.textures[this.uuid];
      const i = {
        metadata: {
          version: 4.7,
          type: "Texture",
          generator: "Texture.toJSON"
        },
        uuid: this.uuid,
        name: this.name,
        image: this.source.toJSON(e).uuid,
        mapping: this.mapping,
        channel: this.channel,
        repeat: [
          this.repeat.x,
          this.repeat.y
        ],
        offset: [
          this.offset.x,
          this.offset.y
        ],
        center: [
          this.center.x,
          this.center.y
        ],
        rotation: this.rotation,
        wrap: [
          this.wrapS,
          this.wrapT
        ],
        format: this.format,
        internalFormat: this.internalFormat,
        type: this.type,
        colorSpace: this.colorSpace,
        minFilter: this.minFilter,
        magFilter: this.magFilter,
        anisotropy: this.anisotropy,
        flipY: this.flipY,
        generateMipmaps: this.generateMipmaps,
        premultiplyAlpha: this.premultiplyAlpha,
        unpackAlignment: this.unpackAlignment
      };
      return Object.keys(this.userData).length > 0 && (i.userData = this.userData), t || (e.textures[this.uuid] = i), i;
    }
    dispose() {
      this.dispatchEvent({
        type: "dispose"
      });
    }
    transformUv(e) {
      if (this.mapping !== o8) return e;
      if (e.applyMatrix3(this.matrix), e.x < 0 || e.x > 1) switch (this.wrapS) {
        case ra:
          e.x = e.x - Math.floor(e.x);
          break;
        case Bi:
          e.x = e.x < 0 ? 0 : 1;
          break;
        case Iu:
          Math.abs(Math.floor(e.x) % 2) === 1 ? e.x = Math.ceil(e.x) - e.x : e.x = e.x - Math.floor(e.x);
          break;
      }
      if (e.y < 0 || e.y > 1) switch (this.wrapT) {
        case ra:
          e.y = e.y - Math.floor(e.y);
          break;
        case Bi:
          e.y = e.y < 0 ? 0 : 1;
          break;
        case Iu:
          Math.abs(Math.floor(e.y) % 2) === 1 ? e.y = Math.ceil(e.y) - e.y : e.y = e.y - Math.floor(e.y);
          break;
      }
      return this.flipY && (e.y = 1 - e.y), e;
    }
    set needsUpdate(e) {
      e === true && (this.version++, this.source.needsUpdate = true);
    }
    set needsPMREMUpdate(e) {
      e === true && this.pmremVersion++;
    }
  }
  hn.DEFAULT_IMAGE = null;
  hn.DEFAULT_MAPPING = o8;
  hn.DEFAULT_ANISOTROPY = 1;
  class Je {
    constructor(e = 0, t = 0, i = 0, r = 1) {
      Je.prototype.isVector4 = true, this.x = e, this.y = t, this.z = i, this.w = r;
    }
    get width() {
      return this.z;
    }
    set width(e) {
      this.z = e;
    }
    get height() {
      return this.w;
    }
    set height(e) {
      this.w = e;
    }
    set(e, t, i, r) {
      return this.x = e, this.y = t, this.z = i, this.w = r, this;
    }
    setScalar(e) {
      return this.x = e, this.y = e, this.z = e, this.w = e, this;
    }
    setX(e) {
      return this.x = e, this;
    }
    setY(e) {
      return this.y = e, this;
    }
    setZ(e) {
      return this.z = e, this;
    }
    setW(e) {
      return this.w = e, this;
    }
    setComponent(e, t) {
      switch (e) {
        case 0:
          this.x = t;
          break;
        case 1:
          this.y = t;
          break;
        case 2:
          this.z = t;
          break;
        case 3:
          this.w = t;
          break;
        default:
          throw new Error("index is out of range: " + e);
      }
      return this;
    }
    getComponent(e) {
      switch (e) {
        case 0:
          return this.x;
        case 1:
          return this.y;
        case 2:
          return this.z;
        case 3:
          return this.w;
        default:
          throw new Error("index is out of range: " + e);
      }
    }
    clone() {
      return new this.constructor(this.x, this.y, this.z, this.w);
    }
    copy(e) {
      return this.x = e.x, this.y = e.y, this.z = e.z, this.w = e.w !== void 0 ? e.w : 1, this;
    }
    add(e) {
      return this.x += e.x, this.y += e.y, this.z += e.z, this.w += e.w, this;
    }
    addScalar(e) {
      return this.x += e, this.y += e, this.z += e, this.w += e, this;
    }
    addVectors(e, t) {
      return this.x = e.x + t.x, this.y = e.y + t.y, this.z = e.z + t.z, this.w = e.w + t.w, this;
    }
    addScaledVector(e, t) {
      return this.x += e.x * t, this.y += e.y * t, this.z += e.z * t, this.w += e.w * t, this;
    }
    sub(e) {
      return this.x -= e.x, this.y -= e.y, this.z -= e.z, this.w -= e.w, this;
    }
    subScalar(e) {
      return this.x -= e, this.y -= e, this.z -= e, this.w -= e, this;
    }
    subVectors(e, t) {
      return this.x = e.x - t.x, this.y = e.y - t.y, this.z = e.z - t.z, this.w = e.w - t.w, this;
    }
    multiply(e) {
      return this.x *= e.x, this.y *= e.y, this.z *= e.z, this.w *= e.w, this;
    }
    multiplyScalar(e) {
      return this.x *= e, this.y *= e, this.z *= e, this.w *= e, this;
    }
    applyMatrix4(e) {
      const t = this.x, i = this.y, r = this.z, s = this.w, o = e.elements;
      return this.x = o[0] * t + o[4] * i + o[8] * r + o[12] * s, this.y = o[1] * t + o[5] * i + o[9] * r + o[13] * s, this.z = o[2] * t + o[6] * i + o[10] * r + o[14] * s, this.w = o[3] * t + o[7] * i + o[11] * r + o[15] * s, this;
    }
    divide(e) {
      return this.x /= e.x, this.y /= e.y, this.z /= e.z, this.w /= e.w, this;
    }
    divideScalar(e) {
      return this.multiplyScalar(1 / e);
    }
    setAxisAngleFromQuaternion(e) {
      this.w = 2 * Math.acos(e.w);
      const t = Math.sqrt(1 - e.w * e.w);
      return t < 1e-4 ? (this.x = 1, this.y = 0, this.z = 0) : (this.x = e.x / t, this.y = e.y / t, this.z = e.z / t), this;
    }
    setAxisAngleFromRotationMatrix(e) {
      let t, i, r, s;
      const l = e.elements, c = l[0], u = l[4], h = l[8], d = l[1], f = l[5], m = l[9], _ = l[2], p = l[6], g = l[10];
      if (Math.abs(u - d) < 0.01 && Math.abs(h - _) < 0.01 && Math.abs(m - p) < 0.01) {
        if (Math.abs(u + d) < 0.1 && Math.abs(h + _) < 0.1 && Math.abs(m + p) < 0.1 && Math.abs(c + f + g - 3) < 0.1) return this.set(1, 0, 0, 0), this;
        t = Math.PI;
        const b = (c + 1) / 2, v = (f + 1) / 2, x = (g + 1) / 2, C = (u + d) / 4, A = (h + _) / 4, P = (m + p) / 4;
        return b > v && b > x ? b < 0.01 ? (i = 0, r = 0.707106781, s = 0.707106781) : (i = Math.sqrt(b), r = C / i, s = A / i) : v > x ? v < 0.01 ? (i = 0.707106781, r = 0, s = 0.707106781) : (r = Math.sqrt(v), i = C / r, s = P / r) : x < 0.01 ? (i = 0.707106781, r = 0.707106781, s = 0) : (s = Math.sqrt(x), i = A / s, r = P / s), this.set(i, r, s, t), this;
      }
      let y = Math.sqrt((p - m) * (p - m) + (h - _) * (h - _) + (d - u) * (d - u));
      return Math.abs(y) < 1e-3 && (y = 1), this.x = (p - m) / y, this.y = (h - _) / y, this.z = (d - u) / y, this.w = Math.acos((c + f + g - 1) / 2), this;
    }
    setFromMatrixPosition(e) {
      const t = e.elements;
      return this.x = t[12], this.y = t[13], this.z = t[14], this.w = t[15], this;
    }
    min(e) {
      return this.x = Math.min(this.x, e.x), this.y = Math.min(this.y, e.y), this.z = Math.min(this.z, e.z), this.w = Math.min(this.w, e.w), this;
    }
    max(e) {
      return this.x = Math.max(this.x, e.x), this.y = Math.max(this.y, e.y), this.z = Math.max(this.z, e.z), this.w = Math.max(this.w, e.w), this;
    }
    clamp(e, t) {
      return this.x = Ae(this.x, e.x, t.x), this.y = Ae(this.y, e.y, t.y), this.z = Ae(this.z, e.z, t.z), this.w = Ae(this.w, e.w, t.w), this;
    }
    clampScalar(e, t) {
      return this.x = Ae(this.x, e, t), this.y = Ae(this.y, e, t), this.z = Ae(this.z, e, t), this.w = Ae(this.w, e, t), this;
    }
    clampLength(e, t) {
      const i = this.length();
      return this.divideScalar(i || 1).multiplyScalar(Ae(i, e, t));
    }
    floor() {
      return this.x = Math.floor(this.x), this.y = Math.floor(this.y), this.z = Math.floor(this.z), this.w = Math.floor(this.w), this;
    }
    ceil() {
      return this.x = Math.ceil(this.x), this.y = Math.ceil(this.y), this.z = Math.ceil(this.z), this.w = Math.ceil(this.w), this;
    }
    round() {
      return this.x = Math.round(this.x), this.y = Math.round(this.y), this.z = Math.round(this.z), this.w = Math.round(this.w), this;
    }
    roundToZero() {
      return this.x = Math.trunc(this.x), this.y = Math.trunc(this.y), this.z = Math.trunc(this.z), this.w = Math.trunc(this.w), this;
    }
    negate() {
      return this.x = -this.x, this.y = -this.y, this.z = -this.z, this.w = -this.w, this;
    }
    dot(e) {
      return this.x * e.x + this.y * e.y + this.z * e.z + this.w * e.w;
    }
    lengthSq() {
      return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;
    }
    length() {
      return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
    }
    manhattanLength() {
      return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z) + Math.abs(this.w);
    }
    normalize() {
      return this.divideScalar(this.length() || 1);
    }
    setLength(e) {
      return this.normalize().multiplyScalar(e);
    }
    lerp(e, t) {
      return this.x += (e.x - this.x) * t, this.y += (e.y - this.y) * t, this.z += (e.z - this.z) * t, this.w += (e.w - this.w) * t, this;
    }
    lerpVectors(e, t, i) {
      return this.x = e.x + (t.x - e.x) * i, this.y = e.y + (t.y - e.y) * i, this.z = e.z + (t.z - e.z) * i, this.w = e.w + (t.w - e.w) * i, this;
    }
    equals(e) {
      return e.x === this.x && e.y === this.y && e.z === this.z && e.w === this.w;
    }
    fromArray(e, t = 0) {
      return this.x = e[t], this.y = e[t + 1], this.z = e[t + 2], this.w = e[t + 3], this;
    }
    toArray(e = [], t = 0) {
      return e[t] = this.x, e[t + 1] = this.y, e[t + 2] = this.z, e[t + 3] = this.w, e;
    }
    fromBufferAttribute(e, t) {
      return this.x = e.getX(t), this.y = e.getY(t), this.z = e.getZ(t), this.w = e.getW(t), this;
    }
    random() {
      return this.x = Math.random(), this.y = Math.random(), this.z = Math.random(), this.w = Math.random(), this;
    }
    *[Symbol.iterator]() {
      yield this.x, yield this.y, yield this.z, yield this.w;
    }
  }
  class ML extends Us {
    constructor(e = 1, t = 1, i = {}) {
      super(), i = Object.assign({
        generateMipmaps: false,
        internalFormat: null,
        minFilter: Pn,
        depthBuffer: true,
        stencilBuffer: false,
        resolveDepthBuffer: true,
        resolveStencilBuffer: true,
        depthTexture: null,
        samples: 0,
        count: 1,
        depth: 1,
        multiview: false
      }, i), this.isRenderTarget = true, this.width = e, this.height = t, this.depth = i.depth, this.scissor = new Je(0, 0, e, t), this.scissorTest = false, this.viewport = new Je(0, 0, e, t);
      const r = {
        width: e,
        height: t,
        depth: i.depth
      }, s = new hn(r);
      this.textures = [];
      const o = i.count;
      for (let a = 0; a < o; a++) this.textures[a] = s.clone(), this.textures[a].isRenderTargetTexture = true, this.textures[a].renderTarget = this;
      this._setTextureOptions(i), this.depthBuffer = i.depthBuffer, this.stencilBuffer = i.stencilBuffer, this.resolveDepthBuffer = i.resolveDepthBuffer, this.resolveStencilBuffer = i.resolveStencilBuffer, this._depthTexture = null, this.depthTexture = i.depthTexture, this.samples = i.samples, this.multiview = i.multiview;
    }
    _setTextureOptions(e = {}) {
      const t = {
        minFilter: Pn,
        generateMipmaps: false,
        flipY: false,
        internalFormat: null
      };
      e.mapping !== void 0 && (t.mapping = e.mapping), e.wrapS !== void 0 && (t.wrapS = e.wrapS), e.wrapT !== void 0 && (t.wrapT = e.wrapT), e.wrapR !== void 0 && (t.wrapR = e.wrapR), e.magFilter !== void 0 && (t.magFilter = e.magFilter), e.minFilter !== void 0 && (t.minFilter = e.minFilter), e.format !== void 0 && (t.format = e.format), e.type !== void 0 && (t.type = e.type), e.anisotropy !== void 0 && (t.anisotropy = e.anisotropy), e.colorSpace !== void 0 && (t.colorSpace = e.colorSpace), e.flipY !== void 0 && (t.flipY = e.flipY), e.generateMipmaps !== void 0 && (t.generateMipmaps = e.generateMipmaps), e.internalFormat !== void 0 && (t.internalFormat = e.internalFormat);
      for (let i = 0; i < this.textures.length; i++) this.textures[i].setValues(t);
    }
    get texture() {
      return this.textures[0];
    }
    set texture(e) {
      this.textures[0] = e;
    }
    set depthTexture(e) {
      this._depthTexture !== null && (this._depthTexture.renderTarget = null), e !== null && (e.renderTarget = this), this._depthTexture = e;
    }
    get depthTexture() {
      return this._depthTexture;
    }
    setSize(e, t, i = 1) {
      if (this.width !== e || this.height !== t || this.depth !== i) {
        this.width = e, this.height = t, this.depth = i;
        for (let r = 0, s = this.textures.length; r < s; r++) this.textures[r].image.width = e, this.textures[r].image.height = t, this.textures[r].image.depth = i, this.textures[r].isArrayTexture = this.textures[r].image.depth > 1;
        this.dispose();
      }
      this.viewport.set(0, 0, e, t), this.scissor.set(0, 0, e, t);
    }
    clone() {
      return new this.constructor().copy(this);
    }
    copy(e) {
      this.width = e.width, this.height = e.height, this.depth = e.depth, this.scissor.copy(e.scissor), this.scissorTest = e.scissorTest, this.viewport.copy(e.viewport), this.textures.length = 0;
      for (let t = 0, i = e.textures.length; t < i; t++) {
        this.textures[t] = e.textures[t].clone(), this.textures[t].isRenderTargetTexture = true, this.textures[t].renderTarget = this;
        const r = Object.assign({}, e.textures[t].image);
        this.textures[t].source = new jp(r);
      }
      return this.depthBuffer = e.depthBuffer, this.stencilBuffer = e.stencilBuffer, this.resolveDepthBuffer = e.resolveDepthBuffer, this.resolveStencilBuffer = e.resolveStencilBuffer, e.depthTexture !== null && (this.depthTexture = e.depthTexture.clone()), this.samples = e.samples, this;
    }
    dispose() {
      this.dispatchEvent({
        type: "dispose"
      });
    }
  }
  Cs = class extends ML {
    constructor(e = 1, t = 1, i = {}) {
      super(e, t, i), this.isWebGLRenderTarget = true;
    }
  };
  class b8 extends hn {
    constructor(e = null, t = 1, i = 1, r = 1) {
      super(null), this.isDataArrayTexture = true, this.image = {
        data: e,
        width: t,
        height: i,
        depth: r
      }, this.magFilter = t2, this.minFilter = t2, this.wrapR = Bi, this.generateMipmaps = false, this.flipY = false, this.unpackAlignment = 1, this.layerUpdates = /* @__PURE__ */ new Set();
    }
    addLayerUpdate(e) {
      this.layerUpdates.add(e);
    }
    clearLayerUpdates() {
      this.layerUpdates.clear();
    }
  }
  class TL extends hn {
    constructor(e = null, t = 1, i = 1, r = 1) {
      super(null), this.isData3DTexture = true, this.image = {
        data: e,
        width: t,
        height: i,
        depth: r
      }, this.magFilter = t2, this.minFilter = t2, this.wrapR = Bi, this.generateMipmaps = false, this.flipY = false, this.unpackAlignment = 1;
    }
  }
  F2 = class {
    constructor(e = new u1(1 / 0, 1 / 0, 1 / 0), t = new u1(-1 / 0, -1 / 0, -1 / 0)) {
      this.isBox3 = true, this.min = e, this.max = t;
    }
    set(e, t) {
      return this.min.copy(e), this.max.copy(t), this;
    }
    setFromArray(e) {
      this.makeEmpty();
      for (let t = 0, i = e.length; t < i; t += 3) this.expandByPoint(ni.fromArray(e, t));
      return this;
    }
    setFromBufferAttribute(e) {
      this.makeEmpty();
      for (let t = 0, i = e.count; t < i; t++) this.expandByPoint(ni.fromBufferAttribute(e, t));
      return this;
    }
    setFromPoints(e) {
      this.makeEmpty();
      for (let t = 0, i = e.length; t < i; t++) this.expandByPoint(e[t]);
      return this;
    }
    setFromCenterAndSize(e, t) {
      const i = ni.copy(t).multiplyScalar(0.5);
      return this.min.copy(e).sub(i), this.max.copy(e).add(i), this;
    }
    setFromObject(e, t = false) {
      return this.makeEmpty(), this.expandByObject(e, t);
    }
    clone() {
      return new this.constructor().copy(this);
    }
    copy(e) {
      return this.min.copy(e.min), this.max.copy(e.max), this;
    }
    makeEmpty() {
      return this.min.x = this.min.y = this.min.z = 1 / 0, this.max.x = this.max.y = this.max.z = -1 / 0, this;
    }
    isEmpty() {
      return this.max.x < this.min.x || this.max.y < this.min.y || this.max.z < this.min.z;
    }
    getCenter(e) {
      return this.isEmpty() ? e.set(0, 0, 0) : e.addVectors(this.min, this.max).multiplyScalar(0.5);
    }
    getSize(e) {
      return this.isEmpty() ? e.set(0, 0, 0) : e.subVectors(this.max, this.min);
    }
    expandByPoint(e) {
      return this.min.min(e), this.max.max(e), this;
    }
    expandByVector(e) {
      return this.min.sub(e), this.max.add(e), this;
    }
    expandByScalar(e) {
      return this.min.addScalar(-e), this.max.addScalar(e), this;
    }
    expandByObject(e, t = false) {
      e.updateWorldMatrix(false, false);
      const i = e.geometry;
      if (i !== void 0) {
        const s = i.getAttribute("position");
        if (t === true && s !== void 0 && e.isInstancedMesh !== true) for (let o = 0, a = s.count; o < a; o++) e.isMesh === true ? e.getVertexPosition(o, ni) : ni.fromBufferAttribute(s, o), ni.applyMatrix4(e.matrixWorld), this.expandByPoint(ni);
        else e.boundingBox !== void 0 ? (e.boundingBox === null && e.computeBoundingBox(), jl.copy(e.boundingBox)) : (i.boundingBox === null && i.computeBoundingBox(), jl.copy(i.boundingBox)), jl.applyMatrix4(e.matrixWorld), this.union(jl);
      }
      const r = e.children;
      for (let s = 0, o = r.length; s < o; s++) this.expandByObject(r[s], t);
      return this;
    }
    containsPoint(e) {
      return e.x >= this.min.x && e.x <= this.max.x && e.y >= this.min.y && e.y <= this.max.y && e.z >= this.min.z && e.z <= this.max.z;
    }
    containsBox(e) {
      return this.min.x <= e.min.x && e.max.x <= this.max.x && this.min.y <= e.min.y && e.max.y <= this.max.y && this.min.z <= e.min.z && e.max.z <= this.max.z;
    }
    getParameter(e, t) {
      return t.set((e.x - this.min.x) / (this.max.x - this.min.x), (e.y - this.min.y) / (this.max.y - this.min.y), (e.z - this.min.z) / (this.max.z - this.min.z));
    }
    intersectsBox(e) {
      return e.max.x >= this.min.x && e.min.x <= this.max.x && e.max.y >= this.min.y && e.min.y <= this.max.y && e.max.z >= this.min.z && e.min.z <= this.max.z;
    }
    intersectsSphere(e) {
      return this.clampPoint(e.center, ni), ni.distanceToSquared(e.center) <= e.radius * e.radius;
    }
    intersectsPlane(e) {
      let t, i;
      return e.normal.x > 0 ? (t = e.normal.x * this.min.x, i = e.normal.x * this.max.x) : (t = e.normal.x * this.max.x, i = e.normal.x * this.min.x), e.normal.y > 0 ? (t += e.normal.y * this.min.y, i += e.normal.y * this.max.y) : (t += e.normal.y * this.max.y, i += e.normal.y * this.min.y), e.normal.z > 0 ? (t += e.normal.z * this.min.z, i += e.normal.z * this.max.z) : (t += e.normal.z * this.max.z, i += e.normal.z * this.min.z), t <= -e.constant && i >= -e.constant;
    }
    intersectsTriangle(e) {
      if (this.isEmpty()) return false;
      this.getCenter(Ia), Xl.subVectors(this.max, Ia), js.subVectors(e.a, Ia), Xs.subVectors(e.b, Ia), $s.subVectors(e.c, Ia), U3.subVectors(Xs, js), B3.subVectors($s, Xs), Hr.subVectors(js, $s);
      let t = [
        0,
        -U3.z,
        U3.y,
        0,
        -B3.z,
        B3.y,
        0,
        -Hr.z,
        Hr.y,
        U3.z,
        0,
        -U3.x,
        B3.z,
        0,
        -B3.x,
        Hr.z,
        0,
        -Hr.x,
        -U3.y,
        U3.x,
        0,
        -B3.y,
        B3.x,
        0,
        -Hr.y,
        Hr.x,
        0
      ];
      return !Ch(t, js, Xs, $s, Xl) || (t = [
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1
      ], !Ch(t, js, Xs, $s, Xl)) ? false : ($l.crossVectors(U3, B3), t = [
        $l.x,
        $l.y,
        $l.z
      ], Ch(t, js, Xs, $s, Xl));
    }
    clampPoint(e, t) {
      return t.copy(e).clamp(this.min, this.max);
    }
    distanceToPoint(e) {
      return this.clampPoint(e, ni).distanceTo(e);
    }
    getBoundingSphere(e) {
      return this.isEmpty() ? e.makeEmpty() : (this.getCenter(e.center), e.radius = this.getSize(ni).length() * 0.5), e;
    }
    intersect(e) {
      return this.min.max(e.min), this.max.min(e.max), this.isEmpty() && this.makeEmpty(), this;
    }
    union(e) {
      return this.min.min(e.min), this.max.max(e.max), this;
    }
    applyMatrix4(e) {
      return this.isEmpty() ? this : (i3[0].set(this.min.x, this.min.y, this.min.z).applyMatrix4(e), i3[1].set(this.min.x, this.min.y, this.max.z).applyMatrix4(e), i3[2].set(this.min.x, this.max.y, this.min.z).applyMatrix4(e), i3[3].set(this.min.x, this.max.y, this.max.z).applyMatrix4(e), i3[4].set(this.max.x, this.min.y, this.min.z).applyMatrix4(e), i3[5].set(this.max.x, this.min.y, this.max.z).applyMatrix4(e), i3[6].set(this.max.x, this.max.y, this.min.z).applyMatrix4(e), i3[7].set(this.max.x, this.max.y, this.max.z).applyMatrix4(e), this.setFromPoints(i3), this);
    }
    translate(e) {
      return this.min.add(e), this.max.add(e), this;
    }
    equals(e) {
      return e.min.equals(this.min) && e.max.equals(this.max);
    }
    toJSON() {
      return {
        min: this.min.toArray(),
        max: this.max.toArray()
      };
    }
    fromJSON(e) {
      return this.min.fromArray(e.min), this.max.fromArray(e.max), this;
    }
  };
  const i3 = [
    new u1(),
    new u1(),
    new u1(),
    new u1(),
    new u1(),
    new u1(),
    new u1(),
    new u1()
  ], ni = new u1(), jl = new F2(), js = new u1(), Xs = new u1(), $s = new u1(), U3 = new u1(), B3 = new u1(), Hr = new u1(), Ia = new u1(), Xl = new u1(), $l = new u1(), zr = new u1();
  function Ch(n, e, t, i, r) {
    for (let s = 0, o = n.length - 3; s <= o; s += 3) {
      zr.fromArray(n, s);
      const a = r.x * Math.abs(zr.x) + r.y * Math.abs(zr.y) + r.z * Math.abs(zr.z), l = e.dot(zr), c = t.dot(zr), u = i.dot(zr);
      if (Math.max(-Math.max(l, c, u), Math.min(l, c, u)) > a) return false;
    }
    return true;
  }
  const CL = new F2(), Fa = new u1(), Ah = new u1();
  d2 = class {
    constructor(e = new u1(), t = -1) {
      this.isSphere = true, this.center = e, this.radius = t;
    }
    set(e, t) {
      return this.center.copy(e), this.radius = t, this;
    }
    setFromPoints(e, t) {
      const i = this.center;
      t !== void 0 ? i.copy(t) : CL.setFromPoints(e).getCenter(i);
      let r = 0;
      for (let s = 0, o = e.length; s < o; s++) r = Math.max(r, i.distanceToSquared(e[s]));
      return this.radius = Math.sqrt(r), this;
    }
    copy(e) {
      return this.center.copy(e.center), this.radius = e.radius, this;
    }
    isEmpty() {
      return this.radius < 0;
    }
    makeEmpty() {
      return this.center.set(0, 0, 0), this.radius = -1, this;
    }
    containsPoint(e) {
      return e.distanceToSquared(this.center) <= this.radius * this.radius;
    }
    distanceToPoint(e) {
      return e.distanceTo(this.center) - this.radius;
    }
    intersectsSphere(e) {
      const t = this.radius + e.radius;
      return e.center.distanceToSquared(this.center) <= t * t;
    }
    intersectsBox(e) {
      return e.intersectsSphere(this);
    }
    intersectsPlane(e) {
      return Math.abs(e.distanceToPoint(this.center)) <= this.radius;
    }
    clampPoint(e, t) {
      const i = this.center.distanceToSquared(e);
      return t.copy(e), i > this.radius * this.radius && (t.sub(this.center).normalize(), t.multiplyScalar(this.radius).add(this.center)), t;
    }
    getBoundingBox(e) {
      return this.isEmpty() ? (e.makeEmpty(), e) : (e.set(this.center, this.center), e.expandByScalar(this.radius), e);
    }
    applyMatrix4(e) {
      return this.center.applyMatrix4(e), this.radius = this.radius * e.getMaxScaleOnAxis(), this;
    }
    translate(e) {
      return this.center.add(e), this;
    }
    expandByPoint(e) {
      if (this.isEmpty()) return this.center.copy(e), this.radius = 0, this;
      Fa.subVectors(e, this.center);
      const t = Fa.lengthSq();
      if (t > this.radius * this.radius) {
        const i = Math.sqrt(t), r = (i - this.radius) * 0.5;
        this.center.addScaledVector(Fa, r / i), this.radius += r;
      }
      return this;
    }
    union(e) {
      return e.isEmpty() ? this : this.isEmpty() ? (this.copy(e), this) : (this.center.equals(e.center) === true ? this.radius = Math.max(this.radius, e.radius) : (Ah.subVectors(e.center, this.center).setLength(e.radius), this.expandByPoint(Fa.copy(e.center).add(Ah)), this.expandByPoint(Fa.copy(e.center).sub(Ah))), this);
    }
    equals(e) {
      return e.center.equals(this.center) && e.radius === this.radius;
    }
    clone() {
      return new this.constructor().copy(this);
    }
    toJSON() {
      return {
        radius: this.radius,
        center: this.center.toArray()
      };
    }
    fromJSON(e) {
      return this.radius = e.radius, this.center.fromArray(e.center), this;
    }
  };
  const r3 = new u1(), Dh = new u1(), ql = new u1(), H3 = new u1(), Rh = new u1(), Yl = new u1(), Ph = new u1();
  Cl = class {
    constructor(e = new u1(), t = new u1(0, 0, -1)) {
      this.origin = e, this.direction = t;
    }
    set(e, t) {
      return this.origin.copy(e), this.direction.copy(t), this;
    }
    copy(e) {
      return this.origin.copy(e.origin), this.direction.copy(e.direction), this;
    }
    at(e, t) {
      return t.copy(this.origin).addScaledVector(this.direction, e);
    }
    lookAt(e) {
      return this.direction.copy(e).sub(this.origin).normalize(), this;
    }
    recast(e) {
      return this.origin.copy(this.at(e, r3)), this;
    }
    closestPointToPoint(e, t) {
      t.subVectors(e, this.origin);
      const i = t.dot(this.direction);
      return i < 0 ? t.copy(this.origin) : t.copy(this.origin).addScaledVector(this.direction, i);
    }
    distanceToPoint(e) {
      return Math.sqrt(this.distanceSqToPoint(e));
    }
    distanceSqToPoint(e) {
      const t = r3.subVectors(e, this.origin).dot(this.direction);
      return t < 0 ? this.origin.distanceToSquared(e) : (r3.copy(this.origin).addScaledVector(this.direction, t), r3.distanceToSquared(e));
    }
    distanceSqToSegment(e, t, i, r) {
      Dh.copy(e).add(t).multiplyScalar(0.5), ql.copy(t).sub(e).normalize(), H3.copy(this.origin).sub(Dh);
      const s = e.distanceTo(t) * 0.5, o = -this.direction.dot(ql), a = H3.dot(this.direction), l = -H3.dot(ql), c = H3.lengthSq(), u = Math.abs(1 - o * o);
      let h, d, f, m;
      if (u > 0) if (h = o * l - a, d = o * a - l, m = s * u, h >= 0) if (d >= -m) if (d <= m) {
        const _ = 1 / u;
        h *= _, d *= _, f = h * (h + o * d + 2 * a) + d * (o * h + d + 2 * l) + c;
      } else d = s, h = Math.max(0, -(o * d + a)), f = -h * h + d * (d + 2 * l) + c;
      else d = -s, h = Math.max(0, -(o * d + a)), f = -h * h + d * (d + 2 * l) + c;
      else d <= -m ? (h = Math.max(0, -(-o * s + a)), d = h > 0 ? -s : Math.min(Math.max(-s, -l), s), f = -h * h + d * (d + 2 * l) + c) : d <= m ? (h = 0, d = Math.min(Math.max(-s, -l), s), f = d * (d + 2 * l) + c) : (h = Math.max(0, -(o * s + a)), d = h > 0 ? s : Math.min(Math.max(-s, -l), s), f = -h * h + d * (d + 2 * l) + c);
      else d = o > 0 ? -s : s, h = Math.max(0, -(o * d + a)), f = -h * h + d * (d + 2 * l) + c;
      return i && i.copy(this.origin).addScaledVector(this.direction, h), r && r.copy(Dh).addScaledVector(ql, d), f;
    }
    intersectSphere(e, t) {
      r3.subVectors(e.center, this.origin);
      const i = r3.dot(this.direction), r = r3.dot(r3) - i * i, s = e.radius * e.radius;
      if (r > s) return null;
      const o = Math.sqrt(s - r), a = i - o, l = i + o;
      return l < 0 ? null : a < 0 ? this.at(l, t) : this.at(a, t);
    }
    intersectsSphere(e) {
      return e.radius < 0 ? false : this.distanceSqToPoint(e.center) <= e.radius * e.radius;
    }
    distanceToPlane(e) {
      const t = e.normal.dot(this.direction);
      if (t === 0) return e.distanceToPoint(this.origin) === 0 ? 0 : null;
      const i = -(this.origin.dot(e.normal) + e.constant) / t;
      return i >= 0 ? i : null;
    }
    intersectPlane(e, t) {
      const i = this.distanceToPlane(e);
      return i === null ? null : this.at(i, t);
    }
    intersectsPlane(e) {
      const t = e.distanceToPoint(this.origin);
      return t === 0 || e.normal.dot(this.direction) * t < 0;
    }
    intersectBox(e, t) {
      let i, r, s, o, a, l;
      const c = 1 / this.direction.x, u = 1 / this.direction.y, h = 1 / this.direction.z, d = this.origin;
      return c >= 0 ? (i = (e.min.x - d.x) * c, r = (e.max.x - d.x) * c) : (i = (e.max.x - d.x) * c, r = (e.min.x - d.x) * c), u >= 0 ? (s = (e.min.y - d.y) * u, o = (e.max.y - d.y) * u) : (s = (e.max.y - d.y) * u, o = (e.min.y - d.y) * u), i > o || s > r || ((s > i || isNaN(i)) && (i = s), (o < r || isNaN(r)) && (r = o), h >= 0 ? (a = (e.min.z - d.z) * h, l = (e.max.z - d.z) * h) : (a = (e.max.z - d.z) * h, l = (e.min.z - d.z) * h), i > l || a > r) || ((a > i || i !== i) && (i = a), (l < r || r !== r) && (r = l), r < 0) ? null : this.at(i >= 0 ? i : r, t);
    }
    intersectsBox(e) {
      return this.intersectBox(e, r3) !== null;
    }
    intersectTriangle(e, t, i, r, s) {
      Rh.subVectors(t, e), Yl.subVectors(i, e), Ph.crossVectors(Rh, Yl);
      let o = this.direction.dot(Ph), a;
      if (o > 0) {
        if (r) return null;
        a = 1;
      } else if (o < 0) a = -1, o = -o;
      else return null;
      H3.subVectors(this.origin, e);
      const l = a * this.direction.dot(Yl.crossVectors(H3, Yl));
      if (l < 0) return null;
      const c = a * this.direction.dot(Rh.cross(H3));
      if (c < 0 || l + c > o) return null;
      const u = -a * H3.dot(Ph);
      return u < 0 ? null : this.at(u / o, s);
    }
    applyMatrix4(e) {
      return this.origin.applyMatrix4(e), this.direction.transformDirection(e), this;
    }
    equals(e) {
      return e.origin.equals(this.origin) && e.direction.equals(this.direction);
    }
    clone() {
      return new this.constructor().copy(this);
    }
  };
  Ee = class {
    constructor(e, t, i, r, s, o, a, l, c, u, h, d, f, m, _, p) {
      Ee.prototype.isMatrix4 = true, this.elements = [
        1,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        1
      ], e !== void 0 && this.set(e, t, i, r, s, o, a, l, c, u, h, d, f, m, _, p);
    }
    set(e, t, i, r, s, o, a, l, c, u, h, d, f, m, _, p) {
      const g = this.elements;
      return g[0] = e, g[4] = t, g[8] = i, g[12] = r, g[1] = s, g[5] = o, g[9] = a, g[13] = l, g[2] = c, g[6] = u, g[10] = h, g[14] = d, g[3] = f, g[7] = m, g[11] = _, g[15] = p, this;
    }
    identity() {
      return this.set(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1), this;
    }
    clone() {
      return new Ee().fromArray(this.elements);
    }
    copy(e) {
      const t = this.elements, i = e.elements;
      return t[0] = i[0], t[1] = i[1], t[2] = i[2], t[3] = i[3], t[4] = i[4], t[5] = i[5], t[6] = i[6], t[7] = i[7], t[8] = i[8], t[9] = i[9], t[10] = i[10], t[11] = i[11], t[12] = i[12], t[13] = i[13], t[14] = i[14], t[15] = i[15], this;
    }
    copyPosition(e) {
      const t = this.elements, i = e.elements;
      return t[12] = i[12], t[13] = i[13], t[14] = i[14], this;
    }
    setFromMatrix3(e) {
      const t = e.elements;
      return this.set(t[0], t[3], t[6], 0, t[1], t[4], t[7], 0, t[2], t[5], t[8], 0, 0, 0, 0, 1), this;
    }
    extractBasis(e, t, i) {
      return e.setFromMatrixColumn(this, 0), t.setFromMatrixColumn(this, 1), i.setFromMatrixColumn(this, 2), this;
    }
    makeBasis(e, t, i) {
      return this.set(e.x, t.x, i.x, 0, e.y, t.y, i.y, 0, e.z, t.z, i.z, 0, 0, 0, 0, 1), this;
    }
    extractRotation(e) {
      const t = this.elements, i = e.elements, r = 1 / qs.setFromMatrixColumn(e, 0).length(), s = 1 / qs.setFromMatrixColumn(e, 1).length(), o = 1 / qs.setFromMatrixColumn(e, 2).length();
      return t[0] = i[0] * r, t[1] = i[1] * r, t[2] = i[2] * r, t[3] = 0, t[4] = i[4] * s, t[5] = i[5] * s, t[6] = i[6] * s, t[7] = 0, t[8] = i[8] * o, t[9] = i[9] * o, t[10] = i[10] * o, t[11] = 0, t[12] = 0, t[13] = 0, t[14] = 0, t[15] = 1, this;
    }
    makeRotationFromEuler(e) {
      const t = this.elements, i = e.x, r = e.y, s = e.z, o = Math.cos(i), a = Math.sin(i), l = Math.cos(r), c = Math.sin(r), u = Math.cos(s), h = Math.sin(s);
      if (e.order === "XYZ") {
        const d = o * u, f = o * h, m = a * u, _ = a * h;
        t[0] = l * u, t[4] = -l * h, t[8] = c, t[1] = f + m * c, t[5] = d - _ * c, t[9] = -a * l, t[2] = _ - d * c, t[6] = m + f * c, t[10] = o * l;
      } else if (e.order === "YXZ") {
        const d = l * u, f = l * h, m = c * u, _ = c * h;
        t[0] = d + _ * a, t[4] = m * a - f, t[8] = o * c, t[1] = o * h, t[5] = o * u, t[9] = -a, t[2] = f * a - m, t[6] = _ + d * a, t[10] = o * l;
      } else if (e.order === "ZXY") {
        const d = l * u, f = l * h, m = c * u, _ = c * h;
        t[0] = d - _ * a, t[4] = -o * h, t[8] = m + f * a, t[1] = f + m * a, t[5] = o * u, t[9] = _ - d * a, t[2] = -o * c, t[6] = a, t[10] = o * l;
      } else if (e.order === "ZYX") {
        const d = o * u, f = o * h, m = a * u, _ = a * h;
        t[0] = l * u, t[4] = m * c - f, t[8] = d * c + _, t[1] = l * h, t[5] = _ * c + d, t[9] = f * c - m, t[2] = -c, t[6] = a * l, t[10] = o * l;
      } else if (e.order === "YZX") {
        const d = o * l, f = o * c, m = a * l, _ = a * c;
        t[0] = l * u, t[4] = _ - d * h, t[8] = m * h + f, t[1] = h, t[5] = o * u, t[9] = -a * u, t[2] = -c * u, t[6] = f * h + m, t[10] = d - _ * h;
      } else if (e.order === "XZY") {
        const d = o * l, f = o * c, m = a * l, _ = a * c;
        t[0] = l * u, t[4] = -h, t[8] = c * u, t[1] = d * h + _, t[5] = o * u, t[9] = f * h - m, t[2] = m * h - f, t[6] = a * u, t[10] = _ * h + d;
      }
      return t[3] = 0, t[7] = 0, t[11] = 0, t[12] = 0, t[13] = 0, t[14] = 0, t[15] = 1, this;
    }
    makeRotationFromQuaternion(e) {
      return this.compose(AL, e, DL);
    }
    lookAt(e, t, i) {
      const r = this.elements;
      return x2.subVectors(e, t), x2.lengthSq() === 0 && (x2.z = 1), x2.normalize(), z3.crossVectors(i, x2), z3.lengthSq() === 0 && (Math.abs(i.z) === 1 ? x2.x += 1e-4 : x2.z += 1e-4, x2.normalize(), z3.crossVectors(i, x2)), z3.normalize(), Kl.crossVectors(x2, z3), r[0] = z3.x, r[4] = Kl.x, r[8] = x2.x, r[1] = z3.y, r[5] = Kl.y, r[9] = x2.y, r[2] = z3.z, r[6] = Kl.z, r[10] = x2.z, this;
    }
    multiply(e) {
      return this.multiplyMatrices(this, e);
    }
    premultiply(e) {
      return this.multiplyMatrices(e, this);
    }
    multiplyMatrices(e, t) {
      const i = e.elements, r = t.elements, s = this.elements, o = i[0], a = i[4], l = i[8], c = i[12], u = i[1], h = i[5], d = i[9], f = i[13], m = i[2], _ = i[6], p = i[10], g = i[14], y = i[3], b = i[7], v = i[11], x = i[15], C = r[0], A = r[4], P = r[8], M = r[12], E = r[1], I = r[5], k = r[9], H = r[13], K = r[2], J = r[6], z = r[10], $ = r[14], G = r[3], Q = r[7], V = r[11], w1 = r[15];
      return s[0] = o * C + a * E + l * K + c * G, s[4] = o * A + a * I + l * J + c * Q, s[8] = o * P + a * k + l * z + c * V, s[12] = o * M + a * H + l * $ + c * w1, s[1] = u * C + h * E + d * K + f * G, s[5] = u * A + h * I + d * J + f * Q, s[9] = u * P + h * k + d * z + f * V, s[13] = u * M + h * H + d * $ + f * w1, s[2] = m * C + _ * E + p * K + g * G, s[6] = m * A + _ * I + p * J + g * Q, s[10] = m * P + _ * k + p * z + g * V, s[14] = m * M + _ * H + p * $ + g * w1, s[3] = y * C + b * E + v * K + x * G, s[7] = y * A + b * I + v * J + x * Q, s[11] = y * P + b * k + v * z + x * V, s[15] = y * M + b * H + v * $ + x * w1, this;
    }
    multiplyScalar(e) {
      const t = this.elements;
      return t[0] *= e, t[4] *= e, t[8] *= e, t[12] *= e, t[1] *= e, t[5] *= e, t[9] *= e, t[13] *= e, t[2] *= e, t[6] *= e, t[10] *= e, t[14] *= e, t[3] *= e, t[7] *= e, t[11] *= e, t[15] *= e, this;
    }
    determinant() {
      const e = this.elements, t = e[0], i = e[4], r = e[8], s = e[12], o = e[1], a = e[5], l = e[9], c = e[13], u = e[2], h = e[6], d = e[10], f = e[14], m = e[3], _ = e[7], p = e[11], g = e[15];
      return m * (+s * l * h - r * c * h - s * a * d + i * c * d + r * a * f - i * l * f) + _ * (+t * l * f - t * c * d + s * o * d - r * o * f + r * c * u - s * l * u) + p * (+t * c * h - t * a * f - s * o * h + i * o * f + s * a * u - i * c * u) + g * (-r * a * u - t * l * h + t * a * d + r * o * h - i * o * d + i * l * u);
    }
    transpose() {
      const e = this.elements;
      let t;
      return t = e[1], e[1] = e[4], e[4] = t, t = e[2], e[2] = e[8], e[8] = t, t = e[6], e[6] = e[9], e[9] = t, t = e[3], e[3] = e[12], e[12] = t, t = e[7], e[7] = e[13], e[13] = t, t = e[11], e[11] = e[14], e[14] = t, this;
    }
    setPosition(e, t, i) {
      const r = this.elements;
      return e.isVector3 ? (r[12] = e.x, r[13] = e.y, r[14] = e.z) : (r[12] = e, r[13] = t, r[14] = i), this;
    }
    invert() {
      const e = this.elements, t = e[0], i = e[1], r = e[2], s = e[3], o = e[4], a = e[5], l = e[6], c = e[7], u = e[8], h = e[9], d = e[10], f = e[11], m = e[12], _ = e[13], p = e[14], g = e[15], y = h * p * c - _ * d * c + _ * l * f - a * p * f - h * l * g + a * d * g, b = m * d * c - u * p * c - m * l * f + o * p * f + u * l * g - o * d * g, v = u * _ * c - m * h * c + m * a * f - o * _ * f - u * a * g + o * h * g, x = m * h * l - u * _ * l - m * a * d + o * _ * d + u * a * p - o * h * p, C = t * y + i * b + r * v + s * x;
      if (C === 0) return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
      const A = 1 / C;
      return e[0] = y * A, e[1] = (_ * d * s - h * p * s - _ * r * f + i * p * f + h * r * g - i * d * g) * A, e[2] = (a * p * s - _ * l * s + _ * r * c - i * p * c - a * r * g + i * l * g) * A, e[3] = (h * l * s - a * d * s - h * r * c + i * d * c + a * r * f - i * l * f) * A, e[4] = b * A, e[5] = (u * p * s - m * d * s + m * r * f - t * p * f - u * r * g + t * d * g) * A, e[6] = (m * l * s - o * p * s - m * r * c + t * p * c + o * r * g - t * l * g) * A, e[7] = (o * d * s - u * l * s + u * r * c - t * d * c - o * r * f + t * l * f) * A, e[8] = v * A, e[9] = (m * h * s - u * _ * s - m * i * f + t * _ * f + u * i * g - t * h * g) * A, e[10] = (o * _ * s - m * a * s + m * i * c - t * _ * c - o * i * g + t * a * g) * A, e[11] = (u * a * s - o * h * s - u * i * c + t * h * c + o * i * f - t * a * f) * A, e[12] = x * A, e[13] = (u * _ * r - m * h * r + m * i * d - t * _ * d - u * i * p + t * h * p) * A, e[14] = (m * a * r - o * _ * r - m * i * l + t * _ * l + o * i * p - t * a * p) * A, e[15] = (o * h * r - u * a * r + u * i * l - t * h * l - o * i * d + t * a * d) * A, this;
    }
    scale(e) {
      const t = this.elements, i = e.x, r = e.y, s = e.z;
      return t[0] *= i, t[4] *= r, t[8] *= s, t[1] *= i, t[5] *= r, t[9] *= s, t[2] *= i, t[6] *= r, t[10] *= s, t[3] *= i, t[7] *= r, t[11] *= s, this;
    }
    getMaxScaleOnAxis() {
      const e = this.elements, t = e[0] * e[0] + e[1] * e[1] + e[2] * e[2], i = e[4] * e[4] + e[5] * e[5] + e[6] * e[6], r = e[8] * e[8] + e[9] * e[9] + e[10] * e[10];
      return Math.sqrt(Math.max(t, i, r));
    }
    makeTranslation(e, t, i) {
      return e.isVector3 ? this.set(1, 0, 0, e.x, 0, 1, 0, e.y, 0, 0, 1, e.z, 0, 0, 0, 1) : this.set(1, 0, 0, e, 0, 1, 0, t, 0, 0, 1, i, 0, 0, 0, 1), this;
    }
    makeRotationX(e) {
      const t = Math.cos(e), i = Math.sin(e);
      return this.set(1, 0, 0, 0, 0, t, -i, 0, 0, i, t, 0, 0, 0, 0, 1), this;
    }
    makeRotationY(e) {
      const t = Math.cos(e), i = Math.sin(e);
      return this.set(t, 0, i, 0, 0, 1, 0, 0, -i, 0, t, 0, 0, 0, 0, 1), this;
    }
    makeRotationZ(e) {
      const t = Math.cos(e), i = Math.sin(e);
      return this.set(t, -i, 0, 0, i, t, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1), this;
    }
    makeRotationAxis(e, t) {
      const i = Math.cos(t), r = Math.sin(t), s = 1 - i, o = e.x, a = e.y, l = e.z, c = s * o, u = s * a;
      return this.set(c * o + i, c * a - r * l, c * l + r * a, 0, c * a + r * l, u * a + i, u * l - r * o, 0, c * l - r * a, u * l + r * o, s * l * l + i, 0, 0, 0, 0, 1), this;
    }
    makeScale(e, t, i) {
      return this.set(e, 0, 0, 0, 0, t, 0, 0, 0, 0, i, 0, 0, 0, 0, 1), this;
    }
    makeShear(e, t, i, r, s, o) {
      return this.set(1, i, s, 0, e, 1, o, 0, t, r, 1, 0, 0, 0, 0, 1), this;
    }
    compose(e, t, i) {
      const r = this.elements, s = t._x, o = t._y, a = t._z, l = t._w, c = s + s, u = o + o, h = a + a, d = s * c, f = s * u, m = s * h, _ = o * u, p = o * h, g = a * h, y = l * c, b = l * u, v = l * h, x = i.x, C = i.y, A = i.z;
      return r[0] = (1 - (_ + g)) * x, r[1] = (f + v) * x, r[2] = (m - b) * x, r[3] = 0, r[4] = (f - v) * C, r[5] = (1 - (d + g)) * C, r[6] = (p + y) * C, r[7] = 0, r[8] = (m + b) * A, r[9] = (p - y) * A, r[10] = (1 - (d + _)) * A, r[11] = 0, r[12] = e.x, r[13] = e.y, r[14] = e.z, r[15] = 1, this;
    }
    decompose(e, t, i) {
      const r = this.elements;
      let s = qs.set(r[0], r[1], r[2]).length();
      const o = qs.set(r[4], r[5], r[6]).length(), a = qs.set(r[8], r[9], r[10]).length();
      this.determinant() < 0 && (s = -s), e.x = r[12], e.y = r[13], e.z = r[14], ii.copy(this);
      const c = 1 / s, u = 1 / o, h = 1 / a;
      return ii.elements[0] *= c, ii.elements[1] *= c, ii.elements[2] *= c, ii.elements[4] *= u, ii.elements[5] *= u, ii.elements[6] *= u, ii.elements[8] *= h, ii.elements[9] *= h, ii.elements[10] *= h, t.setFromRotationMatrix(ii), i.x = s, i.y = o, i.z = a, this;
    }
    makePerspective(e, t, i, r, s, o, a = zi) {
      const l = this.elements, c = 2 * s / (t - e), u = 2 * s / (i - r), h = (t + e) / (t - e), d = (i + r) / (i - r);
      let f, m;
      if (a === zi) f = -(o + s) / (o - s), m = -2 * o * s / (o - s);
      else if (a === Ou) f = -o / (o - s), m = -o * s / (o - s);
      else throw new Error("THREE.Matrix4.makePerspective(): Invalid coordinate system: " + a);
      return l[0] = c, l[4] = 0, l[8] = h, l[12] = 0, l[1] = 0, l[5] = u, l[9] = d, l[13] = 0, l[2] = 0, l[6] = 0, l[10] = f, l[14] = m, l[3] = 0, l[7] = 0, l[11] = -1, l[15] = 0, this;
    }
    makeOrthographic(e, t, i, r, s, o, a = zi) {
      const l = this.elements, c = 1 / (t - e), u = 1 / (i - r), h = 1 / (o - s), d = (t + e) * c, f = (i + r) * u;
      let m, _;
      if (a === zi) m = (o + s) * h, _ = -2 * h;
      else if (a === Ou) m = s * h, _ = -1 * h;
      else throw new Error("THREE.Matrix4.makeOrthographic(): Invalid coordinate system: " + a);
      return l[0] = 2 * c, l[4] = 0, l[8] = 0, l[12] = -d, l[1] = 0, l[5] = 2 * u, l[9] = 0, l[13] = -f, l[2] = 0, l[6] = 0, l[10] = _, l[14] = -m, l[3] = 0, l[7] = 0, l[11] = 0, l[15] = 1, this;
    }
    equals(e) {
      const t = this.elements, i = e.elements;
      for (let r = 0; r < 16; r++) if (t[r] !== i[r]) return false;
      return true;
    }
    fromArray(e, t = 0) {
      for (let i = 0; i < 16; i++) this.elements[i] = e[i + t];
      return this;
    }
    toArray(e = [], t = 0) {
      const i = this.elements;
      return e[t] = i[0], e[t + 1] = i[1], e[t + 2] = i[2], e[t + 3] = i[3], e[t + 4] = i[4], e[t + 5] = i[5], e[t + 6] = i[6], e[t + 7] = i[7], e[t + 8] = i[8], e[t + 9] = i[9], e[t + 10] = i[10], e[t + 11] = i[11], e[t + 12] = i[12], e[t + 13] = i[13], e[t + 14] = i[14], e[t + 15] = i[15], e;
    }
  };
  const qs = new u1(), ii = new Ee(), AL = new u1(0, 0, 0), DL = new u1(1, 1, 1), z3 = new u1(), Kl = new u1(), x2 = new u1(), zm = new Ee(), Vm = new Pr();
  class Yi {
    constructor(e = 0, t = 0, i = 0, r = Yi.DEFAULT_ORDER) {
      this.isEuler = true, this._x = e, this._y = t, this._z = i, this._order = r;
    }
    get x() {
      return this._x;
    }
    set x(e) {
      this._x = e, this._onChangeCallback();
    }
    get y() {
      return this._y;
    }
    set y(e) {
      this._y = e, this._onChangeCallback();
    }
    get z() {
      return this._z;
    }
    set z(e) {
      this._z = e, this._onChangeCallback();
    }
    get order() {
      return this._order;
    }
    set order(e) {
      this._order = e, this._onChangeCallback();
    }
    set(e, t, i, r = this._order) {
      return this._x = e, this._y = t, this._z = i, this._order = r, this._onChangeCallback(), this;
    }
    clone() {
      return new this.constructor(this._x, this._y, this._z, this._order);
    }
    copy(e) {
      return this._x = e._x, this._y = e._y, this._z = e._z, this._order = e._order, this._onChangeCallback(), this;
    }
    setFromRotationMatrix(e, t = this._order, i = true) {
      const r = e.elements, s = r[0], o = r[4], a = r[8], l = r[1], c = r[5], u = r[9], h = r[2], d = r[6], f = r[10];
      switch (t) {
        case "XYZ":
          this._y = Math.asin(Ae(a, -1, 1)), Math.abs(a) < 0.9999999 ? (this._x = Math.atan2(-u, f), this._z = Math.atan2(-o, s)) : (this._x = Math.atan2(d, c), this._z = 0);
          break;
        case "YXZ":
          this._x = Math.asin(-Ae(u, -1, 1)), Math.abs(u) < 0.9999999 ? (this._y = Math.atan2(a, f), this._z = Math.atan2(l, c)) : (this._y = Math.atan2(-h, s), this._z = 0);
          break;
        case "ZXY":
          this._x = Math.asin(Ae(d, -1, 1)), Math.abs(d) < 0.9999999 ? (this._y = Math.atan2(-h, f), this._z = Math.atan2(-o, c)) : (this._y = 0, this._z = Math.atan2(l, s));
          break;
        case "ZYX":
          this._y = Math.asin(-Ae(h, -1, 1)), Math.abs(h) < 0.9999999 ? (this._x = Math.atan2(d, f), this._z = Math.atan2(l, s)) : (this._x = 0, this._z = Math.atan2(-o, c));
          break;
        case "YZX":
          this._z = Math.asin(Ae(l, -1, 1)), Math.abs(l) < 0.9999999 ? (this._x = Math.atan2(-u, c), this._y = Math.atan2(-h, s)) : (this._x = 0, this._y = Math.atan2(a, f));
          break;
        case "XZY":
          this._z = Math.asin(-Ae(o, -1, 1)), Math.abs(o) < 0.9999999 ? (this._x = Math.atan2(d, c), this._y = Math.atan2(a, s)) : (this._x = Math.atan2(-u, f), this._y = 0);
          break;
        default:
          console.warn("THREE.Euler: .setFromRotationMatrix() encountered an unknown order: " + t);
      }
      return this._order = t, i === true && this._onChangeCallback(), this;
    }
    setFromQuaternion(e, t, i) {
      return zm.makeRotationFromQuaternion(e), this.setFromRotationMatrix(zm, t, i);
    }
    setFromVector3(e, t = this._order) {
      return this.set(e.x, e.y, e.z, t);
    }
    reorder(e) {
      return Vm.setFromEuler(this), this.setFromQuaternion(Vm, e);
    }
    equals(e) {
      return e._x === this._x && e._y === this._y && e._z === this._z && e._order === this._order;
    }
    fromArray(e) {
      return this._x = e[0], this._y = e[1], this._z = e[2], e[3] !== void 0 && (this._order = e[3]), this._onChangeCallback(), this;
    }
    toArray(e = [], t = 0) {
      return e[t] = this._x, e[t + 1] = this._y, e[t + 2] = this._z, e[t + 3] = this._order, e;
    }
    _onChange(e) {
      return this._onChangeCallback = e, this;
    }
    _onChangeCallback() {
    }
    *[Symbol.iterator]() {
      yield this._x, yield this._y, yield this._z, yield this._order;
    }
  }
  Yi.DEFAULT_ORDER = "XYZ";
  class Xp {
    constructor() {
      this.mask = 1;
    }
    set(e) {
      this.mask = (1 << e | 0) >>> 0;
    }
    enable(e) {
      this.mask |= 1 << e | 0;
    }
    enableAll() {
      this.mask = -1;
    }
    toggle(e) {
      this.mask ^= 1 << e | 0;
    }
    disable(e) {
      this.mask &= ~(1 << e | 0);
    }
    disableAll() {
      this.mask = 0;
    }
    test(e) {
      return (this.mask & e.mask) !== 0;
    }
    isEnabled(e) {
      return (this.mask & (1 << e | 0)) !== 0;
    }
  }
  let RL = 0;
  const Gm = new u1(), Ys = new Pr(), s3 = new Ee(), Jl = new u1(), Oa = new u1(), PL = new u1(), LL = new Pr(), Wm = new u1(1, 0, 0), jm = new u1(0, 1, 0), Xm = new u1(0, 0, 1), $m = {
    type: "added"
  }, IL = {
    type: "removed"
  }, Ks = {
    type: "childadded",
    child: null
  }, Lh = {
    type: "childremoved",
    child: null
  };
  class Ct extends Us {
    constructor() {
      super(), this.isObject3D = true, Object.defineProperty(this, "id", {
        value: RL++
      }), this.uuid = gi(), this.name = "", this.type = "Object3D", this.parent = null, this.children = [], this.up = Ct.DEFAULT_UP.clone();
      const e = new u1(), t = new Yi(), i = new Pr(), r = new u1(1, 1, 1);
      function s() {
        i.setFromEuler(t, false);
      }
      function o() {
        t.setFromQuaternion(i, void 0, false);
      }
      t._onChange(s), i._onChange(o), Object.defineProperties(this, {
        position: {
          configurable: true,
          enumerable: true,
          value: e
        },
        rotation: {
          configurable: true,
          enumerable: true,
          value: t
        },
        quaternion: {
          configurable: true,
          enumerable: true,
          value: i
        },
        scale: {
          configurable: true,
          enumerable: true,
          value: r
        },
        modelViewMatrix: {
          value: new Ee()
        },
        normalMatrix: {
          value: new Te()
        }
      }), this.matrix = new Ee(), this.matrixWorld = new Ee(), this.matrixAutoUpdate = Ct.DEFAULT_MATRIX_AUTO_UPDATE, this.matrixWorldAutoUpdate = Ct.DEFAULT_MATRIX_WORLD_AUTO_UPDATE, this.matrixWorldNeedsUpdate = false, this.layers = new Xp(), this.visible = true, this.castShadow = false, this.receiveShadow = false, this.frustumCulled = true, this.renderOrder = 0, this.animations = [], this.customDepthMaterial = void 0, this.customDistanceMaterial = void 0, this.userData = {};
    }
    onBeforeShadow() {
    }
    onAfterShadow() {
    }
    onBeforeRender() {
    }
    onAfterRender() {
    }
    applyMatrix4(e) {
      this.matrixAutoUpdate && this.updateMatrix(), this.matrix.premultiply(e), this.matrix.decompose(this.position, this.quaternion, this.scale);
    }
    applyQuaternion(e) {
      return this.quaternion.premultiply(e), this;
    }
    setRotationFromAxisAngle(e, t) {
      this.quaternion.setFromAxisAngle(e, t);
    }
    setRotationFromEuler(e) {
      this.quaternion.setFromEuler(e, true);
    }
    setRotationFromMatrix(e) {
      this.quaternion.setFromRotationMatrix(e);
    }
    setRotationFromQuaternion(e) {
      this.quaternion.copy(e);
    }
    rotateOnAxis(e, t) {
      return Ys.setFromAxisAngle(e, t), this.quaternion.multiply(Ys), this;
    }
    rotateOnWorldAxis(e, t) {
      return Ys.setFromAxisAngle(e, t), this.quaternion.premultiply(Ys), this;
    }
    rotateX(e) {
      return this.rotateOnAxis(Wm, e);
    }
    rotateY(e) {
      return this.rotateOnAxis(jm, e);
    }
    rotateZ(e) {
      return this.rotateOnAxis(Xm, e);
    }
    translateOnAxis(e, t) {
      return Gm.copy(e).applyQuaternion(this.quaternion), this.position.add(Gm.multiplyScalar(t)), this;
    }
    translateX(e) {
      return this.translateOnAxis(Wm, e);
    }
    translateY(e) {
      return this.translateOnAxis(jm, e);
    }
    translateZ(e) {
      return this.translateOnAxis(Xm, e);
    }
    localToWorld(e) {
      return this.updateWorldMatrix(true, false), e.applyMatrix4(this.matrixWorld);
    }
    worldToLocal(e) {
      return this.updateWorldMatrix(true, false), e.applyMatrix4(s3.copy(this.matrixWorld).invert());
    }
    lookAt(e, t, i) {
      e.isVector3 ? Jl.copy(e) : Jl.set(e, t, i);
      const r = this.parent;
      this.updateWorldMatrix(true, false), Oa.setFromMatrixPosition(this.matrixWorld), this.isCamera || this.isLight ? s3.lookAt(Oa, Jl, this.up) : s3.lookAt(Jl, Oa, this.up), this.quaternion.setFromRotationMatrix(s3), r && (s3.extractRotation(r.matrixWorld), Ys.setFromRotationMatrix(s3), this.quaternion.premultiply(Ys.invert()));
    }
    add(e) {
      if (arguments.length > 1) {
        for (let t = 0; t < arguments.length; t++) this.add(arguments[t]);
        return this;
      }
      return e === this ? (console.error("THREE.Object3D.add: object can't be added as a child of itself.", e), this) : (e && e.isObject3D ? (e.removeFromParent(), e.parent = this, this.children.push(e), e.dispatchEvent($m), Ks.child = e, this.dispatchEvent(Ks), Ks.child = null) : console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.", e), this);
    }
    remove(e) {
      if (arguments.length > 1) {
        for (let i = 0; i < arguments.length; i++) this.remove(arguments[i]);
        return this;
      }
      const t = this.children.indexOf(e);
      return t !== -1 && (e.parent = null, this.children.splice(t, 1), e.dispatchEvent(IL), Lh.child = e, this.dispatchEvent(Lh), Lh.child = null), this;
    }
    removeFromParent() {
      const e = this.parent;
      return e !== null && e.remove(this), this;
    }
    clear() {
      return this.remove(...this.children);
    }
    attach(e) {
      return this.updateWorldMatrix(true, false), s3.copy(this.matrixWorld).invert(), e.parent !== null && (e.parent.updateWorldMatrix(true, false), s3.multiply(e.parent.matrixWorld)), e.applyMatrix4(s3), e.removeFromParent(), e.parent = this, this.children.push(e), e.updateWorldMatrix(false, true), e.dispatchEvent($m), Ks.child = e, this.dispatchEvent(Ks), Ks.child = null, this;
    }
    getObjectById(e) {
      return this.getObjectByProperty("id", e);
    }
    getObjectByName(e) {
      return this.getObjectByProperty("name", e);
    }
    getObjectByProperty(e, t) {
      if (this[e] === t) return this;
      for (let i = 0, r = this.children.length; i < r; i++) {
        const o = this.children[i].getObjectByProperty(e, t);
        if (o !== void 0) return o;
      }
    }
    getObjectsByProperty(e, t, i = []) {
      this[e] === t && i.push(this);
      const r = this.children;
      for (let s = 0, o = r.length; s < o; s++) r[s].getObjectsByProperty(e, t, i);
      return i;
    }
    getWorldPosition(e) {
      return this.updateWorldMatrix(true, false), e.setFromMatrixPosition(this.matrixWorld);
    }
    getWorldQuaternion(e) {
      return this.updateWorldMatrix(true, false), this.matrixWorld.decompose(Oa, e, PL), e;
    }
    getWorldScale(e) {
      return this.updateWorldMatrix(true, false), this.matrixWorld.decompose(Oa, LL, e), e;
    }
    getWorldDirection(e) {
      this.updateWorldMatrix(true, false);
      const t = this.matrixWorld.elements;
      return e.set(t[8], t[9], t[10]).normalize();
    }
    raycast() {
    }
    traverse(e) {
      e(this);
      const t = this.children;
      for (let i = 0, r = t.length; i < r; i++) t[i].traverse(e);
    }
    traverseVisible(e) {
      if (this.visible === false) return;
      e(this);
      const t = this.children;
      for (let i = 0, r = t.length; i < r; i++) t[i].traverseVisible(e);
    }
    traverseAncestors(e) {
      const t = this.parent;
      t !== null && (e(t), t.traverseAncestors(e));
    }
    updateMatrix() {
      this.matrix.compose(this.position, this.quaternion, this.scale), this.matrixWorldNeedsUpdate = true;
    }
    updateMatrixWorld(e) {
      this.matrixAutoUpdate && this.updateMatrix(), (this.matrixWorldNeedsUpdate || e) && (this.matrixWorldAutoUpdate === true && (this.parent === null ? this.matrixWorld.copy(this.matrix) : this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix)), this.matrixWorldNeedsUpdate = false, e = true);
      const t = this.children;
      for (let i = 0, r = t.length; i < r; i++) t[i].updateMatrixWorld(e);
    }
    updateWorldMatrix(e, t) {
      const i = this.parent;
      if (e === true && i !== null && i.updateWorldMatrix(true, false), this.matrixAutoUpdate && this.updateMatrix(), this.matrixWorldAutoUpdate === true && (this.parent === null ? this.matrixWorld.copy(this.matrix) : this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix)), t === true) {
        const r = this.children;
        for (let s = 0, o = r.length; s < o; s++) r[s].updateWorldMatrix(false, true);
      }
    }
    toJSON(e) {
      const t = e === void 0 || typeof e == "string", i = {};
      t && (e = {
        geometries: {},
        materials: {},
        textures: {},
        images: {},
        shapes: {},
        skeletons: {},
        animations: {},
        nodes: {}
      }, i.metadata = {
        version: 4.7,
        type: "Object",
        generator: "Object3D.toJSON"
      });
      const r = {};
      r.uuid = this.uuid, r.type = this.type, this.name !== "" && (r.name = this.name), this.castShadow === true && (r.castShadow = true), this.receiveShadow === true && (r.receiveShadow = true), this.visible === false && (r.visible = false), this.frustumCulled === false && (r.frustumCulled = false), this.renderOrder !== 0 && (r.renderOrder = this.renderOrder), Object.keys(this.userData).length > 0 && (r.userData = this.userData), r.layers = this.layers.mask, r.matrix = this.matrix.toArray(), r.up = this.up.toArray(), this.matrixAutoUpdate === false && (r.matrixAutoUpdate = false), this.isInstancedMesh && (r.type = "InstancedMesh", r.count = this.count, r.instanceMatrix = this.instanceMatrix.toJSON(), this.instanceColor !== null && (r.instanceColor = this.instanceColor.toJSON())), this.isBatchedMesh && (r.type = "BatchedMesh", r.perObjectFrustumCulled = this.perObjectFrustumCulled, r.sortObjects = this.sortObjects, r.drawRanges = this._drawRanges, r.reservedRanges = this._reservedRanges, r.geometryInfo = this._geometryInfo.map((a) => ({
        ...a,
        boundingBox: a.boundingBox ? a.boundingBox.toJSON() : void 0,
        boundingSphere: a.boundingSphere ? a.boundingSphere.toJSON() : void 0
      })), r.instanceInfo = this._instanceInfo.map((a) => ({
        ...a
      })), r.availableInstanceIds = this._availableInstanceIds.slice(), r.availableGeometryIds = this._availableGeometryIds.slice(), r.nextIndexStart = this._nextIndexStart, r.nextVertexStart = this._nextVertexStart, r.geometryCount = this._geometryCount, r.maxInstanceCount = this._maxInstanceCount, r.maxVertexCount = this._maxVertexCount, r.maxIndexCount = this._maxIndexCount, r.geometryInitialized = this._geometryInitialized, r.matricesTexture = this._matricesTexture.toJSON(e), r.indirectTexture = this._indirectTexture.toJSON(e), this._colorsTexture !== null && (r.colorsTexture = this._colorsTexture.toJSON(e)), this.boundingSphere !== null && (r.boundingSphere = this.boundingSphere.toJSON()), this.boundingBox !== null && (r.boundingBox = this.boundingBox.toJSON()));
      function s(a, l) {
        return a[l.uuid] === void 0 && (a[l.uuid] = l.toJSON(e)), l.uuid;
      }
      if (this.isScene) this.background && (this.background.isColor ? r.background = this.background.toJSON() : this.background.isTexture && (r.background = this.background.toJSON(e).uuid)), this.environment && this.environment.isTexture && this.environment.isRenderTargetTexture !== true && (r.environment = this.environment.toJSON(e).uuid);
      else if (this.isMesh || this.isLine || this.isPoints) {
        r.geometry = s(e.geometries, this.geometry);
        const a = this.geometry.parameters;
        if (a !== void 0 && a.shapes !== void 0) {
          const l = a.shapes;
          if (Array.isArray(l)) for (let c = 0, u = l.length; c < u; c++) {
            const h = l[c];
            s(e.shapes, h);
          }
          else s(e.shapes, l);
        }
      }
      if (this.isSkinnedMesh && (r.bindMode = this.bindMode, r.bindMatrix = this.bindMatrix.toArray(), this.skeleton !== void 0 && (s(e.skeletons, this.skeleton), r.skeleton = this.skeleton.uuid)), this.material !== void 0) if (Array.isArray(this.material)) {
        const a = [];
        for (let l = 0, c = this.material.length; l < c; l++) a.push(s(e.materials, this.material[l]));
        r.material = a;
      } else r.material = s(e.materials, this.material);
      if (this.children.length > 0) {
        r.children = [];
        for (let a = 0; a < this.children.length; a++) r.children.push(this.children[a].toJSON(e).object);
      }
      if (this.animations.length > 0) {
        r.animations = [];
        for (let a = 0; a < this.animations.length; a++) {
          const l = this.animations[a];
          r.animations.push(s(e.animations, l));
        }
      }
      if (t) {
        const a = o(e.geometries), l = o(e.materials), c = o(e.textures), u = o(e.images), h = o(e.shapes), d = o(e.skeletons), f = o(e.animations), m = o(e.nodes);
        a.length > 0 && (i.geometries = a), l.length > 0 && (i.materials = l), c.length > 0 && (i.textures = c), u.length > 0 && (i.images = u), h.length > 0 && (i.shapes = h), d.length > 0 && (i.skeletons = d), f.length > 0 && (i.animations = f), m.length > 0 && (i.nodes = m);
      }
      return i.object = r, i;
      function o(a) {
        const l = [];
        for (const c in a) {
          const u = a[c];
          delete u.metadata, l.push(u);
        }
        return l;
      }
    }
    clone(e) {
      return new this.constructor().copy(this, e);
    }
    copy(e, t = true) {
      if (this.name = e.name, this.up.copy(e.up), this.position.copy(e.position), this.rotation.order = e.rotation.order, this.quaternion.copy(e.quaternion), this.scale.copy(e.scale), this.matrix.copy(e.matrix), this.matrixWorld.copy(e.matrixWorld), this.matrixAutoUpdate = e.matrixAutoUpdate, this.matrixWorldAutoUpdate = e.matrixWorldAutoUpdate, this.matrixWorldNeedsUpdate = e.matrixWorldNeedsUpdate, this.layers.mask = e.layers.mask, this.visible = e.visible, this.castShadow = e.castShadow, this.receiveShadow = e.receiveShadow, this.frustumCulled = e.frustumCulled, this.renderOrder = e.renderOrder, this.animations = e.animations.slice(), this.userData = JSON.parse(JSON.stringify(e.userData)), t === true) for (let i = 0; i < e.children.length; i++) {
        const r = e.children[i];
        this.add(r.clone());
      }
      return this;
    }
  }
  Ct.DEFAULT_UP = new u1(0, 1, 0);
  Ct.DEFAULT_MATRIX_AUTO_UPDATE = true;
  Ct.DEFAULT_MATRIX_WORLD_AUTO_UPDATE = true;
  const ri = new u1(), o3 = new u1(), Ih = new u1(), a3 = new u1(), Js = new u1(), Qs = new u1(), qm = new u1(), Fh = new u1(), Oh = new u1(), kh = new u1(), Nh = new Je(), Uh = new Je(), Bh = new Je();
  hi = class {
    constructor(e = new u1(), t = new u1(), i = new u1()) {
      this.a = e, this.b = t, this.c = i;
    }
    static getNormal(e, t, i, r) {
      r.subVectors(i, t), ri.subVectors(e, t), r.cross(ri);
      const s = r.lengthSq();
      return s > 0 ? r.multiplyScalar(1 / Math.sqrt(s)) : r.set(0, 0, 0);
    }
    static getBarycoord(e, t, i, r, s) {
      ri.subVectors(r, t), o3.subVectors(i, t), Ih.subVectors(e, t);
      const o = ri.dot(ri), a = ri.dot(o3), l = ri.dot(Ih), c = o3.dot(o3), u = o3.dot(Ih), h = o * c - a * a;
      if (h === 0) return s.set(0, 0, 0), null;
      const d = 1 / h, f = (c * l - a * u) * d, m = (o * u - a * l) * d;
      return s.set(1 - f - m, m, f);
    }
    static containsPoint(e, t, i, r) {
      return this.getBarycoord(e, t, i, r, a3) === null ? false : a3.x >= 0 && a3.y >= 0 && a3.x + a3.y <= 1;
    }
    static getInterpolation(e, t, i, r, s, o, a, l) {
      return this.getBarycoord(e, t, i, r, a3) === null ? (l.x = 0, l.y = 0, "z" in l && (l.z = 0), "w" in l && (l.w = 0), null) : (l.setScalar(0), l.addScaledVector(s, a3.x), l.addScaledVector(o, a3.y), l.addScaledVector(a, a3.z), l);
    }
    static getInterpolatedAttribute(e, t, i, r, s, o) {
      return Nh.setScalar(0), Uh.setScalar(0), Bh.setScalar(0), Nh.fromBufferAttribute(e, t), Uh.fromBufferAttribute(e, i), Bh.fromBufferAttribute(e, r), o.setScalar(0), o.addScaledVector(Nh, s.x), o.addScaledVector(Uh, s.y), o.addScaledVector(Bh, s.z), o;
    }
    static isFrontFacing(e, t, i, r) {
      return ri.subVectors(i, t), o3.subVectors(e, t), ri.cross(o3).dot(r) < 0;
    }
    set(e, t, i) {
      return this.a.copy(e), this.b.copy(t), this.c.copy(i), this;
    }
    setFromPointsAndIndices(e, t, i, r) {
      return this.a.copy(e[t]), this.b.copy(e[i]), this.c.copy(e[r]), this;
    }
    setFromAttributeAndIndices(e, t, i, r) {
      return this.a.fromBufferAttribute(e, t), this.b.fromBufferAttribute(e, i), this.c.fromBufferAttribute(e, r), this;
    }
    clone() {
      return new this.constructor().copy(this);
    }
    copy(e) {
      return this.a.copy(e.a), this.b.copy(e.b), this.c.copy(e.c), this;
    }
    getArea() {
      return ri.subVectors(this.c, this.b), o3.subVectors(this.a, this.b), ri.cross(o3).length() * 0.5;
    }
    getMidpoint(e) {
      return e.addVectors(this.a, this.b).add(this.c).multiplyScalar(1 / 3);
    }
    getNormal(e) {
      return hi.getNormal(this.a, this.b, this.c, e);
    }
    getPlane(e) {
      return e.setFromCoplanarPoints(this.a, this.b, this.c);
    }
    getBarycoord(e, t) {
      return hi.getBarycoord(e, this.a, this.b, this.c, t);
    }
    getInterpolation(e, t, i, r, s) {
      return hi.getInterpolation(e, this.a, this.b, this.c, t, i, r, s);
    }
    containsPoint(e) {
      return hi.containsPoint(e, this.a, this.b, this.c);
    }
    isFrontFacing(e) {
      return hi.isFrontFacing(this.a, this.b, this.c, e);
    }
    intersectsBox(e) {
      return e.intersectsTriangle(this);
    }
    closestPointToPoint(e, t) {
      const i = this.a, r = this.b, s = this.c;
      let o, a;
      Js.subVectors(r, i), Qs.subVectors(s, i), Fh.subVectors(e, i);
      const l = Js.dot(Fh), c = Qs.dot(Fh);
      if (l <= 0 && c <= 0) return t.copy(i);
      Oh.subVectors(e, r);
      const u = Js.dot(Oh), h = Qs.dot(Oh);
      if (u >= 0 && h <= u) return t.copy(r);
      const d = l * h - u * c;
      if (d <= 0 && l >= 0 && u <= 0) return o = l / (l - u), t.copy(i).addScaledVector(Js, o);
      kh.subVectors(e, s);
      const f = Js.dot(kh), m = Qs.dot(kh);
      if (m >= 0 && f <= m) return t.copy(s);
      const _ = f * c - l * m;
      if (_ <= 0 && c >= 0 && m <= 0) return a = c / (c - m), t.copy(i).addScaledVector(Qs, a);
      const p = u * m - f * h;
      if (p <= 0 && h - u >= 0 && f - m >= 0) return qm.subVectors(s, r), a = (h - u) / (h - u + (f - m)), t.copy(r).addScaledVector(qm, a);
      const g = 1 / (p + _ + d);
      return o = _ * g, a = d * g, t.copy(i).addScaledVector(Js, o).addScaledVector(Qs, a);
    }
    equals(e) {
      return e.a.equals(this.a) && e.b.equals(this.b) && e.c.equals(this.c);
    }
  };
  const v8 = {
    aliceblue: 15792383,
    antiquewhite: 16444375,
    aqua: 65535,
    aquamarine: 8388564,
    azure: 15794175,
    beige: 16119260,
    bisque: 16770244,
    black: 0,
    blanchedalmond: 16772045,
    blue: 255,
    blueviolet: 9055202,
    brown: 10824234,
    burlywood: 14596231,
    cadetblue: 6266528,
    chartreuse: 8388352,
    chocolate: 13789470,
    coral: 16744272,
    cornflowerblue: 6591981,
    cornsilk: 16775388,
    crimson: 14423100,
    cyan: 65535,
    darkblue: 139,
    darkcyan: 35723,
    darkgoldenrod: 12092939,
    darkgray: 11119017,
    darkgreen: 25600,
    darkgrey: 11119017,
    darkkhaki: 12433259,
    darkmagenta: 9109643,
    darkolivegreen: 5597999,
    darkorange: 16747520,
    darkorchid: 10040012,
    darkred: 9109504,
    darksalmon: 15308410,
    darkseagreen: 9419919,
    darkslateblue: 4734347,
    darkslategray: 3100495,
    darkslategrey: 3100495,
    darkturquoise: 52945,
    darkviolet: 9699539,
    deeppink: 16716947,
    deepskyblue: 49151,
    dimgray: 6908265,
    dimgrey: 6908265,
    dodgerblue: 2003199,
    firebrick: 11674146,
    floralwhite: 16775920,
    forestgreen: 2263842,
    fuchsia: 16711935,
    gainsboro: 14474460,
    ghostwhite: 16316671,
    gold: 16766720,
    goldenrod: 14329120,
    gray: 8421504,
    green: 32768,
    greenyellow: 11403055,
    grey: 8421504,
    honeydew: 15794160,
    hotpink: 16738740,
    indianred: 13458524,
    indigo: 4915330,
    ivory: 16777200,
    khaki: 15787660,
    lavender: 15132410,
    lavenderblush: 16773365,
    lawngreen: 8190976,
    lemonchiffon: 16775885,
    lightblue: 11393254,
    lightcoral: 15761536,
    lightcyan: 14745599,
    lightgoldenrodyellow: 16448210,
    lightgray: 13882323,
    lightgreen: 9498256,
    lightgrey: 13882323,
    lightpink: 16758465,
    lightsalmon: 16752762,
    lightseagreen: 2142890,
    lightskyblue: 8900346,
    lightslategray: 7833753,
    lightslategrey: 7833753,
    lightsteelblue: 11584734,
    lightyellow: 16777184,
    lime: 65280,
    limegreen: 3329330,
    linen: 16445670,
    magenta: 16711935,
    maroon: 8388608,
    mediumaquamarine: 6737322,
    mediumblue: 205,
    mediumorchid: 12211667,
    mediumpurple: 9662683,
    mediumseagreen: 3978097,
    mediumslateblue: 8087790,
    mediumspringgreen: 64154,
    mediumturquoise: 4772300,
    mediumvioletred: 13047173,
    midnightblue: 1644912,
    mintcream: 16121850,
    mistyrose: 16770273,
    moccasin: 16770229,
    navajowhite: 16768685,
    navy: 128,
    oldlace: 16643558,
    olive: 8421376,
    olivedrab: 7048739,
    orange: 16753920,
    orangered: 16729344,
    orchid: 14315734,
    palegoldenrod: 15657130,
    palegreen: 10025880,
    paleturquoise: 11529966,
    palevioletred: 14381203,
    papayawhip: 16773077,
    peachpuff: 16767673,
    peru: 13468991,
    pink: 16761035,
    plum: 14524637,
    powderblue: 11591910,
    purple: 8388736,
    rebeccapurple: 6697881,
    red: 16711680,
    rosybrown: 12357519,
    royalblue: 4286945,
    saddlebrown: 9127187,
    salmon: 16416882,
    sandybrown: 16032864,
    seagreen: 3050327,
    seashell: 16774638,
    sienna: 10506797,
    silver: 12632256,
    skyblue: 8900331,
    slateblue: 6970061,
    slategray: 7372944,
    slategrey: 7372944,
    snow: 16775930,
    springgreen: 65407,
    steelblue: 4620980,
    tan: 13808780,
    teal: 32896,
    thistle: 14204888,
    tomato: 16737095,
    turquoise: 4251856,
    violet: 15631086,
    wheat: 16113331,
    white: 16777215,
    whitesmoke: 16119285,
    yellow: 16776960,
    yellowgreen: 10145074
  }, V3 = {
    h: 0,
    s: 0,
    l: 0
  }, Ql = {
    h: 0,
    s: 0,
    l: 0
  };
  function Hh(n, e, t) {
    return t < 0 && (t += 1), t > 1 && (t -= 1), t < 1 / 6 ? n + (e - n) * 6 * t : t < 1 / 2 ? e : t < 2 / 3 ? n + (e - n) * 6 * (2 / 3 - t) : n;
  }
  class xe {
    constructor(e, t, i) {
      return this.isColor = true, this.r = 1, this.g = 1, this.b = 1, this.set(e, t, i);
    }
    set(e, t, i) {
      if (t === void 0 && i === void 0) {
        const r = e;
        r && r.isColor ? this.copy(r) : typeof r == "number" ? this.setHex(r) : typeof r == "string" && this.setStyle(r);
      } else this.setRGB(e, t, i);
      return this;
    }
    setScalar(e) {
      return this.r = e, this.g = e, this.b = e, this;
    }
    setHex(e, t = Wt) {
      return e = Math.floor(e), this.r = (e >> 16 & 255) / 255, this.g = (e >> 8 & 255) / 255, this.b = (e & 255) / 255, ze.colorSpaceToWorking(this, t), this;
    }
    setRGB(e, t, i, r = ze.workingColorSpace) {
      return this.r = e, this.g = t, this.b = i, ze.colorSpaceToWorking(this, r), this;
    }
    setHSL(e, t, i, r = ze.workingColorSpace) {
      if (e = Wp(e, 1), t = Ae(t, 0, 1), i = Ae(i, 0, 1), t === 0) this.r = this.g = this.b = i;
      else {
        const s = i <= 0.5 ? i * (1 + t) : i + t - i * t, o = 2 * i - s;
        this.r = Hh(o, s, e + 1 / 3), this.g = Hh(o, s, e), this.b = Hh(o, s, e - 1 / 3);
      }
      return ze.colorSpaceToWorking(this, r), this;
    }
    setStyle(e, t = Wt) {
      function i(s) {
        s !== void 0 && parseFloat(s) < 1 && console.warn("THREE.Color: Alpha component of " + e + " will be ignored.");
      }
      let r;
      if (r = /^(\w+)\(([^\)]*)\)/.exec(e)) {
        let s;
        const o = r[1], a = r[2];
        switch (o) {
          case "rgb":
          case "rgba":
            if (s = /^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(a)) return i(s[4]), this.setRGB(Math.min(255, parseInt(s[1], 10)) / 255, Math.min(255, parseInt(s[2], 10)) / 255, Math.min(255, parseInt(s[3], 10)) / 255, t);
            if (s = /^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(a)) return i(s[4]), this.setRGB(Math.min(100, parseInt(s[1], 10)) / 100, Math.min(100, parseInt(s[2], 10)) / 100, Math.min(100, parseInt(s[3], 10)) / 100, t);
            break;
          case "hsl":
          case "hsla":
            if (s = /^\s*(\d*\.?\d+)\s*,\s*(\d*\.?\d+)\%\s*,\s*(\d*\.?\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(a)) return i(s[4]), this.setHSL(parseFloat(s[1]) / 360, parseFloat(s[2]) / 100, parseFloat(s[3]) / 100, t);
            break;
          default:
            console.warn("THREE.Color: Unknown color model " + e);
        }
      } else if (r = /^\#([A-Fa-f\d]+)$/.exec(e)) {
        const s = r[1], o = s.length;
        if (o === 3) return this.setRGB(parseInt(s.charAt(0), 16) / 15, parseInt(s.charAt(1), 16) / 15, parseInt(s.charAt(2), 16) / 15, t);
        if (o === 6) return this.setHex(parseInt(s, 16), t);
        console.warn("THREE.Color: Invalid hex color " + e);
      } else if (e && e.length > 0) return this.setColorName(e, t);
      return this;
    }
    setColorName(e, t = Wt) {
      const i = v8[e.toLowerCase()];
      return i !== void 0 ? this.setHex(i, t) : console.warn("THREE.Color: Unknown color " + e), this;
    }
    clone() {
      return new this.constructor(this.r, this.g, this.b);
    }
    copy(e) {
      return this.r = e.r, this.g = e.g, this.b = e.b, this;
    }
    copySRGBToLinear(e) {
      return this.r = T3(e.r), this.g = T3(e.g), this.b = T3(e.b), this;
    }
    copyLinearToSRGB(e) {
      return this.r = ko(e.r), this.g = ko(e.g), this.b = ko(e.b), this;
    }
    convertSRGBToLinear() {
      return this.copySRGBToLinear(this), this;
    }
    convertLinearToSRGB() {
      return this.copyLinearToSRGB(this), this;
    }
    getHex(e = Wt) {
      return ze.workingToColorSpace(Sn.copy(this), e), Math.round(Ae(Sn.r * 255, 0, 255)) * 65536 + Math.round(Ae(Sn.g * 255, 0, 255)) * 256 + Math.round(Ae(Sn.b * 255, 0, 255));
    }
    getHexString(e = Wt) {
      return ("000000" + this.getHex(e).toString(16)).slice(-6);
    }
    getHSL(e, t = ze.workingColorSpace) {
      ze.workingToColorSpace(Sn.copy(this), t);
      const i = Sn.r, r = Sn.g, s = Sn.b, o = Math.max(i, r, s), a = Math.min(i, r, s);
      let l, c;
      const u = (a + o) / 2;
      if (a === o) l = 0, c = 0;
      else {
        const h = o - a;
        switch (c = u <= 0.5 ? h / (o + a) : h / (2 - o - a), o) {
          case i:
            l = (r - s) / h + (r < s ? 6 : 0);
            break;
          case r:
            l = (s - i) / h + 2;
            break;
          case s:
            l = (i - r) / h + 4;
            break;
        }
        l /= 6;
      }
      return e.h = l, e.s = c, e.l = u, e;
    }
    getRGB(e, t = ze.workingColorSpace) {
      return ze.workingToColorSpace(Sn.copy(this), t), e.r = Sn.r, e.g = Sn.g, e.b = Sn.b, e;
    }
    getStyle(e = Wt) {
      ze.workingToColorSpace(Sn.copy(this), e);
      const t = Sn.r, i = Sn.g, r = Sn.b;
      return e !== Wt ? `color(${e} ${t.toFixed(3)} ${i.toFixed(3)} ${r.toFixed(3)})` : `rgb(${Math.round(t * 255)},${Math.round(i * 255)},${Math.round(r * 255)})`;
    }
    offsetHSL(e, t, i) {
      return this.getHSL(V3), this.setHSL(V3.h + e, V3.s + t, V3.l + i);
    }
    add(e) {
      return this.r += e.r, this.g += e.g, this.b += e.b, this;
    }
    addColors(e, t) {
      return this.r = e.r + t.r, this.g = e.g + t.g, this.b = e.b + t.b, this;
    }
    addScalar(e) {
      return this.r += e, this.g += e, this.b += e, this;
    }
    sub(e) {
      return this.r = Math.max(0, this.r - e.r), this.g = Math.max(0, this.g - e.g), this.b = Math.max(0, this.b - e.b), this;
    }
    multiply(e) {
      return this.r *= e.r, this.g *= e.g, this.b *= e.b, this;
    }
    multiplyScalar(e) {
      return this.r *= e, this.g *= e, this.b *= e, this;
    }
    lerp(e, t) {
      return this.r += (e.r - this.r) * t, this.g += (e.g - this.g) * t, this.b += (e.b - this.b) * t, this;
    }
    lerpColors(e, t, i) {
      return this.r = e.r + (t.r - e.r) * i, this.g = e.g + (t.g - e.g) * i, this.b = e.b + (t.b - e.b) * i, this;
    }
    lerpHSL(e, t) {
      this.getHSL(V3), e.getHSL(Ql);
      const i = x0(V3.h, Ql.h, t), r = x0(V3.s, Ql.s, t), s = x0(V3.l, Ql.l, t);
      return this.setHSL(i, r, s), this;
    }
    setFromVector3(e) {
      return this.r = e.x, this.g = e.y, this.b = e.z, this;
    }
    applyMatrix3(e) {
      const t = this.r, i = this.g, r = this.b, s = e.elements;
      return this.r = s[0] * t + s[3] * i + s[6] * r, this.g = s[1] * t + s[4] * i + s[7] * r, this.b = s[2] * t + s[5] * i + s[8] * r, this;
    }
    equals(e) {
      return e.r === this.r && e.g === this.g && e.b === this.b;
    }
    fromArray(e, t = 0) {
      return this.r = e[t], this.g = e[t + 1], this.b = e[t + 2], this;
    }
    toArray(e = [], t = 0) {
      return e[t] = this.r, e[t + 1] = this.g, e[t + 2] = this.b, e;
    }
    fromBufferAttribute(e, t) {
      return this.r = e.getX(t), this.g = e.getY(t), this.b = e.getZ(t), this;
    }
    toJSON() {
      return this.getHex();
    }
    *[Symbol.iterator]() {
      yield this.r, yield this.g, yield this.b;
    }
  }
  const Sn = new xe();
  xe.NAMES = v8;
  let FL = 0;
  Y2 = class extends Us {
    constructor() {
      super(), this.isMaterial = true, Object.defineProperty(this, "id", {
        value: FL++
      }), this.uuid = gi(), this.name = "", this.type = "Material", this.blending = Fo, this.side = D3, this.vertexColors = false, this.opacity = 1, this.transparent = false, this.alphaHash = false, this.blendSrc = S4, this.blendDst = E4, this.blendEquation = os, this.blendSrcAlpha = null, this.blendDstAlpha = null, this.blendEquationAlpha = null, this.blendColor = new xe(0, 0, 0), this.blendAlpha = 0, this.depthFunc = ta, this.depthTest = true, this.depthWrite = true, this.stencilWriteMask = 255, this.stencilFunc = Fm, this.stencilRef = 0, this.stencilFuncMask = 255, this.stencilFail = Gs, this.stencilZFail = Gs, this.stencilZPass = Gs, this.stencilWrite = false, this.clippingPlanes = null, this.clipIntersection = false, this.clipShadows = false, this.shadowSide = null, this.colorWrite = true, this.precision = null, this.polygonOffset = false, this.polygonOffsetFactor = 0, this.polygonOffsetUnits = 0, this.dithering = false, this.alphaToCoverage = false, this.premultipliedAlpha = false, this.forceSinglePass = false, this.allowOverride = true, this.visible = true, this.toneMapped = true, this.userData = {}, this.version = 0, this._alphaTest = 0;
    }
    get alphaTest() {
      return this._alphaTest;
    }
    set alphaTest(e) {
      this._alphaTest > 0 != e > 0 && this.version++, this._alphaTest = e;
    }
    onBeforeRender() {
    }
    onBeforeCompile() {
    }
    customProgramCacheKey() {
      return this.onBeforeCompile.toString();
    }
    setValues(e) {
      if (e !== void 0) for (const t in e) {
        const i = e[t];
        if (i === void 0) {
          console.warn(`THREE.Material: parameter '${t}' has value of undefined.`);
          continue;
        }
        const r = this[t];
        if (r === void 0) {
          console.warn(`THREE.Material: '${t}' is not a property of THREE.${this.type}.`);
          continue;
        }
        r && r.isColor ? r.set(i) : r && r.isVector3 && i && i.isVector3 ? r.copy(i) : this[t] = i;
      }
    }
    toJSON(e) {
      const t = e === void 0 || typeof e == "string";
      t && (e = {
        textures: {},
        images: {}
      });
      const i = {
        metadata: {
          version: 4.7,
          type: "Material",
          generator: "Material.toJSON"
        }
      };
      i.uuid = this.uuid, i.type = this.type, this.name !== "" && (i.name = this.name), this.color && this.color.isColor && (i.color = this.color.getHex()), this.roughness !== void 0 && (i.roughness = this.roughness), this.metalness !== void 0 && (i.metalness = this.metalness), this.sheen !== void 0 && (i.sheen = this.sheen), this.sheenColor && this.sheenColor.isColor && (i.sheenColor = this.sheenColor.getHex()), this.sheenRoughness !== void 0 && (i.sheenRoughness = this.sheenRoughness), this.emissive && this.emissive.isColor && (i.emissive = this.emissive.getHex()), this.emissiveIntensity !== void 0 && this.emissiveIntensity !== 1 && (i.emissiveIntensity = this.emissiveIntensity), this.specular && this.specular.isColor && (i.specular = this.specular.getHex()), this.specularIntensity !== void 0 && (i.specularIntensity = this.specularIntensity), this.specularColor && this.specularColor.isColor && (i.specularColor = this.specularColor.getHex()), this.shininess !== void 0 && (i.shininess = this.shininess), this.clearcoat !== void 0 && (i.clearcoat = this.clearcoat), this.clearcoatRoughness !== void 0 && (i.clearcoatRoughness = this.clearcoatRoughness), this.clearcoatMap && this.clearcoatMap.isTexture && (i.clearcoatMap = this.clearcoatMap.toJSON(e).uuid), this.clearcoatRoughnessMap && this.clearcoatRoughnessMap.isTexture && (i.clearcoatRoughnessMap = this.clearcoatRoughnessMap.toJSON(e).uuid), this.clearcoatNormalMap && this.clearcoatNormalMap.isTexture && (i.clearcoatNormalMap = this.clearcoatNormalMap.toJSON(e).uuid, i.clearcoatNormalScale = this.clearcoatNormalScale.toArray()), this.dispersion !== void 0 && (i.dispersion = this.dispersion), this.iridescence !== void 0 && (i.iridescence = this.iridescence), this.iridescenceIOR !== void 0 && (i.iridescenceIOR = this.iridescenceIOR), this.iridescenceThicknessRange !== void 0 && (i.iridescenceThicknessRange = this.iridescenceThicknessRange), this.iridescenceMap && this.iridescenceMap.isTexture && (i.iridescenceMap = this.iridescenceMap.toJSON(e).uuid), this.iridescenceThicknessMap && this.iridescenceThicknessMap.isTexture && (i.iridescenceThicknessMap = this.iridescenceThicknessMap.toJSON(e).uuid), this.anisotropy !== void 0 && (i.anisotropy = this.anisotropy), this.anisotropyRotation !== void 0 && (i.anisotropyRotation = this.anisotropyRotation), this.anisotropyMap && this.anisotropyMap.isTexture && (i.anisotropyMap = this.anisotropyMap.toJSON(e).uuid), this.map && this.map.isTexture && (i.map = this.map.toJSON(e).uuid), this.matcap && this.matcap.isTexture && (i.matcap = this.matcap.toJSON(e).uuid), this.alphaMap && this.alphaMap.isTexture && (i.alphaMap = this.alphaMap.toJSON(e).uuid), this.lightMap && this.lightMap.isTexture && (i.lightMap = this.lightMap.toJSON(e).uuid, i.lightMapIntensity = this.lightMapIntensity), this.aoMap && this.aoMap.isTexture && (i.aoMap = this.aoMap.toJSON(e).uuid, i.aoMapIntensity = this.aoMapIntensity), this.bumpMap && this.bumpMap.isTexture && (i.bumpMap = this.bumpMap.toJSON(e).uuid, i.bumpScale = this.bumpScale), this.normalMap && this.normalMap.isTexture && (i.normalMap = this.normalMap.toJSON(e).uuid, i.normalMapType = this.normalMapType, i.normalScale = this.normalScale.toArray()), this.displacementMap && this.displacementMap.isTexture && (i.displacementMap = this.displacementMap.toJSON(e).uuid, i.displacementScale = this.displacementScale, i.displacementBias = this.displacementBias), this.roughnessMap && this.roughnessMap.isTexture && (i.roughnessMap = this.roughnessMap.toJSON(e).uuid), this.metalnessMap && this.metalnessMap.isTexture && (i.metalnessMap = this.metalnessMap.toJSON(e).uuid), this.emissiveMap && this.emissiveMap.isTexture && (i.emissiveMap = this.emissiveMap.toJSON(e).uuid), this.specularMap && this.specularMap.isTexture && (i.specularMap = this.specularMap.toJSON(e).uuid), this.specularIntensityMap && this.specularIntensityMap.isTexture && (i.specularIntensityMap = this.specularIntensityMap.toJSON(e).uuid), this.specularColorMap && this.specularColorMap.isTexture && (i.specularColorMap = this.specularColorMap.toJSON(e).uuid), this.envMap && this.envMap.isTexture && (i.envMap = this.envMap.toJSON(e).uuid, this.combine !== void 0 && (i.combine = this.combine)), this.envMapRotation !== void 0 && (i.envMapRotation = this.envMapRotation.toArray()), this.envMapIntensity !== void 0 && (i.envMapIntensity = this.envMapIntensity), this.reflectivity !== void 0 && (i.reflectivity = this.reflectivity), this.refractionRatio !== void 0 && (i.refractionRatio = this.refractionRatio), this.gradientMap && this.gradientMap.isTexture && (i.gradientMap = this.gradientMap.toJSON(e).uuid), this.transmission !== void 0 && (i.transmission = this.transmission), this.transmissionMap && this.transmissionMap.isTexture && (i.transmissionMap = this.transmissionMap.toJSON(e).uuid), this.thickness !== void 0 && (i.thickness = this.thickness), this.thicknessMap && this.thicknessMap.isTexture && (i.thicknessMap = this.thicknessMap.toJSON(e).uuid), this.attenuationDistance !== void 0 && this.attenuationDistance !== 1 / 0 && (i.attenuationDistance = this.attenuationDistance), this.attenuationColor !== void 0 && (i.attenuationColor = this.attenuationColor.getHex()), this.size !== void 0 && (i.size = this.size), this.shadowSide !== null && (i.shadowSide = this.shadowSide), this.sizeAttenuation !== void 0 && (i.sizeAttenuation = this.sizeAttenuation), this.blending !== Fo && (i.blending = this.blending), this.side !== D3 && (i.side = this.side), this.vertexColors === true && (i.vertexColors = true), this.opacity < 1 && (i.opacity = this.opacity), this.transparent === true && (i.transparent = true), this.blendSrc !== S4 && (i.blendSrc = this.blendSrc), this.blendDst !== E4 && (i.blendDst = this.blendDst), this.blendEquation !== os && (i.blendEquation = this.blendEquation), this.blendSrcAlpha !== null && (i.blendSrcAlpha = this.blendSrcAlpha), this.blendDstAlpha !== null && (i.blendDstAlpha = this.blendDstAlpha), this.blendEquationAlpha !== null && (i.blendEquationAlpha = this.blendEquationAlpha), this.blendColor && this.blendColor.isColor && (i.blendColor = this.blendColor.getHex()), this.blendAlpha !== 0 && (i.blendAlpha = this.blendAlpha), this.depthFunc !== ta && (i.depthFunc = this.depthFunc), this.depthTest === false && (i.depthTest = this.depthTest), this.depthWrite === false && (i.depthWrite = this.depthWrite), this.colorWrite === false && (i.colorWrite = this.colorWrite), this.stencilWriteMask !== 255 && (i.stencilWriteMask = this.stencilWriteMask), this.stencilFunc !== Fm && (i.stencilFunc = this.stencilFunc), this.stencilRef !== 0 && (i.stencilRef = this.stencilRef), this.stencilFuncMask !== 255 && (i.stencilFuncMask = this.stencilFuncMask), this.stencilFail !== Gs && (i.stencilFail = this.stencilFail), this.stencilZFail !== Gs && (i.stencilZFail = this.stencilZFail), this.stencilZPass !== Gs && (i.stencilZPass = this.stencilZPass), this.stencilWrite === true && (i.stencilWrite = this.stencilWrite), this.rotation !== void 0 && this.rotation !== 0 && (i.rotation = this.rotation), this.polygonOffset === true && (i.polygonOffset = true), this.polygonOffsetFactor !== 0 && (i.polygonOffsetFactor = this.polygonOffsetFactor), this.polygonOffsetUnits !== 0 && (i.polygonOffsetUnits = this.polygonOffsetUnits), this.linewidth !== void 0 && this.linewidth !== 1 && (i.linewidth = this.linewidth), this.dashSize !== void 0 && (i.dashSize = this.dashSize), this.gapSize !== void 0 && (i.gapSize = this.gapSize), this.scale !== void 0 && (i.scale = this.scale), this.dithering === true && (i.dithering = true), this.alphaTest > 0 && (i.alphaTest = this.alphaTest), this.alphaHash === true && (i.alphaHash = true), this.alphaToCoverage === true && (i.alphaToCoverage = true), this.premultipliedAlpha === true && (i.premultipliedAlpha = true), this.forceSinglePass === true && (i.forceSinglePass = true), this.wireframe === true && (i.wireframe = true), this.wireframeLinewidth > 1 && (i.wireframeLinewidth = this.wireframeLinewidth), this.wireframeLinecap !== "round" && (i.wireframeLinecap = this.wireframeLinecap), this.wireframeLinejoin !== "round" && (i.wireframeLinejoin = this.wireframeLinejoin), this.flatShading === true && (i.flatShading = true), this.visible === false && (i.visible = false), this.toneMapped === false && (i.toneMapped = false), this.fog === false && (i.fog = false), Object.keys(this.userData).length > 0 && (i.userData = this.userData);
      function r(s) {
        const o = [];
        for (const a in s) {
          const l = s[a];
          delete l.metadata, o.push(l);
        }
        return o;
      }
      if (t) {
        const s = r(e.textures), o = r(e.images);
        s.length > 0 && (i.textures = s), o.length > 0 && (i.images = o);
      }
      return i;
    }
    clone() {
      return new this.constructor().copy(this);
    }
    copy(e) {
      this.name = e.name, this.blending = e.blending, this.side = e.side, this.vertexColors = e.vertexColors, this.opacity = e.opacity, this.transparent = e.transparent, this.blendSrc = e.blendSrc, this.blendDst = e.blendDst, this.blendEquation = e.blendEquation, this.blendSrcAlpha = e.blendSrcAlpha, this.blendDstAlpha = e.blendDstAlpha, this.blendEquationAlpha = e.blendEquationAlpha, this.blendColor.copy(e.blendColor), this.blendAlpha = e.blendAlpha, this.depthFunc = e.depthFunc, this.depthTest = e.depthTest, this.depthWrite = e.depthWrite, this.stencilWriteMask = e.stencilWriteMask, this.stencilFunc = e.stencilFunc, this.stencilRef = e.stencilRef, this.stencilFuncMask = e.stencilFuncMask, this.stencilFail = e.stencilFail, this.stencilZFail = e.stencilZFail, this.stencilZPass = e.stencilZPass, this.stencilWrite = e.stencilWrite;
      const t = e.clippingPlanes;
      let i = null;
      if (t !== null) {
        const r = t.length;
        i = new Array(r);
        for (let s = 0; s !== r; ++s) i[s] = t[s].clone();
      }
      return this.clippingPlanes = i, this.clipIntersection = e.clipIntersection, this.clipShadows = e.clipShadows, this.shadowSide = e.shadowSide, this.colorWrite = e.colorWrite, this.precision = e.precision, this.polygonOffset = e.polygonOffset, this.polygonOffsetFactor = e.polygonOffsetFactor, this.polygonOffsetUnits = e.polygonOffsetUnits, this.dithering = e.dithering, this.alphaTest = e.alphaTest, this.alphaHash = e.alphaHash, this.alphaToCoverage = e.alphaToCoverage, this.premultipliedAlpha = e.premultipliedAlpha, this.forceSinglePass = e.forceSinglePass, this.visible = e.visible, this.toneMapped = e.toneMapped, this.userData = JSON.parse(JSON.stringify(e.userData)), this;
    }
    dispose() {
      this.dispatchEvent({
        type: "dispose"
      });
    }
    set needsUpdate(e) {
      e === true && this.version++;
    }
  };
  ls = class extends Y2 {
    constructor(e) {
      super(), this.isMeshBasicMaterial = true, this.type = "MeshBasicMaterial", this.color = new xe(16777215), this.map = null, this.lightMap = null, this.lightMapIntensity = 1, this.aoMap = null, this.aoMapIntensity = 1, this.specularMap = null, this.alphaMap = null, this.envMap = null, this.envMapRotation = new Yi(), this.combine = s8, this.reflectivity = 1, this.refractionRatio = 0.98, this.wireframe = false, this.wireframeLinewidth = 1, this.wireframeLinecap = "round", this.wireframeLinejoin = "round", this.fog = true, this.setValues(e);
    }
    copy(e) {
      return super.copy(e), this.color.copy(e.color), this.map = e.map, this.lightMap = e.lightMap, this.lightMapIntensity = e.lightMapIntensity, this.aoMap = e.aoMap, this.aoMapIntensity = e.aoMapIntensity, this.specularMap = e.specularMap, this.alphaMap = e.alphaMap, this.envMap = e.envMap, this.envMapRotation.copy(e.envMapRotation), this.combine = e.combine, this.reflectivity = e.reflectivity, this.refractionRatio = e.refractionRatio, this.wireframe = e.wireframe, this.wireframeLinewidth = e.wireframeLinewidth, this.wireframeLinecap = e.wireframeLinecap, this.wireframeLinejoin = e.wireframeLinejoin, this.fog = e.fog, this;
    }
  };
  const b3 = OL();
  function OL() {
    const n = new ArrayBuffer(4), e = new Float32Array(n), t = new Uint32Array(n), i = new Uint32Array(512), r = new Uint32Array(512);
    for (let l = 0; l < 256; ++l) {
      const c = l - 127;
      c < -27 ? (i[l] = 0, i[l | 256] = 32768, r[l] = 24, r[l | 256] = 24) : c < -14 ? (i[l] = 1024 >> -c - 14, i[l | 256] = 1024 >> -c - 14 | 32768, r[l] = -c - 1, r[l | 256] = -c - 1) : c <= 15 ? (i[l] = c + 15 << 10, i[l | 256] = c + 15 << 10 | 32768, r[l] = 13, r[l | 256] = 13) : c < 128 ? (i[l] = 31744, i[l | 256] = 64512, r[l] = 24, r[l | 256] = 24) : (i[l] = 31744, i[l | 256] = 64512, r[l] = 13, r[l | 256] = 13);
    }
    const s = new Uint32Array(2048), o = new Uint32Array(64), a = new Uint32Array(64);
    for (let l = 1; l < 1024; ++l) {
      let c = l << 13, u = 0;
      for (; (c & 8388608) === 0; ) c <<= 1, u -= 8388608;
      c &= -8388609, u += 947912704, s[l] = c | u;
    }
    for (let l = 1024; l < 2048; ++l) s[l] = 939524096 + (l - 1024 << 13);
    for (let l = 1; l < 31; ++l) o[l] = l << 23;
    o[31] = 1199570944, o[32] = 2147483648;
    for (let l = 33; l < 63; ++l) o[l] = 2147483648 + (l - 32 << 23);
    o[63] = 3347054592;
    for (let l = 1; l < 64; ++l) l !== 32 && (a[l] = 1024);
    return {
      floatView: e,
      uint32View: t,
      baseTable: i,
      shiftTable: r,
      mantissaTable: s,
      exponentTable: o,
      offsetTable: a
    };
  }
  function kL(n) {
    Math.abs(n) > 65504 && console.warn("THREE.DataUtils.toHalfFloat(): Value out of range."), n = Ae(n, -65504, 65504), b3.floatView[0] = n;
    const e = b3.uint32View[0], t = e >> 23 & 511;
    return b3.baseTable[t] + ((e & 8388607) >> b3.shiftTable[t]);
  }
  function NL(n) {
    const e = n >> 10;
    return b3.uint32View[0] = b3.mantissaTable[b3.offsetTable[e] + (n & 1023)] + b3.exponentTable[e], b3.floatView[0];
  }
  UV = class {
    static toHalfFloat(e) {
      return kL(e);
    }
    static fromHalfFloat(e) {
      return NL(e);
    }
  };
  const Nt = new u1(), Zl = new Ue();
  let UL = 0;
  nn = class {
    constructor(e, t, i = false) {
      if (Array.isArray(e)) throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");
      this.isBufferAttribute = true, Object.defineProperty(this, "id", {
        value: UL++
      }), this.name = "", this.array = e, this.itemSize = t, this.count = e !== void 0 ? e.length / t : 0, this.normalized = i, this.usage = o9, this.updateRanges = [], this.gpuType = L2, this.version = 0;
    }
    onUploadCallback() {
    }
    set needsUpdate(e) {
      e === true && this.version++;
    }
    setUsage(e) {
      return this.usage = e, this;
    }
    addUpdateRange(e, t) {
      this.updateRanges.push({
        start: e,
        count: t
      });
    }
    clearUpdateRanges() {
      this.updateRanges.length = 0;
    }
    copy(e) {
      return this.name = e.name, this.array = new e.array.constructor(e.array), this.itemSize = e.itemSize, this.count = e.count, this.normalized = e.normalized, this.usage = e.usage, this.gpuType = e.gpuType, this;
    }
    copyAt(e, t, i) {
      e *= this.itemSize, i *= t.itemSize;
      for (let r = 0, s = this.itemSize; r < s; r++) this.array[e + r] = t.array[i + r];
      return this;
    }
    copyArray(e) {
      return this.array.set(e), this;
    }
    applyMatrix3(e) {
      if (this.itemSize === 2) for (let t = 0, i = this.count; t < i; t++) Zl.fromBufferAttribute(this, t), Zl.applyMatrix3(e), this.setXY(t, Zl.x, Zl.y);
      else if (this.itemSize === 3) for (let t = 0, i = this.count; t < i; t++) Nt.fromBufferAttribute(this, t), Nt.applyMatrix3(e), this.setXYZ(t, Nt.x, Nt.y, Nt.z);
      return this;
    }
    applyMatrix4(e) {
      for (let t = 0, i = this.count; t < i; t++) Nt.fromBufferAttribute(this, t), Nt.applyMatrix4(e), this.setXYZ(t, Nt.x, Nt.y, Nt.z);
      return this;
    }
    applyNormalMatrix(e) {
      for (let t = 0, i = this.count; t < i; t++) Nt.fromBufferAttribute(this, t), Nt.applyNormalMatrix(e), this.setXYZ(t, Nt.x, Nt.y, Nt.z);
      return this;
    }
    transformDirection(e) {
      for (let t = 0, i = this.count; t < i; t++) Nt.fromBufferAttribute(this, t), Nt.transformDirection(e), this.setXYZ(t, Nt.x, Nt.y, Nt.z);
      return this;
    }
    set(e, t = 0) {
      return this.array.set(e, t), this;
    }
    getComponent(e, t) {
      let i = this.array[e * this.itemSize + t];
      return this.normalized && (i = fi(i, this.array)), i;
    }
    setComponent(e, t, i) {
      return this.normalized && (i = et(i, this.array)), this.array[e * this.itemSize + t] = i, this;
    }
    getX(e) {
      let t = this.array[e * this.itemSize];
      return this.normalized && (t = fi(t, this.array)), t;
    }
    setX(e, t) {
      return this.normalized && (t = et(t, this.array)), this.array[e * this.itemSize] = t, this;
    }
    getY(e) {
      let t = this.array[e * this.itemSize + 1];
      return this.normalized && (t = fi(t, this.array)), t;
    }
    setY(e, t) {
      return this.normalized && (t = et(t, this.array)), this.array[e * this.itemSize + 1] = t, this;
    }
    getZ(e) {
      let t = this.array[e * this.itemSize + 2];
      return this.normalized && (t = fi(t, this.array)), t;
    }
    setZ(e, t) {
      return this.normalized && (t = et(t, this.array)), this.array[e * this.itemSize + 2] = t, this;
    }
    getW(e) {
      let t = this.array[e * this.itemSize + 3];
      return this.normalized && (t = fi(t, this.array)), t;
    }
    setW(e, t) {
      return this.normalized && (t = et(t, this.array)), this.array[e * this.itemSize + 3] = t, this;
    }
    setXY(e, t, i) {
      return e *= this.itemSize, this.normalized && (t = et(t, this.array), i = et(i, this.array)), this.array[e + 0] = t, this.array[e + 1] = i, this;
    }
    setXYZ(e, t, i, r) {
      return e *= this.itemSize, this.normalized && (t = et(t, this.array), i = et(i, this.array), r = et(r, this.array)), this.array[e + 0] = t, this.array[e + 1] = i, this.array[e + 2] = r, this;
    }
    setXYZW(e, t, i, r, s) {
      return e *= this.itemSize, this.normalized && (t = et(t, this.array), i = et(i, this.array), r = et(r, this.array), s = et(s, this.array)), this.array[e + 0] = t, this.array[e + 1] = i, this.array[e + 2] = r, this.array[e + 3] = s, this;
    }
    onUpload(e) {
      return this.onUploadCallback = e, this;
    }
    clone() {
      return new this.constructor(this.array, this.itemSize).copy(this);
    }
    toJSON() {
      const e = {
        itemSize: this.itemSize,
        type: this.array.constructor.name,
        array: Array.from(this.array),
        normalized: this.normalized
      };
      return this.name !== "" && (e.name = this.name), this.usage !== o9 && (e.usage = this.usage), e;
    }
  };
  class y8 extends nn {
    constructor(e, t, i) {
      super(new Uint16Array(e), t, i);
    }
  }
  class x8 extends nn {
    constructor(e, t, i) {
      super(new Uint32Array(e), t, i);
    }
  }
  n2 = class extends nn {
    constructor(e, t, i) {
      super(new Float32Array(e), t, i);
    }
  };
  let BL = 0;
  const H2 = new Ee(), zh = new Ct(), Zs = new u1(), S2 = new F2(), ka = new F2(), on = new u1();
  i2 = class extends Us {
    constructor() {
      super(), this.isBufferGeometry = true, Object.defineProperty(this, "id", {
        value: BL++
      }), this.uuid = gi(), this.name = "", this.type = "BufferGeometry", this.index = null, this.indirect = null, this.attributes = {}, this.morphAttributes = {}, this.morphTargetsRelative = false, this.groups = [], this.boundingBox = null, this.boundingSphere = null, this.drawRange = {
        start: 0,
        count: 1 / 0
      }, this.userData = {};
    }
    getIndex() {
      return this.index;
    }
    setIndex(e) {
      return Array.isArray(e) ? this.index = new (_8(e) ? x8 : y8)(e, 1) : this.index = e, this;
    }
    setIndirect(e) {
      return this.indirect = e, this;
    }
    getIndirect() {
      return this.indirect;
    }
    getAttribute(e) {
      return this.attributes[e];
    }
    setAttribute(e, t) {
      return this.attributes[e] = t, this;
    }
    deleteAttribute(e) {
      return delete this.attributes[e], this;
    }
    hasAttribute(e) {
      return this.attributes[e] !== void 0;
    }
    addGroup(e, t, i = 0) {
      this.groups.push({
        start: e,
        count: t,
        materialIndex: i
      });
    }
    clearGroups() {
      this.groups = [];
    }
    setDrawRange(e, t) {
      this.drawRange.start = e, this.drawRange.count = t;
    }
    applyMatrix4(e) {
      const t = this.attributes.position;
      t !== void 0 && (t.applyMatrix4(e), t.needsUpdate = true);
      const i = this.attributes.normal;
      if (i !== void 0) {
        const s = new Te().getNormalMatrix(e);
        i.applyNormalMatrix(s), i.needsUpdate = true;
      }
      const r = this.attributes.tangent;
      return r !== void 0 && (r.transformDirection(e), r.needsUpdate = true), this.boundingBox !== null && this.computeBoundingBox(), this.boundingSphere !== null && this.computeBoundingSphere(), this;
    }
    applyQuaternion(e) {
      return H2.makeRotationFromQuaternion(e), this.applyMatrix4(H2), this;
    }
    rotateX(e) {
      return H2.makeRotationX(e), this.applyMatrix4(H2), this;
    }
    rotateY(e) {
      return H2.makeRotationY(e), this.applyMatrix4(H2), this;
    }
    rotateZ(e) {
      return H2.makeRotationZ(e), this.applyMatrix4(H2), this;
    }
    translate(e, t, i) {
      return H2.makeTranslation(e, t, i), this.applyMatrix4(H2), this;
    }
    scale(e, t, i) {
      return H2.makeScale(e, t, i), this.applyMatrix4(H2), this;
    }
    lookAt(e) {
      return zh.lookAt(e), zh.updateMatrix(), this.applyMatrix4(zh.matrix), this;
    }
    center() {
      return this.computeBoundingBox(), this.boundingBox.getCenter(Zs).negate(), this.translate(Zs.x, Zs.y, Zs.z), this;
    }
    setFromPoints(e) {
      const t = this.getAttribute("position");
      if (t === void 0) {
        const i = [];
        for (let r = 0, s = e.length; r < s; r++) {
          const o = e[r];
          i.push(o.x, o.y, o.z || 0);
        }
        this.setAttribute("position", new n2(i, 3));
      } else {
        const i = Math.min(e.length, t.count);
        for (let r = 0; r < i; r++) {
          const s = e[r];
          t.setXYZ(r, s.x, s.y, s.z || 0);
        }
        e.length > t.count && console.warn("THREE.BufferGeometry: Buffer size too small for points data. Use .dispose() and create a new geometry."), t.needsUpdate = true;
      }
      return this;
    }
    computeBoundingBox() {
      this.boundingBox === null && (this.boundingBox = new F2());
      const e = this.attributes.position, t = this.morphAttributes.position;
      if (e && e.isGLBufferAttribute) {
        console.error("THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box.", this), this.boundingBox.set(new u1(-1 / 0, -1 / 0, -1 / 0), new u1(1 / 0, 1 / 0, 1 / 0));
        return;
      }
      if (e !== void 0) {
        if (this.boundingBox.setFromBufferAttribute(e), t) for (let i = 0, r = t.length; i < r; i++) {
          const s = t[i];
          S2.setFromBufferAttribute(s), this.morphTargetsRelative ? (on.addVectors(this.boundingBox.min, S2.min), this.boundingBox.expandByPoint(on), on.addVectors(this.boundingBox.max, S2.max), this.boundingBox.expandByPoint(on)) : (this.boundingBox.expandByPoint(S2.min), this.boundingBox.expandByPoint(S2.max));
        }
      } else this.boundingBox.makeEmpty();
      (isNaN(this.boundingBox.min.x) || isNaN(this.boundingBox.min.y) || isNaN(this.boundingBox.min.z)) && console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.', this);
    }
    computeBoundingSphere() {
      this.boundingSphere === null && (this.boundingSphere = new d2());
      const e = this.attributes.position, t = this.morphAttributes.position;
      if (e && e.isGLBufferAttribute) {
        console.error("THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere.", this), this.boundingSphere.set(new u1(), 1 / 0);
        return;
      }
      if (e) {
        const i = this.boundingSphere.center;
        if (S2.setFromBufferAttribute(e), t) for (let s = 0, o = t.length; s < o; s++) {
          const a = t[s];
          ka.setFromBufferAttribute(a), this.morphTargetsRelative ? (on.addVectors(S2.min, ka.min), S2.expandByPoint(on), on.addVectors(S2.max, ka.max), S2.expandByPoint(on)) : (S2.expandByPoint(ka.min), S2.expandByPoint(ka.max));
        }
        S2.getCenter(i);
        let r = 0;
        for (let s = 0, o = e.count; s < o; s++) on.fromBufferAttribute(e, s), r = Math.max(r, i.distanceToSquared(on));
        if (t) for (let s = 0, o = t.length; s < o; s++) {
          const a = t[s], l = this.morphTargetsRelative;
          for (let c = 0, u = a.count; c < u; c++) on.fromBufferAttribute(a, c), l && (Zs.fromBufferAttribute(e, c), on.add(Zs)), r = Math.max(r, i.distanceToSquared(on));
        }
        this.boundingSphere.radius = Math.sqrt(r), isNaN(this.boundingSphere.radius) && console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.', this);
      }
    }
    computeTangents() {
      const e = this.index, t = this.attributes;
      if (e === null || t.position === void 0 || t.normal === void 0 || t.uv === void 0) {
        console.error("THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)");
        return;
      }
      const i = t.position, r = t.normal, s = t.uv;
      this.hasAttribute("tangent") === false && this.setAttribute("tangent", new nn(new Float32Array(4 * i.count), 4));
      const o = this.getAttribute("tangent"), a = [], l = [];
      for (let P = 0; P < i.count; P++) a[P] = new u1(), l[P] = new u1();
      const c = new u1(), u = new u1(), h = new u1(), d = new Ue(), f = new Ue(), m = new Ue(), _ = new u1(), p = new u1();
      function g(P, M, E) {
        c.fromBufferAttribute(i, P), u.fromBufferAttribute(i, M), h.fromBufferAttribute(i, E), d.fromBufferAttribute(s, P), f.fromBufferAttribute(s, M), m.fromBufferAttribute(s, E), u.sub(c), h.sub(c), f.sub(d), m.sub(d);
        const I = 1 / (f.x * m.y - m.x * f.y);
        isFinite(I) && (_.copy(u).multiplyScalar(m.y).addScaledVector(h, -f.y).multiplyScalar(I), p.copy(h).multiplyScalar(f.x).addScaledVector(u, -m.x).multiplyScalar(I), a[P].add(_), a[M].add(_), a[E].add(_), l[P].add(p), l[M].add(p), l[E].add(p));
      }
      let y = this.groups;
      y.length === 0 && (y = [
        {
          start: 0,
          count: e.count
        }
      ]);
      for (let P = 0, M = y.length; P < M; ++P) {
        const E = y[P], I = E.start, k = E.count;
        for (let H = I, K = I + k; H < K; H += 3) g(e.getX(H + 0), e.getX(H + 1), e.getX(H + 2));
      }
      const b = new u1(), v = new u1(), x = new u1(), C = new u1();
      function A(P) {
        x.fromBufferAttribute(r, P), C.copy(x);
        const M = a[P];
        b.copy(M), b.sub(x.multiplyScalar(x.dot(M))).normalize(), v.crossVectors(C, M);
        const I = v.dot(l[P]) < 0 ? -1 : 1;
        o.setXYZW(P, b.x, b.y, b.z, I);
      }
      for (let P = 0, M = y.length; P < M; ++P) {
        const E = y[P], I = E.start, k = E.count;
        for (let H = I, K = I + k; H < K; H += 3) A(e.getX(H + 0)), A(e.getX(H + 1)), A(e.getX(H + 2));
      }
    }
    computeVertexNormals() {
      const e = this.index, t = this.getAttribute("position");
      if (t !== void 0) {
        let i = this.getAttribute("normal");
        if (i === void 0) i = new nn(new Float32Array(t.count * 3), 3), this.setAttribute("normal", i);
        else for (let d = 0, f = i.count; d < f; d++) i.setXYZ(d, 0, 0, 0);
        const r = new u1(), s = new u1(), o = new u1(), a = new u1(), l = new u1(), c = new u1(), u = new u1(), h = new u1();
        if (e) for (let d = 0, f = e.count; d < f; d += 3) {
          const m = e.getX(d + 0), _ = e.getX(d + 1), p = e.getX(d + 2);
          r.fromBufferAttribute(t, m), s.fromBufferAttribute(t, _), o.fromBufferAttribute(t, p), u.subVectors(o, s), h.subVectors(r, s), u.cross(h), a.fromBufferAttribute(i, m), l.fromBufferAttribute(i, _), c.fromBufferAttribute(i, p), a.add(u), l.add(u), c.add(u), i.setXYZ(m, a.x, a.y, a.z), i.setXYZ(_, l.x, l.y, l.z), i.setXYZ(p, c.x, c.y, c.z);
        }
        else for (let d = 0, f = t.count; d < f; d += 3) r.fromBufferAttribute(t, d + 0), s.fromBufferAttribute(t, d + 1), o.fromBufferAttribute(t, d + 2), u.subVectors(o, s), h.subVectors(r, s), u.cross(h), i.setXYZ(d + 0, u.x, u.y, u.z), i.setXYZ(d + 1, u.x, u.y, u.z), i.setXYZ(d + 2, u.x, u.y, u.z);
        this.normalizeNormals(), i.needsUpdate = true;
      }
    }
    normalizeNormals() {
      const e = this.attributes.normal;
      for (let t = 0, i = e.count; t < i; t++) on.fromBufferAttribute(e, t), on.normalize(), e.setXYZ(t, on.x, on.y, on.z);
    }
    toNonIndexed() {
      function e(a, l) {
        const c = a.array, u = a.itemSize, h = a.normalized, d = new c.constructor(l.length * u);
        let f = 0, m = 0;
        for (let _ = 0, p = l.length; _ < p; _++) {
          a.isInterleavedBufferAttribute ? f = l[_] * a.data.stride + a.offset : f = l[_] * u;
          for (let g = 0; g < u; g++) d[m++] = c[f++];
        }
        return new nn(d, u, h);
      }
      if (this.index === null) return console.warn("THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed."), this;
      const t = new i2(), i = this.index.array, r = this.attributes;
      for (const a in r) {
        const l = r[a], c = e(l, i);
        t.setAttribute(a, c);
      }
      const s = this.morphAttributes;
      for (const a in s) {
        const l = [], c = s[a];
        for (let u = 0, h = c.length; u < h; u++) {
          const d = c[u], f = e(d, i);
          l.push(f);
        }
        t.morphAttributes[a] = l;
      }
      t.morphTargetsRelative = this.morphTargetsRelative;
      const o = this.groups;
      for (let a = 0, l = o.length; a < l; a++) {
        const c = o[a];
        t.addGroup(c.start, c.count, c.materialIndex);
      }
      return t;
    }
    toJSON() {
      const e = {
        metadata: {
          version: 4.7,
          type: "BufferGeometry",
          generator: "BufferGeometry.toJSON"
        }
      };
      if (e.uuid = this.uuid, e.type = this.type, this.name !== "" && (e.name = this.name), Object.keys(this.userData).length > 0 && (e.userData = this.userData), this.parameters !== void 0) {
        const l = this.parameters;
        for (const c in l) l[c] !== void 0 && (e[c] = l[c]);
        return e;
      }
      e.data = {
        attributes: {}
      };
      const t = this.index;
      t !== null && (e.data.index = {
        type: t.array.constructor.name,
        array: Array.prototype.slice.call(t.array)
      });
      const i = this.attributes;
      for (const l in i) {
        const c = i[l];
        e.data.attributes[l] = c.toJSON(e.data);
      }
      const r = {};
      let s = false;
      for (const l in this.morphAttributes) {
        const c = this.morphAttributes[l], u = [];
        for (let h = 0, d = c.length; h < d; h++) {
          const f = c[h];
          u.push(f.toJSON(e.data));
        }
        u.length > 0 && (r[l] = u, s = true);
      }
      s && (e.data.morphAttributes = r, e.data.morphTargetsRelative = this.morphTargetsRelative);
      const o = this.groups;
      o.length > 0 && (e.data.groups = JSON.parse(JSON.stringify(o)));
      const a = this.boundingSphere;
      return a !== null && (e.data.boundingSphere = a.toJSON()), e;
    }
    clone() {
      return new this.constructor().copy(this);
    }
    copy(e) {
      this.index = null, this.attributes = {}, this.morphAttributes = {}, this.groups = [], this.boundingBox = null, this.boundingSphere = null;
      const t = {};
      this.name = e.name;
      const i = e.index;
      i !== null && this.setIndex(i.clone());
      const r = e.attributes;
      for (const c in r) {
        const u = r[c];
        this.setAttribute(c, u.clone(t));
      }
      const s = e.morphAttributes;
      for (const c in s) {
        const u = [], h = s[c];
        for (let d = 0, f = h.length; d < f; d++) u.push(h[d].clone(t));
        this.morphAttributes[c] = u;
      }
      this.morphTargetsRelative = e.morphTargetsRelative;
      const o = e.groups;
      for (let c = 0, u = o.length; c < u; c++) {
        const h = o[c];
        this.addGroup(h.start, h.count, h.materialIndex);
      }
      const a = e.boundingBox;
      a !== null && (this.boundingBox = a.clone());
      const l = e.boundingSphere;
      return l !== null && (this.boundingSphere = l.clone()), this.drawRange.start = e.drawRange.start, this.drawRange.count = e.drawRange.count, this.userData = e.userData, this;
    }
    dispose() {
      this.dispatchEvent({
        type: "dispose"
      });
    }
  };
  const Ym = new Ee(), Vr = new Cl(), ec = new d2(), Km = new u1(), tc = new u1(), nc = new u1(), ic = new u1(), Vh = new u1(), rc = new u1(), Jm = new u1(), sc = new u1();
  Zn = class extends Ct {
    constructor(e = new i2(), t = new ls()) {
      super(), this.isMesh = true, this.type = "Mesh", this.geometry = e, this.material = t, this.morphTargetDictionary = void 0, this.morphTargetInfluences = void 0, this.count = 1, this.updateMorphTargets();
    }
    copy(e, t) {
      return super.copy(e, t), e.morphTargetInfluences !== void 0 && (this.morphTargetInfluences = e.morphTargetInfluences.slice()), e.morphTargetDictionary !== void 0 && (this.morphTargetDictionary = Object.assign({}, e.morphTargetDictionary)), this.material = Array.isArray(e.material) ? e.material.slice() : e.material, this.geometry = e.geometry, this;
    }
    updateMorphTargets() {
      const t = this.geometry.morphAttributes, i = Object.keys(t);
      if (i.length > 0) {
        const r = t[i[0]];
        if (r !== void 0) {
          this.morphTargetInfluences = [], this.morphTargetDictionary = {};
          for (let s = 0, o = r.length; s < o; s++) {
            const a = r[s].name || String(s);
            this.morphTargetInfluences.push(0), this.morphTargetDictionary[a] = s;
          }
        }
      }
    }
    getVertexPosition(e, t) {
      const i = this.geometry, r = i.attributes.position, s = i.morphAttributes.position, o = i.morphTargetsRelative;
      t.fromBufferAttribute(r, e);
      const a = this.morphTargetInfluences;
      if (s && a) {
        rc.set(0, 0, 0);
        for (let l = 0, c = s.length; l < c; l++) {
          const u = a[l], h = s[l];
          u !== 0 && (Vh.fromBufferAttribute(h, e), o ? rc.addScaledVector(Vh, u) : rc.addScaledVector(Vh.sub(t), u));
        }
        t.add(rc);
      }
      return t;
    }
    raycast(e, t) {
      const i = this.geometry, r = this.material, s = this.matrixWorld;
      r !== void 0 && (i.boundingSphere === null && i.computeBoundingSphere(), ec.copy(i.boundingSphere), ec.applyMatrix4(s), Vr.copy(e.ray).recast(e.near), !(ec.containsPoint(Vr.origin) === false && (Vr.intersectSphere(ec, Km) === null || Vr.origin.distanceToSquared(Km) > (e.far - e.near) ** 2)) && (Ym.copy(s).invert(), Vr.copy(e.ray).applyMatrix4(Ym), !(i.boundingBox !== null && Vr.intersectsBox(i.boundingBox) === false) && this._computeIntersections(e, t, Vr)));
    }
    _computeIntersections(e, t, i) {
      let r;
      const s = this.geometry, o = this.material, a = s.index, l = s.attributes.position, c = s.attributes.uv, u = s.attributes.uv1, h = s.attributes.normal, d = s.groups, f = s.drawRange;
      if (a !== null) if (Array.isArray(o)) for (let m = 0, _ = d.length; m < _; m++) {
        const p = d[m], g = o[p.materialIndex], y = Math.max(p.start, f.start), b = Math.min(a.count, Math.min(p.start + p.count, f.start + f.count));
        for (let v = y, x = b; v < x; v += 3) {
          const C = a.getX(v), A = a.getX(v + 1), P = a.getX(v + 2);
          r = oc(this, g, e, i, c, u, h, C, A, P), r && (r.faceIndex = Math.floor(v / 3), r.face.materialIndex = p.materialIndex, t.push(r));
        }
      }
      else {
        const m = Math.max(0, f.start), _ = Math.min(a.count, f.start + f.count);
        for (let p = m, g = _; p < g; p += 3) {
          const y = a.getX(p), b = a.getX(p + 1), v = a.getX(p + 2);
          r = oc(this, o, e, i, c, u, h, y, b, v), r && (r.faceIndex = Math.floor(p / 3), t.push(r));
        }
      }
      else if (l !== void 0) if (Array.isArray(o)) for (let m = 0, _ = d.length; m < _; m++) {
        const p = d[m], g = o[p.materialIndex], y = Math.max(p.start, f.start), b = Math.min(l.count, Math.min(p.start + p.count, f.start + f.count));
        for (let v = y, x = b; v < x; v += 3) {
          const C = v, A = v + 1, P = v + 2;
          r = oc(this, g, e, i, c, u, h, C, A, P), r && (r.faceIndex = Math.floor(v / 3), r.face.materialIndex = p.materialIndex, t.push(r));
        }
      }
      else {
        const m = Math.max(0, f.start), _ = Math.min(l.count, f.start + f.count);
        for (let p = m, g = _; p < g; p += 3) {
          const y = p, b = p + 1, v = p + 2;
          r = oc(this, o, e, i, c, u, h, y, b, v), r && (r.faceIndex = Math.floor(p / 3), t.push(r));
        }
      }
    }
  };
  function HL(n, e, t, i, r, s, o, a) {
    let l;
    if (e.side === h2 ? l = i.intersectTriangle(o, s, r, true, a) : l = i.intersectTriangle(r, s, o, e.side === D3, a), l === null) return null;
    sc.copy(a), sc.applyMatrix4(n.matrixWorld);
    const c = t.ray.origin.distanceTo(sc);
    return c < t.near || c > t.far ? null : {
      distance: c,
      point: sc.clone(),
      object: n
    };
  }
  function oc(n, e, t, i, r, s, o, a, l, c) {
    n.getVertexPosition(a, tc), n.getVertexPosition(l, nc), n.getVertexPosition(c, ic);
    const u = HL(n, e, t, i, tc, nc, ic, Jm);
    if (u) {
      const h = new u1();
      hi.getBarycoord(Jm, tc, nc, ic, h), r && (u.uv = hi.getInterpolatedAttribute(r, a, l, c, h, new Ue())), s && (u.uv1 = hi.getInterpolatedAttribute(s, a, l, c, h, new Ue())), o && (u.normal = hi.getInterpolatedAttribute(o, a, l, c, h, new u1()), u.normal.dot(i.direction) > 0 && u.normal.multiplyScalar(-1));
      const d = {
        a,
        b: l,
        c,
        normal: new u1(),
        materialIndex: 0
      };
      hi.getNormal(tc, nc, ic, d.normal), u.face = d, u.barycoord = h;
    }
    return u;
  }
  class Al extends i2 {
    constructor(e = 1, t = 1, i = 1, r = 1, s = 1, o = 1) {
      super(), this.type = "BoxGeometry", this.parameters = {
        width: e,
        height: t,
        depth: i,
        widthSegments: r,
        heightSegments: s,
        depthSegments: o
      };
      const a = this;
      r = Math.floor(r), s = Math.floor(s), o = Math.floor(o);
      const l = [], c = [], u = [], h = [];
      let d = 0, f = 0;
      m("z", "y", "x", -1, -1, i, t, e, o, s, 0), m("z", "y", "x", 1, -1, i, t, -e, o, s, 1), m("x", "z", "y", 1, 1, e, i, t, r, o, 2), m("x", "z", "y", 1, -1, e, i, -t, r, o, 3), m("x", "y", "z", 1, -1, e, t, i, r, s, 4), m("x", "y", "z", -1, -1, e, t, -i, r, s, 5), this.setIndex(l), this.setAttribute("position", new n2(c, 3)), this.setAttribute("normal", new n2(u, 3)), this.setAttribute("uv", new n2(h, 2));
      function m(_, p, g, y, b, v, x, C, A, P, M) {
        const E = v / A, I = x / P, k = v / 2, H = x / 2, K = C / 2, J = A + 1, z = P + 1;
        let $ = 0, G = 0;
        const Q = new u1();
        for (let V = 0; V < z; V++) {
          const w1 = V * I - H;
          for (let m1 = 0; m1 < J; m1++) {
            const I1 = m1 * E - k;
            Q[_] = I1 * y, Q[p] = w1 * b, Q[g] = K, c.push(Q.x, Q.y, Q.z), Q[_] = 0, Q[p] = 0, Q[g] = C > 0 ? 1 : -1, u.push(Q.x, Q.y, Q.z), h.push(m1 / A), h.push(1 - V / P), $ += 1;
          }
        }
        for (let V = 0; V < P; V++) for (let w1 = 0; w1 < A; w1++) {
          const m1 = d + w1 + J * V, I1 = d + w1 + J * (V + 1), Z = d + (w1 + 1) + J * (V + 1), f1 = d + (w1 + 1) + J * V;
          l.push(m1, I1, f1), l.push(I1, Z, f1), G += 6;
        }
        a.addGroup(f, G, M), f += G, d += $;
      }
    }
    copy(e) {
      return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
    }
    static fromJSON(e) {
      return new Al(e.width, e.height, e.depth, e.widthSegments, e.heightSegments, e.depthSegments);
    }
  }
  function oa(n) {
    const e = {};
    for (const t in n) {
      e[t] = {};
      for (const i in n[t]) {
        const r = n[t][i];
        r && (r.isColor || r.isMatrix3 || r.isMatrix4 || r.isVector2 || r.isVector3 || r.isVector4 || r.isTexture || r.isQuaternion) ? r.isRenderTargetTexture ? (console.warn("UniformsUtils: Textures of render targets cannot be cloned via cloneUniforms() or mergeUniforms()."), e[t][i] = null) : e[t][i] = r.clone() : Array.isArray(r) ? e[t][i] = r.slice() : e[t][i] = r;
      }
    }
    return e;
  }
  function Wn(n) {
    const e = {};
    for (let t = 0; t < n.length; t++) {
      const i = oa(n[t]);
      for (const r in i) e[r] = i[r];
    }
    return e;
  }
  function zL(n) {
    const e = [];
    for (let t = 0; t < n.length; t++) e.push(n[t].clone());
    return e;
  }
  function S8(n) {
    const e = n.getRenderTarget();
    return e === null ? n.outputColorSpace : e.isXRRenderTarget === true ? e.texture.colorSpace : ze.workingColorSpace;
  }
  const VL = {
    clone: oa,
    merge: Wn
  };
  var GL = `void main() {
	gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );
}`, WL = `void main() {
	gl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );
}`;
  Mr = class extends Y2 {
    constructor(e) {
      super(), this.isShaderMaterial = true, this.type = "ShaderMaterial", this.defines = {}, this.uniforms = {}, this.uniformsGroups = [], this.vertexShader = GL, this.fragmentShader = WL, this.linewidth = 1, this.wireframe = false, this.wireframeLinewidth = 1, this.fog = false, this.lights = false, this.clipping = false, this.forceSinglePass = true, this.extensions = {
        clipCullDistance: false,
        multiDraw: false
      }, this.defaultAttributeValues = {
        color: [
          1,
          1,
          1
        ],
        uv: [
          0,
          0
        ],
        uv1: [
          0,
          0
        ]
      }, this.index0AttributeName = void 0, this.uniformsNeedUpdate = false, this.glslVersion = null, e !== void 0 && this.setValues(e);
    }
    copy(e) {
      return super.copy(e), this.fragmentShader = e.fragmentShader, this.vertexShader = e.vertexShader, this.uniforms = oa(e.uniforms), this.uniformsGroups = zL(e.uniformsGroups), this.defines = Object.assign({}, e.defines), this.wireframe = e.wireframe, this.wireframeLinewidth = e.wireframeLinewidth, this.fog = e.fog, this.lights = e.lights, this.clipping = e.clipping, this.extensions = Object.assign({}, e.extensions), this.glslVersion = e.glslVersion, this;
    }
    toJSON(e) {
      const t = super.toJSON(e);
      t.glslVersion = this.glslVersion, t.uniforms = {};
      for (const r in this.uniforms) {
        const o = this.uniforms[r].value;
        o && o.isTexture ? t.uniforms[r] = {
          type: "t",
          value: o.toJSON(e).uuid
        } : o && o.isColor ? t.uniforms[r] = {
          type: "c",
          value: o.getHex()
        } : o && o.isVector2 ? t.uniforms[r] = {
          type: "v2",
          value: o.toArray()
        } : o && o.isVector3 ? t.uniforms[r] = {
          type: "v3",
          value: o.toArray()
        } : o && o.isVector4 ? t.uniforms[r] = {
          type: "v4",
          value: o.toArray()
        } : o && o.isMatrix3 ? t.uniforms[r] = {
          type: "m3",
          value: o.toArray()
        } : o && o.isMatrix4 ? t.uniforms[r] = {
          type: "m4",
          value: o.toArray()
        } : t.uniforms[r] = {
          value: o
        };
      }
      Object.keys(this.defines).length > 0 && (t.defines = this.defines), t.vertexShader = this.vertexShader, t.fragmentShader = this.fragmentShader, t.lights = this.lights, t.clipping = this.clipping;
      const i = {};
      for (const r in this.extensions) this.extensions[r] === true && (i[r] = true);
      return Object.keys(i).length > 0 && (t.extensions = i), t;
    }
  };
  class E8 extends Ct {
    constructor() {
      super(), this.isCamera = true, this.type = "Camera", this.matrixWorldInverse = new Ee(), this.projectionMatrix = new Ee(), this.projectionMatrixInverse = new Ee(), this.coordinateSystem = zi;
    }
    copy(e, t) {
      return super.copy(e, t), this.matrixWorldInverse.copy(e.matrixWorldInverse), this.projectionMatrix.copy(e.projectionMatrix), this.projectionMatrixInverse.copy(e.projectionMatrixInverse), this.coordinateSystem = e.coordinateSystem, this;
    }
    getWorldDirection(e) {
      return super.getWorldDirection(e).negate();
    }
    updateMatrixWorld(e) {
      super.updateMatrixWorld(e), this.matrixWorldInverse.copy(this.matrixWorld).invert();
    }
    updateWorldMatrix(e, t) {
      super.updateWorldMatrix(e, t), this.matrixWorldInverse.copy(this.matrixWorld).invert();
    }
    clone() {
      return new this.constructor().copy(this);
    }
  }
  const G3 = new u1(), Qm = new Ue(), Zm = new Ue();
  l2 = class extends E8 {
    constructor(e = 50, t = 1, i = 0.1, r = 2e3) {
      super(), this.isPerspectiveCamera = true, this.type = "PerspectiveCamera", this.fov = e, this.zoom = 1, this.near = i, this.far = r, this.focus = 10, this.aspect = t, this.view = null, this.filmGauge = 35, this.filmOffset = 0, this.updateProjectionMatrix();
    }
    copy(e, t) {
      return super.copy(e, t), this.fov = e.fov, this.zoom = e.zoom, this.near = e.near, this.far = e.far, this.focus = e.focus, this.aspect = e.aspect, this.view = e.view === null ? null : Object.assign({}, e.view), this.filmGauge = e.filmGauge, this.filmOffset = e.filmOffset, this;
    }
    setFocalLength(e) {
      const t = 0.5 * this.getFilmHeight() / e;
      this.fov = sa * 2 * Math.atan(t), this.updateProjectionMatrix();
    }
    getFocalLength() {
      const e = Math.tan(y0 * 0.5 * this.fov);
      return 0.5 * this.getFilmHeight() / e;
    }
    getEffectiveFOV() {
      return sa * 2 * Math.atan(Math.tan(y0 * 0.5 * this.fov) / this.zoom);
    }
    getFilmWidth() {
      return this.filmGauge * Math.min(this.aspect, 1);
    }
    getFilmHeight() {
      return this.filmGauge / Math.max(this.aspect, 1);
    }
    getViewBounds(e, t, i) {
      G3.set(-1, -1, 0.5).applyMatrix4(this.projectionMatrixInverse), t.set(G3.x, G3.y).multiplyScalar(-e / G3.z), G3.set(1, 1, 0.5).applyMatrix4(this.projectionMatrixInverse), i.set(G3.x, G3.y).multiplyScalar(-e / G3.z);
    }
    getViewSize(e, t) {
      return this.getViewBounds(e, Qm, Zm), t.subVectors(Zm, Qm);
    }
    setViewOffset(e, t, i, r, s, o) {
      this.aspect = e / t, this.view === null && (this.view = {
        enabled: true,
        fullWidth: 1,
        fullHeight: 1,
        offsetX: 0,
        offsetY: 0,
        width: 1,
        height: 1
      }), this.view.enabled = true, this.view.fullWidth = e, this.view.fullHeight = t, this.view.offsetX = i, this.view.offsetY = r, this.view.width = s, this.view.height = o, this.updateProjectionMatrix();
    }
    clearViewOffset() {
      this.view !== null && (this.view.enabled = false), this.updateProjectionMatrix();
    }
    updateProjectionMatrix() {
      const e = this.near;
      let t = e * Math.tan(y0 * 0.5 * this.fov) / this.zoom, i = 2 * t, r = this.aspect * i, s = -0.5 * r;
      const o = this.view;
      if (this.view !== null && this.view.enabled) {
        const l = o.fullWidth, c = o.fullHeight;
        s += o.offsetX * r / l, t -= o.offsetY * i / c, r *= o.width / l, i *= o.height / c;
      }
      const a = this.filmOffset;
      a !== 0 && (s += e * a / this.getFilmWidth()), this.projectionMatrix.makePerspective(s, s + r, t, t - i, e, this.far, this.coordinateSystem), this.projectionMatrixInverse.copy(this.projectionMatrix).invert();
    }
    toJSON(e) {
      const t = super.toJSON(e);
      return t.object.fov = this.fov, t.object.zoom = this.zoom, t.object.near = this.near, t.object.far = this.far, t.object.focus = this.focus, t.object.aspect = this.aspect, this.view !== null && (t.object.view = Object.assign({}, this.view)), t.object.filmGauge = this.filmGauge, t.object.filmOffset = this.filmOffset, t;
    }
  };
  const eo = -90, to = 1;
  class jL extends Ct {
    constructor(e, t, i) {
      super(), this.type = "CubeCamera", this.renderTarget = i, this.coordinateSystem = null, this.activeMipmapLevel = 0;
      const r = new l2(eo, to, e, t);
      r.layers = this.layers, this.add(r);
      const s = new l2(eo, to, e, t);
      s.layers = this.layers, this.add(s);
      const o = new l2(eo, to, e, t);
      o.layers = this.layers, this.add(o);
      const a = new l2(eo, to, e, t);
      a.layers = this.layers, this.add(a);
      const l = new l2(eo, to, e, t);
      l.layers = this.layers, this.add(l);
      const c = new l2(eo, to, e, t);
      c.layers = this.layers, this.add(c);
    }
    updateCoordinateSystem() {
      const e = this.coordinateSystem, t = this.children.concat(), [i, r, s, o, a, l] = t;
      for (const c of t) this.remove(c);
      if (e === zi) i.up.set(0, 1, 0), i.lookAt(1, 0, 0), r.up.set(0, 1, 0), r.lookAt(-1, 0, 0), s.up.set(0, 0, -1), s.lookAt(0, 1, 0), o.up.set(0, 0, 1), o.lookAt(0, -1, 0), a.up.set(0, 1, 0), a.lookAt(0, 0, 1), l.up.set(0, 1, 0), l.lookAt(0, 0, -1);
      else if (e === Ou) i.up.set(0, -1, 0), i.lookAt(-1, 0, 0), r.up.set(0, -1, 0), r.lookAt(1, 0, 0), s.up.set(0, 0, 1), s.lookAt(0, 1, 0), o.up.set(0, 0, -1), o.lookAt(0, -1, 0), a.up.set(0, -1, 0), a.lookAt(0, 0, 1), l.up.set(0, -1, 0), l.lookAt(0, 0, -1);
      else throw new Error("THREE.CubeCamera.updateCoordinateSystem(): Invalid coordinate system: " + e);
      for (const c of t) this.add(c), c.updateMatrixWorld();
    }
    update(e, t) {
      this.parent === null && this.updateMatrixWorld();
      const { renderTarget: i, activeMipmapLevel: r } = this;
      this.coordinateSystem !== e.coordinateSystem && (this.coordinateSystem = e.coordinateSystem, this.updateCoordinateSystem());
      const [s, o, a, l, c, u] = this.children, h = e.getRenderTarget(), d = e.getActiveCubeFace(), f = e.getActiveMipmapLevel(), m = e.xr.enabled;
      e.xr.enabled = false;
      const _ = i.texture.generateMipmaps;
      i.texture.generateMipmaps = false, e.setRenderTarget(i, 0, r), e.render(t, s), e.setRenderTarget(i, 1, r), e.render(t, o), e.setRenderTarget(i, 2, r), e.render(t, a), e.setRenderTarget(i, 3, r), e.render(t, l), e.setRenderTarget(i, 4, r), e.render(t, c), i.texture.generateMipmaps = _, e.setRenderTarget(i, 5, r), e.render(t, u), e.setRenderTarget(h, d, f), e.xr.enabled = m, i.texture.needsPMREMUpdate = true;
    }
  }
  class w8 extends hn {
    constructor(e = [], t = na, i, r, s, o, a, l, c, u) {
      super(e, t, i, r, s, o, a, l, c, u), this.isCubeTexture = true, this.flipY = false;
    }
    get images() {
      return this.image;
    }
    set images(e) {
      this.image = e;
    }
  }
  class XL extends Cs {
    constructor(e = 1, t = {}) {
      super(e, e, t), this.isWebGLCubeRenderTarget = true;
      const i = {
        width: e,
        height: e,
        depth: 1
      }, r = [
        i,
        i,
        i,
        i,
        i,
        i
      ];
      this.texture = new w8(r), this._setTextureOptions(t), this.texture.isRenderTargetTexture = true;
    }
    fromEquirectangularTexture(e, t) {
      this.texture.type = t.type, this.texture.colorSpace = t.colorSpace, this.texture.generateMipmaps = t.generateMipmaps, this.texture.minFilter = t.minFilter, this.texture.magFilter = t.magFilter;
      const i = {
        uniforms: {
          tEquirect: {
            value: null
          }
        },
        vertexShader: `

				varying vec3 vWorldDirection;

				vec3 transformDirection( in vec3 dir, in mat4 matrix ) {

					return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );

				}

				void main() {

					vWorldDirection = transformDirection( position, modelMatrix );

					#include <begin_vertex>
					#include <project_vertex>

				}
			`,
        fragmentShader: `

				uniform sampler2D tEquirect;

				varying vec3 vWorldDirection;

				#include <common>

				void main() {

					vec3 direction = normalize( vWorldDirection );

					vec2 sampleUV = equirectUv( direction );

					gl_FragColor = texture2D( tEquirect, sampleUV );

				}
			`
      }, r = new Al(5, 5, 5), s = new Mr({
        name: "CubemapFromEquirect",
        uniforms: oa(i.uniforms),
        vertexShader: i.vertexShader,
        fragmentShader: i.fragmentShader,
        side: h2,
        blending: _r
      });
      s.uniforms.tEquirect.value = t;
      const o = new Zn(r, s), a = t.minFilter;
      return t.minFilter === Hi && (t.minFilter = Pn), new jL(1, 10, this).update(e, o), t.minFilter = a, o.geometry.dispose(), o.material.dispose(), this;
    }
    clear(e, t = true, i = true, r = true) {
      const s = e.getRenderTarget();
      for (let o = 0; o < 6; o++) e.setRenderTarget(this, o), e.clear(t, i, r);
      e.setRenderTarget(s);
    }
  }
  cs = class extends Ct {
    constructor() {
      super(), this.isGroup = true, this.type = "Group";
    }
  };
  const $L = {
    type: "move"
  };
  class Gh {
    constructor() {
      this._targetRay = null, this._grip = null, this._hand = null;
    }
    getHandSpace() {
      return this._hand === null && (this._hand = new cs(), this._hand.matrixAutoUpdate = false, this._hand.visible = false, this._hand.joints = {}, this._hand.inputState = {
        pinching: false
      }), this._hand;
    }
    getTargetRaySpace() {
      return this._targetRay === null && (this._targetRay = new cs(), this._targetRay.matrixAutoUpdate = false, this._targetRay.visible = false, this._targetRay.hasLinearVelocity = false, this._targetRay.linearVelocity = new u1(), this._targetRay.hasAngularVelocity = false, this._targetRay.angularVelocity = new u1()), this._targetRay;
    }
    getGripSpace() {
      return this._grip === null && (this._grip = new cs(), this._grip.matrixAutoUpdate = false, this._grip.visible = false, this._grip.hasLinearVelocity = false, this._grip.linearVelocity = new u1(), this._grip.hasAngularVelocity = false, this._grip.angularVelocity = new u1()), this._grip;
    }
    dispatchEvent(e) {
      return this._targetRay !== null && this._targetRay.dispatchEvent(e), this._grip !== null && this._grip.dispatchEvent(e), this._hand !== null && this._hand.dispatchEvent(e), this;
    }
    connect(e) {
      if (e && e.hand) {
        const t = this._hand;
        if (t) for (const i of e.hand.values()) this._getHandJoint(t, i);
      }
      return this.dispatchEvent({
        type: "connected",
        data: e
      }), this;
    }
    disconnect(e) {
      return this.dispatchEvent({
        type: "disconnected",
        data: e
      }), this._targetRay !== null && (this._targetRay.visible = false), this._grip !== null && (this._grip.visible = false), this._hand !== null && (this._hand.visible = false), this;
    }
    update(e, t, i) {
      let r = null, s = null, o = null;
      const a = this._targetRay, l = this._grip, c = this._hand;
      if (e && t.session.visibilityState !== "visible-blurred") {
        if (c && e.hand) {
          o = true;
          for (const _ of e.hand.values()) {
            const p = t.getJointPose(_, i), g = this._getHandJoint(c, _);
            p !== null && (g.matrix.fromArray(p.transform.matrix), g.matrix.decompose(g.position, g.rotation, g.scale), g.matrixWorldNeedsUpdate = true, g.jointRadius = p.radius), g.visible = p !== null;
          }
          const u = c.joints["index-finger-tip"], h = c.joints["thumb-tip"], d = u.position.distanceTo(h.position), f = 0.02, m = 5e-3;
          c.inputState.pinching && d > f + m ? (c.inputState.pinching = false, this.dispatchEvent({
            type: "pinchend",
            handedness: e.handedness,
            target: this
          })) : !c.inputState.pinching && d <= f - m && (c.inputState.pinching = true, this.dispatchEvent({
            type: "pinchstart",
            handedness: e.handedness,
            target: this
          }));
        } else l !== null && e.gripSpace && (s = t.getPose(e.gripSpace, i), s !== null && (l.matrix.fromArray(s.transform.matrix), l.matrix.decompose(l.position, l.rotation, l.scale), l.matrixWorldNeedsUpdate = true, s.linearVelocity ? (l.hasLinearVelocity = true, l.linearVelocity.copy(s.linearVelocity)) : l.hasLinearVelocity = false, s.angularVelocity ? (l.hasAngularVelocity = true, l.angularVelocity.copy(s.angularVelocity)) : l.hasAngularVelocity = false));
        a !== null && (r = t.getPose(e.targetRaySpace, i), r === null && s !== null && (r = s), r !== null && (a.matrix.fromArray(r.transform.matrix), a.matrix.decompose(a.position, a.rotation, a.scale), a.matrixWorldNeedsUpdate = true, r.linearVelocity ? (a.hasLinearVelocity = true, a.linearVelocity.copy(r.linearVelocity)) : a.hasLinearVelocity = false, r.angularVelocity ? (a.hasAngularVelocity = true, a.angularVelocity.copy(r.angularVelocity)) : a.hasAngularVelocity = false, this.dispatchEvent($L)));
      }
      return a !== null && (a.visible = r !== null), l !== null && (l.visible = s !== null), c !== null && (c.visible = o !== null), this;
    }
    _getHandJoint(e, t) {
      if (e.joints[t.jointName] === void 0) {
        const i = new cs();
        i.matrixAutoUpdate = false, i.visible = false, e.joints[t.jointName] = i, e.add(i);
      }
      return e.joints[t.jointName];
    }
  }
  BV = class extends Ct {
    constructor() {
      super(), this.isScene = true, this.type = "Scene", this.background = null, this.environment = null, this.fog = null, this.backgroundBlurriness = 0, this.backgroundIntensity = 1, this.backgroundRotation = new Yi(), this.environmentIntensity = 1, this.environmentRotation = new Yi(), this.overrideMaterial = null, typeof __THREE_DEVTOOLS__ < "u" && __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe", {
        detail: this
      }));
    }
    copy(e, t) {
      return super.copy(e, t), e.background !== null && (this.background = e.background.clone()), e.environment !== null && (this.environment = e.environment.clone()), e.fog !== null && (this.fog = e.fog.clone()), this.backgroundBlurriness = e.backgroundBlurriness, this.backgroundIntensity = e.backgroundIntensity, this.backgroundRotation.copy(e.backgroundRotation), this.environmentIntensity = e.environmentIntensity, this.environmentRotation.copy(e.environmentRotation), e.overrideMaterial !== null && (this.overrideMaterial = e.overrideMaterial.clone()), this.matrixAutoUpdate = e.matrixAutoUpdate, this;
    }
    toJSON(e) {
      const t = super.toJSON(e);
      return this.fog !== null && (t.object.fog = this.fog.toJSON()), this.backgroundBlurriness > 0 && (t.object.backgroundBlurriness = this.backgroundBlurriness), this.backgroundIntensity !== 1 && (t.object.backgroundIntensity = this.backgroundIntensity), t.object.backgroundRotation = this.backgroundRotation.toArray(), this.environmentIntensity !== 1 && (t.object.environmentIntensity = this.environmentIntensity), t.object.environmentRotation = this.environmentRotation.toArray(), t;
    }
  };
  class qL {
    constructor(e, t) {
      this.isInterleavedBuffer = true, this.array = e, this.stride = t, this.count = e !== void 0 ? e.length / t : 0, this.usage = o9, this.updateRanges = [], this.version = 0, this.uuid = gi();
    }
    onUploadCallback() {
    }
    set needsUpdate(e) {
      e === true && this.version++;
    }
    setUsage(e) {
      return this.usage = e, this;
    }
    addUpdateRange(e, t) {
      this.updateRanges.push({
        start: e,
        count: t
      });
    }
    clearUpdateRanges() {
      this.updateRanges.length = 0;
    }
    copy(e) {
      return this.array = new e.array.constructor(e.array), this.count = e.count, this.stride = e.stride, this.usage = e.usage, this;
    }
    copyAt(e, t, i) {
      e *= this.stride, i *= t.stride;
      for (let r = 0, s = this.stride; r < s; r++) this.array[e + r] = t.array[i + r];
      return this;
    }
    set(e, t = 0) {
      return this.array.set(e, t), this;
    }
    clone(e) {
      e.arrayBuffers === void 0 && (e.arrayBuffers = {}), this.array.buffer._uuid === void 0 && (this.array.buffer._uuid = gi()), e.arrayBuffers[this.array.buffer._uuid] === void 0 && (e.arrayBuffers[this.array.buffer._uuid] = this.array.slice(0).buffer);
      const t = new this.array.constructor(e.arrayBuffers[this.array.buffer._uuid]), i = new this.constructor(t, this.stride);
      return i.setUsage(this.usage), i;
    }
    onUpload(e) {
      return this.onUploadCallback = e, this;
    }
    toJSON(e) {
      return e.arrayBuffers === void 0 && (e.arrayBuffers = {}), this.array.buffer._uuid === void 0 && (this.array.buffer._uuid = gi()), e.arrayBuffers[this.array.buffer._uuid] === void 0 && (e.arrayBuffers[this.array.buffer._uuid] = Array.from(new Uint32Array(this.array.buffer))), {
        uuid: this.uuid,
        buffer: this.array.buffer._uuid,
        type: this.array.constructor.name,
        stride: this.stride
      };
    }
  }
  const Hn = new u1();
  class $p {
    constructor(e, t, i, r = false) {
      this.isInterleavedBufferAttribute = true, this.name = "", this.data = e, this.itemSize = t, this.offset = i, this.normalized = r;
    }
    get count() {
      return this.data.count;
    }
    get array() {
      return this.data.array;
    }
    set needsUpdate(e) {
      this.data.needsUpdate = e;
    }
    applyMatrix4(e) {
      for (let t = 0, i = this.data.count; t < i; t++) Hn.fromBufferAttribute(this, t), Hn.applyMatrix4(e), this.setXYZ(t, Hn.x, Hn.y, Hn.z);
      return this;
    }
    applyNormalMatrix(e) {
      for (let t = 0, i = this.count; t < i; t++) Hn.fromBufferAttribute(this, t), Hn.applyNormalMatrix(e), this.setXYZ(t, Hn.x, Hn.y, Hn.z);
      return this;
    }
    transformDirection(e) {
      for (let t = 0, i = this.count; t < i; t++) Hn.fromBufferAttribute(this, t), Hn.transformDirection(e), this.setXYZ(t, Hn.x, Hn.y, Hn.z);
      return this;
    }
    getComponent(e, t) {
      let i = this.array[e * this.data.stride + this.offset + t];
      return this.normalized && (i = fi(i, this.array)), i;
    }
    setComponent(e, t, i) {
      return this.normalized && (i = et(i, this.array)), this.data.array[e * this.data.stride + this.offset + t] = i, this;
    }
    setX(e, t) {
      return this.normalized && (t = et(t, this.array)), this.data.array[e * this.data.stride + this.offset] = t, this;
    }
    setY(e, t) {
      return this.normalized && (t = et(t, this.array)), this.data.array[e * this.data.stride + this.offset + 1] = t, this;
    }
    setZ(e, t) {
      return this.normalized && (t = et(t, this.array)), this.data.array[e * this.data.stride + this.offset + 2] = t, this;
    }
    setW(e, t) {
      return this.normalized && (t = et(t, this.array)), this.data.array[e * this.data.stride + this.offset + 3] = t, this;
    }
    getX(e) {
      let t = this.data.array[e * this.data.stride + this.offset];
      return this.normalized && (t = fi(t, this.array)), t;
    }
    getY(e) {
      let t = this.data.array[e * this.data.stride + this.offset + 1];
      return this.normalized && (t = fi(t, this.array)), t;
    }
    getZ(e) {
      let t = this.data.array[e * this.data.stride + this.offset + 2];
      return this.normalized && (t = fi(t, this.array)), t;
    }
    getW(e) {
      let t = this.data.array[e * this.data.stride + this.offset + 3];
      return this.normalized && (t = fi(t, this.array)), t;
    }
    setXY(e, t, i) {
      return e = e * this.data.stride + this.offset, this.normalized && (t = et(t, this.array), i = et(i, this.array)), this.data.array[e + 0] = t, this.data.array[e + 1] = i, this;
    }
    setXYZ(e, t, i, r) {
      return e = e * this.data.stride + this.offset, this.normalized && (t = et(t, this.array), i = et(i, this.array), r = et(r, this.array)), this.data.array[e + 0] = t, this.data.array[e + 1] = i, this.data.array[e + 2] = r, this;
    }
    setXYZW(e, t, i, r, s) {
      return e = e * this.data.stride + this.offset, this.normalized && (t = et(t, this.array), i = et(i, this.array), r = et(r, this.array), s = et(s, this.array)), this.data.array[e + 0] = t, this.data.array[e + 1] = i, this.data.array[e + 2] = r, this.data.array[e + 3] = s, this;
    }
    clone(e) {
      if (e === void 0) {
        console.log("THREE.InterleavedBufferAttribute.clone(): Cloning an interleaved buffer attribute will de-interleave buffer data.");
        const t = [];
        for (let i = 0; i < this.count; i++) {
          const r = i * this.data.stride + this.offset;
          for (let s = 0; s < this.itemSize; s++) t.push(this.data.array[r + s]);
        }
        return new nn(new this.array.constructor(t), this.itemSize, this.normalized);
      } else return e.interleavedBuffers === void 0 && (e.interleavedBuffers = {}), e.interleavedBuffers[this.data.uuid] === void 0 && (e.interleavedBuffers[this.data.uuid] = this.data.clone(e)), new $p(e.interleavedBuffers[this.data.uuid], this.itemSize, this.offset, this.normalized);
    }
    toJSON(e) {
      if (e === void 0) {
        console.log("THREE.InterleavedBufferAttribute.toJSON(): Serializing an interleaved buffer attribute will de-interleave buffer data.");
        const t = [];
        for (let i = 0; i < this.count; i++) {
          const r = i * this.data.stride + this.offset;
          for (let s = 0; s < this.itemSize; s++) t.push(this.data.array[r + s]);
        }
        return {
          itemSize: this.itemSize,
          type: this.array.constructor.name,
          array: t,
          normalized: this.normalized
        };
      } else return e.interleavedBuffers === void 0 && (e.interleavedBuffers = {}), e.interleavedBuffers[this.data.uuid] === void 0 && (e.interleavedBuffers[this.data.uuid] = this.data.toJSON(e)), {
        isInterleavedBufferAttribute: true,
        itemSize: this.itemSize,
        data: this.data.uuid,
        offset: this.offset,
        normalized: this.normalized
      };
    }
  }
  const eg = new u1(), tg = new Je(), ng = new Je(), YL = new u1(), ig = new Ee(), ac = new u1(), Wh = new d2(), rg = new Ee(), jh = new Cl();
  class KL extends Zn {
    constructor(e, t) {
      super(e, t), this.isSkinnedMesh = true, this.type = "SkinnedMesh", this.bindMode = Rm, this.bindMatrix = new Ee(), this.bindMatrixInverse = new Ee(), this.boundingBox = null, this.boundingSphere = null;
    }
    computeBoundingBox() {
      const e = this.geometry;
      this.boundingBox === null && (this.boundingBox = new F2()), this.boundingBox.makeEmpty();
      const t = e.getAttribute("position");
      for (let i = 0; i < t.count; i++) this.getVertexPosition(i, ac), this.boundingBox.expandByPoint(ac);
    }
    computeBoundingSphere() {
      const e = this.geometry;
      this.boundingSphere === null && (this.boundingSphere = new d2()), this.boundingSphere.makeEmpty();
      const t = e.getAttribute("position");
      for (let i = 0; i < t.count; i++) this.getVertexPosition(i, ac), this.boundingSphere.expandByPoint(ac);
    }
    copy(e, t) {
      return super.copy(e, t), this.bindMode = e.bindMode, this.bindMatrix.copy(e.bindMatrix), this.bindMatrixInverse.copy(e.bindMatrixInverse), this.skeleton = e.skeleton, e.boundingBox !== null && (this.boundingBox = e.boundingBox.clone()), e.boundingSphere !== null && (this.boundingSphere = e.boundingSphere.clone()), this;
    }
    raycast(e, t) {
      const i = this.material, r = this.matrixWorld;
      i !== void 0 && (this.boundingSphere === null && this.computeBoundingSphere(), Wh.copy(this.boundingSphere), Wh.applyMatrix4(r), e.ray.intersectsSphere(Wh) !== false && (rg.copy(r).invert(), jh.copy(e.ray).applyMatrix4(rg), !(this.boundingBox !== null && jh.intersectsBox(this.boundingBox) === false) && this._computeIntersections(e, t, jh)));
    }
    getVertexPosition(e, t) {
      return super.getVertexPosition(e, t), this.applyBoneTransform(e, t), t;
    }
    bind(e, t) {
      this.skeleton = e, t === void 0 && (this.updateMatrixWorld(true), this.skeleton.calculateInverses(), t = this.matrixWorld), this.bindMatrix.copy(t), this.bindMatrixInverse.copy(t).invert();
    }
    pose() {
      this.skeleton.pose();
    }
    normalizeSkinWeights() {
      const e = new Je(), t = this.geometry.attributes.skinWeight;
      for (let i = 0, r = t.count; i < r; i++) {
        e.fromBufferAttribute(t, i);
        const s = 1 / e.manhattanLength();
        s !== 1 / 0 ? e.multiplyScalar(s) : e.set(1, 0, 0, 0), t.setXYZW(i, e.x, e.y, e.z, e.w);
      }
    }
    updateMatrixWorld(e) {
      super.updateMatrixWorld(e), this.bindMode === Rm ? this.bindMatrixInverse.copy(this.matrixWorld).invert() : this.bindMode === zP ? this.bindMatrixInverse.copy(this.bindMatrix).invert() : console.warn("THREE.SkinnedMesh: Unrecognized bindMode: " + this.bindMode);
    }
    applyBoneTransform(e, t) {
      const i = this.skeleton, r = this.geometry;
      tg.fromBufferAttribute(r.attributes.skinIndex, e), ng.fromBufferAttribute(r.attributes.skinWeight, e), eg.copy(t).applyMatrix4(this.bindMatrix), t.set(0, 0, 0);
      for (let s = 0; s < 4; s++) {
        const o = ng.getComponent(s);
        if (o !== 0) {
          const a = tg.getComponent(s);
          ig.multiplyMatrices(i.bones[a].matrixWorld, i.boneInverses[a]), t.addScaledVector(YL.copy(eg).applyMatrix4(ig), o);
        }
      }
      return t.applyMatrix4(this.bindMatrixInverse);
    }
  }
  class M8 extends Ct {
    constructor() {
      super(), this.isBone = true, this.type = "Bone";
    }
  }
  class No extends hn {
    constructor(e = null, t = 1, i = 1, r, s, o, a, l, c = t2, u = t2, h, d) {
      super(null, o, a, l, c, u, r, s, h, d), this.isDataTexture = true, this.image = {
        data: e,
        width: t,
        height: i
      }, this.generateMipmaps = false, this.flipY = false, this.unpackAlignment = 1;
    }
  }
  const sg = new Ee(), JL = new Ee();
  class qp {
    constructor(e = [], t = []) {
      this.uuid = gi(), this.bones = e.slice(0), this.boneInverses = t, this.boneMatrices = null, this.boneTexture = null, this.init();
    }
    init() {
      const e = this.bones, t = this.boneInverses;
      if (this.boneMatrices = new Float32Array(e.length * 16), t.length === 0) this.calculateInverses();
      else if (e.length !== t.length) {
        console.warn("THREE.Skeleton: Number of inverse bone matrices does not match amount of bones."), this.boneInverses = [];
        for (let i = 0, r = this.bones.length; i < r; i++) this.boneInverses.push(new Ee());
      }
    }
    calculateInverses() {
      this.boneInverses.length = 0;
      for (let e = 0, t = this.bones.length; e < t; e++) {
        const i = new Ee();
        this.bones[e] && i.copy(this.bones[e].matrixWorld).invert(), this.boneInverses.push(i);
      }
    }
    pose() {
      for (let e = 0, t = this.bones.length; e < t; e++) {
        const i = this.bones[e];
        i && i.matrixWorld.copy(this.boneInverses[e]).invert();
      }
      for (let e = 0, t = this.bones.length; e < t; e++) {
        const i = this.bones[e];
        i && (i.parent && i.parent.isBone ? (i.matrix.copy(i.parent.matrixWorld).invert(), i.matrix.multiply(i.matrixWorld)) : i.matrix.copy(i.matrixWorld), i.matrix.decompose(i.position, i.quaternion, i.scale));
      }
    }
    update() {
      const e = this.bones, t = this.boneInverses, i = this.boneMatrices, r = this.boneTexture;
      for (let s = 0, o = e.length; s < o; s++) {
        const a = e[s] ? e[s].matrixWorld : JL;
        sg.multiplyMatrices(a, t[s]), sg.toArray(i, s * 16);
      }
      r !== null && (r.needsUpdate = true);
    }
    clone() {
      return new qp(this.bones, this.boneInverses);
    }
    computeBoneTexture() {
      let e = Math.sqrt(this.bones.length * 4);
      e = Math.ceil(e / 4) * 4, e = Math.max(e, 4);
      const t = new Float32Array(e * e * 4);
      t.set(this.boneMatrices);
      const i = new No(t, e, e, f2, L2);
      return i.needsUpdate = true, this.boneMatrices = t, this.boneTexture = i, this;
    }
    getBoneByName(e) {
      for (let t = 0, i = this.bones.length; t < i; t++) {
        const r = this.bones[t];
        if (r.name === e) return r;
      }
    }
    dispose() {
      this.boneTexture !== null && (this.boneTexture.dispose(), this.boneTexture = null);
    }
    fromJSON(e, t) {
      this.uuid = e.uuid;
      for (let i = 0, r = e.bones.length; i < r; i++) {
        const s = e.bones[i];
        let o = t[s];
        o === void 0 && (console.warn("THREE.Skeleton: No bone found with UUID:", s), o = new M8()), this.bones.push(o), this.boneInverses.push(new Ee().fromArray(e.boneInverses[i]));
      }
      return this.init(), this;
    }
    toJSON() {
      const e = {
        metadata: {
          version: 4.7,
          type: "Skeleton",
          generator: "Skeleton.toJSON"
        },
        bones: [],
        boneInverses: []
      };
      e.uuid = this.uuid;
      const t = this.bones, i = this.boneInverses;
      for (let r = 0, s = t.length; r < s; r++) {
        const o = t[r];
        e.bones.push(o.uuid);
        const a = i[r];
        e.boneInverses.push(a.toArray());
      }
      return e;
    }
  }
  class a9 extends nn {
    constructor(e, t, i, r = 1) {
      super(e, t, i), this.isInstancedBufferAttribute = true, this.meshPerAttribute = r;
    }
    copy(e) {
      return super.copy(e), this.meshPerAttribute = e.meshPerAttribute, this;
    }
    toJSON() {
      const e = super.toJSON();
      return e.meshPerAttribute = this.meshPerAttribute, e.isInstancedBufferAttribute = true, e;
    }
  }
  const no = new Ee(), og = new Ee(), lc = [], ag = new F2(), QL = new Ee(), Na = new Zn(), Ua = new d2();
  class ZL extends Zn {
    constructor(e, t, i) {
      super(e, t), this.isInstancedMesh = true, this.instanceMatrix = new a9(new Float32Array(i * 16), 16), this.instanceColor = null, this.morphTexture = null, this.count = i, this.boundingBox = null, this.boundingSphere = null;
      for (let r = 0; r < i; r++) this.setMatrixAt(r, QL);
    }
    computeBoundingBox() {
      const e = this.geometry, t = this.count;
      this.boundingBox === null && (this.boundingBox = new F2()), e.boundingBox === null && e.computeBoundingBox(), this.boundingBox.makeEmpty();
      for (let i = 0; i < t; i++) this.getMatrixAt(i, no), ag.copy(e.boundingBox).applyMatrix4(no), this.boundingBox.union(ag);
    }
    computeBoundingSphere() {
      const e = this.geometry, t = this.count;
      this.boundingSphere === null && (this.boundingSphere = new d2()), e.boundingSphere === null && e.computeBoundingSphere(), this.boundingSphere.makeEmpty();
      for (let i = 0; i < t; i++) this.getMatrixAt(i, no), Ua.copy(e.boundingSphere).applyMatrix4(no), this.boundingSphere.union(Ua);
    }
    copy(e, t) {
      return super.copy(e, t), this.instanceMatrix.copy(e.instanceMatrix), e.morphTexture !== null && (this.morphTexture = e.morphTexture.clone()), e.instanceColor !== null && (this.instanceColor = e.instanceColor.clone()), this.count = e.count, e.boundingBox !== null && (this.boundingBox = e.boundingBox.clone()), e.boundingSphere !== null && (this.boundingSphere = e.boundingSphere.clone()), this;
    }
    getColorAt(e, t) {
      t.fromArray(this.instanceColor.array, e * 3);
    }
    getMatrixAt(e, t) {
      t.fromArray(this.instanceMatrix.array, e * 16);
    }
    getMorphAt(e, t) {
      const i = t.morphTargetInfluences, r = this.morphTexture.source.data.data, s = i.length + 1, o = e * s + 1;
      for (let a = 0; a < i.length; a++) i[a] = r[o + a];
    }
    raycast(e, t) {
      const i = this.matrixWorld, r = this.count;
      if (Na.geometry = this.geometry, Na.material = this.material, Na.material !== void 0 && (this.boundingSphere === null && this.computeBoundingSphere(), Ua.copy(this.boundingSphere), Ua.applyMatrix4(i), e.ray.intersectsSphere(Ua) !== false)) for (let s = 0; s < r; s++) {
        this.getMatrixAt(s, no), og.multiplyMatrices(i, no), Na.matrixWorld = og, Na.raycast(e, lc);
        for (let o = 0, a = lc.length; o < a; o++) {
          const l = lc[o];
          l.instanceId = s, l.object = this, t.push(l);
        }
        lc.length = 0;
      }
    }
    setColorAt(e, t) {
      this.instanceColor === null && (this.instanceColor = new a9(new Float32Array(this.instanceMatrix.count * 3).fill(1), 3)), t.toArray(this.instanceColor.array, e * 3);
    }
    setMatrixAt(e, t) {
      t.toArray(this.instanceMatrix.array, e * 16);
    }
    setMorphAt(e, t) {
      const i = t.morphTargetInfluences, r = i.length + 1;
      this.morphTexture === null && (this.morphTexture = new No(new Float32Array(r * this.count), r, this.count, zp, L2));
      const s = this.morphTexture.source.data.data;
      let o = 0;
      for (let c = 0; c < i.length; c++) o += i[c];
      const a = this.geometry.morphTargetsRelative ? 1 : 1 - o, l = r * e;
      s[l] = a, s.set(i, l + 1);
    }
    updateMorphTargets() {
    }
    dispose() {
      this.dispatchEvent({
        type: "dispose"
      }), this.morphTexture !== null && (this.morphTexture.dispose(), this.morphTexture = null);
    }
  }
  const Xh = new u1(), eI = new u1(), tI = new Te();
  es = class {
    constructor(e = new u1(1, 0, 0), t = 0) {
      this.isPlane = true, this.normal = e, this.constant = t;
    }
    set(e, t) {
      return this.normal.copy(e), this.constant = t, this;
    }
    setComponents(e, t, i, r) {
      return this.normal.set(e, t, i), this.constant = r, this;
    }
    setFromNormalAndCoplanarPoint(e, t) {
      return this.normal.copy(e), this.constant = -t.dot(this.normal), this;
    }
    setFromCoplanarPoints(e, t, i) {
      const r = Xh.subVectors(i, t).cross(eI.subVectors(e, t)).normalize();
      return this.setFromNormalAndCoplanarPoint(r, e), this;
    }
    copy(e) {
      return this.normal.copy(e.normal), this.constant = e.constant, this;
    }
    normalize() {
      const e = 1 / this.normal.length();
      return this.normal.multiplyScalar(e), this.constant *= e, this;
    }
    negate() {
      return this.constant *= -1, this.normal.negate(), this;
    }
    distanceToPoint(e) {
      return this.normal.dot(e) + this.constant;
    }
    distanceToSphere(e) {
      return this.distanceToPoint(e.center) - e.radius;
    }
    projectPoint(e, t) {
      return t.copy(e).addScaledVector(this.normal, -this.distanceToPoint(e));
    }
    intersectLine(e, t) {
      const i = e.delta(Xh), r = this.normal.dot(i);
      if (r === 0) return this.distanceToPoint(e.start) === 0 ? t.copy(e.start) : null;
      const s = -(e.start.dot(this.normal) + this.constant) / r;
      return s < 0 || s > 1 ? null : t.copy(e.start).addScaledVector(i, s);
    }
    intersectsLine(e) {
      const t = this.distanceToPoint(e.start), i = this.distanceToPoint(e.end);
      return t < 0 && i > 0 || i < 0 && t > 0;
    }
    intersectsBox(e) {
      return e.intersectsPlane(this);
    }
    intersectsSphere(e) {
      return e.intersectsPlane(this);
    }
    coplanarPoint(e) {
      return e.copy(this.normal).multiplyScalar(-this.constant);
    }
    applyMatrix4(e, t) {
      const i = t || tI.getNormalMatrix(e), r = this.coplanarPoint(Xh).applyMatrix4(e), s = this.normal.applyMatrix3(i).normalize();
      return this.constant = -r.dot(s), this;
    }
    translate(e) {
      return this.constant -= e.dot(this.normal), this;
    }
    equals(e) {
      return e.normal.equals(this.normal) && e.constant === this.constant;
    }
    clone() {
      return new this.constructor().copy(this);
    }
  };
  const Gr = new d2(), cc = new u1();
  class Dl {
    constructor(e = new es(), t = new es(), i = new es(), r = new es(), s = new es(), o = new es()) {
      this.planes = [
        e,
        t,
        i,
        r,
        s,
        o
      ];
    }
    set(e, t, i, r, s, o) {
      const a = this.planes;
      return a[0].copy(e), a[1].copy(t), a[2].copy(i), a[3].copy(r), a[4].copy(s), a[5].copy(o), this;
    }
    copy(e) {
      const t = this.planes;
      for (let i = 0; i < 6; i++) t[i].copy(e.planes[i]);
      return this;
    }
    setFromProjectionMatrix(e, t = zi) {
      const i = this.planes, r = e.elements, s = r[0], o = r[1], a = r[2], l = r[3], c = r[4], u = r[5], h = r[6], d = r[7], f = r[8], m = r[9], _ = r[10], p = r[11], g = r[12], y = r[13], b = r[14], v = r[15];
      if (i[0].setComponents(l - s, d - c, p - f, v - g).normalize(), i[1].setComponents(l + s, d + c, p + f, v + g).normalize(), i[2].setComponents(l + o, d + u, p + m, v + y).normalize(), i[3].setComponents(l - o, d - u, p - m, v - y).normalize(), i[4].setComponents(l - a, d - h, p - _, v - b).normalize(), t === zi) i[5].setComponents(l + a, d + h, p + _, v + b).normalize();
      else if (t === Ou) i[5].setComponents(a, h, _, b).normalize();
      else throw new Error("THREE.Frustum.setFromProjectionMatrix(): Invalid coordinate system: " + t);
      return this;
    }
    intersectsObject(e) {
      if (e.boundingSphere !== void 0) e.boundingSphere === null && e.computeBoundingSphere(), Gr.copy(e.boundingSphere).applyMatrix4(e.matrixWorld);
      else {
        const t = e.geometry;
        t.boundingSphere === null && t.computeBoundingSphere(), Gr.copy(t.boundingSphere).applyMatrix4(e.matrixWorld);
      }
      return this.intersectsSphere(Gr);
    }
    intersectsSprite(e) {
      return Gr.center.set(0, 0, 0), Gr.radius = 0.7071067811865476, Gr.applyMatrix4(e.matrixWorld), this.intersectsSphere(Gr);
    }
    intersectsSphere(e) {
      const t = this.planes, i = e.center, r = -e.radius;
      for (let s = 0; s < 6; s++) if (t[s].distanceToPoint(i) < r) return false;
      return true;
    }
    intersectsBox(e) {
      const t = this.planes;
      for (let i = 0; i < 6; i++) {
        const r = t[i];
        if (cc.x = r.normal.x > 0 ? e.max.x : e.min.x, cc.y = r.normal.y > 0 ? e.max.y : e.min.y, cc.z = r.normal.z > 0 ? e.max.z : e.min.z, r.distanceToPoint(cc) < 0) return false;
      }
      return true;
    }
    containsPoint(e) {
      const t = this.planes;
      for (let i = 0; i < 6; i++) if (t[i].distanceToPoint(e) < 0) return false;
      return true;
    }
    clone() {
      return new this.constructor().copy(this);
    }
  }
  const Mi = new Ee(), Ti = new Dl();
  class Yp {
    constructor() {
      this.coordinateSystem = zi;
    }
    intersectsObject(e, t) {
      if (!t.isArrayCamera || t.cameras.length === 0) return false;
      for (let i = 0; i < t.cameras.length; i++) {
        const r = t.cameras[i];
        if (Mi.multiplyMatrices(r.projectionMatrix, r.matrixWorldInverse), Ti.setFromProjectionMatrix(Mi, this.coordinateSystem), Ti.intersectsObject(e)) return true;
      }
      return false;
    }
    intersectsSprite(e, t) {
      if (!t || !t.cameras || t.cameras.length === 0) return false;
      for (let i = 0; i < t.cameras.length; i++) {
        const r = t.cameras[i];
        if (Mi.multiplyMatrices(r.projectionMatrix, r.matrixWorldInverse), Ti.setFromProjectionMatrix(Mi, this.coordinateSystem), Ti.intersectsSprite(e)) return true;
      }
      return false;
    }
    intersectsSphere(e, t) {
      if (!t || !t.cameras || t.cameras.length === 0) return false;
      for (let i = 0; i < t.cameras.length; i++) {
        const r = t.cameras[i];
        if (Mi.multiplyMatrices(r.projectionMatrix, r.matrixWorldInverse), Ti.setFromProjectionMatrix(Mi, this.coordinateSystem), Ti.intersectsSphere(e)) return true;
      }
      return false;
    }
    intersectsBox(e, t) {
      if (!t || !t.cameras || t.cameras.length === 0) return false;
      for (let i = 0; i < t.cameras.length; i++) {
        const r = t.cameras[i];
        if (Mi.multiplyMatrices(r.projectionMatrix, r.matrixWorldInverse), Ti.setFromProjectionMatrix(Mi, this.coordinateSystem), Ti.intersectsBox(e)) return true;
      }
      return false;
    }
    containsPoint(e, t) {
      if (!t || !t.cameras || t.cameras.length === 0) return false;
      for (let i = 0; i < t.cameras.length; i++) {
        const r = t.cameras[i];
        if (Mi.multiplyMatrices(r.projectionMatrix, r.matrixWorldInverse), Ti.setFromProjectionMatrix(Mi, this.coordinateSystem), Ti.containsPoint(e)) return true;
      }
      return false;
    }
    clone() {
      return new Yp();
    }
  }
  function $h(n, e) {
    return n - e;
  }
  function nI(n, e) {
    return n.z - e.z;
  }
  function iI(n, e) {
    return e.z - n.z;
  }
  class rI {
    constructor() {
      this.index = 0, this.pool = [], this.list = [];
    }
    push(e, t, i, r) {
      const s = this.pool, o = this.list;
      this.index >= s.length && s.push({
        start: -1,
        count: -1,
        z: -1,
        index: -1
      });
      const a = s[this.index];
      o.push(a), this.index++, a.start = e, a.count = t, a.z = i, a.index = r;
    }
    reset() {
      this.list.length = 0, this.index = 0;
    }
  }
  const r2 = new Ee(), sI = new xe(1, 1, 1), lg = new Dl(), oI = new Yp(), uc = new F2(), Wr = new d2(), Ba = new u1(), cg = new u1(), aI = new u1(), qh = new rI(), En = new Zn(), fc = [];
  function lI(n, e, t = 0) {
    const i = e.itemSize;
    if (n.isInterleavedBufferAttribute || n.array.constructor !== e.array.constructor) {
      const r = n.count;
      for (let s = 0; s < r; s++) for (let o = 0; o < i; o++) e.setComponent(s + t, o, n.getComponent(s, o));
    } else e.array.set(n.array, t * i);
    e.needsUpdate = true;
  }
  function jr(n, e) {
    if (n.constructor !== e.constructor) {
      const t = Math.min(n.length, e.length);
      for (let i = 0; i < t; i++) e[i] = n[i];
    } else {
      const t = Math.min(n.length, e.length);
      e.set(new n.constructor(n.buffer, 0, t));
    }
  }
  HV = class extends Zn {
    constructor(e, t, i = t * 2, r) {
      super(new i2(), r), this.isBatchedMesh = true, this.perObjectFrustumCulled = true, this.sortObjects = true, this.boundingBox = null, this.boundingSphere = null, this.customSort = null, this._instanceInfo = [], this._geometryInfo = [], this._availableInstanceIds = [], this._availableGeometryIds = [], this._nextIndexStart = 0, this._nextVertexStart = 0, this._geometryCount = 0, this._visibilityChanged = true, this._geometryInitialized = false, this._maxInstanceCount = e, this._maxVertexCount = t, this._maxIndexCount = i, this._multiDrawCounts = new Int32Array(e), this._multiDrawStarts = new Int32Array(e), this._multiDrawCount = 0, this._multiDrawInstances = null, this._matricesTexture = null, this._indirectTexture = null, this._colorsTexture = null, this._initMatricesTexture(), this._initIndirectTexture();
    }
    get maxInstanceCount() {
      return this._maxInstanceCount;
    }
    get instanceCount() {
      return this._instanceInfo.length - this._availableInstanceIds.length;
    }
    get unusedVertexCount() {
      return this._maxVertexCount - this._nextVertexStart;
    }
    get unusedIndexCount() {
      return this._maxIndexCount - this._nextIndexStart;
    }
    _initMatricesTexture() {
      let e = Math.sqrt(this._maxInstanceCount * 4);
      e = Math.ceil(e / 4) * 4, e = Math.max(e, 4);
      const t = new Float32Array(e * e * 4), i = new No(t, e, e, f2, L2);
      this._matricesTexture = i;
    }
    _initIndirectTexture() {
      let e = Math.sqrt(this._maxInstanceCount);
      e = Math.ceil(e);
      const t = new Uint32Array(e * e), i = new No(t, e, e, Df, wr);
      this._indirectTexture = i;
    }
    _initColorsTexture() {
      let e = Math.sqrt(this._maxInstanceCount);
      e = Math.ceil(e);
      const t = new Float32Array(e * e * 4).fill(1), i = new No(t, e, e, f2, L2);
      i.colorSpace = ze.workingColorSpace, this._colorsTexture = i;
    }
    _initializeGeometry(e) {
      const t = this.geometry, i = this._maxVertexCount, r = this._maxIndexCount;
      if (this._geometryInitialized === false) {
        for (const s in e.attributes) {
          const o = e.getAttribute(s), { array: a, itemSize: l, normalized: c } = o, u = new a.constructor(i * l), h = new nn(u, l, c);
          t.setAttribute(s, h);
        }
        if (e.getIndex() !== null) {
          const s = i > 65535 ? new Uint32Array(r) : new Uint16Array(r);
          t.setIndex(new nn(s, 1));
        }
        this._geometryInitialized = true;
      }
    }
    _validateGeometry(e) {
      const t = this.geometry;
      if (!!e.getIndex() != !!t.getIndex()) throw new Error('THREE.BatchedMesh: All geometries must consistently have "index".');
      for (const i in t.attributes) {
        if (!e.hasAttribute(i)) throw new Error(`THREE.BatchedMesh: Added geometry missing "${i}". All geometries must have consistent attributes.`);
        const r = e.getAttribute(i), s = t.getAttribute(i);
        if (r.itemSize !== s.itemSize || r.normalized !== s.normalized) throw new Error("THREE.BatchedMesh: All attributes must have a consistent itemSize and normalized value.");
      }
    }
    validateInstanceId(e) {
      const t = this._instanceInfo;
      if (e < 0 || e >= t.length || t[e].active === false) throw new Error(`THREE.BatchedMesh: Invalid instanceId ${e}. Instance is either out of range or has been deleted.`);
    }
    validateGeometryId(e) {
      const t = this._geometryInfo;
      if (e < 0 || e >= t.length || t[e].active === false) throw new Error(`THREE.BatchedMesh: Invalid geometryId ${e}. Geometry is either out of range or has been deleted.`);
    }
    setCustomSort(e) {
      return this.customSort = e, this;
    }
    computeBoundingBox() {
      this.boundingBox === null && (this.boundingBox = new F2());
      const e = this.boundingBox, t = this._instanceInfo;
      e.makeEmpty();
      for (let i = 0, r = t.length; i < r; i++) {
        if (t[i].active === false) continue;
        const s = t[i].geometryIndex;
        this.getMatrixAt(i, r2), this.getBoundingBoxAt(s, uc).applyMatrix4(r2), e.union(uc);
      }
    }
    computeBoundingSphere() {
      this.boundingSphere === null && (this.boundingSphere = new d2());
      const e = this.boundingSphere, t = this._instanceInfo;
      e.makeEmpty();
      for (let i = 0, r = t.length; i < r; i++) {
        if (t[i].active === false) continue;
        const s = t[i].geometryIndex;
        this.getMatrixAt(i, r2), this.getBoundingSphereAt(s, Wr).applyMatrix4(r2), e.union(Wr);
      }
    }
    addInstance(e) {
      if (this._instanceInfo.length >= this.maxInstanceCount && this._availableInstanceIds.length === 0) throw new Error("THREE.BatchedMesh: Maximum item count reached.");
      const i = {
        visible: true,
        active: true,
        geometryIndex: e
      };
      let r = null;
      this._availableInstanceIds.length > 0 ? (this._availableInstanceIds.sort($h), r = this._availableInstanceIds.shift(), this._instanceInfo[r] = i) : (r = this._instanceInfo.length, this._instanceInfo.push(i));
      const s = this._matricesTexture;
      r2.identity().toArray(s.image.data, r * 16), s.needsUpdate = true;
      const o = this._colorsTexture;
      return o && (sI.toArray(o.image.data, r * 4), o.needsUpdate = true), this._visibilityChanged = true, r;
    }
    addGeometry(e, t = -1, i = -1) {
      this._initializeGeometry(e), this._validateGeometry(e);
      const r = {
        vertexStart: -1,
        vertexCount: -1,
        reservedVertexCount: -1,
        indexStart: -1,
        indexCount: -1,
        reservedIndexCount: -1,
        start: -1,
        count: -1,
        boundingBox: null,
        boundingSphere: null,
        active: true
      }, s = this._geometryInfo;
      r.vertexStart = this._nextVertexStart, r.reservedVertexCount = t === -1 ? e.getAttribute("position").count : t;
      const o = e.getIndex();
      if (o !== null && (r.indexStart = this._nextIndexStart, r.reservedIndexCount = i === -1 ? o.count : i), r.indexStart !== -1 && r.indexStart + r.reservedIndexCount > this._maxIndexCount || r.vertexStart + r.reservedVertexCount > this._maxVertexCount) throw new Error("THREE.BatchedMesh: Reserved space request exceeds the maximum buffer size.");
      let l;
      return this._availableGeometryIds.length > 0 ? (this._availableGeometryIds.sort($h), l = this._availableGeometryIds.shift(), s[l] = r) : (l = this._geometryCount, this._geometryCount++, s.push(r)), this.setGeometryAt(l, e), this._nextIndexStart = r.indexStart + r.reservedIndexCount, this._nextVertexStart = r.vertexStart + r.reservedVertexCount, l;
    }
    setGeometryAt(e, t) {
      if (e >= this._geometryCount) throw new Error("THREE.BatchedMesh: Maximum geometry count reached.");
      this._validateGeometry(t);
      const i = this.geometry, r = i.getIndex() !== null, s = i.getIndex(), o = t.getIndex(), a = this._geometryInfo[e];
      if (r && o.count > a.reservedIndexCount || t.attributes.position.count > a.reservedVertexCount) throw new Error("THREE.BatchedMesh: Reserved space not large enough for provided geometry.");
      const l = a.vertexStart, c = a.reservedVertexCount;
      a.vertexCount = t.getAttribute("position").count;
      for (const u in i.attributes) {
        const h = t.getAttribute(u), d = i.getAttribute(u);
        lI(h, d, l);
        const f = h.itemSize;
        for (let m = h.count, _ = c; m < _; m++) {
          const p = l + m;
          for (let g = 0; g < f; g++) d.setComponent(p, g, 0);
        }
        d.needsUpdate = true, d.addUpdateRange(l * f, c * f);
      }
      if (r) {
        const u = a.indexStart, h = a.reservedIndexCount;
        a.indexCount = t.getIndex().count;
        for (let d = 0; d < o.count; d++) s.setX(u + d, l + o.getX(d));
        for (let d = o.count, f = h; d < f; d++) s.setX(u + d, l);
        s.needsUpdate = true, s.addUpdateRange(u, a.reservedIndexCount);
      }
      return a.start = r ? a.indexStart : a.vertexStart, a.count = r ? a.indexCount : a.vertexCount, a.boundingBox = null, t.boundingBox !== null && (a.boundingBox = t.boundingBox.clone()), a.boundingSphere = null, t.boundingSphere !== null && (a.boundingSphere = t.boundingSphere.clone()), this._visibilityChanged = true, e;
    }
    deleteGeometry(e) {
      const t = this._geometryInfo;
      if (e >= t.length || t[e].active === false) return this;
      const i = this._instanceInfo;
      for (let r = 0, s = i.length; r < s; r++) i[r].active && i[r].geometryIndex === e && this.deleteInstance(r);
      return t[e].active = false, this._availableGeometryIds.push(e), this._visibilityChanged = true, this;
    }
    deleteInstance(e) {
      return this.validateInstanceId(e), this._instanceInfo[e].active = false, this._availableInstanceIds.push(e), this._visibilityChanged = true, this;
    }
    optimize() {
      let e = 0, t = 0;
      const i = this._geometryInfo, r = i.map((o, a) => a).sort((o, a) => i[o].vertexStart - i[a].vertexStart), s = this.geometry;
      for (let o = 0, a = i.length; o < a; o++) {
        const l = r[o], c = i[l];
        if (c.active !== false) {
          if (s.index !== null) {
            if (c.indexStart !== t) {
              const { indexStart: u, vertexStart: h, reservedIndexCount: d } = c, f = s.index, m = f.array, _ = e - h;
              for (let p = u; p < u + d; p++) m[p] = m[p] + _;
              f.array.copyWithin(t, u, u + d), f.addUpdateRange(t, d), c.indexStart = t;
            }
            t += c.reservedIndexCount;
          }
          if (c.vertexStart !== e) {
            const { vertexStart: u, reservedVertexCount: h } = c, d = s.attributes;
            for (const f in d) {
              const m = d[f], { array: _, itemSize: p } = m;
              _.copyWithin(e * p, u * p, (u + h) * p), m.addUpdateRange(e * p, h * p);
            }
            c.vertexStart = e;
          }
          e += c.reservedVertexCount, c.start = s.index ? c.indexStart : c.vertexStart, this._nextIndexStart = s.index ? c.indexStart + c.reservedIndexCount : 0, this._nextVertexStart = c.vertexStart + c.reservedVertexCount;
        }
      }
      return this;
    }
    getBoundingBoxAt(e, t) {
      if (e >= this._geometryCount) return null;
      const i = this.geometry, r = this._geometryInfo[e];
      if (r.boundingBox === null) {
        const s = new F2(), o = i.index, a = i.attributes.position;
        for (let l = r.start, c = r.start + r.count; l < c; l++) {
          let u = l;
          o && (u = o.getX(u)), s.expandByPoint(Ba.fromBufferAttribute(a, u));
        }
        r.boundingBox = s;
      }
      return t.copy(r.boundingBox), t;
    }
    getBoundingSphereAt(e, t) {
      if (e >= this._geometryCount) return null;
      const i = this.geometry, r = this._geometryInfo[e];
      if (r.boundingSphere === null) {
        const s = new d2();
        this.getBoundingBoxAt(e, uc), uc.getCenter(s.center);
        const o = i.index, a = i.attributes.position;
        let l = 0;
        for (let c = r.start, u = r.start + r.count; c < u; c++) {
          let h = c;
          o && (h = o.getX(h)), Ba.fromBufferAttribute(a, h), l = Math.max(l, s.center.distanceToSquared(Ba));
        }
        s.radius = Math.sqrt(l), r.boundingSphere = s;
      }
      return t.copy(r.boundingSphere), t;
    }
    setMatrixAt(e, t) {
      this.validateInstanceId(e);
      const i = this._matricesTexture, r = this._matricesTexture.image.data;
      return t.toArray(r, e * 16), i.needsUpdate = true, this;
    }
    getMatrixAt(e, t) {
      return this.validateInstanceId(e), t.fromArray(this._matricesTexture.image.data, e * 16);
    }
    setColorAt(e, t) {
      return this.validateInstanceId(e), this._colorsTexture === null && this._initColorsTexture(), t.toArray(this._colorsTexture.image.data, e * 4), this._colorsTexture.needsUpdate = true, this;
    }
    getColorAt(e, t) {
      return this.validateInstanceId(e), t.fromArray(this._colorsTexture.image.data, e * 4);
    }
    setVisibleAt(e, t) {
      return this.validateInstanceId(e), this._instanceInfo[e].visible === t ? this : (this._instanceInfo[e].visible = t, this._visibilityChanged = true, this);
    }
    getVisibleAt(e) {
      return this.validateInstanceId(e), this._instanceInfo[e].visible;
    }
    setGeometryIdAt(e, t) {
      return this.validateInstanceId(e), this.validateGeometryId(t), this._instanceInfo[e].geometryIndex = t, this;
    }
    getGeometryIdAt(e) {
      return this.validateInstanceId(e), this._instanceInfo[e].geometryIndex;
    }
    getGeometryRangeAt(e, t = {}) {
      this.validateGeometryId(e);
      const i = this._geometryInfo[e];
      return t.vertexStart = i.vertexStart, t.vertexCount = i.vertexCount, t.reservedVertexCount = i.reservedVertexCount, t.indexStart = i.indexStart, t.indexCount = i.indexCount, t.reservedIndexCount = i.reservedIndexCount, t.start = i.start, t.count = i.count, t;
    }
    setInstanceCount(e) {
      const t = this._availableInstanceIds, i = this._instanceInfo;
      for (t.sort($h); t[t.length - 1] === i.length; ) i.pop(), t.pop();
      if (e < i.length) throw new Error(`BatchedMesh: Instance ids outside the range ${e} are being used. Cannot shrink instance count.`);
      const r = new Int32Array(e), s = new Int32Array(e);
      jr(this._multiDrawCounts, r), jr(this._multiDrawStarts, s), this._multiDrawCounts = r, this._multiDrawStarts = s, this._maxInstanceCount = e;
      const o = this._indirectTexture, a = this._matricesTexture, l = this._colorsTexture;
      o.dispose(), this._initIndirectTexture(), jr(o.image.data, this._indirectTexture.image.data), a.dispose(), this._initMatricesTexture(), jr(a.image.data, this._matricesTexture.image.data), l && (l.dispose(), this._initColorsTexture(), jr(l.image.data, this._colorsTexture.image.data));
    }
    setGeometrySize(e, t) {
      const i = [
        ...this._geometryInfo
      ].filter((a) => a.active);
      if (Math.max(...i.map((a) => a.vertexStart + a.reservedVertexCount)) > e) throw new Error(`BatchedMesh: Geometry vertex values are being used outside the range ${t}. Cannot shrink further.`);
      if (this.geometry.index && Math.max(...i.map((l) => l.indexStart + l.reservedIndexCount)) > t) throw new Error(`BatchedMesh: Geometry index values are being used outside the range ${t}. Cannot shrink further.`);
      const s = this.geometry;
      s.dispose(), this._maxVertexCount = e, this._maxIndexCount = t, this._geometryInitialized && (this._geometryInitialized = false, this.geometry = new i2(), this._initializeGeometry(s));
      const o = this.geometry;
      s.index && jr(s.index.array, o.index.array);
      for (const a in s.attributes) jr(s.attributes[a].array, o.attributes[a].array);
    }
    raycast(e, t) {
      const i = this._instanceInfo, r = this._geometryInfo, s = this.matrixWorld, o = this.geometry;
      En.material = this.material, En.geometry.index = o.index, En.geometry.attributes = o.attributes, En.geometry.boundingBox === null && (En.geometry.boundingBox = new F2()), En.geometry.boundingSphere === null && (En.geometry.boundingSphere = new d2());
      for (let a = 0, l = i.length; a < l; a++) {
        if (!i[a].visible || !i[a].active) continue;
        const c = i[a].geometryIndex, u = r[c];
        En.geometry.setDrawRange(u.start, u.count), this.getMatrixAt(a, En.matrixWorld).premultiply(s), this.getBoundingBoxAt(c, En.geometry.boundingBox), this.getBoundingSphereAt(c, En.geometry.boundingSphere), En.raycast(e, fc);
        for (let h = 0, d = fc.length; h < d; h++) {
          const f = fc[h];
          f.object = this, f.batchId = a, t.push(f);
        }
        fc.length = 0;
      }
      En.material = null, En.geometry.index = null, En.geometry.attributes = {}, En.geometry.setDrawRange(0, 1 / 0);
    }
    copy(e) {
      return super.copy(e), this.geometry = e.geometry.clone(), this.perObjectFrustumCulled = e.perObjectFrustumCulled, this.sortObjects = e.sortObjects, this.boundingBox = e.boundingBox !== null ? e.boundingBox.clone() : null, this.boundingSphere = e.boundingSphere !== null ? e.boundingSphere.clone() : null, this._geometryInfo = e._geometryInfo.map((t) => ({
        ...t,
        boundingBox: t.boundingBox !== null ? t.boundingBox.clone() : null,
        boundingSphere: t.boundingSphere !== null ? t.boundingSphere.clone() : null
      })), this._instanceInfo = e._instanceInfo.map((t) => ({
        ...t
      })), this._availableInstanceIds = e._availableInstanceIds.slice(), this._availableGeometryIds = e._availableGeometryIds.slice(), this._nextIndexStart = e._nextIndexStart, this._nextVertexStart = e._nextVertexStart, this._geometryCount = e._geometryCount, this._maxInstanceCount = e._maxInstanceCount, this._maxVertexCount = e._maxVertexCount, this._maxIndexCount = e._maxIndexCount, this._geometryInitialized = e._geometryInitialized, this._multiDrawCounts = e._multiDrawCounts.slice(), this._multiDrawStarts = e._multiDrawStarts.slice(), this._indirectTexture = e._indirectTexture.clone(), this._indirectTexture.image.data = this._indirectTexture.image.data.slice(), this._matricesTexture = e._matricesTexture.clone(), this._matricesTexture.image.data = this._matricesTexture.image.data.slice(), this._colorsTexture !== null && (this._colorsTexture = e._colorsTexture.clone(), this._colorsTexture.image.data = this._colorsTexture.image.data.slice()), this;
    }
    dispose() {
      this.geometry.dispose(), this._matricesTexture.dispose(), this._matricesTexture = null, this._indirectTexture.dispose(), this._indirectTexture = null, this._colorsTexture !== null && (this._colorsTexture.dispose(), this._colorsTexture = null);
    }
    onBeforeRender(e, t, i, r, s) {
      if (!this._visibilityChanged && !this.perObjectFrustumCulled && !this.sortObjects) return;
      const o = r.getIndex(), a = o === null ? 1 : o.array.BYTES_PER_ELEMENT, l = this._instanceInfo, c = this._multiDrawStarts, u = this._multiDrawCounts, h = this._geometryInfo, d = this.perObjectFrustumCulled, f = this._indirectTexture, m = f.image.data, _ = i.isArrayCamera ? oI : lg;
      d && !i.isArrayCamera && (r2.multiplyMatrices(i.projectionMatrix, i.matrixWorldInverse).multiply(this.matrixWorld), lg.setFromProjectionMatrix(r2, e.coordinateSystem));
      let p = 0;
      if (this.sortObjects) {
        r2.copy(this.matrixWorld).invert(), Ba.setFromMatrixPosition(i.matrixWorld).applyMatrix4(r2), cg.set(0, 0, -1).transformDirection(i.matrixWorld).transformDirection(r2);
        for (let b = 0, v = l.length; b < v; b++) if (l[b].visible && l[b].active) {
          const x = l[b].geometryIndex;
          this.getMatrixAt(b, r2), this.getBoundingSphereAt(x, Wr).applyMatrix4(r2);
          let C = false;
          if (d && (C = !_.intersectsSphere(Wr, i)), !C) {
            const A = h[x], P = aI.subVectors(Wr.center, Ba).dot(cg);
            qh.push(A.start, A.count, P, b);
          }
        }
        const g = qh.list, y = this.customSort;
        y === null ? g.sort(s.transparent ? iI : nI) : y.call(this, g, i);
        for (let b = 0, v = g.length; b < v; b++) {
          const x = g[b];
          c[p] = x.start * a, u[p] = x.count, m[p] = x.index, p++;
        }
        qh.reset();
      } else for (let g = 0, y = l.length; g < y; g++) if (l[g].visible && l[g].active) {
        const b = l[g].geometryIndex;
        let v = false;
        if (d && (this.getMatrixAt(g, r2), this.getBoundingSphereAt(b, Wr).applyMatrix4(r2), v = !_.intersectsSphere(Wr, i)), !v) {
          const x = h[b];
          c[p] = x.start * a, u[p] = x.count, m[p] = g, p++;
        }
      }
      f.needsUpdate = true, this._multiDrawCount = p, this._visibilityChanged = false;
    }
    onBeforeShadow(e, t, i, r, s, o) {
      this.onBeforeRender(e, null, r, s, o);
    }
  };
  T8 = class extends Y2 {
    constructor(e) {
      super(), this.isLineBasicMaterial = true, this.type = "LineBasicMaterial", this.color = new xe(16777215), this.map = null, this.linewidth = 1, this.linecap = "round", this.linejoin = "round", this.fog = true, this.setValues(e);
    }
    copy(e) {
      return super.copy(e), this.color.copy(e.color), this.map = e.map, this.linewidth = e.linewidth, this.linecap = e.linecap, this.linejoin = e.linejoin, this.fog = e.fog, this;
    }
  };
  const ku = new u1(), Nu = new u1(), ug = new Ee(), Ha = new Cl(), hc = new d2(), Yh = new u1(), fg = new u1();
  class Kp extends Ct {
    constructor(e = new i2(), t = new T8()) {
      super(), this.isLine = true, this.type = "Line", this.geometry = e, this.material = t, this.morphTargetDictionary = void 0, this.morphTargetInfluences = void 0, this.updateMorphTargets();
    }
    copy(e, t) {
      return super.copy(e, t), this.material = Array.isArray(e.material) ? e.material.slice() : e.material, this.geometry = e.geometry, this;
    }
    computeLineDistances() {
      const e = this.geometry;
      if (e.index === null) {
        const t = e.attributes.position, i = [
          0
        ];
        for (let r = 1, s = t.count; r < s; r++) ku.fromBufferAttribute(t, r - 1), Nu.fromBufferAttribute(t, r), i[r] = i[r - 1], i[r] += ku.distanceTo(Nu);
        e.setAttribute("lineDistance", new n2(i, 1));
      } else console.warn("THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");
      return this;
    }
    raycast(e, t) {
      const i = this.geometry, r = this.matrixWorld, s = e.params.Line.threshold, o = i.drawRange;
      if (i.boundingSphere === null && i.computeBoundingSphere(), hc.copy(i.boundingSphere), hc.applyMatrix4(r), hc.radius += s, e.ray.intersectsSphere(hc) === false) return;
      ug.copy(r).invert(), Ha.copy(e.ray).applyMatrix4(ug);
      const a = s / ((this.scale.x + this.scale.y + this.scale.z) / 3), l = a * a, c = this.isLineSegments ? 2 : 1, u = i.index, d = i.attributes.position;
      if (u !== null) {
        const f = Math.max(0, o.start), m = Math.min(u.count, o.start + o.count);
        for (let _ = f, p = m - 1; _ < p; _ += c) {
          const g = u.getX(_), y = u.getX(_ + 1), b = dc(this, e, Ha, l, g, y, _);
          b && t.push(b);
        }
        if (this.isLineLoop) {
          const _ = u.getX(m - 1), p = u.getX(f), g = dc(this, e, Ha, l, _, p, m - 1);
          g && t.push(g);
        }
      } else {
        const f = Math.max(0, o.start), m = Math.min(d.count, o.start + o.count);
        for (let _ = f, p = m - 1; _ < p; _ += c) {
          const g = dc(this, e, Ha, l, _, _ + 1, _);
          g && t.push(g);
        }
        if (this.isLineLoop) {
          const _ = dc(this, e, Ha, l, m - 1, f, m - 1);
          _ && t.push(_);
        }
      }
    }
    updateMorphTargets() {
      const t = this.geometry.morphAttributes, i = Object.keys(t);
      if (i.length > 0) {
        const r = t[i[0]];
        if (r !== void 0) {
          this.morphTargetInfluences = [], this.morphTargetDictionary = {};
          for (let s = 0, o = r.length; s < o; s++) {
            const a = r[s].name || String(s);
            this.morphTargetInfluences.push(0), this.morphTargetDictionary[a] = s;
          }
        }
      }
    }
  }
  function dc(n, e, t, i, r, s, o) {
    const a = n.geometry.attributes.position;
    if (ku.fromBufferAttribute(a, r), Nu.fromBufferAttribute(a, s), t.distanceSqToSegment(ku, Nu, Yh, fg) > i) return;
    Yh.applyMatrix4(n.matrixWorld);
    const c = e.ray.origin.distanceTo(Yh);
    if (!(c < e.near || c > e.far)) return {
      distance: c,
      point: fg.clone().applyMatrix4(n.matrixWorld),
      index: o,
      face: null,
      faceIndex: null,
      barycoord: null,
      object: n
    };
  }
  const hg = new u1(), dg = new u1();
  cI = class extends Kp {
    constructor(e, t) {
      super(e, t), this.isLineSegments = true, this.type = "LineSegments";
    }
    computeLineDistances() {
      const e = this.geometry;
      if (e.index === null) {
        const t = e.attributes.position, i = [];
        for (let r = 0, s = t.count; r < s; r += 2) hg.fromBufferAttribute(t, r), dg.fromBufferAttribute(t, r + 1), i[r] = r === 0 ? 0 : i[r - 1], i[r + 1] = i[r] + hg.distanceTo(dg);
        e.setAttribute("lineDistance", new n2(i, 1));
      } else console.warn("THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");
      return this;
    }
  };
  class uI extends Kp {
    constructor(e, t) {
      super(e, t), this.isLineLoop = true, this.type = "LineLoop";
    }
  }
  class C8 extends Y2 {
    constructor(e) {
      super(), this.isPointsMaterial = true, this.type = "PointsMaterial", this.color = new xe(16777215), this.map = null, this.alphaMap = null, this.size = 1, this.sizeAttenuation = true, this.fog = true, this.setValues(e);
    }
    copy(e) {
      return super.copy(e), this.color.copy(e.color), this.map = e.map, this.alphaMap = e.alphaMap, this.size = e.size, this.sizeAttenuation = e.sizeAttenuation, this.fog = e.fog, this;
    }
  }
  const pg = new Ee(), l9 = new Cl(), pc = new d2(), mc = new u1();
  class fI extends Ct {
    constructor(e = new i2(), t = new C8()) {
      super(), this.isPoints = true, this.type = "Points", this.geometry = e, this.material = t, this.morphTargetDictionary = void 0, this.morphTargetInfluences = void 0, this.updateMorphTargets();
    }
    copy(e, t) {
      return super.copy(e, t), this.material = Array.isArray(e.material) ? e.material.slice() : e.material, this.geometry = e.geometry, this;
    }
    raycast(e, t) {
      const i = this.geometry, r = this.matrixWorld, s = e.params.Points.threshold, o = i.drawRange;
      if (i.boundingSphere === null && i.computeBoundingSphere(), pc.copy(i.boundingSphere), pc.applyMatrix4(r), pc.radius += s, e.ray.intersectsSphere(pc) === false) return;
      pg.copy(r).invert(), l9.copy(e.ray).applyMatrix4(pg);
      const a = s / ((this.scale.x + this.scale.y + this.scale.z) / 3), l = a * a, c = i.index, h = i.attributes.position;
      if (c !== null) {
        const d = Math.max(0, o.start), f = Math.min(c.count, o.start + o.count);
        for (let m = d, _ = f; m < _; m++) {
          const p = c.getX(m);
          mc.fromBufferAttribute(h, p), mg(mc, p, l, r, e, t, this);
        }
      } else {
        const d = Math.max(0, o.start), f = Math.min(h.count, o.start + o.count);
        for (let m = d, _ = f; m < _; m++) mc.fromBufferAttribute(h, m), mg(mc, m, l, r, e, t, this);
      }
    }
    updateMorphTargets() {
      const t = this.geometry.morphAttributes, i = Object.keys(t);
      if (i.length > 0) {
        const r = t[i[0]];
        if (r !== void 0) {
          this.morphTargetInfluences = [], this.morphTargetDictionary = {};
          for (let s = 0, o = r.length; s < o; s++) {
            const a = r[s].name || String(s);
            this.morphTargetInfluences.push(0), this.morphTargetDictionary[a] = s;
          }
        }
      }
    }
  }
  function mg(n, e, t, i, r, s, o) {
    const a = l9.distanceSqToPoint(n);
    if (a < t) {
      const l = new u1();
      l9.closestPointToPoint(n, l), l.applyMatrix4(i);
      const c = r.ray.origin.distanceTo(l);
      if (c < r.near || c > r.far) return;
      s.push({
        distance: c,
        distanceToRay: Math.sqrt(a),
        point: l,
        index: e,
        face: null,
        faceIndex: null,
        barycoord: null,
        object: o
      });
    }
  }
  class A8 extends hn {
    constructor(e, t, i = wr, r, s, o, a = t2, l = t2, c, u = Z0, h = 1) {
      if (u !== Z0 && u !== el) throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");
      const d = {
        width: e,
        height: t,
        depth: h
      };
      super(d, r, s, o, a, l, u, i, c), this.isDepthTexture = true, this.flipY = false, this.generateMipmaps = false, this.compareFunction = null;
    }
    copy(e) {
      return super.copy(e), this.source = new jp(Object.assign({}, e.image)), this.compareFunction = e.compareFunction, this;
    }
    toJSON(e) {
      const t = super.toJSON(e);
      return this.compareFunction !== null && (t.compareFunction = this.compareFunction), t;
    }
  }
  D8 = class extends i2 {
    constructor(e = 1, t = 32, i = 0, r = Math.PI * 2) {
      super(), this.type = "CircleGeometry", this.parameters = {
        radius: e,
        segments: t,
        thetaStart: i,
        thetaLength: r
      }, t = Math.max(3, t);
      const s = [], o = [], a = [], l = [], c = new u1(), u = new Ue();
      o.push(0, 0, 0), a.push(0, 0, 1), l.push(0.5, 0.5);
      for (let h = 0, d = 3; h <= t; h++, d += 3) {
        const f = i + h / t * r;
        c.x = e * Math.cos(f), c.y = e * Math.sin(f), o.push(c.x, c.y, c.z), a.push(0, 0, 1), u.x = (o[d] / e + 1) / 2, u.y = (o[d + 1] / e + 1) / 2, l.push(u.x, u.y);
      }
      for (let h = 1; h <= t; h++) s.push(h, h + 1, 0);
      this.setIndex(s), this.setAttribute("position", new n2(o, 3)), this.setAttribute("normal", new n2(a, 3)), this.setAttribute("uv", new n2(l, 2));
    }
    copy(e) {
      return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
    }
    static fromJSON(e) {
      return new D8(e.radius, e.segments, e.thetaStart, e.thetaLength);
    }
  };
  Pf = class extends i2 {
    constructor(e = 1, t = 1, i = 1, r = 1) {
      super(), this.type = "PlaneGeometry", this.parameters = {
        width: e,
        height: t,
        widthSegments: i,
        heightSegments: r
      };
      const s = e / 2, o = t / 2, a = Math.floor(i), l = Math.floor(r), c = a + 1, u = l + 1, h = e / a, d = t / l, f = [], m = [], _ = [], p = [];
      for (let g = 0; g < u; g++) {
        const y = g * d - o;
        for (let b = 0; b < c; b++) {
          const v = b * h - s;
          m.push(v, -y, 0), _.push(0, 0, 1), p.push(b / a), p.push(1 - g / l);
        }
      }
      for (let g = 0; g < l; g++) for (let y = 0; y < a; y++) {
        const b = y + c * g, v = y + c * (g + 1), x = y + 1 + c * (g + 1), C = y + 1 + c * g;
        f.push(b, v, C), f.push(v, x, C);
      }
      this.setIndex(f), this.setAttribute("position", new n2(m, 3)), this.setAttribute("normal", new n2(_, 3)), this.setAttribute("uv", new n2(p, 2));
    }
    copy(e) {
      return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
    }
    static fromJSON(e) {
      return new Pf(e.width, e.height, e.widthSegments, e.heightSegments);
    }
  };
  R8 = class extends i2 {
    constructor(e = 1, t = 32, i = 16, r = 0, s = Math.PI * 2, o = 0, a = Math.PI) {
      super(), this.type = "SphereGeometry", this.parameters = {
        radius: e,
        widthSegments: t,
        heightSegments: i,
        phiStart: r,
        phiLength: s,
        thetaStart: o,
        thetaLength: a
      }, t = Math.max(3, Math.floor(t)), i = Math.max(2, Math.floor(i));
      const l = Math.min(o + a, Math.PI);
      let c = 0;
      const u = [], h = new u1(), d = new u1(), f = [], m = [], _ = [], p = [];
      for (let g = 0; g <= i; g++) {
        const y = [], b = g / i;
        let v = 0;
        g === 0 && o === 0 ? v = 0.5 / t : g === i && l === Math.PI && (v = -0.5 / t);
        for (let x = 0; x <= t; x++) {
          const C = x / t;
          h.x = -e * Math.cos(r + C * s) * Math.sin(o + b * a), h.y = e * Math.cos(o + b * a), h.z = e * Math.sin(r + C * s) * Math.sin(o + b * a), m.push(h.x, h.y, h.z), d.copy(h).normalize(), _.push(d.x, d.y, d.z), p.push(C + v, 1 - b), y.push(c++);
        }
        u.push(y);
      }
      for (let g = 0; g < i; g++) for (let y = 0; y < t; y++) {
        const b = u[g][y + 1], v = u[g][y], x = u[g + 1][y], C = u[g + 1][y + 1];
        (g !== 0 || o > 0) && f.push(b, v, C), (g !== i - 1 || l < Math.PI) && f.push(v, x, C);
      }
      this.setIndex(f), this.setAttribute("position", new n2(m, 3)), this.setAttribute("normal", new n2(_, 3)), this.setAttribute("uv", new n2(p, 2));
    }
    copy(e) {
      return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
    }
    static fromJSON(e) {
      return new R8(e.radius, e.widthSegments, e.heightSegments, e.phiStart, e.phiLength, e.thetaStart, e.thetaLength);
    }
  };
  class Jp extends Y2 {
    constructor(e) {
      super(), this.isMeshStandardMaterial = true, this.type = "MeshStandardMaterial", this.defines = {
        STANDARD: ""
      }, this.color = new xe(16777215), this.roughness = 1, this.metalness = 0, this.map = null, this.lightMap = null, this.lightMapIntensity = 1, this.aoMap = null, this.aoMapIntensity = 1, this.emissive = new xe(0), this.emissiveIntensity = 1, this.emissiveMap = null, this.bumpMap = null, this.bumpScale = 1, this.normalMap = null, this.normalMapType = Rf, this.normalScale = new Ue(1, 1), this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.roughnessMap = null, this.metalnessMap = null, this.alphaMap = null, this.envMap = null, this.envMapRotation = new Yi(), this.envMapIntensity = 1, this.wireframe = false, this.wireframeLinewidth = 1, this.wireframeLinecap = "round", this.wireframeLinejoin = "round", this.flatShading = false, this.fog = true, this.setValues(e);
    }
    copy(e) {
      return super.copy(e), this.defines = {
        STANDARD: ""
      }, this.color.copy(e.color), this.roughness = e.roughness, this.metalness = e.metalness, this.map = e.map, this.lightMap = e.lightMap, this.lightMapIntensity = e.lightMapIntensity, this.aoMap = e.aoMap, this.aoMapIntensity = e.aoMapIntensity, this.emissive.copy(e.emissive), this.emissiveMap = e.emissiveMap, this.emissiveIntensity = e.emissiveIntensity, this.bumpMap = e.bumpMap, this.bumpScale = e.bumpScale, this.normalMap = e.normalMap, this.normalMapType = e.normalMapType, this.normalScale.copy(e.normalScale), this.displacementMap = e.displacementMap, this.displacementScale = e.displacementScale, this.displacementBias = e.displacementBias, this.roughnessMap = e.roughnessMap, this.metalnessMap = e.metalnessMap, this.alphaMap = e.alphaMap, this.envMap = e.envMap, this.envMapRotation.copy(e.envMapRotation), this.envMapIntensity = e.envMapIntensity, this.wireframe = e.wireframe, this.wireframeLinewidth = e.wireframeLinewidth, this.wireframeLinecap = e.wireframeLinecap, this.wireframeLinejoin = e.wireframeLinejoin, this.flatShading = e.flatShading, this.fog = e.fog, this;
    }
  }
  Ji = class extends Jp {
    constructor(e) {
      super(), this.isMeshPhysicalMaterial = true, this.defines = {
        STANDARD: "",
        PHYSICAL: ""
      }, this.type = "MeshPhysicalMaterial", this.anisotropyRotation = 0, this.anisotropyMap = null, this.clearcoatMap = null, this.clearcoatRoughness = 0, this.clearcoatRoughnessMap = null, this.clearcoatNormalScale = new Ue(1, 1), this.clearcoatNormalMap = null, this.ior = 1.5, Object.defineProperty(this, "reflectivity", {
        get: function() {
          return Ae(2.5 * (this.ior - 1) / (this.ior + 1), 0, 1);
        },
        set: function(t) {
          this.ior = (1 + 0.4 * t) / (1 - 0.4 * t);
        }
      }), this.iridescenceMap = null, this.iridescenceIOR = 1.3, this.iridescenceThicknessRange = [
        100,
        400
      ], this.iridescenceThicknessMap = null, this.sheenColor = new xe(0), this.sheenColorMap = null, this.sheenRoughness = 1, this.sheenRoughnessMap = null, this.transmissionMap = null, this.thickness = 0, this.thicknessMap = null, this.attenuationDistance = 1 / 0, this.attenuationColor = new xe(1, 1, 1), this.specularIntensity = 1, this.specularIntensityMap = null, this.specularColor = new xe(1, 1, 1), this.specularColorMap = null, this._anisotropy = 0, this._clearcoat = 0, this._dispersion = 0, this._iridescence = 0, this._sheen = 0, this._transmission = 0, this.setValues(e);
    }
    get anisotropy() {
      return this._anisotropy;
    }
    set anisotropy(e) {
      this._anisotropy > 0 != e > 0 && this.version++, this._anisotropy = e;
    }
    get clearcoat() {
      return this._clearcoat;
    }
    set clearcoat(e) {
      this._clearcoat > 0 != e > 0 && this.version++, this._clearcoat = e;
    }
    get iridescence() {
      return this._iridescence;
    }
    set iridescence(e) {
      this._iridescence > 0 != e > 0 && this.version++, this._iridescence = e;
    }
    get dispersion() {
      return this._dispersion;
    }
    set dispersion(e) {
      this._dispersion > 0 != e > 0 && this.version++, this._dispersion = e;
    }
    get sheen() {
      return this._sheen;
    }
    set sheen(e) {
      this._sheen > 0 != e > 0 && this.version++, this._sheen = e;
    }
    get transmission() {
      return this._transmission;
    }
    set transmission(e) {
      this._transmission > 0 != e > 0 && this.version++, this._transmission = e;
    }
    copy(e) {
      return super.copy(e), this.defines = {
        STANDARD: "",
        PHYSICAL: ""
      }, this.anisotropy = e.anisotropy, this.anisotropyRotation = e.anisotropyRotation, this.anisotropyMap = e.anisotropyMap, this.clearcoat = e.clearcoat, this.clearcoatMap = e.clearcoatMap, this.clearcoatRoughness = e.clearcoatRoughness, this.clearcoatRoughnessMap = e.clearcoatRoughnessMap, this.clearcoatNormalMap = e.clearcoatNormalMap, this.clearcoatNormalScale.copy(e.clearcoatNormalScale), this.dispersion = e.dispersion, this.ior = e.ior, this.iridescence = e.iridescence, this.iridescenceMap = e.iridescenceMap, this.iridescenceIOR = e.iridescenceIOR, this.iridescenceThicknessRange = [
        ...e.iridescenceThicknessRange
      ], this.iridescenceThicknessMap = e.iridescenceThicknessMap, this.sheen = e.sheen, this.sheenColor.copy(e.sheenColor), this.sheenColorMap = e.sheenColorMap, this.sheenRoughness = e.sheenRoughness, this.sheenRoughnessMap = e.sheenRoughnessMap, this.transmission = e.transmission, this.transmissionMap = e.transmissionMap, this.thickness = e.thickness, this.thicknessMap = e.thicknessMap, this.attenuationDistance = e.attenuationDistance, this.attenuationColor.copy(e.attenuationColor), this.specularIntensity = e.specularIntensity, this.specularIntensityMap = e.specularIntensityMap, this.specularColor.copy(e.specularColor), this.specularColorMap = e.specularColorMap, this;
    }
  };
  zV = class extends Y2 {
    constructor(e) {
      super(), this.isMeshNormalMaterial = true, this.type = "MeshNormalMaterial", this.bumpMap = null, this.bumpScale = 1, this.normalMap = null, this.normalMapType = Rf, this.normalScale = new Ue(1, 1), this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.wireframe = false, this.wireframeLinewidth = 1, this.flatShading = false, this.setValues(e);
    }
    copy(e) {
      return super.copy(e), this.bumpMap = e.bumpMap, this.bumpScale = e.bumpScale, this.normalMap = e.normalMap, this.normalMapType = e.normalMapType, this.normalScale.copy(e.normalScale), this.displacementMap = e.displacementMap, this.displacementScale = e.displacementScale, this.displacementBias = e.displacementBias, this.wireframe = e.wireframe, this.wireframeLinewidth = e.wireframeLinewidth, this.flatShading = e.flatShading, this;
    }
  };
  class hI extends Y2 {
    constructor(e) {
      super(), this.isMeshDepthMaterial = true, this.type = "MeshDepthMaterial", this.depthPacking = WP, this.map = null, this.alphaMap = null, this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.wireframe = false, this.wireframeLinewidth = 1, this.setValues(e);
    }
    copy(e) {
      return super.copy(e), this.depthPacking = e.depthPacking, this.map = e.map, this.alphaMap = e.alphaMap, this.displacementMap = e.displacementMap, this.displacementScale = e.displacementScale, this.displacementBias = e.displacementBias, this.wireframe = e.wireframe, this.wireframeLinewidth = e.wireframeLinewidth, this;
    }
  }
  class dI extends Y2 {
    constructor(e) {
      super(), this.isMeshDistanceMaterial = true, this.type = "MeshDistanceMaterial", this.map = null, this.alphaMap = null, this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.setValues(e);
    }
    copy(e) {
      return super.copy(e), this.map = e.map, this.alphaMap = e.alphaMap, this.displacementMap = e.displacementMap, this.displacementScale = e.displacementScale, this.displacementBias = e.displacementBias, this;
    }
  }
  VV = class extends Y2 {
    constructor(e) {
      super(), this.isMeshMatcapMaterial = true, this.defines = {
        MATCAP: ""
      }, this.type = "MeshMatcapMaterial", this.color = new xe(16777215), this.matcap = null, this.map = null, this.bumpMap = null, this.bumpScale = 1, this.normalMap = null, this.normalMapType = Rf, this.normalScale = new Ue(1, 1), this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.alphaMap = null, this.flatShading = false, this.fog = true, this.setValues(e);
    }
    copy(e) {
      return super.copy(e), this.defines = {
        MATCAP: ""
      }, this.color.copy(e.color), this.matcap = e.matcap, this.map = e.map, this.bumpMap = e.bumpMap, this.bumpScale = e.bumpScale, this.normalMap = e.normalMap, this.normalMapType = e.normalMapType, this.normalScale.copy(e.normalScale), this.displacementMap = e.displacementMap, this.displacementScale = e.displacementScale, this.displacementBias = e.displacementBias, this.alphaMap = e.alphaMap, this.flatShading = e.flatShading, this.fog = e.fog, this;
    }
  };
  function gc(n, e) {
    return !n || n.constructor === e ? n : typeof e.BYTES_PER_ELEMENT == "number" ? new e(n) : Array.prototype.slice.call(n);
  }
  function pI(n) {
    return ArrayBuffer.isView(n) && !(n instanceof DataView);
  }
  function mI(n) {
    function e(r, s) {
      return n[r] - n[s];
    }
    const t = n.length, i = new Array(t);
    for (let r = 0; r !== t; ++r) i[r] = r;
    return i.sort(e), i;
  }
  function gg(n, e, t) {
    const i = n.length, r = new n.constructor(i);
    for (let s = 0, o = 0; o !== i; ++s) {
      const a = t[s] * e;
      for (let l = 0; l !== e; ++l) r[o++] = n[a + l];
    }
    return r;
  }
  function P8(n, e, t, i) {
    let r = 1, s = n[0];
    for (; s !== void 0 && s[i] === void 0; ) s = n[r++];
    if (s === void 0) return;
    let o = s[i];
    if (o !== void 0) if (Array.isArray(o)) do
      o = s[i], o !== void 0 && (e.push(s.time), t.push(...o)), s = n[r++];
    while (s !== void 0);
    else if (o.toArray !== void 0) do
      o = s[i], o !== void 0 && (e.push(s.time), o.toArray(t, t.length)), s = n[r++];
    while (s !== void 0);
    else do
      o = s[i], o !== void 0 && (e.push(s.time), t.push(o)), s = n[r++];
    while (s !== void 0);
  }
  class Rl {
    constructor(e, t, i, r) {
      this.parameterPositions = e, this._cachedIndex = 0, this.resultBuffer = r !== void 0 ? r : new t.constructor(i), this.sampleValues = t, this.valueSize = i, this.settings = null, this.DefaultSettings_ = {};
    }
    evaluate(e) {
      const t = this.parameterPositions;
      let i = this._cachedIndex, r = t[i], s = t[i - 1];
      e: {
        t: {
          let o;
          n: {
            i: if (!(e < r)) {
              for (let a = i + 2; ; ) {
                if (r === void 0) {
                  if (e < s) break i;
                  return i = t.length, this._cachedIndex = i, this.copySampleValue_(i - 1);
                }
                if (i === a) break;
                if (s = r, r = t[++i], e < r) break t;
              }
              o = t.length;
              break n;
            }
            if (!(e >= s)) {
              const a = t[1];
              e < a && (i = 2, s = a);
              for (let l = i - 2; ; ) {
                if (s === void 0) return this._cachedIndex = 0, this.copySampleValue_(0);
                if (i === l) break;
                if (r = s, s = t[--i - 1], e >= s) break t;
              }
              o = i, i = 0;
              break n;
            }
            break e;
          }
          for (; i < o; ) {
            const a = i + o >>> 1;
            e < t[a] ? o = a : i = a + 1;
          }
          if (r = t[i], s = t[i - 1], s === void 0) return this._cachedIndex = 0, this.copySampleValue_(0);
          if (r === void 0) return i = t.length, this._cachedIndex = i, this.copySampleValue_(i - 1);
        }
        this._cachedIndex = i, this.intervalChanged_(i, s, r);
      }
      return this.interpolate_(i, s, e, r);
    }
    getSettings_() {
      return this.settings || this.DefaultSettings_;
    }
    copySampleValue_(e) {
      const t = this.resultBuffer, i = this.sampleValues, r = this.valueSize, s = e * r;
      for (let o = 0; o !== r; ++o) t[o] = i[s + o];
      return t;
    }
    interpolate_() {
      throw new Error("call to abstract method");
    }
    intervalChanged_() {
    }
  }
  class gI extends Rl {
    constructor(e, t, i, r) {
      super(e, t, i, r), this._weightPrev = -0, this._offsetPrev = -0, this._weightNext = -0, this._offsetNext = -0, this.DefaultSettings_ = {
        endingStart: Pm,
        endingEnd: Pm
      };
    }
    intervalChanged_(e, t, i) {
      const r = this.parameterPositions;
      let s = e - 2, o = e + 1, a = r[s], l = r[o];
      if (a === void 0) switch (this.getSettings_().endingStart) {
        case Lm:
          s = e, a = 2 * t - i;
          break;
        case Im:
          s = r.length - 2, a = t + r[s] - r[s + 1];
          break;
        default:
          s = e, a = i;
      }
      if (l === void 0) switch (this.getSettings_().endingEnd) {
        case Lm:
          o = e, l = 2 * i - t;
          break;
        case Im:
          o = 1, l = i + r[1] - r[0];
          break;
        default:
          o = e - 1, l = t;
      }
      const c = (i - t) * 0.5, u = this.valueSize;
      this._weightPrev = c / (t - a), this._weightNext = c / (l - i), this._offsetPrev = s * u, this._offsetNext = o * u;
    }
    interpolate_(e, t, i, r) {
      const s = this.resultBuffer, o = this.sampleValues, a = this.valueSize, l = e * a, c = l - a, u = this._offsetPrev, h = this._offsetNext, d = this._weightPrev, f = this._weightNext, m = (i - t) / (r - t), _ = m * m, p = _ * m, g = -d * p + 2 * d * _ - d * m, y = (1 + d) * p + (-1.5 - 2 * d) * _ + (-0.5 + d) * m + 1, b = (-1 - f) * p + (1.5 + f) * _ + 0.5 * m, v = f * p - f * _;
      for (let x = 0; x !== a; ++x) s[x] = g * o[u + x] + y * o[c + x] + b * o[l + x] + v * o[h + x];
      return s;
    }
  }
  class _I extends Rl {
    constructor(e, t, i, r) {
      super(e, t, i, r);
    }
    interpolate_(e, t, i, r) {
      const s = this.resultBuffer, o = this.sampleValues, a = this.valueSize, l = e * a, c = l - a, u = (i - t) / (r - t), h = 1 - u;
      for (let d = 0; d !== a; ++d) s[d] = o[c + d] * h + o[l + d] * u;
      return s;
    }
  }
  class bI extends Rl {
    constructor(e, t, i, r) {
      super(e, t, i, r);
    }
    interpolate_(e) {
      return this.copySampleValue_(e - 1);
    }
  }
  class Si {
    constructor(e, t, i, r) {
      if (e === void 0) throw new Error("THREE.KeyframeTrack: track name is undefined");
      if (t === void 0 || t.length === 0) throw new Error("THREE.KeyframeTrack: no keyframes in track named " + e);
      this.name = e, this.times = gc(t, this.TimeBufferType), this.values = gc(i, this.ValueBufferType), this.setInterpolation(r || this.DefaultInterpolation);
    }
    static toJSON(e) {
      const t = e.constructor;
      let i;
      if (t.toJSON !== this.toJSON) i = t.toJSON(e);
      else {
        i = {
          name: e.name,
          times: gc(e.times, Array),
          values: gc(e.values, Array)
        };
        const r = e.getInterpolation();
        r !== e.DefaultInterpolation && (i.interpolation = r);
      }
      return i.type = e.ValueTypeName, i;
    }
    InterpolantFactoryMethodDiscrete(e) {
      return new bI(this.times, this.values, this.getValueSize(), e);
    }
    InterpolantFactoryMethodLinear(e) {
      return new _I(this.times, this.values, this.getValueSize(), e);
    }
    InterpolantFactoryMethodSmooth(e) {
      return new gI(this.times, this.values, this.getValueSize(), e);
    }
    setInterpolation(e) {
      let t;
      switch (e) {
        case tl:
          t = this.InterpolantFactoryMethodDiscrete;
          break;
        case nl:
          t = this.InterpolantFactoryMethodLinear;
          break;
        case Sh:
          t = this.InterpolantFactoryMethodSmooth;
          break;
      }
      if (t === void 0) {
        const i = "unsupported interpolation for " + this.ValueTypeName + " keyframe track named " + this.name;
        if (this.createInterpolant === void 0) if (e !== this.DefaultInterpolation) this.setInterpolation(this.DefaultInterpolation);
        else throw new Error(i);
        return console.warn("THREE.KeyframeTrack:", i), this;
      }
      return this.createInterpolant = t, this;
    }
    getInterpolation() {
      switch (this.createInterpolant) {
        case this.InterpolantFactoryMethodDiscrete:
          return tl;
        case this.InterpolantFactoryMethodLinear:
          return nl;
        case this.InterpolantFactoryMethodSmooth:
          return Sh;
      }
    }
    getValueSize() {
      return this.values.length / this.times.length;
    }
    shift(e) {
      if (e !== 0) {
        const t = this.times;
        for (let i = 0, r = t.length; i !== r; ++i) t[i] += e;
      }
      return this;
    }
    scale(e) {
      if (e !== 1) {
        const t = this.times;
        for (let i = 0, r = t.length; i !== r; ++i) t[i] *= e;
      }
      return this;
    }
    trim(e, t) {
      const i = this.times, r = i.length;
      let s = 0, o = r - 1;
      for (; s !== r && i[s] < e; ) ++s;
      for (; o !== -1 && i[o] > t; ) --o;
      if (++o, s !== 0 || o !== r) {
        s >= o && (o = Math.max(o, 1), s = o - 1);
        const a = this.getValueSize();
        this.times = i.slice(s, o), this.values = this.values.slice(s * a, o * a);
      }
      return this;
    }
    validate() {
      let e = true;
      const t = this.getValueSize();
      t - Math.floor(t) !== 0 && (console.error("THREE.KeyframeTrack: Invalid value size in track.", this), e = false);
      const i = this.times, r = this.values, s = i.length;
      s === 0 && (console.error("THREE.KeyframeTrack: Track is empty.", this), e = false);
      let o = null;
      for (let a = 0; a !== s; a++) {
        const l = i[a];
        if (typeof l == "number" && isNaN(l)) {
          console.error("THREE.KeyframeTrack: Time is not a valid number.", this, a, l), e = false;
          break;
        }
        if (o !== null && o > l) {
          console.error("THREE.KeyframeTrack: Out of order keys.", this, a, l, o), e = false;
          break;
        }
        o = l;
      }
      if (r !== void 0 && pI(r)) for (let a = 0, l = r.length; a !== l; ++a) {
        const c = r[a];
        if (isNaN(c)) {
          console.error("THREE.KeyframeTrack: Value is not a valid number.", this, a, c), e = false;
          break;
        }
      }
      return e;
    }
    optimize() {
      const e = this.times.slice(), t = this.values.slice(), i = this.getValueSize(), r = this.getInterpolation() === Sh, s = e.length - 1;
      let o = 1;
      for (let a = 1; a < s; ++a) {
        let l = false;
        const c = e[a], u = e[a + 1];
        if (c !== u && (a !== 1 || c !== e[0])) if (r) l = true;
        else {
          const h = a * i, d = h - i, f = h + i;
          for (let m = 0; m !== i; ++m) {
            const _ = t[h + m];
            if (_ !== t[d + m] || _ !== t[f + m]) {
              l = true;
              break;
            }
          }
        }
        if (l) {
          if (a !== o) {
            e[o] = e[a];
            const h = a * i, d = o * i;
            for (let f = 0; f !== i; ++f) t[d + f] = t[h + f];
          }
          ++o;
        }
      }
      if (s > 0) {
        e[o] = e[s];
        for (let a = s * i, l = o * i, c = 0; c !== i; ++c) t[l + c] = t[a + c];
        ++o;
      }
      return o !== e.length ? (this.times = e.slice(0, o), this.values = t.slice(0, o * i)) : (this.times = e, this.values = t), this;
    }
    clone() {
      const e = this.times.slice(), t = this.values.slice(), i = this.constructor, r = new i(this.name, e, t);
      return r.createInterpolant = this.createInterpolant, r;
    }
  }
  Si.prototype.ValueTypeName = "";
  Si.prototype.TimeBufferType = Float32Array;
  Si.prototype.ValueBufferType = Float32Array;
  Si.prototype.DefaultInterpolation = nl;
  class Ea extends Si {
    constructor(e, t, i) {
      super(e, t, i);
    }
  }
  Ea.prototype.ValueTypeName = "bool";
  Ea.prototype.ValueBufferType = Array;
  Ea.prototype.DefaultInterpolation = tl;
  Ea.prototype.InterpolantFactoryMethodLinear = void 0;
  Ea.prototype.InterpolantFactoryMethodSmooth = void 0;
  class L8 extends Si {
    constructor(e, t, i, r) {
      super(e, t, i, r);
    }
  }
  L8.prototype.ValueTypeName = "color";
  class aa extends Si {
    constructor(e, t, i, r) {
      super(e, t, i, r);
    }
  }
  aa.prototype.ValueTypeName = "number";
  class vI extends Rl {
    constructor(e, t, i, r) {
      super(e, t, i, r);
    }
    interpolate_(e, t, i, r) {
      const s = this.resultBuffer, o = this.sampleValues, a = this.valueSize, l = (i - t) / (r - t);
      let c = e * a;
      for (let u = c + a; c !== u; c += 4) Pr.slerpFlat(s, 0, o, c - a, o, c, l);
      return s;
    }
  }
  class la extends Si {
    constructor(e, t, i, r) {
      super(e, t, i, r);
    }
    InterpolantFactoryMethodLinear(e) {
      return new vI(this.times, this.values, this.getValueSize(), e);
    }
  }
  la.prototype.ValueTypeName = "quaternion";
  la.prototype.InterpolantFactoryMethodSmooth = void 0;
  class wa extends Si {
    constructor(e, t, i) {
      super(e, t, i);
    }
  }
  wa.prototype.ValueTypeName = "string";
  wa.prototype.ValueBufferType = Array;
  wa.prototype.DefaultInterpolation = tl;
  wa.prototype.InterpolantFactoryMethodLinear = void 0;
  wa.prototype.InterpolantFactoryMethodSmooth = void 0;
  class ca extends Si {
    constructor(e, t, i, r) {
      super(e, t, i, r);
    }
  }
  ca.prototype.ValueTypeName = "vector";
  class yI {
    constructor(e = "", t = -1, i = [], r = VP) {
      this.name = e, this.tracks = i, this.duration = t, this.blendMode = r, this.uuid = gi(), this.duration < 0 && this.resetDuration();
    }
    static parse(e) {
      const t = [], i = e.tracks, r = 1 / (e.fps || 1);
      for (let o = 0, a = i.length; o !== a; ++o) t.push(SI(i[o]).scale(r));
      const s = new this(e.name, e.duration, t, e.blendMode);
      return s.uuid = e.uuid, s;
    }
    static toJSON(e) {
      const t = [], i = e.tracks, r = {
        name: e.name,
        duration: e.duration,
        tracks: t,
        uuid: e.uuid,
        blendMode: e.blendMode
      };
      for (let s = 0, o = i.length; s !== o; ++s) t.push(Si.toJSON(i[s]));
      return r;
    }
    static CreateFromMorphTargetSequence(e, t, i, r) {
      const s = t.length, o = [];
      for (let a = 0; a < s; a++) {
        let l = [], c = [];
        l.push((a + s - 1) % s, a, (a + 1) % s), c.push(0, 1, 0);
        const u = mI(l);
        l = gg(l, 1, u), c = gg(c, 1, u), !r && l[0] === 0 && (l.push(s), c.push(c[0])), o.push(new aa(".morphTargetInfluences[" + t[a].name + "]", l, c).scale(1 / i));
      }
      return new this(e, -1, o);
    }
    static findByName(e, t) {
      let i = e;
      if (!Array.isArray(e)) {
        const r = e;
        i = r.geometry && r.geometry.animations || r.animations;
      }
      for (let r = 0; r < i.length; r++) if (i[r].name === t) return i[r];
      return null;
    }
    static CreateClipsFromMorphTargetSequences(e, t, i) {
      const r = {}, s = /^([\w-]*?)([\d]+)$/;
      for (let a = 0, l = e.length; a < l; a++) {
        const c = e[a], u = c.name.match(s);
        if (u && u.length > 1) {
          const h = u[1];
          let d = r[h];
          d || (r[h] = d = []), d.push(c);
        }
      }
      const o = [];
      for (const a in r) o.push(this.CreateFromMorphTargetSequence(a, r[a], t, i));
      return o;
    }
    static parseAnimation(e, t) {
      if (console.warn("THREE.AnimationClip: parseAnimation() is deprecated and will be removed with r185"), !e) return console.error("THREE.AnimationClip: No animation in JSONLoader data."), null;
      const i = function(h, d, f, m, _) {
        if (f.length !== 0) {
          const p = [], g = [];
          P8(f, p, g, m), p.length !== 0 && _.push(new h(d, p, g));
        }
      }, r = [], s = e.name || "default", o = e.fps || 30, a = e.blendMode;
      let l = e.length || -1;
      const c = e.hierarchy || [];
      for (let h = 0; h < c.length; h++) {
        const d = c[h].keys;
        if (!(!d || d.length === 0)) if (d[0].morphTargets) {
          const f = {};
          let m;
          for (m = 0; m < d.length; m++) if (d[m].morphTargets) for (let _ = 0; _ < d[m].morphTargets.length; _++) f[d[m].morphTargets[_]] = -1;
          for (const _ in f) {
            const p = [], g = [];
            for (let y = 0; y !== d[m].morphTargets.length; ++y) {
              const b = d[m];
              p.push(b.time), g.push(b.morphTarget === _ ? 1 : 0);
            }
            r.push(new aa(".morphTargetInfluence[" + _ + "]", p, g));
          }
          l = f.length * o;
        } else {
          const f = ".bones[" + t[h].name + "]";
          i(ca, f + ".position", d, "pos", r), i(la, f + ".quaternion", d, "rot", r), i(ca, f + ".scale", d, "scl", r);
        }
      }
      return r.length === 0 ? null : new this(s, l, r, a);
    }
    resetDuration() {
      const e = this.tracks;
      let t = 0;
      for (let i = 0, r = e.length; i !== r; ++i) {
        const s = this.tracks[i];
        t = Math.max(t, s.times[s.times.length - 1]);
      }
      return this.duration = t, this;
    }
    trim() {
      for (let e = 0; e < this.tracks.length; e++) this.tracks[e].trim(0, this.duration);
      return this;
    }
    validate() {
      let e = true;
      for (let t = 0; t < this.tracks.length; t++) e = e && this.tracks[t].validate();
      return e;
    }
    optimize() {
      for (let e = 0; e < this.tracks.length; e++) this.tracks[e].optimize();
      return this;
    }
    clone() {
      const e = [];
      for (let t = 0; t < this.tracks.length; t++) e.push(this.tracks[t].clone());
      return new this.constructor(this.name, this.duration, e, this.blendMode);
    }
    toJSON() {
      return this.constructor.toJSON(this);
    }
  }
  function xI(n) {
    switch (n.toLowerCase()) {
      case "scalar":
      case "double":
      case "float":
      case "number":
      case "integer":
        return aa;
      case "vector":
      case "vector2":
      case "vector3":
      case "vector4":
        return ca;
      case "color":
        return L8;
      case "quaternion":
        return la;
      case "bool":
      case "boolean":
        return Ea;
      case "string":
        return wa;
    }
    throw new Error("THREE.KeyframeTrack: Unsupported typeName: " + n);
  }
  function SI(n) {
    if (n.type === void 0) throw new Error("THREE.KeyframeTrack: track type undefined, can not parse");
    const e = xI(n.type);
    if (n.times === void 0) {
      const t = [], i = [];
      P8(n.keys, t, i, "value"), n.times = t, n.values = i;
    }
    return e.parse !== void 0 ? e.parse(n) : new e(n.name, n.times, n.values, n.interpolation);
  }
  const ar = {
    enabled: false,
    files: {},
    add: function(n, e) {
      this.enabled !== false && (this.files[n] = e);
    },
    get: function(n) {
      if (this.enabled !== false) return this.files[n];
    },
    remove: function(n) {
      delete this.files[n];
    },
    clear: function() {
      this.files = {};
    }
  };
  class I8 {
    constructor(e, t, i) {
      const r = this;
      let s = false, o = 0, a = 0, l;
      const c = [];
      this.onStart = void 0, this.onLoad = e, this.onProgress = t, this.onError = i, this.itemStart = function(u) {
        a++, s === false && r.onStart !== void 0 && r.onStart(u, o, a), s = true;
      }, this.itemEnd = function(u) {
        o++, r.onProgress !== void 0 && r.onProgress(u, o, a), o === a && (s = false, r.onLoad !== void 0 && r.onLoad());
      }, this.itemError = function(u) {
        r.onError !== void 0 && r.onError(u);
      }, this.resolveURL = function(u) {
        return l ? l(u) : u;
      }, this.setURLModifier = function(u) {
        return l = u, this;
      }, this.addHandler = function(u, h) {
        return c.push(u, h), this;
      }, this.removeHandler = function(u) {
        const h = c.indexOf(u);
        return h !== -1 && c.splice(h, 2), this;
      }, this.getHandler = function(u) {
        for (let h = 0, d = c.length; h < d; h += 2) {
          const f = c[h], m = c[h + 1];
          if (f.global && (f.lastIndex = 0), f.test(u)) return m;
        }
        return null;
      };
    }
  }
  const EI = new I8();
  class Lr {
    constructor(e) {
      this.manager = e !== void 0 ? e : EI, this.crossOrigin = "anonymous", this.withCredentials = false, this.path = "", this.resourcePath = "", this.requestHeader = {};
    }
    load() {
    }
    loadAsync(e, t) {
      const i = this;
      return new Promise(function(r, s) {
        i.load(e, r, t, s);
      });
    }
    parse() {
    }
    setCrossOrigin(e) {
      return this.crossOrigin = e, this;
    }
    setWithCredentials(e) {
      return this.withCredentials = e, this;
    }
    setPath(e) {
      return this.path = e, this;
    }
    setResourcePath(e) {
      return this.resourcePath = e, this;
    }
    setRequestHeader(e) {
      return this.requestHeader = e, this;
    }
  }
  Lr.DEFAULT_MATERIAL_NAME = "__DEFAULT";
  const l3 = {};
  class wI extends Error {
    constructor(e, t) {
      super(e), this.response = t;
    }
  }
  class rl extends Lr {
    constructor(e) {
      super(e), this.mimeType = "", this.responseType = "";
    }
    load(e, t, i, r) {
      e === void 0 && (e = ""), this.path !== void 0 && (e = this.path + e), e = this.manager.resolveURL(e);
      const s = ar.get(e);
      if (s !== void 0) return this.manager.itemStart(e), setTimeout(() => {
        t && t(s), this.manager.itemEnd(e);
      }, 0), s;
      if (l3[e] !== void 0) {
        l3[e].push({
          onLoad: t,
          onProgress: i,
          onError: r
        });
        return;
      }
      l3[e] = [], l3[e].push({
        onLoad: t,
        onProgress: i,
        onError: r
      });
      const o = new Request(e, {
        headers: new Headers(this.requestHeader),
        credentials: this.withCredentials ? "include" : "same-origin"
      }), a = this.mimeType, l = this.responseType;
      fetch(o).then((c) => {
        if (c.status === 200 || c.status === 0) {
          if (c.status === 0 && console.warn("THREE.FileLoader: HTTP Status 0 received."), typeof ReadableStream > "u" || c.body === void 0 || c.body.getReader === void 0) return c;
          const u = l3[e], h = c.body.getReader(), d = c.headers.get("X-File-Size") || c.headers.get("Content-Length"), f = d ? parseInt(d) : 0, m = f !== 0;
          let _ = 0;
          const p = new ReadableStream({
            start(g) {
              y();
              function y() {
                h.read().then(({ done: b, value: v }) => {
                  if (b) g.close();
                  else {
                    _ += v.byteLength;
                    const x = new ProgressEvent("progress", {
                      lengthComputable: m,
                      loaded: _,
                      total: f
                    });
                    for (let C = 0, A = u.length; C < A; C++) {
                      const P = u[C];
                      P.onProgress && P.onProgress(x);
                    }
                    g.enqueue(v), y();
                  }
                }, (b) => {
                  g.error(b);
                });
              }
            }
          });
          return new Response(p);
        } else throw new wI(`fetch for "${c.url}" responded with ${c.status}: ${c.statusText}`, c);
      }).then((c) => {
        switch (l) {
          case "arraybuffer":
            return c.arrayBuffer();
          case "blob":
            return c.blob();
          case "document":
            return c.text().then((u) => new DOMParser().parseFromString(u, a));
          case "json":
            return c.json();
          default:
            if (a === "") return c.text();
            {
              const h = /charset="?([^;"\s]*)"?/i.exec(a), d = h && h[1] ? h[1].toLowerCase() : void 0, f = new TextDecoder(d);
              return c.arrayBuffer().then((m) => f.decode(m));
            }
        }
      }).then((c) => {
        ar.add(e, c);
        const u = l3[e];
        delete l3[e];
        for (let h = 0, d = u.length; h < d; h++) {
          const f = u[h];
          f.onLoad && f.onLoad(c);
        }
      }).catch((c) => {
        const u = l3[e];
        if (u === void 0) throw this.manager.itemError(e), c;
        delete l3[e];
        for (let h = 0, d = u.length; h < d; h++) {
          const f = u[h];
          f.onError && f.onError(c);
        }
        this.manager.itemError(e);
      }).finally(() => {
        this.manager.itemEnd(e);
      }), this.manager.itemStart(e);
    }
    setResponseType(e) {
      return this.responseType = e, this;
    }
    setMimeType(e) {
      return this.mimeType = e, this;
    }
  }
  class MI extends Lr {
    constructor(e) {
      super(e);
    }
    load(e, t, i, r) {
      this.path !== void 0 && (e = this.path + e), e = this.manager.resolveURL(e);
      const s = this, o = ar.get(e);
      if (o !== void 0) return s.manager.itemStart(e), setTimeout(function() {
        t && t(o), s.manager.itemEnd(e);
      }, 0), o;
      const a = il("img");
      function l() {
        u(), ar.add(e, this), t && t(this), s.manager.itemEnd(e);
      }
      function c(h) {
        u(), r && r(h), s.manager.itemError(e), s.manager.itemEnd(e);
      }
      function u() {
        a.removeEventListener("load", l, false), a.removeEventListener("error", c, false);
      }
      return a.addEventListener("load", l, false), a.addEventListener("error", c, false), e.slice(0, 5) !== "data:" && this.crossOrigin !== void 0 && (a.crossOrigin = this.crossOrigin), s.manager.itemStart(e), a.src = e, a;
    }
  }
  GV = class extends Lr {
    constructor(e) {
      super(e);
    }
    load(e, t, i, r) {
      const s = this, o = new No(), a = new rl(this.manager);
      return a.setResponseType("arraybuffer"), a.setRequestHeader(this.requestHeader), a.setPath(this.path), a.setWithCredentials(s.withCredentials), a.load(e, function(l) {
        let c;
        try {
          c = s.parse(l);
        } catch (u) {
          if (r !== void 0) r(u);
          else {
            console.error(u);
            return;
          }
        }
        c.image !== void 0 ? o.image = c.image : c.data !== void 0 && (o.image.width = c.width, o.image.height = c.height, o.image.data = c.data), o.wrapS = c.wrapS !== void 0 ? c.wrapS : Bi, o.wrapT = c.wrapT !== void 0 ? c.wrapT : Bi, o.magFilter = c.magFilter !== void 0 ? c.magFilter : Pn, o.minFilter = c.minFilter !== void 0 ? c.minFilter : Pn, o.anisotropy = c.anisotropy !== void 0 ? c.anisotropy : 1, c.colorSpace !== void 0 && (o.colorSpace = c.colorSpace), c.flipY !== void 0 && (o.flipY = c.flipY), c.format !== void 0 && (o.format = c.format), c.type !== void 0 && (o.type = c.type), c.mipmaps !== void 0 && (o.mipmaps = c.mipmaps, o.minFilter = Hi), c.mipmapCount === 1 && (o.minFilter = Pn), c.generateMipmaps !== void 0 && (o.generateMipmaps = c.generateMipmaps), o.needsUpdate = true, t && t(o, c);
      }, i, r), o;
    }
  };
  let F8 = class extends Lr {
    constructor(e) {
      super(e);
    }
    load(e, t, i, r) {
      const s = new hn(), o = new MI(this.manager);
      return o.setCrossOrigin(this.crossOrigin), o.setPath(this.path), o.load(e, function(a) {
        s.image = a, s.needsUpdate = true, t !== void 0 && t(s);
      }, i, r), s;
    }
  };
  class Qp extends Ct {
    constructor(e, t = 1) {
      super(), this.isLight = true, this.type = "Light", this.color = new xe(e), this.intensity = t;
    }
    dispose() {
    }
    copy(e, t) {
      return super.copy(e, t), this.color.copy(e.color), this.intensity = e.intensity, this;
    }
    toJSON(e) {
      const t = super.toJSON(e);
      return t.object.color = this.color.getHex(), t.object.intensity = this.intensity, this.groundColor !== void 0 && (t.object.groundColor = this.groundColor.getHex()), this.distance !== void 0 && (t.object.distance = this.distance), this.angle !== void 0 && (t.object.angle = this.angle), this.decay !== void 0 && (t.object.decay = this.decay), this.penumbra !== void 0 && (t.object.penumbra = this.penumbra), this.shadow !== void 0 && (t.object.shadow = this.shadow.toJSON()), this.target !== void 0 && (t.object.target = this.target.uuid), t;
    }
  }
  const Kh = new Ee(), _g = new u1(), bg = new u1();
  class Zp {
    constructor(e) {
      this.camera = e, this.intensity = 1, this.bias = 0, this.normalBias = 0, this.radius = 1, this.blurSamples = 8, this.mapSize = new Ue(512, 512), this.mapType = qi, this.map = null, this.mapPass = null, this.matrix = new Ee(), this.autoUpdate = true, this.needsUpdate = false, this._frustum = new Dl(), this._frameExtents = new Ue(1, 1), this._viewportCount = 1, this._viewports = [
        new Je(0, 0, 1, 1)
      ];
    }
    getViewportCount() {
      return this._viewportCount;
    }
    getFrustum() {
      return this._frustum;
    }
    updateMatrices(e) {
      const t = this.camera, i = this.matrix;
      _g.setFromMatrixPosition(e.matrixWorld), t.position.copy(_g), bg.setFromMatrixPosition(e.target.matrixWorld), t.lookAt(bg), t.updateMatrixWorld(), Kh.multiplyMatrices(t.projectionMatrix, t.matrixWorldInverse), this._frustum.setFromProjectionMatrix(Kh), i.set(0.5, 0, 0, 0.5, 0, 0.5, 0, 0.5, 0, 0, 0.5, 0.5, 0, 0, 0, 1), i.multiply(Kh);
    }
    getViewport(e) {
      return this._viewports[e];
    }
    getFrameExtents() {
      return this._frameExtents;
    }
    dispose() {
      this.map && this.map.dispose(), this.mapPass && this.mapPass.dispose();
    }
    copy(e) {
      return this.camera = e.camera.clone(), this.intensity = e.intensity, this.bias = e.bias, this.radius = e.radius, this.autoUpdate = e.autoUpdate, this.needsUpdate = e.needsUpdate, this.normalBias = e.normalBias, this.blurSamples = e.blurSamples, this.mapSize.copy(e.mapSize), this;
    }
    clone() {
      return new this.constructor().copy(this);
    }
    toJSON() {
      const e = {};
      return this.intensity !== 1 && (e.intensity = this.intensity), this.bias !== 0 && (e.bias = this.bias), this.normalBias !== 0 && (e.normalBias = this.normalBias), this.radius !== 1 && (e.radius = this.radius), (this.mapSize.x !== 512 || this.mapSize.y !== 512) && (e.mapSize = this.mapSize.toArray()), e.camera = this.camera.toJSON(false).object, delete e.camera.matrix, e;
    }
  }
  class TI extends Zp {
    constructor() {
      super(new l2(50, 1, 0.5, 500)), this.isSpotLightShadow = true, this.focus = 1, this.aspect = 1;
    }
    updateMatrices(e) {
      const t = this.camera, i = sa * 2 * e.angle * this.focus, r = this.mapSize.width / this.mapSize.height * this.aspect, s = e.distance || t.far;
      (i !== t.fov || r !== t.aspect || s !== t.far) && (t.fov = i, t.aspect = r, t.far = s, t.updateProjectionMatrix()), super.updateMatrices(e);
    }
    copy(e) {
      return super.copy(e), this.focus = e.focus, this;
    }
  }
  class CI extends Qp {
    constructor(e, t, i = 0, r = Math.PI / 3, s = 0, o = 2) {
      super(e, t), this.isSpotLight = true, this.type = "SpotLight", this.position.copy(Ct.DEFAULT_UP), this.updateMatrix(), this.target = new Ct(), this.distance = i, this.angle = r, this.penumbra = s, this.decay = o, this.map = null, this.shadow = new TI();
    }
    get power() {
      return this.intensity * Math.PI;
    }
    set power(e) {
      this.intensity = e / Math.PI;
    }
    dispose() {
      this.shadow.dispose();
    }
    copy(e, t) {
      return super.copy(e, t), this.distance = e.distance, this.angle = e.angle, this.penumbra = e.penumbra, this.decay = e.decay, this.target = e.target.clone(), this.shadow = e.shadow.clone(), this;
    }
  }
  const vg = new Ee(), za = new u1(), Jh = new u1();
  class AI extends Zp {
    constructor() {
      super(new l2(90, 1, 0.5, 500)), this.isPointLightShadow = true, this._frameExtents = new Ue(4, 2), this._viewportCount = 6, this._viewports = [
        new Je(2, 1, 1, 1),
        new Je(0, 1, 1, 1),
        new Je(3, 1, 1, 1),
        new Je(1, 1, 1, 1),
        new Je(3, 0, 1, 1),
        new Je(1, 0, 1, 1)
      ], this._cubeDirections = [
        new u1(1, 0, 0),
        new u1(-1, 0, 0),
        new u1(0, 0, 1),
        new u1(0, 0, -1),
        new u1(0, 1, 0),
        new u1(0, -1, 0)
      ], this._cubeUps = [
        new u1(0, 1, 0),
        new u1(0, 1, 0),
        new u1(0, 1, 0),
        new u1(0, 1, 0),
        new u1(0, 0, 1),
        new u1(0, 0, -1)
      ];
    }
    updateMatrices(e, t = 0) {
      const i = this.camera, r = this.matrix, s = e.distance || i.far;
      s !== i.far && (i.far = s, i.updateProjectionMatrix()), za.setFromMatrixPosition(e.matrixWorld), i.position.copy(za), Jh.copy(i.position), Jh.add(this._cubeDirections[t]), i.up.copy(this._cubeUps[t]), i.lookAt(Jh), i.updateMatrixWorld(), r.makeTranslation(-za.x, -za.y, -za.z), vg.multiplyMatrices(i.projectionMatrix, i.matrixWorldInverse), this._frustum.setFromProjectionMatrix(vg);
    }
  }
  class DI extends Qp {
    constructor(e, t, i = 0, r = 2) {
      super(e, t), this.isPointLight = true, this.type = "PointLight", this.distance = i, this.decay = r, this.shadow = new AI();
    }
    get power() {
      return this.intensity * 4 * Math.PI;
    }
    set power(e) {
      this.intensity = e / (4 * Math.PI);
    }
    dispose() {
      this.shadow.dispose();
    }
    copy(e, t) {
      return super.copy(e, t), this.distance = e.distance, this.decay = e.decay, this.shadow = e.shadow.clone(), this;
    }
  }
  e6 = class extends E8 {
    constructor(e = -1, t = 1, i = 1, r = -1, s = 0.1, o = 2e3) {
      super(), this.isOrthographicCamera = true, this.type = "OrthographicCamera", this.zoom = 1, this.view = null, this.left = e, this.right = t, this.top = i, this.bottom = r, this.near = s, this.far = o, this.updateProjectionMatrix();
    }
    copy(e, t) {
      return super.copy(e, t), this.left = e.left, this.right = e.right, this.top = e.top, this.bottom = e.bottom, this.near = e.near, this.far = e.far, this.zoom = e.zoom, this.view = e.view === null ? null : Object.assign({}, e.view), this;
    }
    setViewOffset(e, t, i, r, s, o) {
      this.view === null && (this.view = {
        enabled: true,
        fullWidth: 1,
        fullHeight: 1,
        offsetX: 0,
        offsetY: 0,
        width: 1,
        height: 1
      }), this.view.enabled = true, this.view.fullWidth = e, this.view.fullHeight = t, this.view.offsetX = i, this.view.offsetY = r, this.view.width = s, this.view.height = o, this.updateProjectionMatrix();
    }
    clearViewOffset() {
      this.view !== null && (this.view.enabled = false), this.updateProjectionMatrix();
    }
    updateProjectionMatrix() {
      const e = (this.right - this.left) / (2 * this.zoom), t = (this.top - this.bottom) / (2 * this.zoom), i = (this.right + this.left) / 2, r = (this.top + this.bottom) / 2;
      let s = i - e, o = i + e, a = r + t, l = r - t;
      if (this.view !== null && this.view.enabled) {
        const c = (this.right - this.left) / this.view.fullWidth / this.zoom, u = (this.top - this.bottom) / this.view.fullHeight / this.zoom;
        s += c * this.view.offsetX, o = s + c * this.view.width, a -= u * this.view.offsetY, l = a - u * this.view.height;
      }
      this.projectionMatrix.makeOrthographic(s, o, a, l, this.near, this.far, this.coordinateSystem), this.projectionMatrixInverse.copy(this.projectionMatrix).invert();
    }
    toJSON(e) {
      const t = super.toJSON(e);
      return t.object.zoom = this.zoom, t.object.left = this.left, t.object.right = this.right, t.object.top = this.top, t.object.bottom = this.bottom, t.object.near = this.near, t.object.far = this.far, this.view !== null && (t.object.view = Object.assign({}, this.view)), t;
    }
  };
  class RI extends Zp {
    constructor() {
      super(new e6(-5, 5, 5, -5, 0.5, 500)), this.isDirectionalLightShadow = true;
    }
  }
  class PI extends Qp {
    constructor(e, t) {
      super(e, t), this.isDirectionalLight = true, this.type = "DirectionalLight", this.position.copy(Ct.DEFAULT_UP), this.updateMatrix(), this.target = new Ct(), this.shadow = new RI();
    }
    dispose() {
      this.shadow.dispose();
    }
    copy(e) {
      return super.copy(e), this.target = e.target.clone(), this.shadow = e.shadow.clone(), this;
    }
  }
  class S0 {
    static extractUrlBase(e) {
      const t = e.lastIndexOf("/");
      return t === -1 ? "./" : e.slice(0, t + 1);
    }
    static resolveURL(e, t) {
      return typeof e != "string" || e === "" ? "" : (/^https?:\/\//i.test(t) && /^\//.test(e) && (t = t.replace(/(^https?:\/\/[^\/]+).*/i, "$1")), /^(https?:)?\/\//i.test(e) || /^data:.*,.*$/i.test(e) || /^blob:.*$/i.test(e) ? e : t + e);
    }
  }
  const Qh = /* @__PURE__ */ new WeakMap();
  class LI extends Lr {
    constructor(e) {
      super(e), this.isImageBitmapLoader = true, typeof createImageBitmap > "u" && console.warn("THREE.ImageBitmapLoader: createImageBitmap() not supported."), typeof fetch > "u" && console.warn("THREE.ImageBitmapLoader: fetch() not supported."), this.options = {
        premultiplyAlpha: "none"
      };
    }
    setOptions(e) {
      return this.options = e, this;
    }
    load(e, t, i, r) {
      e === void 0 && (e = ""), this.path !== void 0 && (e = this.path + e), e = this.manager.resolveURL(e);
      const s = this, o = ar.get(e);
      if (o !== void 0) {
        if (s.manager.itemStart(e), o.then) {
          o.then((c) => {
            if (Qh.has(o) === true) r && r(Qh.get(o)), s.manager.itemError(e), s.manager.itemEnd(e);
            else return t && t(c), s.manager.itemEnd(e), c;
          });
          return;
        }
        return setTimeout(function() {
          t && t(o), s.manager.itemEnd(e);
        }, 0), o;
      }
      const a = {};
      a.credentials = this.crossOrigin === "anonymous" ? "same-origin" : "include", a.headers = this.requestHeader;
      const l = fetch(e, a).then(function(c) {
        return c.blob();
      }).then(function(c) {
        return createImageBitmap(c, Object.assign(s.options, {
          colorSpaceConversion: "none"
        }));
      }).then(function(c) {
        return ar.add(e, c), t && t(c), s.manager.itemEnd(e), c;
      }).catch(function(c) {
        r && r(c), Qh.set(l, c), ar.remove(e), s.manager.itemError(e), s.manager.itemEnd(e);
      });
      ar.add(e, l), s.manager.itemStart(e);
    }
  }
  class II extends l2 {
    constructor(e = []) {
      super(), this.isArrayCamera = true, this.isMultiViewCamera = false, this.cameras = e;
    }
  }
  const t6 = "\\[\\]\\.:\\/", FI = new RegExp("[" + t6 + "]", "g"), n6 = "[^" + t6 + "]", OI = "[^" + t6.replace("\\.", "") + "]", kI = /((?:WC+[\/:])*)/.source.replace("WC", n6), NI = /(WCOD+)?/.source.replace("WCOD", OI), UI = /(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace("WC", n6), BI = /\.(WC+)(?:\[(.+)\])?/.source.replace("WC", n6), HI = new RegExp("^" + kI + NI + UI + BI + "$"), zI = [
    "material",
    "materials",
    "bones",
    "map"
  ];
  class VI {
    constructor(e, t, i) {
      const r = i || tt.parseTrackName(t);
      this._targetGroup = e, this._bindings = e.subscribe_(t, r);
    }
    getValue(e, t) {
      this.bind();
      const i = this._targetGroup.nCachedObjects_, r = this._bindings[i];
      r !== void 0 && r.getValue(e, t);
    }
    setValue(e, t) {
      const i = this._bindings;
      for (let r = this._targetGroup.nCachedObjects_, s = i.length; r !== s; ++r) i[r].setValue(e, t);
    }
    bind() {
      const e = this._bindings;
      for (let t = this._targetGroup.nCachedObjects_, i = e.length; t !== i; ++t) e[t].bind();
    }
    unbind() {
      const e = this._bindings;
      for (let t = this._targetGroup.nCachedObjects_, i = e.length; t !== i; ++t) e[t].unbind();
    }
  }
  class tt {
    constructor(e, t, i) {
      this.path = t, this.parsedPath = i || tt.parseTrackName(t), this.node = tt.findNode(e, this.parsedPath.nodeName), this.rootNode = e, this.getValue = this._getValue_unbound, this.setValue = this._setValue_unbound;
    }
    static create(e, t, i) {
      return e && e.isAnimationObjectGroup ? new tt.Composite(e, t, i) : new tt(e, t, i);
    }
    static sanitizeNodeName(e) {
      return e.replace(/\s/g, "_").replace(FI, "");
    }
    static parseTrackName(e) {
      const t = HI.exec(e);
      if (t === null) throw new Error("PropertyBinding: Cannot parse trackName: " + e);
      const i = {
        nodeName: t[2],
        objectName: t[3],
        objectIndex: t[4],
        propertyName: t[5],
        propertyIndex: t[6]
      }, r = i.nodeName && i.nodeName.lastIndexOf(".");
      if (r !== void 0 && r !== -1) {
        const s = i.nodeName.substring(r + 1);
        zI.indexOf(s) !== -1 && (i.nodeName = i.nodeName.substring(0, r), i.objectName = s);
      }
      if (i.propertyName === null || i.propertyName.length === 0) throw new Error("PropertyBinding: can not parse propertyName from trackName: " + e);
      return i;
    }
    static findNode(e, t) {
      if (t === void 0 || t === "" || t === "." || t === -1 || t === e.name || t === e.uuid) return e;
      if (e.skeleton) {
        const i = e.skeleton.getBoneByName(t);
        if (i !== void 0) return i;
      }
      if (e.children) {
        const i = function(s) {
          for (let o = 0; o < s.length; o++) {
            const a = s[o];
            if (a.name === t || a.uuid === t) return a;
            const l = i(a.children);
            if (l) return l;
          }
          return null;
        }, r = i(e.children);
        if (r) return r;
      }
      return null;
    }
    _getValue_unavailable() {
    }
    _setValue_unavailable() {
    }
    _getValue_direct(e, t) {
      e[t] = this.targetObject[this.propertyName];
    }
    _getValue_array(e, t) {
      const i = this.resolvedProperty;
      for (let r = 0, s = i.length; r !== s; ++r) e[t++] = i[r];
    }
    _getValue_arrayElement(e, t) {
      e[t] = this.resolvedProperty[this.propertyIndex];
    }
    _getValue_toArray(e, t) {
      this.resolvedProperty.toArray(e, t);
    }
    _setValue_direct(e, t) {
      this.targetObject[this.propertyName] = e[t];
    }
    _setValue_direct_setNeedsUpdate(e, t) {
      this.targetObject[this.propertyName] = e[t], this.targetObject.needsUpdate = true;
    }
    _setValue_direct_setMatrixWorldNeedsUpdate(e, t) {
      this.targetObject[this.propertyName] = e[t], this.targetObject.matrixWorldNeedsUpdate = true;
    }
    _setValue_array(e, t) {
      const i = this.resolvedProperty;
      for (let r = 0, s = i.length; r !== s; ++r) i[r] = e[t++];
    }
    _setValue_array_setNeedsUpdate(e, t) {
      const i = this.resolvedProperty;
      for (let r = 0, s = i.length; r !== s; ++r) i[r] = e[t++];
      this.targetObject.needsUpdate = true;
    }
    _setValue_array_setMatrixWorldNeedsUpdate(e, t) {
      const i = this.resolvedProperty;
      for (let r = 0, s = i.length; r !== s; ++r) i[r] = e[t++];
      this.targetObject.matrixWorldNeedsUpdate = true;
    }
    _setValue_arrayElement(e, t) {
      this.resolvedProperty[this.propertyIndex] = e[t];
    }
    _setValue_arrayElement_setNeedsUpdate(e, t) {
      this.resolvedProperty[this.propertyIndex] = e[t], this.targetObject.needsUpdate = true;
    }
    _setValue_arrayElement_setMatrixWorldNeedsUpdate(e, t) {
      this.resolvedProperty[this.propertyIndex] = e[t], this.targetObject.matrixWorldNeedsUpdate = true;
    }
    _setValue_fromArray(e, t) {
      this.resolvedProperty.fromArray(e, t);
    }
    _setValue_fromArray_setNeedsUpdate(e, t) {
      this.resolvedProperty.fromArray(e, t), this.targetObject.needsUpdate = true;
    }
    _setValue_fromArray_setMatrixWorldNeedsUpdate(e, t) {
      this.resolvedProperty.fromArray(e, t), this.targetObject.matrixWorldNeedsUpdate = true;
    }
    _getValue_unbound(e, t) {
      this.bind(), this.getValue(e, t);
    }
    _setValue_unbound(e, t) {
      this.bind(), this.setValue(e, t);
    }
    bind() {
      let e = this.node;
      const t = this.parsedPath, i = t.objectName, r = t.propertyName;
      let s = t.propertyIndex;
      if (e || (e = tt.findNode(this.rootNode, t.nodeName), this.node = e), this.getValue = this._getValue_unavailable, this.setValue = this._setValue_unavailable, !e) {
        console.warn("THREE.PropertyBinding: No target node found for track: " + this.path + ".");
        return;
      }
      if (i) {
        let c = t.objectIndex;
        switch (i) {
          case "materials":
            if (!e.material) {
              console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.", this);
              return;
            }
            if (!e.material.materials) {
              console.error("THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.", this);
              return;
            }
            e = e.material.materials;
            break;
          case "bones":
            if (!e.skeleton) {
              console.error("THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.", this);
              return;
            }
            e = e.skeleton.bones;
            for (let u = 0; u < e.length; u++) if (e[u].name === c) {
              c = u;
              break;
            }
            break;
          case "map":
            if ("map" in e) {
              e = e.map;
              break;
            }
            if (!e.material) {
              console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.", this);
              return;
            }
            if (!e.material.map) {
              console.error("THREE.PropertyBinding: Can not bind to material.map as node.material does not have a map.", this);
              return;
            }
            e = e.material.map;
            break;
          default:
            if (e[i] === void 0) {
              console.error("THREE.PropertyBinding: Can not bind to objectName of node undefined.", this);
              return;
            }
            e = e[i];
        }
        if (c !== void 0) {
          if (e[c] === void 0) {
            console.error("THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.", this, e);
            return;
          }
          e = e[c];
        }
      }
      const o = e[r];
      if (o === void 0) {
        const c = t.nodeName;
        console.error("THREE.PropertyBinding: Trying to update property for track: " + c + "." + r + " but it wasn't found.", e);
        return;
      }
      let a = this.Versioning.None;
      this.targetObject = e, e.isMaterial === true ? a = this.Versioning.NeedsUpdate : e.isObject3D === true && (a = this.Versioning.MatrixWorldNeedsUpdate);
      let l = this.BindingType.Direct;
      if (s !== void 0) {
        if (r === "morphTargetInfluences") {
          if (!e.geometry) {
            console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.", this);
            return;
          }
          if (!e.geometry.morphAttributes) {
            console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.", this);
            return;
          }
          e.morphTargetDictionary[s] !== void 0 && (s = e.morphTargetDictionary[s]);
        }
        l = this.BindingType.ArrayElement, this.resolvedProperty = o, this.propertyIndex = s;
      } else o.fromArray !== void 0 && o.toArray !== void 0 ? (l = this.BindingType.HasFromToArray, this.resolvedProperty = o) : Array.isArray(o) ? (l = this.BindingType.EntireArray, this.resolvedProperty = o) : this.propertyName = r;
      this.getValue = this.GetterByBindingType[l], this.setValue = this.SetterByBindingTypeAndVersioning[l][a];
    }
    unbind() {
      this.node = null, this.getValue = this._getValue_unbound, this.setValue = this._setValue_unbound;
    }
  }
  tt.Composite = VI;
  tt.prototype.BindingType = {
    Direct: 0,
    EntireArray: 1,
    ArrayElement: 2,
    HasFromToArray: 3
  };
  tt.prototype.Versioning = {
    None: 0,
    NeedsUpdate: 1,
    MatrixWorldNeedsUpdate: 2
  };
  tt.prototype.GetterByBindingType = [
    tt.prototype._getValue_direct,
    tt.prototype._getValue_array,
    tt.prototype._getValue_arrayElement,
    tt.prototype._getValue_toArray
  ];
  tt.prototype.SetterByBindingTypeAndVersioning = [
    [
      tt.prototype._setValue_direct,
      tt.prototype._setValue_direct_setNeedsUpdate,
      tt.prototype._setValue_direct_setMatrixWorldNeedsUpdate
    ],
    [
      tt.prototype._setValue_array,
      tt.prototype._setValue_array_setNeedsUpdate,
      tt.prototype._setValue_array_setMatrixWorldNeedsUpdate
    ],
    [
      tt.prototype._setValue_arrayElement,
      tt.prototype._setValue_arrayElement_setNeedsUpdate,
      tt.prototype._setValue_arrayElement_setMatrixWorldNeedsUpdate
    ],
    [
      tt.prototype._setValue_fromArray,
      tt.prototype._setValue_fromArray_setNeedsUpdate,
      tt.prototype._setValue_fromArray_setMatrixWorldNeedsUpdate
    ]
  ];
  const yg = new Ee();
  jV = class {
    constructor(e, t, i = 0, r = 1 / 0) {
      this.ray = new Cl(e, t), this.near = i, this.far = r, this.camera = null, this.layers = new Xp(), this.params = {
        Mesh: {},
        Line: {
          threshold: 1
        },
        LOD: {},
        Points: {
          threshold: 1
        },
        Sprite: {}
      };
    }
    set(e, t) {
      this.ray.set(e, t);
    }
    setFromCamera(e, t) {
      t.isPerspectiveCamera ? (this.ray.origin.setFromMatrixPosition(t.matrixWorld), this.ray.direction.set(e.x, e.y, 0.5).unproject(t).sub(this.ray.origin).normalize(), this.camera = t) : t.isOrthographicCamera ? (this.ray.origin.set(e.x, e.y, (t.near + t.far) / (t.near - t.far)).unproject(t), this.ray.direction.set(0, 0, -1).transformDirection(t.matrixWorld), this.camera = t) : console.error("THREE.Raycaster: Unsupported camera type: " + t.type);
    }
    setFromXRController(e) {
      return yg.identity().extractRotation(e.matrixWorld), this.ray.origin.setFromMatrixPosition(e.matrixWorld), this.ray.direction.set(0, 0, -1).applyMatrix4(yg), this;
    }
    intersectObject(e, t = true, i = []) {
      return c9(e, this, i, t), i.sort(xg), i;
    }
    intersectObjects(e, t = true, i = []) {
      for (let r = 0, s = e.length; r < s; r++) c9(e[r], this, i, t);
      return i.sort(xg), i;
    }
  };
  function xg(n, e) {
    return n.distance - e.distance;
  }
  function c9(n, e, t, i) {
    let r = true;
    if (n.layers.test(e.layers) && n.raycast(e, t) === false && (r = false), r === true && i === true) {
      const s = n.children;
      for (let o = 0, a = s.length; o < a; o++) c9(s[o], e, t, true);
    }
  }
  XV = class {
    constructor(e = 1, t = 0, i = 0) {
      this.radius = e, this.phi = t, this.theta = i;
    }
    set(e, t, i) {
      return this.radius = e, this.phi = t, this.theta = i, this;
    }
    copy(e) {
      return this.radius = e.radius, this.phi = e.phi, this.theta = e.theta, this;
    }
    makeSafe() {
      return this.phi = Ae(this.phi, 1e-6, Math.PI - 1e-6), this;
    }
    setFromVector3(e) {
      return this.setFromCartesianCoords(e.x, e.y, e.z);
    }
    setFromCartesianCoords(e, t, i) {
      return this.radius = Math.sqrt(e * e + t * t + i * i), this.radius === 0 ? (this.theta = 0, this.phi = 0) : (this.theta = Math.atan2(e, i), this.phi = Math.acos(Ae(t / this.radius, -1, 1))), this;
    }
    clone() {
      return new this.constructor().copy(this);
    }
  };
  const Sg = new u1(), _c = new u1();
  $V = class {
    constructor(e = new u1(), t = new u1()) {
      this.start = e, this.end = t;
    }
    set(e, t) {
      return this.start.copy(e), this.end.copy(t), this;
    }
    copy(e) {
      return this.start.copy(e.start), this.end.copy(e.end), this;
    }
    getCenter(e) {
      return e.addVectors(this.start, this.end).multiplyScalar(0.5);
    }
    delta(e) {
      return e.subVectors(this.end, this.start);
    }
    distanceSq() {
      return this.start.distanceToSquared(this.end);
    }
    distance() {
      return this.start.distanceTo(this.end);
    }
    at(e, t) {
      return this.delta(t).multiplyScalar(e).add(this.start);
    }
    closestPointToPointParameter(e, t) {
      Sg.subVectors(e, this.start), _c.subVectors(this.end, this.start);
      const i = _c.dot(_c);
      let s = _c.dot(Sg) / i;
      return t && (s = Ae(s, 0, 1)), s;
    }
    closestPointToPoint(e, t, i) {
      const r = this.closestPointToPointParameter(e, t);
      return this.delta(i).multiplyScalar(r).add(this.start);
    }
    applyMatrix4(e) {
      return this.start.applyMatrix4(e), this.end.applyMatrix4(e), this;
    }
    equals(e) {
      return e.start.equals(this.start) && e.end.equals(this.end);
    }
    clone() {
      return new this.constructor().copy(this);
    }
  };
  qV = class extends Us {
    constructor(e, t = null) {
      super(), this.object = e, this.domElement = t, this.enabled = true, this.state = -1, this.keys = {}, this.mouseButtons = {
        LEFT: null,
        MIDDLE: null,
        RIGHT: null
      }, this.touches = {
        ONE: null,
        TWO: null
      };
    }
    connect(e) {
      if (e === void 0) {
        console.warn("THREE.Controls: connect() now requires an element.");
        return;
      }
      this.domElement !== null && this.disconnect(), this.domElement = e;
    }
    disconnect() {
    }
    dispose() {
    }
    update() {
    }
  };
  function Eg(n, e, t, i) {
    const r = GI(i);
    switch (t) {
      case f8:
        return n * e;
      case zp:
        return n * e / r.components * r.byteLength;
      case Df:
        return n * e / r.components * r.byteLength;
      case d8:
        return n * e * 2 / r.components * r.byteLength;
      case Vp:
        return n * e * 2 / r.components * r.byteLength;
      case h8:
        return n * e * 3 / r.components * r.byteLength;
      case f2:
        return n * e * 4 / r.components * r.byteLength;
      case Gp:
        return n * e * 4 / r.components * r.byteLength;
      case jc:
      case Xc:
        return Math.floor((n + 3) / 4) * Math.floor((e + 3) / 4) * 8;
      case $c:
      case qc:
        return Math.floor((n + 3) / 4) * Math.floor((e + 3) / 4) * 16;
      case F4:
      case k4:
        return Math.max(n, 16) * Math.max(e, 8) / 4;
      case I4:
      case O4:
        return Math.max(n, 8) * Math.max(e, 8) / 2;
      case N4:
      case U4:
        return Math.floor((n + 3) / 4) * Math.floor((e + 3) / 4) * 8;
      case B4:
        return Math.floor((n + 3) / 4) * Math.floor((e + 3) / 4) * 16;
      case H4:
        return Math.floor((n + 3) / 4) * Math.floor((e + 3) / 4) * 16;
      case z4:
        return Math.floor((n + 4) / 5) * Math.floor((e + 3) / 4) * 16;
      case V4:
        return Math.floor((n + 4) / 5) * Math.floor((e + 4) / 5) * 16;
      case G4:
        return Math.floor((n + 5) / 6) * Math.floor((e + 4) / 5) * 16;
      case W4:
        return Math.floor((n + 5) / 6) * Math.floor((e + 5) / 6) * 16;
      case j4:
        return Math.floor((n + 7) / 8) * Math.floor((e + 4) / 5) * 16;
      case X4:
        return Math.floor((n + 7) / 8) * Math.floor((e + 5) / 6) * 16;
      case $4:
        return Math.floor((n + 7) / 8) * Math.floor((e + 7) / 8) * 16;
      case q4:
        return Math.floor((n + 9) / 10) * Math.floor((e + 4) / 5) * 16;
      case Y4:
        return Math.floor((n + 9) / 10) * Math.floor((e + 5) / 6) * 16;
      case K4:
        return Math.floor((n + 9) / 10) * Math.floor((e + 7) / 8) * 16;
      case J4:
        return Math.floor((n + 9) / 10) * Math.floor((e + 9) / 10) * 16;
      case Q4:
        return Math.floor((n + 11) / 12) * Math.floor((e + 9) / 10) * 16;
      case Z4:
        return Math.floor((n + 11) / 12) * Math.floor((e + 11) / 12) * 16;
      case Yc:
      case e9:
      case t9:
        return Math.ceil(n / 4) * Math.ceil(e / 4) * 16;
      case p8:
      case n9:
        return Math.ceil(n / 4) * Math.ceil(e / 4) * 8;
      case i9:
      case r9:
        return Math.ceil(n / 4) * Math.ceil(e / 4) * 16;
    }
    throw new Error(`Unable to determine texture byte length for ${t} format.`);
  }
  function GI(n) {
    switch (n) {
      case qi:
      case l8:
        return {
          byteLength: 1,
          components: 1
        };
      case J0:
      case c8:
      case Tl:
        return {
          byteLength: 2,
          components: 1
        };
      case Bp:
      case Hp:
        return {
          byteLength: 2,
          components: 4
        };
      case wr:
      case Up:
      case L2:
        return {
          byteLength: 4,
          components: 1
        };
      case u8:
        return {
          byteLength: 4,
          components: 3
        };
    }
    throw new Error(`Unknown texture type ${n}.`);
  }
  typeof __THREE_DEVTOOLS__ < "u" && __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register", {
    detail: {
      revision: Np
    }
  }));
  typeof window < "u" && (window.__THREE__ ? console.warn("WARNING: Multiple instances of Three.js being imported.") : window.__THREE__ = Np);
  function O8() {
    let n = null, e = false, t = null, i = null;
    function r(s, o) {
      t(s, o), i = n.requestAnimationFrame(r);
    }
    return {
      start: function() {
        e !== true && t !== null && (i = n.requestAnimationFrame(r), e = true);
      },
      stop: function() {
        n.cancelAnimationFrame(i), e = false;
      },
      setAnimationLoop: function(s) {
        t = s;
      },
      setContext: function(s) {
        n = s;
      }
    };
  }
  function WI(n) {
    const e = /* @__PURE__ */ new WeakMap();
    function t(a, l) {
      const c = a.array, u = a.usage, h = c.byteLength, d = n.createBuffer();
      n.bindBuffer(l, d), n.bufferData(l, c, u), a.onUploadCallback();
      let f;
      if (c instanceof Float32Array) f = n.FLOAT;
      else if (c instanceof Uint16Array) a.isFloat16BufferAttribute ? f = n.HALF_FLOAT : f = n.UNSIGNED_SHORT;
      else if (c instanceof Int16Array) f = n.SHORT;
      else if (c instanceof Uint32Array) f = n.UNSIGNED_INT;
      else if (c instanceof Int32Array) f = n.INT;
      else if (c instanceof Int8Array) f = n.BYTE;
      else if (c instanceof Uint8Array) f = n.UNSIGNED_BYTE;
      else if (c instanceof Uint8ClampedArray) f = n.UNSIGNED_BYTE;
      else throw new Error("THREE.WebGLAttributes: Unsupported buffer data format: " + c);
      return {
        buffer: d,
        type: f,
        bytesPerElement: c.BYTES_PER_ELEMENT,
        version: a.version,
        size: h
      };
    }
    function i(a, l, c) {
      const u = l.array, h = l.updateRanges;
      if (n.bindBuffer(c, a), h.length === 0) n.bufferSubData(c, 0, u);
      else {
        h.sort((f, m) => f.start - m.start);
        let d = 0;
        for (let f = 1; f < h.length; f++) {
          const m = h[d], _ = h[f];
          _.start <= m.start + m.count + 1 ? m.count = Math.max(m.count, _.start + _.count - m.start) : (++d, h[d] = _);
        }
        h.length = d + 1;
        for (let f = 0, m = h.length; f < m; f++) {
          const _ = h[f];
          n.bufferSubData(c, _.start * u.BYTES_PER_ELEMENT, u, _.start, _.count);
        }
        l.clearUpdateRanges();
      }
      l.onUploadCallback();
    }
    function r(a) {
      return a.isInterleavedBufferAttribute && (a = a.data), e.get(a);
    }
    function s(a) {
      a.isInterleavedBufferAttribute && (a = a.data);
      const l = e.get(a);
      l && (n.deleteBuffer(l.buffer), e.delete(a));
    }
    function o(a, l) {
      if (a.isInterleavedBufferAttribute && (a = a.data), a.isGLBufferAttribute) {
        const u = e.get(a);
        (!u || u.version < a.version) && e.set(a, {
          buffer: a.buffer,
          type: a.type,
          bytesPerElement: a.elementSize,
          version: a.version
        });
        return;
      }
      const c = e.get(a);
      if (c === void 0) e.set(a, t(a, l));
      else if (c.version < a.version) {
        if (c.size !== a.array.byteLength) throw new Error("THREE.WebGLAttributes: The size of the buffer attribute's array buffer does not match the original size. Resizing buffer attributes is not supported.");
        i(c.buffer, a, l), c.version = a.version;
      }
    }
    return {
      get: r,
      remove: s,
      update: o
    };
  }
  var jI = `#ifdef USE_ALPHAHASH
	if ( diffuseColor.a < getAlphaHashThreshold( vPosition ) ) discard;
#endif`, XI = `#ifdef USE_ALPHAHASH
	const float ALPHA_HASH_SCALE = 0.05;
	float hash2D( vec2 value ) {
		return fract( 1.0e4 * sin( 17.0 * value.x + 0.1 * value.y ) * ( 0.1 + abs( sin( 13.0 * value.y + value.x ) ) ) );
	}
	float hash3D( vec3 value ) {
		return hash2D( vec2( hash2D( value.xy ), value.z ) );
	}
	float getAlphaHashThreshold( vec3 position ) {
		float maxDeriv = max(
			length( dFdx( position.xyz ) ),
			length( dFdy( position.xyz ) )
		);
		float pixScale = 1.0 / ( ALPHA_HASH_SCALE * maxDeriv );
		vec2 pixScales = vec2(
			exp2( floor( log2( pixScale ) ) ),
			exp2( ceil( log2( pixScale ) ) )
		);
		vec2 alpha = vec2(
			hash3D( floor( pixScales.x * position.xyz ) ),
			hash3D( floor( pixScales.y * position.xyz ) )
		);
		float lerpFactor = fract( log2( pixScale ) );
		float x = ( 1.0 - lerpFactor ) * alpha.x + lerpFactor * alpha.y;
		float a = min( lerpFactor, 1.0 - lerpFactor );
		vec3 cases = vec3(
			x * x / ( 2.0 * a * ( 1.0 - a ) ),
			( x - 0.5 * a ) / ( 1.0 - a ),
			1.0 - ( ( 1.0 - x ) * ( 1.0 - x ) / ( 2.0 * a * ( 1.0 - a ) ) )
		);
		float threshold = ( x < ( 1.0 - a ) )
			? ( ( x < a ) ? cases.x : cases.y )
			: cases.z;
		return clamp( threshold , 1.0e-6, 1.0 );
	}
#endif`, $I = `#ifdef USE_ALPHAMAP
	diffuseColor.a *= texture2D( alphaMap, vAlphaMapUv ).g;
#endif`, qI = `#ifdef USE_ALPHAMAP
	uniform sampler2D alphaMap;
#endif`, YI = `#ifdef USE_ALPHATEST
	#ifdef ALPHA_TO_COVERAGE
	diffuseColor.a = smoothstep( alphaTest, alphaTest + fwidth( diffuseColor.a ), diffuseColor.a );
	if ( diffuseColor.a == 0.0 ) discard;
	#else
	if ( diffuseColor.a < alphaTest ) discard;
	#endif
#endif`, KI = `#ifdef USE_ALPHATEST
	uniform float alphaTest;
#endif`, JI = `#ifdef USE_AOMAP
	float ambientOcclusion = ( texture2D( aoMap, vAoMapUv ).r - 1.0 ) * aoMapIntensity + 1.0;
	reflectedLight.indirectDiffuse *= ambientOcclusion;
	#if defined( USE_CLEARCOAT ) 
		clearcoatSpecularIndirect *= ambientOcclusion;
	#endif
	#if defined( USE_SHEEN ) 
		sheenSpecularIndirect *= ambientOcclusion;
	#endif
	#if defined( USE_ENVMAP ) && defined( STANDARD )
		float dotNV = saturate( dot( geometryNormal, geometryViewDir ) );
		reflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );
	#endif
#endif`, QI = `#ifdef USE_AOMAP
	uniform sampler2D aoMap;
	uniform float aoMapIntensity;
#endif`, ZI = `#ifdef USE_BATCHING
	#if ! defined( GL_ANGLE_multi_draw )
	#define gl_DrawID _gl_DrawID
	uniform int _gl_DrawID;
	#endif
	uniform highp sampler2D batchingTexture;
	uniform highp usampler2D batchingIdTexture;
	mat4 getBatchingMatrix( const in float i ) {
		int size = textureSize( batchingTexture, 0 ).x;
		int j = int( i ) * 4;
		int x = j % size;
		int y = j / size;
		vec4 v1 = texelFetch( batchingTexture, ivec2( x, y ), 0 );
		vec4 v2 = texelFetch( batchingTexture, ivec2( x + 1, y ), 0 );
		vec4 v3 = texelFetch( batchingTexture, ivec2( x + 2, y ), 0 );
		vec4 v4 = texelFetch( batchingTexture, ivec2( x + 3, y ), 0 );
		return mat4( v1, v2, v3, v4 );
	}
	float getIndirectIndex( const in int i ) {
		int size = textureSize( batchingIdTexture, 0 ).x;
		int x = i % size;
		int y = i / size;
		return float( texelFetch( batchingIdTexture, ivec2( x, y ), 0 ).r );
	}
#endif
#ifdef USE_BATCHING_COLOR
	uniform sampler2D batchingColorTexture;
	vec3 getBatchingColor( const in float i ) {
		int size = textureSize( batchingColorTexture, 0 ).x;
		int j = int( i );
		int x = j % size;
		int y = j / size;
		return texelFetch( batchingColorTexture, ivec2( x, y ), 0 ).rgb;
	}
#endif`, eF = `#ifdef USE_BATCHING
	mat4 batchingMatrix = getBatchingMatrix( getIndirectIndex( gl_DrawID ) );
#endif`, tF = `vec3 transformed = vec3( position );
#ifdef USE_ALPHAHASH
	vPosition = vec3( position );
#endif`, nF = `vec3 objectNormal = vec3( normal );
#ifdef USE_TANGENT
	vec3 objectTangent = vec3( tangent.xyz );
#endif`, iF = `float G_BlinnPhong_Implicit( ) {
	return 0.25;
}
float D_BlinnPhong( const in float shininess, const in float dotNH ) {
	return RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );
}
vec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNH = saturate( dot( normal, halfDir ) );
	float dotVH = saturate( dot( viewDir, halfDir ) );
	vec3 F = F_Schlick( specularColor, 1.0, dotVH );
	float G = G_BlinnPhong_Implicit( );
	float D = D_BlinnPhong( shininess, dotNH );
	return F * ( G * D );
} // validated`, rF = `#ifdef USE_IRIDESCENCE
	const mat3 XYZ_TO_REC709 = mat3(
		 3.2404542, -0.9692660,  0.0556434,
		-1.5371385,  1.8760108, -0.2040259,
		-0.4985314,  0.0415560,  1.0572252
	);
	vec3 Fresnel0ToIor( vec3 fresnel0 ) {
		vec3 sqrtF0 = sqrt( fresnel0 );
		return ( vec3( 1.0 ) + sqrtF0 ) / ( vec3( 1.0 ) - sqrtF0 );
	}
	vec3 IorToFresnel0( vec3 transmittedIor, float incidentIor ) {
		return pow2( ( transmittedIor - vec3( incidentIor ) ) / ( transmittedIor + vec3( incidentIor ) ) );
	}
	float IorToFresnel0( float transmittedIor, float incidentIor ) {
		return pow2( ( transmittedIor - incidentIor ) / ( transmittedIor + incidentIor ));
	}
	vec3 evalSensitivity( float OPD, vec3 shift ) {
		float phase = 2.0 * PI * OPD * 1.0e-9;
		vec3 val = vec3( 5.4856e-13, 4.4201e-13, 5.2481e-13 );
		vec3 pos = vec3( 1.6810e+06, 1.7953e+06, 2.2084e+06 );
		vec3 var = vec3( 4.3278e+09, 9.3046e+09, 6.6121e+09 );
		vec3 xyz = val * sqrt( 2.0 * PI * var ) * cos( pos * phase + shift ) * exp( - pow2( phase ) * var );
		xyz.x += 9.7470e-14 * sqrt( 2.0 * PI * 4.5282e+09 ) * cos( 2.2399e+06 * phase + shift[ 0 ] ) * exp( - 4.5282e+09 * pow2( phase ) );
		xyz /= 1.0685e-7;
		vec3 rgb = XYZ_TO_REC709 * xyz;
		return rgb;
	}
	vec3 evalIridescence( float outsideIOR, float eta2, float cosTheta1, float thinFilmThickness, vec3 baseF0 ) {
		vec3 I;
		float iridescenceIOR = mix( outsideIOR, eta2, smoothstep( 0.0, 0.03, thinFilmThickness ) );
		float sinTheta2Sq = pow2( outsideIOR / iridescenceIOR ) * ( 1.0 - pow2( cosTheta1 ) );
		float cosTheta2Sq = 1.0 - sinTheta2Sq;
		if ( cosTheta2Sq < 0.0 ) {
			return vec3( 1.0 );
		}
		float cosTheta2 = sqrt( cosTheta2Sq );
		float R0 = IorToFresnel0( iridescenceIOR, outsideIOR );
		float R12 = F_Schlick( R0, 1.0, cosTheta1 );
		float T121 = 1.0 - R12;
		float phi12 = 0.0;
		if ( iridescenceIOR < outsideIOR ) phi12 = PI;
		float phi21 = PI - phi12;
		vec3 baseIOR = Fresnel0ToIor( clamp( baseF0, 0.0, 0.9999 ) );		vec3 R1 = IorToFresnel0( baseIOR, iridescenceIOR );
		vec3 R23 = F_Schlick( R1, 1.0, cosTheta2 );
		vec3 phi23 = vec3( 0.0 );
		if ( baseIOR[ 0 ] < iridescenceIOR ) phi23[ 0 ] = PI;
		if ( baseIOR[ 1 ] < iridescenceIOR ) phi23[ 1 ] = PI;
		if ( baseIOR[ 2 ] < iridescenceIOR ) phi23[ 2 ] = PI;
		float OPD = 2.0 * iridescenceIOR * thinFilmThickness * cosTheta2;
		vec3 phi = vec3( phi21 ) + phi23;
		vec3 R123 = clamp( R12 * R23, 1e-5, 0.9999 );
		vec3 r123 = sqrt( R123 );
		vec3 Rs = pow2( T121 ) * R23 / ( vec3( 1.0 ) - R123 );
		vec3 C0 = R12 + Rs;
		I = C0;
		vec3 Cm = Rs - T121;
		for ( int m = 1; m <= 2; ++ m ) {
			Cm *= r123;
			vec3 Sm = 2.0 * evalSensitivity( float( m ) * OPD, float( m ) * phi );
			I += Cm * Sm;
		}
		return max( I, vec3( 0.0 ) );
	}
#endif`, sF = `#ifdef USE_BUMPMAP
	uniform sampler2D bumpMap;
	uniform float bumpScale;
	vec2 dHdxy_fwd() {
		vec2 dSTdx = dFdx( vBumpMapUv );
		vec2 dSTdy = dFdy( vBumpMapUv );
		float Hll = bumpScale * texture2D( bumpMap, vBumpMapUv ).x;
		float dBx = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdx ).x - Hll;
		float dBy = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdy ).x - Hll;
		return vec2( dBx, dBy );
	}
	vec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {
		vec3 vSigmaX = normalize( dFdx( surf_pos.xyz ) );
		vec3 vSigmaY = normalize( dFdy( surf_pos.xyz ) );
		vec3 vN = surf_norm;
		vec3 R1 = cross( vSigmaY, vN );
		vec3 R2 = cross( vN, vSigmaX );
		float fDet = dot( vSigmaX, R1 ) * faceDirection;
		vec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );
		return normalize( abs( fDet ) * surf_norm - vGrad );
	}
#endif`, oF = `#if NUM_CLIPPING_PLANES > 0
	vec4 plane;
	#ifdef ALPHA_TO_COVERAGE
		float distanceToPlane, distanceGradient;
		float clipOpacity = 1.0;
		#pragma unroll_loop_start
		for ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {
			plane = clippingPlanes[ i ];
			distanceToPlane = - dot( vClipPosition, plane.xyz ) + plane.w;
			distanceGradient = fwidth( distanceToPlane ) / 2.0;
			clipOpacity *= smoothstep( - distanceGradient, distanceGradient, distanceToPlane );
			if ( clipOpacity == 0.0 ) discard;
		}
		#pragma unroll_loop_end
		#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES
			float unionClipOpacity = 1.0;
			#pragma unroll_loop_start
			for ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {
				plane = clippingPlanes[ i ];
				distanceToPlane = - dot( vClipPosition, plane.xyz ) + plane.w;
				distanceGradient = fwidth( distanceToPlane ) / 2.0;
				unionClipOpacity *= 1.0 - smoothstep( - distanceGradient, distanceGradient, distanceToPlane );
			}
			#pragma unroll_loop_end
			clipOpacity *= 1.0 - unionClipOpacity;
		#endif
		diffuseColor.a *= clipOpacity;
		if ( diffuseColor.a == 0.0 ) discard;
	#else
		#pragma unroll_loop_start
		for ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {
			plane = clippingPlanes[ i ];
			if ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;
		}
		#pragma unroll_loop_end
		#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES
			bool clipped = true;
			#pragma unroll_loop_start
			for ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {
				plane = clippingPlanes[ i ];
				clipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;
			}
			#pragma unroll_loop_end
			if ( clipped ) discard;
		#endif
	#endif
#endif`, aF = `#if NUM_CLIPPING_PLANES > 0
	varying vec3 vClipPosition;
	uniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];
#endif`, lF = `#if NUM_CLIPPING_PLANES > 0
	varying vec3 vClipPosition;
#endif`, cF = `#if NUM_CLIPPING_PLANES > 0
	vClipPosition = - mvPosition.xyz;
#endif`, uF = `#if defined( USE_COLOR_ALPHA )
	diffuseColor *= vColor;
#elif defined( USE_COLOR )
	diffuseColor.rgb *= vColor;
#endif`, fF = `#if defined( USE_COLOR_ALPHA )
	varying vec4 vColor;
#elif defined( USE_COLOR )
	varying vec3 vColor;
#endif`, hF = `#if defined( USE_COLOR_ALPHA )
	varying vec4 vColor;
#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR ) || defined( USE_BATCHING_COLOR )
	varying vec3 vColor;
#endif`, dF = `#if defined( USE_COLOR_ALPHA )
	vColor = vec4( 1.0 );
#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR ) || defined( USE_BATCHING_COLOR )
	vColor = vec3( 1.0 );
#endif
#ifdef USE_COLOR
	vColor *= color;
#endif
#ifdef USE_INSTANCING_COLOR
	vColor.xyz *= instanceColor.xyz;
#endif
#ifdef USE_BATCHING_COLOR
	vec3 batchingColor = getBatchingColor( getIndirectIndex( gl_DrawID ) );
	vColor.xyz *= batchingColor.xyz;
#endif`, pF = `#define PI 3.141592653589793
#define PI2 6.283185307179586
#define PI_HALF 1.5707963267948966
#define RECIPROCAL_PI 0.3183098861837907
#define RECIPROCAL_PI2 0.15915494309189535
#define EPSILON 1e-6
#ifndef saturate
#define saturate( a ) clamp( a, 0.0, 1.0 )
#endif
#define whiteComplement( a ) ( 1.0 - saturate( a ) )
float pow2( const in float x ) { return x*x; }
vec3 pow2( const in vec3 x ) { return x*x; }
float pow3( const in float x ) { return x*x*x; }
float pow4( const in float x ) { float x2 = x*x; return x2*x2; }
float max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }
float average( const in vec3 v ) { return dot( v, vec3( 0.3333333 ) ); }
highp float rand( const in vec2 uv ) {
	const highp float a = 12.9898, b = 78.233, c = 43758.5453;
	highp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );
	return fract( sin( sn ) * c );
}
#ifdef HIGH_PRECISION
	float precisionSafeLength( vec3 v ) { return length( v ); }
#else
	float precisionSafeLength( vec3 v ) {
		float maxComponent = max3( abs( v ) );
		return length( v / maxComponent ) * maxComponent;
	}
#endif
struct IncidentLight {
	vec3 color;
	vec3 direction;
	bool visible;
};
struct ReflectedLight {
	vec3 directDiffuse;
	vec3 directSpecular;
	vec3 indirectDiffuse;
	vec3 indirectSpecular;
};
#ifdef USE_ALPHAHASH
	varying vec3 vPosition;
#endif
vec3 transformDirection( in vec3 dir, in mat4 matrix ) {
	return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );
}
vec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {
	return normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );
}
mat3 transposeMat3( const in mat3 m ) {
	mat3 tmp;
	tmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );
	tmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );
	tmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );
	return tmp;
}
bool isPerspectiveMatrix( mat4 m ) {
	return m[ 2 ][ 3 ] == - 1.0;
}
vec2 equirectUv( in vec3 dir ) {
	float u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;
	float v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;
	return vec2( u, v );
}
vec3 BRDF_Lambert( const in vec3 diffuseColor ) {
	return RECIPROCAL_PI * diffuseColor;
}
vec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {
	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );
	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );
}
float F_Schlick( const in float f0, const in float f90, const in float dotVH ) {
	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );
	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );
} // validated`, mF = `#ifdef ENVMAP_TYPE_CUBE_UV
	#define cubeUV_minMipLevel 4.0
	#define cubeUV_minTileSize 16.0
	float getFace( vec3 direction ) {
		vec3 absDirection = abs( direction );
		float face = - 1.0;
		if ( absDirection.x > absDirection.z ) {
			if ( absDirection.x > absDirection.y )
				face = direction.x > 0.0 ? 0.0 : 3.0;
			else
				face = direction.y > 0.0 ? 1.0 : 4.0;
		} else {
			if ( absDirection.z > absDirection.y )
				face = direction.z > 0.0 ? 2.0 : 5.0;
			else
				face = direction.y > 0.0 ? 1.0 : 4.0;
		}
		return face;
	}
	vec2 getUV( vec3 direction, float face ) {
		vec2 uv;
		if ( face == 0.0 ) {
			uv = vec2( direction.z, direction.y ) / abs( direction.x );
		} else if ( face == 1.0 ) {
			uv = vec2( - direction.x, - direction.z ) / abs( direction.y );
		} else if ( face == 2.0 ) {
			uv = vec2( - direction.x, direction.y ) / abs( direction.z );
		} else if ( face == 3.0 ) {
			uv = vec2( - direction.z, direction.y ) / abs( direction.x );
		} else if ( face == 4.0 ) {
			uv = vec2( - direction.x, direction.z ) / abs( direction.y );
		} else {
			uv = vec2( direction.x, direction.y ) / abs( direction.z );
		}
		return 0.5 * ( uv + 1.0 );
	}
	vec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {
		float face = getFace( direction );
		float filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );
		mipInt = max( mipInt, cubeUV_minMipLevel );
		float faceSize = exp2( mipInt );
		highp vec2 uv = getUV( direction, face ) * ( faceSize - 2.0 ) + 1.0;
		if ( face > 2.0 ) {
			uv.y += faceSize;
			face -= 3.0;
		}
		uv.x += face * faceSize;
		uv.x += filterInt * 3.0 * cubeUV_minTileSize;
		uv.y += 4.0 * ( exp2( CUBEUV_MAX_MIP ) - faceSize );
		uv.x *= CUBEUV_TEXEL_WIDTH;
		uv.y *= CUBEUV_TEXEL_HEIGHT;
		#ifdef texture2DGradEXT
			return texture2DGradEXT( envMap, uv, vec2( 0.0 ), vec2( 0.0 ) ).rgb;
		#else
			return texture2D( envMap, uv ).rgb;
		#endif
	}
	#define cubeUV_r0 1.0
	#define cubeUV_m0 - 2.0
	#define cubeUV_r1 0.8
	#define cubeUV_m1 - 1.0
	#define cubeUV_r4 0.4
	#define cubeUV_m4 2.0
	#define cubeUV_r5 0.305
	#define cubeUV_m5 3.0
	#define cubeUV_r6 0.21
	#define cubeUV_m6 4.0
	float roughnessToMip( float roughness ) {
		float mip = 0.0;
		if ( roughness >= cubeUV_r1 ) {
			mip = ( cubeUV_r0 - roughness ) * ( cubeUV_m1 - cubeUV_m0 ) / ( cubeUV_r0 - cubeUV_r1 ) + cubeUV_m0;
		} else if ( roughness >= cubeUV_r4 ) {
			mip = ( cubeUV_r1 - roughness ) * ( cubeUV_m4 - cubeUV_m1 ) / ( cubeUV_r1 - cubeUV_r4 ) + cubeUV_m1;
		} else if ( roughness >= cubeUV_r5 ) {
			mip = ( cubeUV_r4 - roughness ) * ( cubeUV_m5 - cubeUV_m4 ) / ( cubeUV_r4 - cubeUV_r5 ) + cubeUV_m4;
		} else if ( roughness >= cubeUV_r6 ) {
			mip = ( cubeUV_r5 - roughness ) * ( cubeUV_m6 - cubeUV_m5 ) / ( cubeUV_r5 - cubeUV_r6 ) + cubeUV_m5;
		} else {
			mip = - 2.0 * log2( 1.16 * roughness );		}
		return mip;
	}
	vec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {
		float mip = clamp( roughnessToMip( roughness ), cubeUV_m0, CUBEUV_MAX_MIP );
		float mipF = fract( mip );
		float mipInt = floor( mip );
		vec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );
		if ( mipF == 0.0 ) {
			return vec4( color0, 1.0 );
		} else {
			vec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );
			return vec4( mix( color0, color1, mipF ), 1.0 );
		}
	}
#endif`, gF = `vec3 transformedNormal = objectNormal;
#ifdef USE_TANGENT
	vec3 transformedTangent = objectTangent;
#endif
#ifdef USE_BATCHING
	mat3 bm = mat3( batchingMatrix );
	transformedNormal /= vec3( dot( bm[ 0 ], bm[ 0 ] ), dot( bm[ 1 ], bm[ 1 ] ), dot( bm[ 2 ], bm[ 2 ] ) );
	transformedNormal = bm * transformedNormal;
	#ifdef USE_TANGENT
		transformedTangent = bm * transformedTangent;
	#endif
#endif
#ifdef USE_INSTANCING
	mat3 im = mat3( instanceMatrix );
	transformedNormal /= vec3( dot( im[ 0 ], im[ 0 ] ), dot( im[ 1 ], im[ 1 ] ), dot( im[ 2 ], im[ 2 ] ) );
	transformedNormal = im * transformedNormal;
	#ifdef USE_TANGENT
		transformedTangent = im * transformedTangent;
	#endif
#endif
transformedNormal = normalMatrix * transformedNormal;
#ifdef FLIP_SIDED
	transformedNormal = - transformedNormal;
#endif
#ifdef USE_TANGENT
	transformedTangent = ( modelViewMatrix * vec4( transformedTangent, 0.0 ) ).xyz;
	#ifdef FLIP_SIDED
		transformedTangent = - transformedTangent;
	#endif
#endif`, _F = `#ifdef USE_DISPLACEMENTMAP
	uniform sampler2D displacementMap;
	uniform float displacementScale;
	uniform float displacementBias;
#endif`, bF = `#ifdef USE_DISPLACEMENTMAP
	transformed += normalize( objectNormal ) * ( texture2D( displacementMap, vDisplacementMapUv ).x * displacementScale + displacementBias );
#endif`, vF = `#ifdef USE_EMISSIVEMAP
	vec4 emissiveColor = texture2D( emissiveMap, vEmissiveMapUv );
	#ifdef DECODE_VIDEO_TEXTURE_EMISSIVE
		emissiveColor = sRGBTransferEOTF( emissiveColor );
	#endif
	totalEmissiveRadiance *= emissiveColor.rgb;
#endif`, yF = `#ifdef USE_EMISSIVEMAP
	uniform sampler2D emissiveMap;
#endif`, xF = "gl_FragColor = linearToOutputTexel( gl_FragColor );", SF = `vec4 LinearTransferOETF( in vec4 value ) {
	return value;
}
vec4 sRGBTransferEOTF( in vec4 value ) {
	return vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );
}
vec4 sRGBTransferOETF( in vec4 value ) {
	return vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );
}`, EF = `#ifdef USE_ENVMAP
	#ifdef ENV_WORLDPOS
		vec3 cameraToFrag;
		if ( isOrthographic ) {
			cameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );
		} else {
			cameraToFrag = normalize( vWorldPosition - cameraPosition );
		}
		vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
		#ifdef ENVMAP_MODE_REFLECTION
			vec3 reflectVec = reflect( cameraToFrag, worldNormal );
		#else
			vec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );
		#endif
	#else
		vec3 reflectVec = vReflect;
	#endif
	#ifdef ENVMAP_TYPE_CUBE
		vec4 envColor = textureCube( envMap, envMapRotation * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );
	#else
		vec4 envColor = vec4( 0.0 );
	#endif
	#ifdef ENVMAP_BLENDING_MULTIPLY
		outgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );
	#elif defined( ENVMAP_BLENDING_MIX )
		outgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );
	#elif defined( ENVMAP_BLENDING_ADD )
		outgoingLight += envColor.xyz * specularStrength * reflectivity;
	#endif
#endif`, wF = `#ifdef USE_ENVMAP
	uniform float envMapIntensity;
	uniform float flipEnvMap;
	uniform mat3 envMapRotation;
	#ifdef ENVMAP_TYPE_CUBE
		uniform samplerCube envMap;
	#else
		uniform sampler2D envMap;
	#endif
	
#endif`, MF = `#ifdef USE_ENVMAP
	uniform float reflectivity;
	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )
		#define ENV_WORLDPOS
	#endif
	#ifdef ENV_WORLDPOS
		varying vec3 vWorldPosition;
		uniform float refractionRatio;
	#else
		varying vec3 vReflect;
	#endif
#endif`, TF = `#ifdef USE_ENVMAP
	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )
		#define ENV_WORLDPOS
	#endif
	#ifdef ENV_WORLDPOS
		
		varying vec3 vWorldPosition;
	#else
		varying vec3 vReflect;
		uniform float refractionRatio;
	#endif
#endif`, CF = `#ifdef USE_ENVMAP
	#ifdef ENV_WORLDPOS
		vWorldPosition = worldPosition.xyz;
	#else
		vec3 cameraToVertex;
		if ( isOrthographic ) {
			cameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );
		} else {
			cameraToVertex = normalize( worldPosition.xyz - cameraPosition );
		}
		vec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );
		#ifdef ENVMAP_MODE_REFLECTION
			vReflect = reflect( cameraToVertex, worldNormal );
		#else
			vReflect = refract( cameraToVertex, worldNormal, refractionRatio );
		#endif
	#endif
#endif`, AF = `#ifdef USE_FOG
	vFogDepth = - mvPosition.z;
#endif`, DF = `#ifdef USE_FOG
	varying float vFogDepth;
#endif`, RF = `#ifdef USE_FOG
	#ifdef FOG_EXP2
		float fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );
	#else
		float fogFactor = smoothstep( fogNear, fogFar, vFogDepth );
	#endif
	gl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );
#endif`, PF = `#ifdef USE_FOG
	uniform vec3 fogColor;
	varying float vFogDepth;
	#ifdef FOG_EXP2
		uniform float fogDensity;
	#else
		uniform float fogNear;
		uniform float fogFar;
	#endif
#endif`, LF = `#ifdef USE_GRADIENTMAP
	uniform sampler2D gradientMap;
#endif
vec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {
	float dotNL = dot( normal, lightDirection );
	vec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );
	#ifdef USE_GRADIENTMAP
		return vec3( texture2D( gradientMap, coord ).r );
	#else
		vec2 fw = fwidth( coord ) * 0.5;
		return mix( vec3( 0.7 ), vec3( 1.0 ), smoothstep( 0.7 - fw.x, 0.7 + fw.x, coord.x ) );
	#endif
}`, IF = `#ifdef USE_LIGHTMAP
	uniform sampler2D lightMap;
	uniform float lightMapIntensity;
#endif`, FF = `LambertMaterial material;
material.diffuseColor = diffuseColor.rgb;
material.specularStrength = specularStrength;`, OF = `varying vec3 vViewPosition;
struct LambertMaterial {
	vec3 diffuseColor;
	float specularStrength;
};
void RE_Direct_Lambert( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Lambert( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_Lambert
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Lambert`, kF = `uniform bool receiveShadow;
uniform vec3 ambientLightColor;
#if defined( USE_LIGHT_PROBES )
	uniform vec3 lightProbe[ 9 ];
#endif
vec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {
	float x = normal.x, y = normal.y, z = normal.z;
	vec3 result = shCoefficients[ 0 ] * 0.886227;
	result += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;
	result += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;
	result += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;
	result += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;
	result += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;
	result += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );
	result += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;
	result += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );
	return result;
}
vec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {
	vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
	vec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );
	return irradiance;
}
vec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {
	vec3 irradiance = ambientLightColor;
	return irradiance;
}
float getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {
	float distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );
	if ( cutoffDistance > 0.0 ) {
		distanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );
	}
	return distanceFalloff;
}
float getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {
	return smoothstep( coneCosine, penumbraCosine, angleCosine );
}
#if NUM_DIR_LIGHTS > 0
	struct DirectionalLight {
		vec3 direction;
		vec3 color;
	};
	uniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];
	void getDirectionalLightInfo( const in DirectionalLight directionalLight, out IncidentLight light ) {
		light.color = directionalLight.color;
		light.direction = directionalLight.direction;
		light.visible = true;
	}
#endif
#if NUM_POINT_LIGHTS > 0
	struct PointLight {
		vec3 position;
		vec3 color;
		float distance;
		float decay;
	};
	uniform PointLight pointLights[ NUM_POINT_LIGHTS ];
	void getPointLightInfo( const in PointLight pointLight, const in vec3 geometryPosition, out IncidentLight light ) {
		vec3 lVector = pointLight.position - geometryPosition;
		light.direction = normalize( lVector );
		float lightDistance = length( lVector );
		light.color = pointLight.color;
		light.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );
		light.visible = ( light.color != vec3( 0.0 ) );
	}
#endif
#if NUM_SPOT_LIGHTS > 0
	struct SpotLight {
		vec3 position;
		vec3 direction;
		vec3 color;
		float distance;
		float decay;
		float coneCos;
		float penumbraCos;
	};
	uniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];
	void getSpotLightInfo( const in SpotLight spotLight, const in vec3 geometryPosition, out IncidentLight light ) {
		vec3 lVector = spotLight.position - geometryPosition;
		light.direction = normalize( lVector );
		float angleCos = dot( light.direction, spotLight.direction );
		float spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );
		if ( spotAttenuation > 0.0 ) {
			float lightDistance = length( lVector );
			light.color = spotLight.color * spotAttenuation;
			light.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );
			light.visible = ( light.color != vec3( 0.0 ) );
		} else {
			light.color = vec3( 0.0 );
			light.visible = false;
		}
	}
#endif
#if NUM_RECT_AREA_LIGHTS > 0
	struct RectAreaLight {
		vec3 color;
		vec3 position;
		vec3 halfWidth;
		vec3 halfHeight;
	};
	uniform sampler2D ltc_1;	uniform sampler2D ltc_2;
	uniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];
#endif
#if NUM_HEMI_LIGHTS > 0
	struct HemisphereLight {
		vec3 direction;
		vec3 skyColor;
		vec3 groundColor;
	};
	uniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];
	vec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {
		float dotNL = dot( normal, hemiLight.direction );
		float hemiDiffuseWeight = 0.5 * dotNL + 0.5;
		vec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );
		return irradiance;
	}
#endif`, NF = `#ifdef USE_ENVMAP
	vec3 getIBLIrradiance( const in vec3 normal ) {
		#ifdef ENVMAP_TYPE_CUBE_UV
			vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
			vec4 envMapColor = textureCubeUV( envMap, envMapRotation * worldNormal, 1.0 );
			return PI * envMapColor.rgb * envMapIntensity;
		#else
			return vec3( 0.0 );
		#endif
	}
	vec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {
		#ifdef ENVMAP_TYPE_CUBE_UV
			vec3 reflectVec = reflect( - viewDir, normal );
			reflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );
			reflectVec = inverseTransformDirection( reflectVec, viewMatrix );
			vec4 envMapColor = textureCubeUV( envMap, envMapRotation * reflectVec, roughness );
			return envMapColor.rgb * envMapIntensity;
		#else
			return vec3( 0.0 );
		#endif
	}
	#ifdef USE_ANISOTROPY
		vec3 getIBLAnisotropyRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in vec3 bitangent, const in float anisotropy ) {
			#ifdef ENVMAP_TYPE_CUBE_UV
				vec3 bentNormal = cross( bitangent, viewDir );
				bentNormal = normalize( cross( bentNormal, bitangent ) );
				bentNormal = normalize( mix( bentNormal, normal, pow2( pow2( 1.0 - anisotropy * ( 1.0 - roughness ) ) ) ) );
				return getIBLRadiance( viewDir, bentNormal, roughness );
			#else
				return vec3( 0.0 );
			#endif
		}
	#endif
#endif`, UF = `ToonMaterial material;
material.diffuseColor = diffuseColor.rgb;`, BF = `varying vec3 vViewPosition;
struct ToonMaterial {
	vec3 diffuseColor;
};
void RE_Direct_Toon( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {
	vec3 irradiance = getGradientIrradiance( geometryNormal, directLight.direction ) * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_Toon
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Toon`, HF = `BlinnPhongMaterial material;
material.diffuseColor = diffuseColor.rgb;
material.specularColor = specular;
material.specularShininess = shininess;
material.specularStrength = specularStrength;`, zF = `varying vec3 vViewPosition;
struct BlinnPhongMaterial {
	vec3 diffuseColor;
	vec3 specularColor;
	float specularShininess;
	float specularStrength;
};
void RE_Direct_BlinnPhong( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
	reflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometryViewDir, geometryNormal, material.specularColor, material.specularShininess ) * material.specularStrength;
}
void RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_BlinnPhong
#define RE_IndirectDiffuse		RE_IndirectDiffuse_BlinnPhong`, VF = `PhysicalMaterial material;
material.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );
vec3 dxy = max( abs( dFdx( nonPerturbedNormal ) ), abs( dFdy( nonPerturbedNormal ) ) );
float geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );
material.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;
material.roughness = min( material.roughness, 1.0 );
#ifdef IOR
	material.ior = ior;
	#ifdef USE_SPECULAR
		float specularIntensityFactor = specularIntensity;
		vec3 specularColorFactor = specularColor;
		#ifdef USE_SPECULAR_COLORMAP
			specularColorFactor *= texture2D( specularColorMap, vSpecularColorMapUv ).rgb;
		#endif
		#ifdef USE_SPECULAR_INTENSITYMAP
			specularIntensityFactor *= texture2D( specularIntensityMap, vSpecularIntensityMapUv ).a;
		#endif
		material.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );
	#else
		float specularIntensityFactor = 1.0;
		vec3 specularColorFactor = vec3( 1.0 );
		material.specularF90 = 1.0;
	#endif
	material.specularColor = mix( min( pow2( ( material.ior - 1.0 ) / ( material.ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );
#else
	material.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );
	material.specularF90 = 1.0;
#endif
#ifdef USE_CLEARCOAT
	material.clearcoat = clearcoat;
	material.clearcoatRoughness = clearcoatRoughness;
	material.clearcoatF0 = vec3( 0.04 );
	material.clearcoatF90 = 1.0;
	#ifdef USE_CLEARCOATMAP
		material.clearcoat *= texture2D( clearcoatMap, vClearcoatMapUv ).x;
	#endif
	#ifdef USE_CLEARCOAT_ROUGHNESSMAP
		material.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vClearcoatRoughnessMapUv ).y;
	#endif
	material.clearcoat = saturate( material.clearcoat );	material.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );
	material.clearcoatRoughness += geometryRoughness;
	material.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );
#endif
#ifdef USE_DISPERSION
	material.dispersion = dispersion;
#endif
#ifdef USE_IRIDESCENCE
	material.iridescence = iridescence;
	material.iridescenceIOR = iridescenceIOR;
	#ifdef USE_IRIDESCENCEMAP
		material.iridescence *= texture2D( iridescenceMap, vIridescenceMapUv ).r;
	#endif
	#ifdef USE_IRIDESCENCE_THICKNESSMAP
		material.iridescenceThickness = (iridescenceThicknessMaximum - iridescenceThicknessMinimum) * texture2D( iridescenceThicknessMap, vIridescenceThicknessMapUv ).g + iridescenceThicknessMinimum;
	#else
		material.iridescenceThickness = iridescenceThicknessMaximum;
	#endif
#endif
#ifdef USE_SHEEN
	material.sheenColor = sheenColor;
	#ifdef USE_SHEEN_COLORMAP
		material.sheenColor *= texture2D( sheenColorMap, vSheenColorMapUv ).rgb;
	#endif
	material.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );
	#ifdef USE_SHEEN_ROUGHNESSMAP
		material.sheenRoughness *= texture2D( sheenRoughnessMap, vSheenRoughnessMapUv ).a;
	#endif
#endif
#ifdef USE_ANISOTROPY
	#ifdef USE_ANISOTROPYMAP
		mat2 anisotropyMat = mat2( anisotropyVector.x, anisotropyVector.y, - anisotropyVector.y, anisotropyVector.x );
		vec3 anisotropyPolar = texture2D( anisotropyMap, vAnisotropyMapUv ).rgb;
		vec2 anisotropyV = anisotropyMat * normalize( 2.0 * anisotropyPolar.rg - vec2( 1.0 ) ) * anisotropyPolar.b;
	#else
		vec2 anisotropyV = anisotropyVector;
	#endif
	material.anisotropy = length( anisotropyV );
	if( material.anisotropy == 0.0 ) {
		anisotropyV = vec2( 1.0, 0.0 );
	} else {
		anisotropyV /= material.anisotropy;
		material.anisotropy = saturate( material.anisotropy );
	}
	material.alphaT = mix( pow2( material.roughness ), 1.0, pow2( material.anisotropy ) );
	material.anisotropyT = tbn[ 0 ] * anisotropyV.x + tbn[ 1 ] * anisotropyV.y;
	material.anisotropyB = tbn[ 1 ] * anisotropyV.x - tbn[ 0 ] * anisotropyV.y;
#endif`, GF = `struct PhysicalMaterial {
	vec3 diffuseColor;
	float roughness;
	vec3 specularColor;
	float specularF90;
	float dispersion;
	#ifdef USE_CLEARCOAT
		float clearcoat;
		float clearcoatRoughness;
		vec3 clearcoatF0;
		float clearcoatF90;
	#endif
	#ifdef USE_IRIDESCENCE
		float iridescence;
		float iridescenceIOR;
		float iridescenceThickness;
		vec3 iridescenceFresnel;
		vec3 iridescenceF0;
	#endif
	#ifdef USE_SHEEN
		vec3 sheenColor;
		float sheenRoughness;
	#endif
	#ifdef IOR
		float ior;
	#endif
	#ifdef USE_TRANSMISSION
		float transmission;
		float transmissionAlpha;
		float thickness;
		float attenuationDistance;
		vec3 attenuationColor;
	#endif
	#ifdef USE_ANISOTROPY
		float anisotropy;
		float alphaT;
		vec3 anisotropyT;
		vec3 anisotropyB;
	#endif
};
vec3 clearcoatSpecularDirect = vec3( 0.0 );
vec3 clearcoatSpecularIndirect = vec3( 0.0 );
vec3 sheenSpecularDirect = vec3( 0.0 );
vec3 sheenSpecularIndirect = vec3(0.0 );
vec3 Schlick_to_F0( const in vec3 f, const in float f90, const in float dotVH ) {
    float x = clamp( 1.0 - dotVH, 0.0, 1.0 );
    float x2 = x * x;
    float x5 = clamp( x * x2 * x2, 0.0, 0.9999 );
    return ( f - vec3( f90 ) * x5 ) / ( 1.0 - x5 );
}
float V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {
	float a2 = pow2( alpha );
	float gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );
	float gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );
	return 0.5 / max( gv + gl, EPSILON );
}
float D_GGX( const in float alpha, const in float dotNH ) {
	float a2 = pow2( alpha );
	float denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;
	return RECIPROCAL_PI * a2 / pow2( denom );
}
#ifdef USE_ANISOTROPY
	float V_GGX_SmithCorrelated_Anisotropic( const in float alphaT, const in float alphaB, const in float dotTV, const in float dotBV, const in float dotTL, const in float dotBL, const in float dotNV, const in float dotNL ) {
		float gv = dotNL * length( vec3( alphaT * dotTV, alphaB * dotBV, dotNV ) );
		float gl = dotNV * length( vec3( alphaT * dotTL, alphaB * dotBL, dotNL ) );
		float v = 0.5 / ( gv + gl );
		return saturate(v);
	}
	float D_GGX_Anisotropic( const in float alphaT, const in float alphaB, const in float dotNH, const in float dotTH, const in float dotBH ) {
		float a2 = alphaT * alphaB;
		highp vec3 v = vec3( alphaB * dotTH, alphaT * dotBH, a2 * dotNH );
		highp float v2 = dot( v, v );
		float w2 = a2 / v2;
		return RECIPROCAL_PI * a2 * pow2 ( w2 );
	}
#endif
#ifdef USE_CLEARCOAT
	vec3 BRDF_GGX_Clearcoat( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material) {
		vec3 f0 = material.clearcoatF0;
		float f90 = material.clearcoatF90;
		float roughness = material.clearcoatRoughness;
		float alpha = pow2( roughness );
		vec3 halfDir = normalize( lightDir + viewDir );
		float dotNL = saturate( dot( normal, lightDir ) );
		float dotNV = saturate( dot( normal, viewDir ) );
		float dotNH = saturate( dot( normal, halfDir ) );
		float dotVH = saturate( dot( viewDir, halfDir ) );
		vec3 F = F_Schlick( f0, f90, dotVH );
		float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );
		float D = D_GGX( alpha, dotNH );
		return F * ( V * D );
	}
#endif
vec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material ) {
	vec3 f0 = material.specularColor;
	float f90 = material.specularF90;
	float roughness = material.roughness;
	float alpha = pow2( roughness );
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNL = saturate( dot( normal, lightDir ) );
	float dotNV = saturate( dot( normal, viewDir ) );
	float dotNH = saturate( dot( normal, halfDir ) );
	float dotVH = saturate( dot( viewDir, halfDir ) );
	vec3 F = F_Schlick( f0, f90, dotVH );
	#ifdef USE_IRIDESCENCE
		F = mix( F, material.iridescenceFresnel, material.iridescence );
	#endif
	#ifdef USE_ANISOTROPY
		float dotTL = dot( material.anisotropyT, lightDir );
		float dotTV = dot( material.anisotropyT, viewDir );
		float dotTH = dot( material.anisotropyT, halfDir );
		float dotBL = dot( material.anisotropyB, lightDir );
		float dotBV = dot( material.anisotropyB, viewDir );
		float dotBH = dot( material.anisotropyB, halfDir );
		float V = V_GGX_SmithCorrelated_Anisotropic( material.alphaT, alpha, dotTV, dotBV, dotTL, dotBL, dotNV, dotNL );
		float D = D_GGX_Anisotropic( material.alphaT, alpha, dotNH, dotTH, dotBH );
	#else
		float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );
		float D = D_GGX( alpha, dotNH );
	#endif
	return F * ( V * D );
}
vec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {
	const float LUT_SIZE = 64.0;
	const float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;
	const float LUT_BIAS = 0.5 / LUT_SIZE;
	float dotNV = saturate( dot( N, V ) );
	vec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );
	uv = uv * LUT_SCALE + LUT_BIAS;
	return uv;
}
float LTC_ClippedSphereFormFactor( const in vec3 f ) {
	float l = length( f );
	return max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );
}
vec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {
	float x = dot( v1, v2 );
	float y = abs( x );
	float a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;
	float b = 3.4175940 + ( 4.1616724 + y ) * y;
	float v = a / b;
	float theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;
	return cross( v1, v2 ) * theta_sintheta;
}
vec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {
	vec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];
	vec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];
	vec3 lightNormal = cross( v1, v2 );
	if( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );
	vec3 T1, T2;
	T1 = normalize( V - N * dot( V, N ) );
	T2 = - cross( N, T1 );
	mat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );
	vec3 coords[ 4 ];
	coords[ 0 ] = mat * ( rectCoords[ 0 ] - P );
	coords[ 1 ] = mat * ( rectCoords[ 1 ] - P );
	coords[ 2 ] = mat * ( rectCoords[ 2 ] - P );
	coords[ 3 ] = mat * ( rectCoords[ 3 ] - P );
	coords[ 0 ] = normalize( coords[ 0 ] );
	coords[ 1 ] = normalize( coords[ 1 ] );
	coords[ 2 ] = normalize( coords[ 2 ] );
	coords[ 3 ] = normalize( coords[ 3 ] );
	vec3 vectorFormFactor = vec3( 0.0 );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );
	float result = LTC_ClippedSphereFormFactor( vectorFormFactor );
	return vec3( result );
}
#if defined( USE_SHEEN )
float D_Charlie( float roughness, float dotNH ) {
	float alpha = pow2( roughness );
	float invAlpha = 1.0 / alpha;
	float cos2h = dotNH * dotNH;
	float sin2h = max( 1.0 - cos2h, 0.0078125 );
	return ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );
}
float V_Neubelt( float dotNV, float dotNL ) {
	return saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );
}
vec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNL = saturate( dot( normal, lightDir ) );
	float dotNV = saturate( dot( normal, viewDir ) );
	float dotNH = saturate( dot( normal, halfDir ) );
	float D = D_Charlie( sheenRoughness, dotNH );
	float V = V_Neubelt( dotNV, dotNL );
	return sheenColor * ( D * V );
}
#endif
float IBLSheenBRDF( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {
	float dotNV = saturate( dot( normal, viewDir ) );
	float r2 = roughness * roughness;
	float a = roughness < 0.25 ? -339.2 * r2 + 161.4 * roughness - 25.9 : -8.48 * r2 + 14.3 * roughness - 9.95;
	float b = roughness < 0.25 ? 44.0 * r2 - 23.7 * roughness + 3.26 : 1.97 * r2 - 3.27 * roughness + 0.72;
	float DG = exp( a * dotNV + b ) + ( roughness < 0.25 ? 0.0 : 0.1 * ( roughness - 0.25 ) );
	return saturate( DG * RECIPROCAL_PI );
}
vec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {
	float dotNV = saturate( dot( normal, viewDir ) );
	const vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );
	const vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );
	vec4 r = roughness * c0 + c1;
	float a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;
	vec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;
	return fab;
}
vec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {
	vec2 fab = DFGApprox( normal, viewDir, roughness );
	return specularColor * fab.x + specularF90 * fab.y;
}
#ifdef USE_IRIDESCENCE
void computeMultiscatteringIridescence( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float iridescence, const in vec3 iridescenceF0, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {
#else
void computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {
#endif
	vec2 fab = DFGApprox( normal, viewDir, roughness );
	#ifdef USE_IRIDESCENCE
		vec3 Fr = mix( specularColor, iridescenceF0, iridescence );
	#else
		vec3 Fr = specularColor;
	#endif
	vec3 FssEss = Fr * fab.x + specularF90 * fab.y;
	float Ess = fab.x + fab.y;
	float Ems = 1.0 - Ess;
	vec3 Favg = Fr + ( 1.0 - Fr ) * 0.047619;	vec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );
	singleScatter += FssEss;
	multiScatter += Fms * Ems;
}
#if NUM_RECT_AREA_LIGHTS > 0
	void RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
		vec3 normal = geometryNormal;
		vec3 viewDir = geometryViewDir;
		vec3 position = geometryPosition;
		vec3 lightPos = rectAreaLight.position;
		vec3 halfWidth = rectAreaLight.halfWidth;
		vec3 halfHeight = rectAreaLight.halfHeight;
		vec3 lightColor = rectAreaLight.color;
		float roughness = material.roughness;
		vec3 rectCoords[ 4 ];
		rectCoords[ 0 ] = lightPos + halfWidth - halfHeight;		rectCoords[ 1 ] = lightPos - halfWidth - halfHeight;
		rectCoords[ 2 ] = lightPos - halfWidth + halfHeight;
		rectCoords[ 3 ] = lightPos + halfWidth + halfHeight;
		vec2 uv = LTC_Uv( normal, viewDir, roughness );
		vec4 t1 = texture2D( ltc_1, uv );
		vec4 t2 = texture2D( ltc_2, uv );
		mat3 mInv = mat3(
			vec3( t1.x, 0, t1.y ),
			vec3(    0, 1,    0 ),
			vec3( t1.z, 0, t1.w )
		);
		vec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );
		reflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );
		reflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );
	}
#endif
void RE_Direct_Physical( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	#ifdef USE_CLEARCOAT
		float dotNLcc = saturate( dot( geometryClearcoatNormal, directLight.direction ) );
		vec3 ccIrradiance = dotNLcc * directLight.color;
		clearcoatSpecularDirect += ccIrradiance * BRDF_GGX_Clearcoat( directLight.direction, geometryViewDir, geometryClearcoatNormal, material );
	#endif
	#ifdef USE_SHEEN
		sheenSpecularDirect += irradiance * BRDF_Sheen( directLight.direction, geometryViewDir, geometryNormal, material.sheenColor, material.sheenRoughness );
	#endif
	reflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometryViewDir, geometryNormal, material );
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {
	#ifdef USE_CLEARCOAT
		clearcoatSpecularIndirect += clearcoatRadiance * EnvironmentBRDF( geometryClearcoatNormal, geometryViewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );
	#endif
	#ifdef USE_SHEEN
		sheenSpecularIndirect += irradiance * material.sheenColor * IBLSheenBRDF( geometryNormal, geometryViewDir, material.sheenRoughness );
	#endif
	vec3 singleScattering = vec3( 0.0 );
	vec3 multiScattering = vec3( 0.0 );
	vec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;
	#ifdef USE_IRIDESCENCE
		computeMultiscatteringIridescence( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.iridescence, material.iridescenceFresnel, material.roughness, singleScattering, multiScattering );
	#else
		computeMultiscattering( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );
	#endif
	vec3 totalScattering = singleScattering + multiScattering;
	vec3 diffuse = material.diffuseColor * ( 1.0 - max( max( totalScattering.r, totalScattering.g ), totalScattering.b ) );
	reflectedLight.indirectSpecular += radiance * singleScattering;
	reflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;
	reflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;
}
#define RE_Direct				RE_Direct_Physical
#define RE_Direct_RectArea		RE_Direct_RectArea_Physical
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Physical
#define RE_IndirectSpecular		RE_IndirectSpecular_Physical
float computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {
	return saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );
}`, WF = `
vec3 geometryPosition = - vViewPosition;
vec3 geometryNormal = normal;
vec3 geometryViewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );
vec3 geometryClearcoatNormal = vec3( 0.0 );
#ifdef USE_CLEARCOAT
	geometryClearcoatNormal = clearcoatNormal;
#endif
#ifdef USE_IRIDESCENCE
	float dotNVi = saturate( dot( normal, geometryViewDir ) );
	if ( material.iridescenceThickness == 0.0 ) {
		material.iridescence = 0.0;
	} else {
		material.iridescence = saturate( material.iridescence );
	}
	if ( material.iridescence > 0.0 ) {
		material.iridescenceFresnel = evalIridescence( 1.0, material.iridescenceIOR, dotNVi, material.iridescenceThickness, material.specularColor );
		material.iridescenceF0 = Schlick_to_F0( material.iridescenceFresnel, 1.0, dotNVi );
	}
#endif
IncidentLight directLight;
#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )
	PointLight pointLight;
	#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0
	PointLightShadow pointLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {
		pointLight = pointLights[ i ];
		getPointLightInfo( pointLight, geometryPosition, directLight );
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )
		pointLightShadow = pointLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowIntensity, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;
		#endif
		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )
	SpotLight spotLight;
	vec4 spotColor;
	vec3 spotLightCoord;
	bool inSpotLightMap;
	#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0
	SpotLightShadow spotLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {
		spotLight = spotLights[ i ];
		getSpotLightInfo( spotLight, geometryPosition, directLight );
		#if ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )
		#define SPOT_LIGHT_MAP_INDEX UNROLLED_LOOP_INDEX
		#elif ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
		#define SPOT_LIGHT_MAP_INDEX NUM_SPOT_LIGHT_MAPS
		#else
		#define SPOT_LIGHT_MAP_INDEX ( UNROLLED_LOOP_INDEX - NUM_SPOT_LIGHT_SHADOWS + NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )
		#endif
		#if ( SPOT_LIGHT_MAP_INDEX < NUM_SPOT_LIGHT_MAPS )
			spotLightCoord = vSpotLightCoord[ i ].xyz / vSpotLightCoord[ i ].w;
			inSpotLightMap = all( lessThan( abs( spotLightCoord * 2. - 1. ), vec3( 1.0 ) ) );
			spotColor = texture2D( spotLightMap[ SPOT_LIGHT_MAP_INDEX ], spotLightCoord.xy );
			directLight.color = inSpotLightMap ? directLight.color * spotColor.rgb : directLight.color;
		#endif
		#undef SPOT_LIGHT_MAP_INDEX
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
		spotLightShadow = spotLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowIntensity, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;
		#endif
		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )
	DirectionalLight directionalLight;
	#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0
	DirectionalLightShadow directionalLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {
		directionalLight = directionalLights[ i ];
		getDirectionalLightInfo( directionalLight, directLight );
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )
		directionalLightShadow = directionalLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowIntensity, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;
		#endif
		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )
	RectAreaLight rectAreaLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {
		rectAreaLight = rectAreaLights[ i ];
		RE_Direct_RectArea( rectAreaLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if defined( RE_IndirectDiffuse )
	vec3 iblIrradiance = vec3( 0.0 );
	vec3 irradiance = getAmbientLightIrradiance( ambientLightColor );
	#if defined( USE_LIGHT_PROBES )
		irradiance += getLightProbeIrradiance( lightProbe, geometryNormal );
	#endif
	#if ( NUM_HEMI_LIGHTS > 0 )
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {
			irradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometryNormal );
		}
		#pragma unroll_loop_end
	#endif
#endif
#if defined( RE_IndirectSpecular )
	vec3 radiance = vec3( 0.0 );
	vec3 clearcoatRadiance = vec3( 0.0 );
#endif`, jF = `#if defined( RE_IndirectDiffuse )
	#ifdef USE_LIGHTMAP
		vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );
		vec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;
		irradiance += lightMapIrradiance;
	#endif
	#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )
		iblIrradiance += getIBLIrradiance( geometryNormal );
	#endif
#endif
#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )
	#ifdef USE_ANISOTROPY
		radiance += getIBLAnisotropyRadiance( geometryViewDir, geometryNormal, material.roughness, material.anisotropyB, material.anisotropy );
	#else
		radiance += getIBLRadiance( geometryViewDir, geometryNormal, material.roughness );
	#endif
	#ifdef USE_CLEARCOAT
		clearcoatRadiance += getIBLRadiance( geometryViewDir, geometryClearcoatNormal, material.clearcoatRoughness );
	#endif
#endif`, XF = `#if defined( RE_IndirectDiffuse )
	RE_IndirectDiffuse( irradiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
#endif
#if defined( RE_IndirectSpecular )
	RE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
#endif`, $F = `#if defined( USE_LOGDEPTHBUF )
	gl_FragDepth = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;
#endif`, qF = `#if defined( USE_LOGDEPTHBUF )
	uniform float logDepthBufFC;
	varying float vFragDepth;
	varying float vIsPerspective;
#endif`, YF = `#ifdef USE_LOGDEPTHBUF
	varying float vFragDepth;
	varying float vIsPerspective;
#endif`, KF = `#ifdef USE_LOGDEPTHBUF
	vFragDepth = 1.0 + gl_Position.w;
	vIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );
#endif`, JF = `#ifdef USE_MAP
	vec4 sampledDiffuseColor = texture2D( map, vMapUv );
	#ifdef DECODE_VIDEO_TEXTURE
		sampledDiffuseColor = sRGBTransferEOTF( sampledDiffuseColor );
	#endif
	diffuseColor *= sampledDiffuseColor;
#endif`, QF = `#ifdef USE_MAP
	uniform sampler2D map;
#endif`, ZF = `#if defined( USE_MAP ) || defined( USE_ALPHAMAP )
	#if defined( USE_POINTS_UV )
		vec2 uv = vUv;
	#else
		vec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;
	#endif
#endif
#ifdef USE_MAP
	diffuseColor *= texture2D( map, uv );
#endif
#ifdef USE_ALPHAMAP
	diffuseColor.a *= texture2D( alphaMap, uv ).g;
#endif`, eO = `#if defined( USE_POINTS_UV )
	varying vec2 vUv;
#else
	#if defined( USE_MAP ) || defined( USE_ALPHAMAP )
		uniform mat3 uvTransform;
	#endif
#endif
#ifdef USE_MAP
	uniform sampler2D map;
#endif
#ifdef USE_ALPHAMAP
	uniform sampler2D alphaMap;
#endif`, tO = `float metalnessFactor = metalness;
#ifdef USE_METALNESSMAP
	vec4 texelMetalness = texture2D( metalnessMap, vMetalnessMapUv );
	metalnessFactor *= texelMetalness.b;
#endif`, nO = `#ifdef USE_METALNESSMAP
	uniform sampler2D metalnessMap;
#endif`, iO = `#ifdef USE_INSTANCING_MORPH
	float morphTargetInfluences[ MORPHTARGETS_COUNT ];
	float morphTargetBaseInfluence = texelFetch( morphTexture, ivec2( 0, gl_InstanceID ), 0 ).r;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		morphTargetInfluences[i] =  texelFetch( morphTexture, ivec2( i + 1, gl_InstanceID ), 0 ).r;
	}
#endif`, rO = `#if defined( USE_MORPHCOLORS )
	vColor *= morphTargetBaseInfluence;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		#if defined( USE_COLOR_ALPHA )
			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ) * morphTargetInfluences[ i ];
		#elif defined( USE_COLOR )
			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ).rgb * morphTargetInfluences[ i ];
		#endif
	}
#endif`, sO = `#ifdef USE_MORPHNORMALS
	objectNormal *= morphTargetBaseInfluence;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		if ( morphTargetInfluences[ i ] != 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1 ).xyz * morphTargetInfluences[ i ];
	}
#endif`, oO = `#ifdef USE_MORPHTARGETS
	#ifndef USE_INSTANCING_MORPH
		uniform float morphTargetBaseInfluence;
		uniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];
	#endif
	uniform sampler2DArray morphTargetsTexture;
	uniform ivec2 morphTargetsTextureSize;
	vec4 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset ) {
		int texelIndex = vertexIndex * MORPHTARGETS_TEXTURE_STRIDE + offset;
		int y = texelIndex / morphTargetsTextureSize.x;
		int x = texelIndex - y * morphTargetsTextureSize.x;
		ivec3 morphUV = ivec3( x, y, morphTargetIndex );
		return texelFetch( morphTargetsTexture, morphUV, 0 );
	}
#endif`, aO = `#ifdef USE_MORPHTARGETS
	transformed *= morphTargetBaseInfluence;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		if ( morphTargetInfluences[ i ] != 0.0 ) transformed += getMorph( gl_VertexID, i, 0 ).xyz * morphTargetInfluences[ i ];
	}
#endif`, lO = `float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;
#ifdef FLAT_SHADED
	vec3 fdx = dFdx( vViewPosition );
	vec3 fdy = dFdy( vViewPosition );
	vec3 normal = normalize( cross( fdx, fdy ) );
#else
	vec3 normal = normalize( vNormal );
	#ifdef DOUBLE_SIDED
		normal *= faceDirection;
	#endif
#endif
#if defined( USE_NORMALMAP_TANGENTSPACE ) || defined( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY )
	#ifdef USE_TANGENT
		mat3 tbn = mat3( normalize( vTangent ), normalize( vBitangent ), normal );
	#else
		mat3 tbn = getTangentFrame( - vViewPosition, normal,
		#if defined( USE_NORMALMAP )
			vNormalMapUv
		#elif defined( USE_CLEARCOAT_NORMALMAP )
			vClearcoatNormalMapUv
		#else
			vUv
		#endif
		);
	#endif
	#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )
		tbn[0] *= faceDirection;
		tbn[1] *= faceDirection;
	#endif
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	#ifdef USE_TANGENT
		mat3 tbn2 = mat3( normalize( vTangent ), normalize( vBitangent ), normal );
	#else
		mat3 tbn2 = getTangentFrame( - vViewPosition, normal, vClearcoatNormalMapUv );
	#endif
	#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )
		tbn2[0] *= faceDirection;
		tbn2[1] *= faceDirection;
	#endif
#endif
vec3 nonPerturbedNormal = normal;`, cO = `#ifdef USE_NORMALMAP_OBJECTSPACE
	normal = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;
	#ifdef FLIP_SIDED
		normal = - normal;
	#endif
	#ifdef DOUBLE_SIDED
		normal = normal * faceDirection;
	#endif
	normal = normalize( normalMatrix * normal );
#elif defined( USE_NORMALMAP_TANGENTSPACE )
	vec3 mapN = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;
	mapN.xy *= normalScale;
	normal = normalize( tbn * mapN );
#elif defined( USE_BUMPMAP )
	normal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );
#endif`, uO = `#ifndef FLAT_SHADED
	varying vec3 vNormal;
	#ifdef USE_TANGENT
		varying vec3 vTangent;
		varying vec3 vBitangent;
	#endif
#endif`, fO = `#ifndef FLAT_SHADED
	varying vec3 vNormal;
	#ifdef USE_TANGENT
		varying vec3 vTangent;
		varying vec3 vBitangent;
	#endif
#endif`, hO = `#ifndef FLAT_SHADED
	vNormal = normalize( transformedNormal );
	#ifdef USE_TANGENT
		vTangent = normalize( transformedTangent );
		vBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );
	#endif
#endif`, dO = `#ifdef USE_NORMALMAP
	uniform sampler2D normalMap;
	uniform vec2 normalScale;
#endif
#ifdef USE_NORMALMAP_OBJECTSPACE
	uniform mat3 normalMatrix;
#endif
#if ! defined ( USE_TANGENT ) && ( defined ( USE_NORMALMAP_TANGENTSPACE ) || defined ( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY ) )
	mat3 getTangentFrame( vec3 eye_pos, vec3 surf_norm, vec2 uv ) {
		vec3 q0 = dFdx( eye_pos.xyz );
		vec3 q1 = dFdy( eye_pos.xyz );
		vec2 st0 = dFdx( uv.st );
		vec2 st1 = dFdy( uv.st );
		vec3 N = surf_norm;
		vec3 q1perp = cross( q1, N );
		vec3 q0perp = cross( N, q0 );
		vec3 T = q1perp * st0.x + q0perp * st1.x;
		vec3 B = q1perp * st0.y + q0perp * st1.y;
		float det = max( dot( T, T ), dot( B, B ) );
		float scale = ( det == 0.0 ) ? 0.0 : inversesqrt( det );
		return mat3( T * scale, B * scale, N );
	}
#endif`, pO = `#ifdef USE_CLEARCOAT
	vec3 clearcoatNormal = nonPerturbedNormal;
#endif`, mO = `#ifdef USE_CLEARCOAT_NORMALMAP
	vec3 clearcoatMapN = texture2D( clearcoatNormalMap, vClearcoatNormalMapUv ).xyz * 2.0 - 1.0;
	clearcoatMapN.xy *= clearcoatNormalScale;
	clearcoatNormal = normalize( tbn2 * clearcoatMapN );
#endif`, gO = `#ifdef USE_CLEARCOATMAP
	uniform sampler2D clearcoatMap;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	uniform sampler2D clearcoatNormalMap;
	uniform vec2 clearcoatNormalScale;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	uniform sampler2D clearcoatRoughnessMap;
#endif`, _O = `#ifdef USE_IRIDESCENCEMAP
	uniform sampler2D iridescenceMap;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	uniform sampler2D iridescenceThicknessMap;
#endif`, bO = `#ifdef OPAQUE
diffuseColor.a = 1.0;
#endif
#ifdef USE_TRANSMISSION
diffuseColor.a *= material.transmissionAlpha;
#endif
gl_FragColor = vec4( outgoingLight, diffuseColor.a );`, vO = `vec3 packNormalToRGB( const in vec3 normal ) {
	return normalize( normal ) * 0.5 + 0.5;
}
vec3 unpackRGBToNormal( const in vec3 rgb ) {
	return 2.0 * rgb.xyz - 1.0;
}
const float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;const float ShiftRight8 = 1. / 256.;
const float Inv255 = 1. / 255.;
const vec4 PackFactors = vec4( 1.0, 256.0, 256.0 * 256.0, 256.0 * 256.0 * 256.0 );
const vec2 UnpackFactors2 = vec2( UnpackDownscale, 1.0 / PackFactors.g );
const vec3 UnpackFactors3 = vec3( UnpackDownscale / PackFactors.rg, 1.0 / PackFactors.b );
const vec4 UnpackFactors4 = vec4( UnpackDownscale / PackFactors.rgb, 1.0 / PackFactors.a );
vec4 packDepthToRGBA( const in float v ) {
	if( v <= 0.0 )
		return vec4( 0., 0., 0., 0. );
	if( v >= 1.0 )
		return vec4( 1., 1., 1., 1. );
	float vuf;
	float af = modf( v * PackFactors.a, vuf );
	float bf = modf( vuf * ShiftRight8, vuf );
	float gf = modf( vuf * ShiftRight8, vuf );
	return vec4( vuf * Inv255, gf * PackUpscale, bf * PackUpscale, af );
}
vec3 packDepthToRGB( const in float v ) {
	if( v <= 0.0 )
		return vec3( 0., 0., 0. );
	if( v >= 1.0 )
		return vec3( 1., 1., 1. );
	float vuf;
	float bf = modf( v * PackFactors.b, vuf );
	float gf = modf( vuf * ShiftRight8, vuf );
	return vec3( vuf * Inv255, gf * PackUpscale, bf );
}
vec2 packDepthToRG( const in float v ) {
	if( v <= 0.0 )
		return vec2( 0., 0. );
	if( v >= 1.0 )
		return vec2( 1., 1. );
	float vuf;
	float gf = modf( v * 256., vuf );
	return vec2( vuf * Inv255, gf );
}
float unpackRGBAToDepth( const in vec4 v ) {
	return dot( v, UnpackFactors4 );
}
float unpackRGBToDepth( const in vec3 v ) {
	return dot( v, UnpackFactors3 );
}
float unpackRGToDepth( const in vec2 v ) {
	return v.r * UnpackFactors2.r + v.g * UnpackFactors2.g;
}
vec4 pack2HalfToRGBA( const in vec2 v ) {
	vec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );
	return vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );
}
vec2 unpackRGBATo2Half( const in vec4 v ) {
	return vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );
}
float viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {
	return ( viewZ + near ) / ( near - far );
}
float orthographicDepthToViewZ( const in float depth, const in float near, const in float far ) {
	return depth * ( near - far ) - near;
}
float viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {
	return ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );
}
float perspectiveDepthToViewZ( const in float depth, const in float near, const in float far ) {
	return ( near * far ) / ( ( far - near ) * depth - far );
}`, yO = `#ifdef PREMULTIPLIED_ALPHA
	gl_FragColor.rgb *= gl_FragColor.a;
#endif`, xO = `vec4 mvPosition = vec4( transformed, 1.0 );
#ifdef USE_BATCHING
	mvPosition = batchingMatrix * mvPosition;
#endif
#ifdef USE_INSTANCING
	mvPosition = instanceMatrix * mvPosition;
#endif
mvPosition = modelViewMatrix * mvPosition;
gl_Position = projectionMatrix * mvPosition;`, SO = `#ifdef DITHERING
	gl_FragColor.rgb = dithering( gl_FragColor.rgb );
#endif`, EO = `#ifdef DITHERING
	vec3 dithering( vec3 color ) {
		float grid_position = rand( gl_FragCoord.xy );
		vec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );
		dither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );
		return color + dither_shift_RGB;
	}
#endif`, wO = `float roughnessFactor = roughness;
#ifdef USE_ROUGHNESSMAP
	vec4 texelRoughness = texture2D( roughnessMap, vRoughnessMapUv );
	roughnessFactor *= texelRoughness.g;
#endif`, MO = `#ifdef USE_ROUGHNESSMAP
	uniform sampler2D roughnessMap;
#endif`, TO = `#if NUM_SPOT_LIGHT_COORDS > 0
	varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];
#endif
#if NUM_SPOT_LIGHT_MAPS > 0
	uniform sampler2D spotLightMap[ NUM_SPOT_LIGHT_MAPS ];
#endif
#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
		uniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];
		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];
		struct DirectionalLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
		uniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];
		struct SpotLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		uniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];
		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];
		struct PointLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
			float shadowCameraNear;
			float shadowCameraFar;
		};
		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];
	#endif
	float texture2DCompare( sampler2D depths, vec2 uv, float compare ) {
		return step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );
	}
	vec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {
		return unpackRGBATo2Half( texture2D( shadow, uv ) );
	}
	float VSMShadow (sampler2D shadow, vec2 uv, float compare ){
		float occlusion = 1.0;
		vec2 distribution = texture2DDistribution( shadow, uv );
		float hard_shadow = step( compare , distribution.x );
		if (hard_shadow != 1.0 ) {
			float distance = compare - distribution.x ;
			float variance = max( 0.00000, distribution.y * distribution.y );
			float softness_probability = variance / (variance + distance * distance );			softness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );			occlusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );
		}
		return occlusion;
	}
	float getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowIntensity, float shadowBias, float shadowRadius, vec4 shadowCoord ) {
		float shadow = 1.0;
		shadowCoord.xyz /= shadowCoord.w;
		shadowCoord.z += shadowBias;
		bool inFrustum = shadowCoord.x >= 0.0 && shadowCoord.x <= 1.0 && shadowCoord.y >= 0.0 && shadowCoord.y <= 1.0;
		bool frustumTest = inFrustum && shadowCoord.z <= 1.0;
		if ( frustumTest ) {
		#if defined( SHADOWMAP_TYPE_PCF )
			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;
			float dx0 = - texelSize.x * shadowRadius;
			float dy0 = - texelSize.y * shadowRadius;
			float dx1 = + texelSize.x * shadowRadius;
			float dy1 = + texelSize.y * shadowRadius;
			float dx2 = dx0 / 2.0;
			float dy2 = dy0 / 2.0;
			float dx3 = dx1 / 2.0;
			float dy3 = dy1 / 2.0;
			shadow = (
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )
			) * ( 1.0 / 17.0 );
		#elif defined( SHADOWMAP_TYPE_PCF_SOFT )
			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;
			float dx = texelSize.x;
			float dy = texelSize.y;
			vec2 uv = shadowCoord.xy;
			vec2 f = fract( uv * shadowMapSize + 0.5 );
			uv -= f * texelSize;
			shadow = (
				texture2DCompare( shadowMap, uv, shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +
				mix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),
					 f.x ) +
				mix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),
					 f.x ) +
				mix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),
					 f.y ) +
				mix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),
					 f.y ) +
				mix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ),
						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),
						  f.x ),
					 mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ),
						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),
						  f.x ),
					 f.y )
			) * ( 1.0 / 9.0 );
		#elif defined( SHADOWMAP_TYPE_VSM )
			shadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );
		#else
			shadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );
		#endif
		}
		return mix( 1.0, shadow, shadowIntensity );
	}
	vec2 cubeToUV( vec3 v, float texelSizeY ) {
		vec3 absV = abs( v );
		float scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );
		absV *= scaleToCube;
		v *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );
		vec2 planar = v.xy;
		float almostATexel = 1.5 * texelSizeY;
		float almostOne = 1.0 - almostATexel;
		if ( absV.z >= almostOne ) {
			if ( v.z > 0.0 )
				planar.x = 4.0 - v.x;
		} else if ( absV.x >= almostOne ) {
			float signX = sign( v.x );
			planar.x = v.z * signX + 2.0 * signX;
		} else if ( absV.y >= almostOne ) {
			float signY = sign( v.y );
			planar.x = v.x + 2.0 * signY + 2.0;
			planar.y = v.z * signY - 2.0;
		}
		return vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );
	}
	float getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowIntensity, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {
		float shadow = 1.0;
		vec3 lightToPosition = shadowCoord.xyz;
		
		float lightToPositionLength = length( lightToPosition );
		if ( lightToPositionLength - shadowCameraFar <= 0.0 && lightToPositionLength - shadowCameraNear >= 0.0 ) {
			float dp = ( lightToPositionLength - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );			dp += shadowBias;
			vec3 bd3D = normalize( lightToPosition );
			vec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );
			#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )
				vec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;
				shadow = (
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )
				) * ( 1.0 / 9.0 );
			#else
				shadow = texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );
			#endif
		}
		return mix( 1.0, shadow, shadowIntensity );
	}
#endif`, CO = `#if NUM_SPOT_LIGHT_COORDS > 0
	uniform mat4 spotLightMatrix[ NUM_SPOT_LIGHT_COORDS ];
	varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];
#endif
#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
		uniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];
		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];
		struct DirectionalLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
		struct SpotLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		uniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];
		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];
		struct PointLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
			float shadowCameraNear;
			float shadowCameraFar;
		};
		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];
	#endif
#endif`, AO = `#if ( defined( USE_SHADOWMAP ) && ( NUM_DIR_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0 ) ) || ( NUM_SPOT_LIGHT_COORDS > 0 )
	vec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );
	vec4 shadowWorldPosition;
#endif
#if defined( USE_SHADOWMAP )
	#if NUM_DIR_LIGHT_SHADOWS > 0
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {
			shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );
			vDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;
		}
		#pragma unroll_loop_end
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {
			shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );
			vPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;
		}
		#pragma unroll_loop_end
	#endif
#endif
#if NUM_SPOT_LIGHT_COORDS > 0
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHT_COORDS; i ++ ) {
		shadowWorldPosition = worldPosition;
		#if ( defined( USE_SHADOWMAP ) && UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
			shadowWorldPosition.xyz += shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias;
		#endif
		vSpotLightCoord[ i ] = spotLightMatrix[ i ] * shadowWorldPosition;
	}
	#pragma unroll_loop_end
#endif`, DO = `float getShadowMask() {
	float shadow = 1.0;
	#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
	DirectionalLightShadow directionalLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {
		directionalLight = directionalLightShadows[ i ];
		shadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowIntensity, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
	SpotLightShadow spotLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {
		spotLight = spotLightShadows[ i ];
		shadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowIntensity, spotLight.shadowBias, spotLight.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
	PointLightShadow pointLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {
		pointLight = pointLightShadows[ i ];
		shadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowIntensity, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#endif
	return shadow;
}`, RO = `#ifdef USE_SKINNING
	mat4 boneMatX = getBoneMatrix( skinIndex.x );
	mat4 boneMatY = getBoneMatrix( skinIndex.y );
	mat4 boneMatZ = getBoneMatrix( skinIndex.z );
	mat4 boneMatW = getBoneMatrix( skinIndex.w );
#endif`, PO = `#ifdef USE_SKINNING
	uniform mat4 bindMatrix;
	uniform mat4 bindMatrixInverse;
	uniform highp sampler2D boneTexture;
	mat4 getBoneMatrix( const in float i ) {
		int size = textureSize( boneTexture, 0 ).x;
		int j = int( i ) * 4;
		int x = j % size;
		int y = j / size;
		vec4 v1 = texelFetch( boneTexture, ivec2( x, y ), 0 );
		vec4 v2 = texelFetch( boneTexture, ivec2( x + 1, y ), 0 );
		vec4 v3 = texelFetch( boneTexture, ivec2( x + 2, y ), 0 );
		vec4 v4 = texelFetch( boneTexture, ivec2( x + 3, y ), 0 );
		return mat4( v1, v2, v3, v4 );
	}
#endif`, LO = `#ifdef USE_SKINNING
	vec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );
	vec4 skinned = vec4( 0.0 );
	skinned += boneMatX * skinVertex * skinWeight.x;
	skinned += boneMatY * skinVertex * skinWeight.y;
	skinned += boneMatZ * skinVertex * skinWeight.z;
	skinned += boneMatW * skinVertex * skinWeight.w;
	transformed = ( bindMatrixInverse * skinned ).xyz;
#endif`, IO = `#ifdef USE_SKINNING
	mat4 skinMatrix = mat4( 0.0 );
	skinMatrix += skinWeight.x * boneMatX;
	skinMatrix += skinWeight.y * boneMatY;
	skinMatrix += skinWeight.z * boneMatZ;
	skinMatrix += skinWeight.w * boneMatW;
	skinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;
	objectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;
	#ifdef USE_TANGENT
		objectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;
	#endif
#endif`, FO = `float specularStrength;
#ifdef USE_SPECULARMAP
	vec4 texelSpecular = texture2D( specularMap, vSpecularMapUv );
	specularStrength = texelSpecular.r;
#else
	specularStrength = 1.0;
#endif`, OO = `#ifdef USE_SPECULARMAP
	uniform sampler2D specularMap;
#endif`, kO = `#if defined( TONE_MAPPING )
	gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );
#endif`, NO = `#ifndef saturate
#define saturate( a ) clamp( a, 0.0, 1.0 )
#endif
uniform float toneMappingExposure;
vec3 LinearToneMapping( vec3 color ) {
	return saturate( toneMappingExposure * color );
}
vec3 ReinhardToneMapping( vec3 color ) {
	color *= toneMappingExposure;
	return saturate( color / ( vec3( 1.0 ) + color ) );
}
vec3 CineonToneMapping( vec3 color ) {
	color *= toneMappingExposure;
	color = max( vec3( 0.0 ), color - 0.004 );
	return pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );
}
vec3 RRTAndODTFit( vec3 v ) {
	vec3 a = v * ( v + 0.0245786 ) - 0.000090537;
	vec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;
	return a / b;
}
vec3 ACESFilmicToneMapping( vec3 color ) {
	const mat3 ACESInputMat = mat3(
		vec3( 0.59719, 0.07600, 0.02840 ),		vec3( 0.35458, 0.90834, 0.13383 ),
		vec3( 0.04823, 0.01566, 0.83777 )
	);
	const mat3 ACESOutputMat = mat3(
		vec3(  1.60475, -0.10208, -0.00327 ),		vec3( -0.53108,  1.10813, -0.07276 ),
		vec3( -0.07367, -0.00605,  1.07602 )
	);
	color *= toneMappingExposure / 0.6;
	color = ACESInputMat * color;
	color = RRTAndODTFit( color );
	color = ACESOutputMat * color;
	return saturate( color );
}
const mat3 LINEAR_REC2020_TO_LINEAR_SRGB = mat3(
	vec3( 1.6605, - 0.1246, - 0.0182 ),
	vec3( - 0.5876, 1.1329, - 0.1006 ),
	vec3( - 0.0728, - 0.0083, 1.1187 )
);
const mat3 LINEAR_SRGB_TO_LINEAR_REC2020 = mat3(
	vec3( 0.6274, 0.0691, 0.0164 ),
	vec3( 0.3293, 0.9195, 0.0880 ),
	vec3( 0.0433, 0.0113, 0.8956 )
);
vec3 agxDefaultContrastApprox( vec3 x ) {
	vec3 x2 = x * x;
	vec3 x4 = x2 * x2;
	return + 15.5 * x4 * x2
		- 40.14 * x4 * x
		+ 31.96 * x4
		- 6.868 * x2 * x
		+ 0.4298 * x2
		+ 0.1191 * x
		- 0.00232;
}
vec3 AgXToneMapping( vec3 color ) {
	const mat3 AgXInsetMatrix = mat3(
		vec3( 0.856627153315983, 0.137318972929847, 0.11189821299995 ),
		vec3( 0.0951212405381588, 0.761241990602591, 0.0767994186031903 ),
		vec3( 0.0482516061458583, 0.101439036467562, 0.811302368396859 )
	);
	const mat3 AgXOutsetMatrix = mat3(
		vec3( 1.1271005818144368, - 0.1413297634984383, - 0.14132976349843826 ),
		vec3( - 0.11060664309660323, 1.157823702216272, - 0.11060664309660294 ),
		vec3( - 0.016493938717834573, - 0.016493938717834257, 1.2519364065950405 )
	);
	const float AgxMinEv = - 12.47393;	const float AgxMaxEv = 4.026069;
	color *= toneMappingExposure;
	color = LINEAR_SRGB_TO_LINEAR_REC2020 * color;
	color = AgXInsetMatrix * color;
	color = max( color, 1e-10 );	color = log2( color );
	color = ( color - AgxMinEv ) / ( AgxMaxEv - AgxMinEv );
	color = clamp( color, 0.0, 1.0 );
	color = agxDefaultContrastApprox( color );
	color = AgXOutsetMatrix * color;
	color = pow( max( vec3( 0.0 ), color ), vec3( 2.2 ) );
	color = LINEAR_REC2020_TO_LINEAR_SRGB * color;
	color = clamp( color, 0.0, 1.0 );
	return color;
}
vec3 NeutralToneMapping( vec3 color ) {
	const float StartCompression = 0.8 - 0.04;
	const float Desaturation = 0.15;
	color *= toneMappingExposure;
	float x = min( color.r, min( color.g, color.b ) );
	float offset = x < 0.08 ? x - 6.25 * x * x : 0.04;
	color -= offset;
	float peak = max( color.r, max( color.g, color.b ) );
	if ( peak < StartCompression ) return color;
	float d = 1. - StartCompression;
	float newPeak = 1. - d * d / ( peak + d - StartCompression );
	color *= newPeak / peak;
	float g = 1. - 1. / ( Desaturation * ( peak - newPeak ) + 1. );
	return mix( color, vec3( newPeak ), g );
}
vec3 CustomToneMapping( vec3 color ) { return color; }`, UO = `#ifdef USE_TRANSMISSION
	material.transmission = transmission;
	material.transmissionAlpha = 1.0;
	material.thickness = thickness;
	material.attenuationDistance = attenuationDistance;
	material.attenuationColor = attenuationColor;
	#ifdef USE_TRANSMISSIONMAP
		material.transmission *= texture2D( transmissionMap, vTransmissionMapUv ).r;
	#endif
	#ifdef USE_THICKNESSMAP
		material.thickness *= texture2D( thicknessMap, vThicknessMapUv ).g;
	#endif
	vec3 pos = vWorldPosition;
	vec3 v = normalize( cameraPosition - pos );
	vec3 n = inverseTransformDirection( normal, viewMatrix );
	vec4 transmitted = getIBLVolumeRefraction(
		n, v, material.roughness, material.diffuseColor, material.specularColor, material.specularF90,
		pos, modelMatrix, viewMatrix, projectionMatrix, material.dispersion, material.ior, material.thickness,
		material.attenuationColor, material.attenuationDistance );
	material.transmissionAlpha = mix( material.transmissionAlpha, transmitted.a, material.transmission );
	totalDiffuse = mix( totalDiffuse, transmitted.rgb, material.transmission );
#endif`, BO = `#ifdef USE_TRANSMISSION
	uniform float transmission;
	uniform float thickness;
	uniform float attenuationDistance;
	uniform vec3 attenuationColor;
	#ifdef USE_TRANSMISSIONMAP
		uniform sampler2D transmissionMap;
	#endif
	#ifdef USE_THICKNESSMAP
		uniform sampler2D thicknessMap;
	#endif
	uniform vec2 transmissionSamplerSize;
	uniform sampler2D transmissionSamplerMap;
	uniform mat4 modelMatrix;
	uniform mat4 projectionMatrix;
	varying vec3 vWorldPosition;
	float w0( float a ) {
		return ( 1.0 / 6.0 ) * ( a * ( a * ( - a + 3.0 ) - 3.0 ) + 1.0 );
	}
	float w1( float a ) {
		return ( 1.0 / 6.0 ) * ( a *  a * ( 3.0 * a - 6.0 ) + 4.0 );
	}
	float w2( float a ){
		return ( 1.0 / 6.0 ) * ( a * ( a * ( - 3.0 * a + 3.0 ) + 3.0 ) + 1.0 );
	}
	float w3( float a ) {
		return ( 1.0 / 6.0 ) * ( a * a * a );
	}
	float g0( float a ) {
		return w0( a ) + w1( a );
	}
	float g1( float a ) {
		return w2( a ) + w3( a );
	}
	float h0( float a ) {
		return - 1.0 + w1( a ) / ( w0( a ) + w1( a ) );
	}
	float h1( float a ) {
		return 1.0 + w3( a ) / ( w2( a ) + w3( a ) );
	}
	vec4 bicubic( sampler2D tex, vec2 uv, vec4 texelSize, float lod ) {
		uv = uv * texelSize.zw + 0.5;
		vec2 iuv = floor( uv );
		vec2 fuv = fract( uv );
		float g0x = g0( fuv.x );
		float g1x = g1( fuv.x );
		float h0x = h0( fuv.x );
		float h1x = h1( fuv.x );
		float h0y = h0( fuv.y );
		float h1y = h1( fuv.y );
		vec2 p0 = ( vec2( iuv.x + h0x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;
		vec2 p1 = ( vec2( iuv.x + h1x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;
		vec2 p2 = ( vec2( iuv.x + h0x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;
		vec2 p3 = ( vec2( iuv.x + h1x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;
		return g0( fuv.y ) * ( g0x * textureLod( tex, p0, lod ) + g1x * textureLod( tex, p1, lod ) ) +
			g1( fuv.y ) * ( g0x * textureLod( tex, p2, lod ) + g1x * textureLod( tex, p3, lod ) );
	}
	vec4 textureBicubic( sampler2D sampler, vec2 uv, float lod ) {
		vec2 fLodSize = vec2( textureSize( sampler, int( lod ) ) );
		vec2 cLodSize = vec2( textureSize( sampler, int( lod + 1.0 ) ) );
		vec2 fLodSizeInv = 1.0 / fLodSize;
		vec2 cLodSizeInv = 1.0 / cLodSize;
		vec4 fSample = bicubic( sampler, uv, vec4( fLodSizeInv, fLodSize ), floor( lod ) );
		vec4 cSample = bicubic( sampler, uv, vec4( cLodSizeInv, cLodSize ), ceil( lod ) );
		return mix( fSample, cSample, fract( lod ) );
	}
	vec3 getVolumeTransmissionRay( const in vec3 n, const in vec3 v, const in float thickness, const in float ior, const in mat4 modelMatrix ) {
		vec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );
		vec3 modelScale;
		modelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );
		modelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );
		modelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );
		return normalize( refractionVector ) * thickness * modelScale;
	}
	float applyIorToRoughness( const in float roughness, const in float ior ) {
		return roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );
	}
	vec4 getTransmissionSample( const in vec2 fragCoord, const in float roughness, const in float ior ) {
		float lod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );
		return textureBicubic( transmissionSamplerMap, fragCoord.xy, lod );
	}
	vec3 volumeAttenuation( const in float transmissionDistance, const in vec3 attenuationColor, const in float attenuationDistance ) {
		if ( isinf( attenuationDistance ) ) {
			return vec3( 1.0 );
		} else {
			vec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;
			vec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );			return transmittance;
		}
	}
	vec4 getIBLVolumeRefraction( const in vec3 n, const in vec3 v, const in float roughness, const in vec3 diffuseColor,
		const in vec3 specularColor, const in float specularF90, const in vec3 position, const in mat4 modelMatrix,
		const in mat4 viewMatrix, const in mat4 projMatrix, const in float dispersion, const in float ior, const in float thickness,
		const in vec3 attenuationColor, const in float attenuationDistance ) {
		vec4 transmittedLight;
		vec3 transmittance;
		#ifdef USE_DISPERSION
			float halfSpread = ( ior - 1.0 ) * 0.025 * dispersion;
			vec3 iors = vec3( ior - halfSpread, ior, ior + halfSpread );
			for ( int i = 0; i < 3; i ++ ) {
				vec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, iors[ i ], modelMatrix );
				vec3 refractedRayExit = position + transmissionRay;
				vec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );
				vec2 refractionCoords = ndcPos.xy / ndcPos.w;
				refractionCoords += 1.0;
				refractionCoords /= 2.0;
				vec4 transmissionSample = getTransmissionSample( refractionCoords, roughness, iors[ i ] );
				transmittedLight[ i ] = transmissionSample[ i ];
				transmittedLight.a += transmissionSample.a;
				transmittance[ i ] = diffuseColor[ i ] * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance )[ i ];
			}
			transmittedLight.a /= 3.0;
		#else
			vec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );
			vec3 refractedRayExit = position + transmissionRay;
			vec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );
			vec2 refractionCoords = ndcPos.xy / ndcPos.w;
			refractionCoords += 1.0;
			refractionCoords /= 2.0;
			transmittedLight = getTransmissionSample( refractionCoords, roughness, ior );
			transmittance = diffuseColor * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance );
		#endif
		vec3 attenuatedColor = transmittance * transmittedLight.rgb;
		vec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );
		float transmittanceFactor = ( transmittance.r + transmittance.g + transmittance.b ) / 3.0;
		return vec4( ( 1.0 - F ) * attenuatedColor, 1.0 - ( 1.0 - transmittedLight.a ) * transmittanceFactor );
	}
#endif`, HO = `#if defined( USE_UV ) || defined( USE_ANISOTROPY )
	varying vec2 vUv;
#endif
#ifdef USE_MAP
	varying vec2 vMapUv;
#endif
#ifdef USE_ALPHAMAP
	varying vec2 vAlphaMapUv;
#endif
#ifdef USE_LIGHTMAP
	varying vec2 vLightMapUv;
#endif
#ifdef USE_AOMAP
	varying vec2 vAoMapUv;
#endif
#ifdef USE_BUMPMAP
	varying vec2 vBumpMapUv;
#endif
#ifdef USE_NORMALMAP
	varying vec2 vNormalMapUv;
#endif
#ifdef USE_EMISSIVEMAP
	varying vec2 vEmissiveMapUv;
#endif
#ifdef USE_METALNESSMAP
	varying vec2 vMetalnessMapUv;
#endif
#ifdef USE_ROUGHNESSMAP
	varying vec2 vRoughnessMapUv;
#endif
#ifdef USE_ANISOTROPYMAP
	varying vec2 vAnisotropyMapUv;
#endif
#ifdef USE_CLEARCOATMAP
	varying vec2 vClearcoatMapUv;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	varying vec2 vClearcoatNormalMapUv;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	varying vec2 vClearcoatRoughnessMapUv;
#endif
#ifdef USE_IRIDESCENCEMAP
	varying vec2 vIridescenceMapUv;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	varying vec2 vIridescenceThicknessMapUv;
#endif
#ifdef USE_SHEEN_COLORMAP
	varying vec2 vSheenColorMapUv;
#endif
#ifdef USE_SHEEN_ROUGHNESSMAP
	varying vec2 vSheenRoughnessMapUv;
#endif
#ifdef USE_SPECULARMAP
	varying vec2 vSpecularMapUv;
#endif
#ifdef USE_SPECULAR_COLORMAP
	varying vec2 vSpecularColorMapUv;
#endif
#ifdef USE_SPECULAR_INTENSITYMAP
	varying vec2 vSpecularIntensityMapUv;
#endif
#ifdef USE_TRANSMISSIONMAP
	uniform mat3 transmissionMapTransform;
	varying vec2 vTransmissionMapUv;
#endif
#ifdef USE_THICKNESSMAP
	uniform mat3 thicknessMapTransform;
	varying vec2 vThicknessMapUv;
#endif`, zO = `#if defined( USE_UV ) || defined( USE_ANISOTROPY )
	varying vec2 vUv;
#endif
#ifdef USE_MAP
	uniform mat3 mapTransform;
	varying vec2 vMapUv;
#endif
#ifdef USE_ALPHAMAP
	uniform mat3 alphaMapTransform;
	varying vec2 vAlphaMapUv;
#endif
#ifdef USE_LIGHTMAP
	uniform mat3 lightMapTransform;
	varying vec2 vLightMapUv;
#endif
#ifdef USE_AOMAP
	uniform mat3 aoMapTransform;
	varying vec2 vAoMapUv;
#endif
#ifdef USE_BUMPMAP
	uniform mat3 bumpMapTransform;
	varying vec2 vBumpMapUv;
#endif
#ifdef USE_NORMALMAP
	uniform mat3 normalMapTransform;
	varying vec2 vNormalMapUv;
#endif
#ifdef USE_DISPLACEMENTMAP
	uniform mat3 displacementMapTransform;
	varying vec2 vDisplacementMapUv;
#endif
#ifdef USE_EMISSIVEMAP
	uniform mat3 emissiveMapTransform;
	varying vec2 vEmissiveMapUv;
#endif
#ifdef USE_METALNESSMAP
	uniform mat3 metalnessMapTransform;
	varying vec2 vMetalnessMapUv;
#endif
#ifdef USE_ROUGHNESSMAP
	uniform mat3 roughnessMapTransform;
	varying vec2 vRoughnessMapUv;
#endif
#ifdef USE_ANISOTROPYMAP
	uniform mat3 anisotropyMapTransform;
	varying vec2 vAnisotropyMapUv;
#endif
#ifdef USE_CLEARCOATMAP
	uniform mat3 clearcoatMapTransform;
	varying vec2 vClearcoatMapUv;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	uniform mat3 clearcoatNormalMapTransform;
	varying vec2 vClearcoatNormalMapUv;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	uniform mat3 clearcoatRoughnessMapTransform;
	varying vec2 vClearcoatRoughnessMapUv;
#endif
#ifdef USE_SHEEN_COLORMAP
	uniform mat3 sheenColorMapTransform;
	varying vec2 vSheenColorMapUv;
#endif
#ifdef USE_SHEEN_ROUGHNESSMAP
	uniform mat3 sheenRoughnessMapTransform;
	varying vec2 vSheenRoughnessMapUv;
#endif
#ifdef USE_IRIDESCENCEMAP
	uniform mat3 iridescenceMapTransform;
	varying vec2 vIridescenceMapUv;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	uniform mat3 iridescenceThicknessMapTransform;
	varying vec2 vIridescenceThicknessMapUv;
#endif
#ifdef USE_SPECULARMAP
	uniform mat3 specularMapTransform;
	varying vec2 vSpecularMapUv;
#endif
#ifdef USE_SPECULAR_COLORMAP
	uniform mat3 specularColorMapTransform;
	varying vec2 vSpecularColorMapUv;
#endif
#ifdef USE_SPECULAR_INTENSITYMAP
	uniform mat3 specularIntensityMapTransform;
	varying vec2 vSpecularIntensityMapUv;
#endif
#ifdef USE_TRANSMISSIONMAP
	uniform mat3 transmissionMapTransform;
	varying vec2 vTransmissionMapUv;
#endif
#ifdef USE_THICKNESSMAP
	uniform mat3 thicknessMapTransform;
	varying vec2 vThicknessMapUv;
#endif`, VO = `#if defined( USE_UV ) || defined( USE_ANISOTROPY )
	vUv = vec3( uv, 1 ).xy;
#endif
#ifdef USE_MAP
	vMapUv = ( mapTransform * vec3( MAP_UV, 1 ) ).xy;
#endif
#ifdef USE_ALPHAMAP
	vAlphaMapUv = ( alphaMapTransform * vec3( ALPHAMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_LIGHTMAP
	vLightMapUv = ( lightMapTransform * vec3( LIGHTMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_AOMAP
	vAoMapUv = ( aoMapTransform * vec3( AOMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_BUMPMAP
	vBumpMapUv = ( bumpMapTransform * vec3( BUMPMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_NORMALMAP
	vNormalMapUv = ( normalMapTransform * vec3( NORMALMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_DISPLACEMENTMAP
	vDisplacementMapUv = ( displacementMapTransform * vec3( DISPLACEMENTMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_EMISSIVEMAP
	vEmissiveMapUv = ( emissiveMapTransform * vec3( EMISSIVEMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_METALNESSMAP
	vMetalnessMapUv = ( metalnessMapTransform * vec3( METALNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_ROUGHNESSMAP
	vRoughnessMapUv = ( roughnessMapTransform * vec3( ROUGHNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_ANISOTROPYMAP
	vAnisotropyMapUv = ( anisotropyMapTransform * vec3( ANISOTROPYMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_CLEARCOATMAP
	vClearcoatMapUv = ( clearcoatMapTransform * vec3( CLEARCOATMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	vClearcoatNormalMapUv = ( clearcoatNormalMapTransform * vec3( CLEARCOAT_NORMALMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	vClearcoatRoughnessMapUv = ( clearcoatRoughnessMapTransform * vec3( CLEARCOAT_ROUGHNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_IRIDESCENCEMAP
	vIridescenceMapUv = ( iridescenceMapTransform * vec3( IRIDESCENCEMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	vIridescenceThicknessMapUv = ( iridescenceThicknessMapTransform * vec3( IRIDESCENCE_THICKNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SHEEN_COLORMAP
	vSheenColorMapUv = ( sheenColorMapTransform * vec3( SHEEN_COLORMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SHEEN_ROUGHNESSMAP
	vSheenRoughnessMapUv = ( sheenRoughnessMapTransform * vec3( SHEEN_ROUGHNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SPECULARMAP
	vSpecularMapUv = ( specularMapTransform * vec3( SPECULARMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SPECULAR_COLORMAP
	vSpecularColorMapUv = ( specularColorMapTransform * vec3( SPECULAR_COLORMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SPECULAR_INTENSITYMAP
	vSpecularIntensityMapUv = ( specularIntensityMapTransform * vec3( SPECULAR_INTENSITYMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_TRANSMISSIONMAP
	vTransmissionMapUv = ( transmissionMapTransform * vec3( TRANSMISSIONMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_THICKNESSMAP
	vThicknessMapUv = ( thicknessMapTransform * vec3( THICKNESSMAP_UV, 1 ) ).xy;
#endif`, GO = `#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION ) || NUM_SPOT_LIGHT_COORDS > 0
	vec4 worldPosition = vec4( transformed, 1.0 );
	#ifdef USE_BATCHING
		worldPosition = batchingMatrix * worldPosition;
	#endif
	#ifdef USE_INSTANCING
		worldPosition = instanceMatrix * worldPosition;
	#endif
	worldPosition = modelMatrix * worldPosition;
#endif`;
  let WO, jO, XO, $O, qO, YO, KO, JO, QO, ZO, ek, tk, nk, ik, rk, sk, ok, ak, lk, ck, uk, fk, hk, dk, pk, mk, gk, _k, bk, vk, yk, xk, Sk, Ek, te, Ii;
  WO = `varying vec2 vUv;
uniform mat3 uvTransform;
void main() {
	vUv = ( uvTransform * vec3( uv, 1 ) ).xy;
	gl_Position = vec4( position.xy, 1.0, 1.0 );
}`;
  jO = `uniform sampler2D t2D;
uniform float backgroundIntensity;
varying vec2 vUv;
void main() {
	vec4 texColor = texture2D( t2D, vUv );
	#ifdef DECODE_VIDEO_TEXTURE
		texColor = vec4( mix( pow( texColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), texColor.rgb * 0.0773993808, vec3( lessThanEqual( texColor.rgb, vec3( 0.04045 ) ) ) ), texColor.w );
	#endif
	texColor.rgb *= backgroundIntensity;
	gl_FragColor = texColor;
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`;
  XO = `varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
	gl_Position.z = gl_Position.w;
}`;
  $O = `#ifdef ENVMAP_TYPE_CUBE
	uniform samplerCube envMap;
#elif defined( ENVMAP_TYPE_CUBE_UV )
	uniform sampler2D envMap;
#endif
uniform float flipEnvMap;
uniform float backgroundBlurriness;
uniform float backgroundIntensity;
uniform mat3 backgroundRotation;
varying vec3 vWorldDirection;
#include <cube_uv_reflection_fragment>
void main() {
	#ifdef ENVMAP_TYPE_CUBE
		vec4 texColor = textureCube( envMap, backgroundRotation * vec3( flipEnvMap * vWorldDirection.x, vWorldDirection.yz ) );
	#elif defined( ENVMAP_TYPE_CUBE_UV )
		vec4 texColor = textureCubeUV( envMap, backgroundRotation * vWorldDirection, backgroundBlurriness );
	#else
		vec4 texColor = vec4( 0.0, 0.0, 0.0, 1.0 );
	#endif
	texColor.rgb *= backgroundIntensity;
	gl_FragColor = texColor;
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`;
  qO = `varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
	gl_Position.z = gl_Position.w;
}`;
  YO = `uniform samplerCube tCube;
uniform float tFlip;
uniform float opacity;
varying vec3 vWorldDirection;
void main() {
	vec4 texColor = textureCube( tCube, vec3( tFlip * vWorldDirection.x, vWorldDirection.yz ) );
	gl_FragColor = texColor;
	gl_FragColor.a *= opacity;
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`;
  KO = `#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
varying vec2 vHighPrecisionZW;
void main() {
	#include <uv_vertex>
	#include <batching_vertex>
	#include <skinbase_vertex>
	#include <morphinstance_vertex>
	#ifdef USE_DISPLACEMENTMAP
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vHighPrecisionZW = gl_Position.zw;
}`;
  JO = `#if DEPTH_PACKING == 3200
	uniform float opacity;
#endif
#include <common>
#include <packing>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
varying vec2 vHighPrecisionZW;
void main() {
	vec4 diffuseColor = vec4( 1.0 );
	#include <clipping_planes_fragment>
	#if DEPTH_PACKING == 3200
		diffuseColor.a = opacity;
	#endif
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <logdepthbuf_fragment>
	float fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;
	#if DEPTH_PACKING == 3200
		gl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );
	#elif DEPTH_PACKING == 3201
		gl_FragColor = packDepthToRGBA( fragCoordZ );
	#elif DEPTH_PACKING == 3202
		gl_FragColor = vec4( packDepthToRGB( fragCoordZ ), 1.0 );
	#elif DEPTH_PACKING == 3203
		gl_FragColor = vec4( packDepthToRG( fragCoordZ ), 0.0, 1.0 );
	#endif
}`;
  QO = `#define DISTANCE
varying vec3 vWorldPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <batching_vertex>
	#include <skinbase_vertex>
	#include <morphinstance_vertex>
	#ifdef USE_DISPLACEMENTMAP
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <worldpos_vertex>
	#include <clipping_planes_vertex>
	vWorldPosition = worldPosition.xyz;
}`;
  ZO = `#define DISTANCE
uniform vec3 referencePosition;
uniform float nearDistance;
uniform float farDistance;
varying vec3 vWorldPosition;
#include <common>
#include <packing>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <clipping_planes_pars_fragment>
void main () {
	vec4 diffuseColor = vec4( 1.0 );
	#include <clipping_planes_fragment>
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	float dist = length( vWorldPosition - referencePosition );
	dist = ( dist - nearDistance ) / ( farDistance - nearDistance );
	dist = saturate( dist );
	gl_FragColor = packDepthToRGBA( dist );
}`;
  ek = `varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
}`;
  tk = `uniform sampler2D tEquirect;
varying vec3 vWorldDirection;
#include <common>
void main() {
	vec3 direction = normalize( vWorldDirection );
	vec2 sampleUV = equirectUv( direction );
	gl_FragColor = texture2D( tEquirect, sampleUV );
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`;
  nk = `uniform float scale;
attribute float lineDistance;
varying float vLineDistance;
#include <common>
#include <uv_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	vLineDistance = scale * lineDistance;
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
}`;
  ik = `uniform vec3 diffuse;
uniform float opacity;
uniform float dashSize;
uniform float totalSize;
varying float vLineDistance;
#include <common>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	if ( mod( vLineDistance, totalSize ) > dashSize ) {
		discard;
	}
	vec3 outgoingLight = vec3( 0.0 );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
}`;
  rk = `#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinbase_vertex>
		#include <skinnormal_vertex>
		#include <defaultnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <fog_vertex>
}`;
  sk = `uniform vec3 diffuse;
uniform float opacity;
#ifndef FLAT_SHADED
	varying vec3 vNormal;
#endif
#include <common>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <specularmap_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	#ifdef USE_LIGHTMAP
		vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );
		reflectedLight.indirectDiffuse += lightMapTexel.rgb * lightMapIntensity * RECIPROCAL_PI;
	#else
		reflectedLight.indirectDiffuse += vec3( 1.0 );
	#endif
	#include <aomap_fragment>
	reflectedLight.indirectDiffuse *= diffuseColor.rgb;
	vec3 outgoingLight = reflectedLight.indirectDiffuse;
	#include <envmap_fragment>
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`;
  ok = `#define LAMBERT
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`;
  ak = `#define LAMBERT
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_lambert_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <specularmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_lambert_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;
	#include <envmap_fragment>
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`;
  lk = `#define MATCAP
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <color_pars_vertex>
#include <displacementmap_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
	vViewPosition = - mvPosition.xyz;
}`;
  ck = `#define MATCAP
uniform vec3 diffuse;
uniform float opacity;
uniform sampler2D matcap;
varying vec3 vViewPosition;
#include <common>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <fog_pars_fragment>
#include <normal_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	vec3 viewDir = normalize( vViewPosition );
	vec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );
	vec3 y = cross( viewDir, x );
	vec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;
	#ifdef USE_MATCAP
		vec4 matcapColor = texture2D( matcap, uv );
	#else
		vec4 matcapColor = vec4( vec3( mix( 0.2, 0.8, uv.y ) ), 1.0 );
	#endif
	vec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`;
  uk = `#define NORMAL
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )
	varying vec3 vViewPosition;
#endif
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphinstance_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )
	vViewPosition = - mvPosition.xyz;
#endif
}`;
  fk = `#define NORMAL
uniform float opacity;
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )
	varying vec3 vViewPosition;
#endif
#include <packing>
#include <uv_pars_fragment>
#include <normal_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( 0.0, 0.0, 0.0, opacity );
	#include <clipping_planes_fragment>
	#include <logdepthbuf_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	gl_FragColor = vec4( packNormalToRGB( normal ), diffuseColor.a );
	#ifdef OPAQUE
		gl_FragColor.a = 1.0;
	#endif
}`;
  hk = `#define PHONG
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphinstance_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`;
  dk = `#define PHONG
uniform vec3 diffuse;
uniform vec3 emissive;
uniform vec3 specular;
uniform float shininess;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_phong_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <specularmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_phong_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;
	#include <envmap_fragment>
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`;
  pk = `#define STANDARD
varying vec3 vViewPosition;
#ifdef USE_TRANSMISSION
	varying vec3 vWorldPosition;
#endif
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
#ifdef USE_TRANSMISSION
	vWorldPosition = worldPosition.xyz;
#endif
}`;
  mk = `#define STANDARD
#ifdef PHYSICAL
	#define IOR
	#define USE_SPECULAR
#endif
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float roughness;
uniform float metalness;
uniform float opacity;
#ifdef IOR
	uniform float ior;
#endif
#ifdef USE_SPECULAR
	uniform float specularIntensity;
	uniform vec3 specularColor;
	#ifdef USE_SPECULAR_COLORMAP
		uniform sampler2D specularColorMap;
	#endif
	#ifdef USE_SPECULAR_INTENSITYMAP
		uniform sampler2D specularIntensityMap;
	#endif
#endif
#ifdef USE_CLEARCOAT
	uniform float clearcoat;
	uniform float clearcoatRoughness;
#endif
#ifdef USE_DISPERSION
	uniform float dispersion;
#endif
#ifdef USE_IRIDESCENCE
	uniform float iridescence;
	uniform float iridescenceIOR;
	uniform float iridescenceThicknessMinimum;
	uniform float iridescenceThicknessMaximum;
#endif
#ifdef USE_SHEEN
	uniform vec3 sheenColor;
	uniform float sheenRoughness;
	#ifdef USE_SHEEN_COLORMAP
		uniform sampler2D sheenColorMap;
	#endif
	#ifdef USE_SHEEN_ROUGHNESSMAP
		uniform sampler2D sheenRoughnessMap;
	#endif
#endif
#ifdef USE_ANISOTROPY
	uniform vec2 anisotropyVector;
	#ifdef USE_ANISOTROPYMAP
		uniform sampler2D anisotropyMap;
	#endif
#endif
varying vec3 vViewPosition;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <iridescence_fragment>
#include <cube_uv_reflection_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_physical_pars_fragment>
#include <fog_pars_fragment>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_physical_pars_fragment>
#include <transmission_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <clearcoat_pars_fragment>
#include <iridescence_pars_fragment>
#include <roughnessmap_pars_fragment>
#include <metalnessmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <roughnessmap_fragment>
	#include <metalnessmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <clearcoat_normal_fragment_begin>
	#include <clearcoat_normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_physical_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;
	vec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;
	#include <transmission_fragment>
	vec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;
	#ifdef USE_SHEEN
		float sheenEnergyComp = 1.0 - 0.157 * max3( material.sheenColor );
		outgoingLight = outgoingLight * sheenEnergyComp + sheenSpecularDirect + sheenSpecularIndirect;
	#endif
	#ifdef USE_CLEARCOAT
		float dotNVcc = saturate( dot( geometryClearcoatNormal, geometryViewDir ) );
		vec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );
		outgoingLight = outgoingLight * ( 1.0 - material.clearcoat * Fcc ) + ( clearcoatSpecularDirect + clearcoatSpecularIndirect ) * material.clearcoat;
	#endif
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`;
  gk = `#define TOON
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`;
  _k = `#define TOON
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <gradientmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_toon_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_toon_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`;
  bk = `uniform float size;
uniform float scale;
#include <common>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
#ifdef USE_POINTS_UV
	varying vec2 vUv;
	uniform mat3 uvTransform;
#endif
void main() {
	#ifdef USE_POINTS_UV
		vUv = ( uvTransform * vec3( uv, 1 ) ).xy;
	#endif
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <project_vertex>
	gl_PointSize = size;
	#ifdef USE_SIZEATTENUATION
		bool isPerspective = isPerspectiveMatrix( projectionMatrix );
		if ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );
	#endif
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <worldpos_vertex>
	#include <fog_vertex>
}`;
  vk = `uniform vec3 diffuse;
uniform float opacity;
#include <common>
#include <color_pars_fragment>
#include <map_particle_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	vec3 outgoingLight = vec3( 0.0 );
	#include <logdepthbuf_fragment>
	#include <map_particle_fragment>
	#include <color_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
}`;
  yk = `#include <common>
#include <batching_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <shadowmap_pars_vertex>
void main() {
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphinstance_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`;
  xk = `uniform vec3 color;
uniform float opacity;
#include <common>
#include <packing>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <logdepthbuf_pars_fragment>
#include <shadowmap_pars_fragment>
#include <shadowmask_pars_fragment>
void main() {
	#include <logdepthbuf_fragment>
	gl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
}`;
  Sk = `uniform float rotation;
uniform vec2 center;
#include <common>
#include <uv_pars_vertex>
#include <fog_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	vec4 mvPosition = modelViewMatrix[ 3 ];
	vec2 scale = vec2( length( modelMatrix[ 0 ].xyz ), length( modelMatrix[ 1 ].xyz ) );
	#ifndef USE_SIZEATTENUATION
		bool isPerspective = isPerspectiveMatrix( projectionMatrix );
		if ( isPerspective ) scale *= - mvPosition.z;
	#endif
	vec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;
	vec2 rotatedPosition;
	rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;
	rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;
	mvPosition.xy += rotatedPosition;
	gl_Position = projectionMatrix * mvPosition;
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
}`;
  Ek = `uniform vec3 diffuse;
uniform float opacity;
#include <common>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	vec3 outgoingLight = vec3( 0.0 );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
}`;
  Re = {
    alphahash_fragment: jI,
    alphahash_pars_fragment: XI,
    alphamap_fragment: $I,
    alphamap_pars_fragment: qI,
    alphatest_fragment: YI,
    alphatest_pars_fragment: KI,
    aomap_fragment: JI,
    aomap_pars_fragment: QI,
    batching_pars_vertex: ZI,
    batching_vertex: eF,
    begin_vertex: tF,
    beginnormal_vertex: nF,
    bsdfs: iF,
    iridescence_fragment: rF,
    bumpmap_pars_fragment: sF,
    clipping_planes_fragment: oF,
    clipping_planes_pars_fragment: aF,
    clipping_planes_pars_vertex: lF,
    clipping_planes_vertex: cF,
    color_fragment: uF,
    color_pars_fragment: fF,
    color_pars_vertex: hF,
    color_vertex: dF,
    common: pF,
    cube_uv_reflection_fragment: mF,
    defaultnormal_vertex: gF,
    displacementmap_pars_vertex: _F,
    displacementmap_vertex: bF,
    emissivemap_fragment: vF,
    emissivemap_pars_fragment: yF,
    colorspace_fragment: xF,
    colorspace_pars_fragment: SF,
    envmap_fragment: EF,
    envmap_common_pars_fragment: wF,
    envmap_pars_fragment: MF,
    envmap_pars_vertex: TF,
    envmap_physical_pars_fragment: NF,
    envmap_vertex: CF,
    fog_vertex: AF,
    fog_pars_vertex: DF,
    fog_fragment: RF,
    fog_pars_fragment: PF,
    gradientmap_pars_fragment: LF,
    lightmap_pars_fragment: IF,
    lights_lambert_fragment: FF,
    lights_lambert_pars_fragment: OF,
    lights_pars_begin: kF,
    lights_toon_fragment: UF,
    lights_toon_pars_fragment: BF,
    lights_phong_fragment: HF,
    lights_phong_pars_fragment: zF,
    lights_physical_fragment: VF,
    lights_physical_pars_fragment: GF,
    lights_fragment_begin: WF,
    lights_fragment_maps: jF,
    lights_fragment_end: XF,
    logdepthbuf_fragment: $F,
    logdepthbuf_pars_fragment: qF,
    logdepthbuf_pars_vertex: YF,
    logdepthbuf_vertex: KF,
    map_fragment: JF,
    map_pars_fragment: QF,
    map_particle_fragment: ZF,
    map_particle_pars_fragment: eO,
    metalnessmap_fragment: tO,
    metalnessmap_pars_fragment: nO,
    morphinstance_vertex: iO,
    morphcolor_vertex: rO,
    morphnormal_vertex: sO,
    morphtarget_pars_vertex: oO,
    morphtarget_vertex: aO,
    normal_fragment_begin: lO,
    normal_fragment_maps: cO,
    normal_pars_fragment: uO,
    normal_pars_vertex: fO,
    normal_vertex: hO,
    normalmap_pars_fragment: dO,
    clearcoat_normal_fragment_begin: pO,
    clearcoat_normal_fragment_maps: mO,
    clearcoat_pars_fragment: gO,
    iridescence_pars_fragment: _O,
    opaque_fragment: bO,
    packing: vO,
    premultiplied_alpha_fragment: yO,
    project_vertex: xO,
    dithering_fragment: SO,
    dithering_pars_fragment: EO,
    roughnessmap_fragment: wO,
    roughnessmap_pars_fragment: MO,
    shadowmap_pars_fragment: TO,
    shadowmap_pars_vertex: CO,
    shadowmap_vertex: AO,
    shadowmask_pars_fragment: DO,
    skinbase_vertex: RO,
    skinning_pars_vertex: PO,
    skinning_vertex: LO,
    skinnormal_vertex: IO,
    specularmap_fragment: FO,
    specularmap_pars_fragment: OO,
    tonemapping_fragment: kO,
    tonemapping_pars_fragment: NO,
    transmission_fragment: UO,
    transmission_pars_fragment: BO,
    uv_pars_fragment: HO,
    uv_pars_vertex: zO,
    uv_vertex: VO,
    worldpos_vertex: GO,
    background_vert: WO,
    background_frag: jO,
    backgroundCube_vert: XO,
    backgroundCube_frag: $O,
    cube_vert: qO,
    cube_frag: YO,
    depth_vert: KO,
    depth_frag: JO,
    distanceRGBA_vert: QO,
    distanceRGBA_frag: ZO,
    equirect_vert: ek,
    equirect_frag: tk,
    linedashed_vert: nk,
    linedashed_frag: ik,
    meshbasic_vert: rk,
    meshbasic_frag: sk,
    meshlambert_vert: ok,
    meshlambert_frag: ak,
    meshmatcap_vert: lk,
    meshmatcap_frag: ck,
    meshnormal_vert: uk,
    meshnormal_frag: fk,
    meshphong_vert: hk,
    meshphong_frag: dk,
    meshphysical_vert: pk,
    meshphysical_frag: mk,
    meshtoon_vert: gk,
    meshtoon_frag: _k,
    points_vert: bk,
    points_frag: vk,
    shadow_vert: yk,
    shadow_frag: xk,
    sprite_vert: Sk,
    sprite_frag: Ek
  };
  te = {
    common: {
      diffuse: {
        value: new xe(16777215)
      },
      opacity: {
        value: 1
      },
      map: {
        value: null
      },
      mapTransform: {
        value: new Te()
      },
      alphaMap: {
        value: null
      },
      alphaMapTransform: {
        value: new Te()
      },
      alphaTest: {
        value: 0
      }
    },
    specularmap: {
      specularMap: {
        value: null
      },
      specularMapTransform: {
        value: new Te()
      }
    },
    envmap: {
      envMap: {
        value: null
      },
      envMapRotation: {
        value: new Te()
      },
      flipEnvMap: {
        value: -1
      },
      reflectivity: {
        value: 1
      },
      ior: {
        value: 1.5
      },
      refractionRatio: {
        value: 0.98
      }
    },
    aomap: {
      aoMap: {
        value: null
      },
      aoMapIntensity: {
        value: 1
      },
      aoMapTransform: {
        value: new Te()
      }
    },
    lightmap: {
      lightMap: {
        value: null
      },
      lightMapIntensity: {
        value: 1
      },
      lightMapTransform: {
        value: new Te()
      }
    },
    bumpmap: {
      bumpMap: {
        value: null
      },
      bumpMapTransform: {
        value: new Te()
      },
      bumpScale: {
        value: 1
      }
    },
    normalmap: {
      normalMap: {
        value: null
      },
      normalMapTransform: {
        value: new Te()
      },
      normalScale: {
        value: new Ue(1, 1)
      }
    },
    displacementmap: {
      displacementMap: {
        value: null
      },
      displacementMapTransform: {
        value: new Te()
      },
      displacementScale: {
        value: 1
      },
      displacementBias: {
        value: 0
      }
    },
    emissivemap: {
      emissiveMap: {
        value: null
      },
      emissiveMapTransform: {
        value: new Te()
      }
    },
    metalnessmap: {
      metalnessMap: {
        value: null
      },
      metalnessMapTransform: {
        value: new Te()
      }
    },
    roughnessmap: {
      roughnessMap: {
        value: null
      },
      roughnessMapTransform: {
        value: new Te()
      }
    },
    gradientmap: {
      gradientMap: {
        value: null
      }
    },
    fog: {
      fogDensity: {
        value: 25e-5
      },
      fogNear: {
        value: 1
      },
      fogFar: {
        value: 2e3
      },
      fogColor: {
        value: new xe(16777215)
      }
    },
    lights: {
      ambientLightColor: {
        value: []
      },
      lightProbe: {
        value: []
      },
      directionalLights: {
        value: [],
        properties: {
          direction: {},
          color: {}
        }
      },
      directionalLightShadows: {
        value: [],
        properties: {
          shadowIntensity: 1,
          shadowBias: {},
          shadowNormalBias: {},
          shadowRadius: {},
          shadowMapSize: {}
        }
      },
      directionalShadowMap: {
        value: []
      },
      directionalShadowMatrix: {
        value: []
      },
      spotLights: {
        value: [],
        properties: {
          color: {},
          position: {},
          direction: {},
          distance: {},
          coneCos: {},
          penumbraCos: {},
          decay: {}
        }
      },
      spotLightShadows: {
        value: [],
        properties: {
          shadowIntensity: 1,
          shadowBias: {},
          shadowNormalBias: {},
          shadowRadius: {},
          shadowMapSize: {}
        }
      },
      spotLightMap: {
        value: []
      },
      spotShadowMap: {
        value: []
      },
      spotLightMatrix: {
        value: []
      },
      pointLights: {
        value: [],
        properties: {
          color: {},
          position: {},
          decay: {},
          distance: {}
        }
      },
      pointLightShadows: {
        value: [],
        properties: {
          shadowIntensity: 1,
          shadowBias: {},
          shadowNormalBias: {},
          shadowRadius: {},
          shadowMapSize: {},
          shadowCameraNear: {},
          shadowCameraFar: {}
        }
      },
      pointShadowMap: {
        value: []
      },
      pointShadowMatrix: {
        value: []
      },
      hemisphereLights: {
        value: [],
        properties: {
          direction: {},
          skyColor: {},
          groundColor: {}
        }
      },
      rectAreaLights: {
        value: [],
        properties: {
          color: {},
          position: {},
          width: {},
          height: {}
        }
      },
      ltc_1: {
        value: null
      },
      ltc_2: {
        value: null
      }
    },
    points: {
      diffuse: {
        value: new xe(16777215)
      },
      opacity: {
        value: 1
      },
      size: {
        value: 1
      },
      scale: {
        value: 1
      },
      map: {
        value: null
      },
      alphaMap: {
        value: null
      },
      alphaMapTransform: {
        value: new Te()
      },
      alphaTest: {
        value: 0
      },
      uvTransform: {
        value: new Te()
      }
    },
    sprite: {
      diffuse: {
        value: new xe(16777215)
      },
      opacity: {
        value: 1
      },
      center: {
        value: new Ue(0.5, 0.5)
      },
      rotation: {
        value: 0
      },
      map: {
        value: null
      },
      mapTransform: {
        value: new Te()
      },
      alphaMap: {
        value: null
      },
      alphaMapTransform: {
        value: new Te()
      },
      alphaTest: {
        value: 0
      }
    }
  };
  Ii = {
    basic: {
      uniforms: Wn([
        te.common,
        te.specularmap,
        te.envmap,
        te.aomap,
        te.lightmap,
        te.fog
      ]),
      vertexShader: Re.meshbasic_vert,
      fragmentShader: Re.meshbasic_frag
    },
    lambert: {
      uniforms: Wn([
        te.common,
        te.specularmap,
        te.envmap,
        te.aomap,
        te.lightmap,
        te.emissivemap,
        te.bumpmap,
        te.normalmap,
        te.displacementmap,
        te.fog,
        te.lights,
        {
          emissive: {
            value: new xe(0)
          }
        }
      ]),
      vertexShader: Re.meshlambert_vert,
      fragmentShader: Re.meshlambert_frag
    },
    phong: {
      uniforms: Wn([
        te.common,
        te.specularmap,
        te.envmap,
        te.aomap,
        te.lightmap,
        te.emissivemap,
        te.bumpmap,
        te.normalmap,
        te.displacementmap,
        te.fog,
        te.lights,
        {
          emissive: {
            value: new xe(0)
          },
          specular: {
            value: new xe(1118481)
          },
          shininess: {
            value: 30
          }
        }
      ]),
      vertexShader: Re.meshphong_vert,
      fragmentShader: Re.meshphong_frag
    },
    standard: {
      uniforms: Wn([
        te.common,
        te.envmap,
        te.aomap,
        te.lightmap,
        te.emissivemap,
        te.bumpmap,
        te.normalmap,
        te.displacementmap,
        te.roughnessmap,
        te.metalnessmap,
        te.fog,
        te.lights,
        {
          emissive: {
            value: new xe(0)
          },
          roughness: {
            value: 1
          },
          metalness: {
            value: 0
          },
          envMapIntensity: {
            value: 1
          }
        }
      ]),
      vertexShader: Re.meshphysical_vert,
      fragmentShader: Re.meshphysical_frag
    },
    toon: {
      uniforms: Wn([
        te.common,
        te.aomap,
        te.lightmap,
        te.emissivemap,
        te.bumpmap,
        te.normalmap,
        te.displacementmap,
        te.gradientmap,
        te.fog,
        te.lights,
        {
          emissive: {
            value: new xe(0)
          }
        }
      ]),
      vertexShader: Re.meshtoon_vert,
      fragmentShader: Re.meshtoon_frag
    },
    matcap: {
      uniforms: Wn([
        te.common,
        te.bumpmap,
        te.normalmap,
        te.displacementmap,
        te.fog,
        {
          matcap: {
            value: null
          }
        }
      ]),
      vertexShader: Re.meshmatcap_vert,
      fragmentShader: Re.meshmatcap_frag
    },
    points: {
      uniforms: Wn([
        te.points,
        te.fog
      ]),
      vertexShader: Re.points_vert,
      fragmentShader: Re.points_frag
    },
    dashed: {
      uniforms: Wn([
        te.common,
        te.fog,
        {
          scale: {
            value: 1
          },
          dashSize: {
            value: 1
          },
          totalSize: {
            value: 2
          }
        }
      ]),
      vertexShader: Re.linedashed_vert,
      fragmentShader: Re.linedashed_frag
    },
    depth: {
      uniforms: Wn([
        te.common,
        te.displacementmap
      ]),
      vertexShader: Re.depth_vert,
      fragmentShader: Re.depth_frag
    },
    normal: {
      uniforms: Wn([
        te.common,
        te.bumpmap,
        te.normalmap,
        te.displacementmap,
        {
          opacity: {
            value: 1
          }
        }
      ]),
      vertexShader: Re.meshnormal_vert,
      fragmentShader: Re.meshnormal_frag
    },
    sprite: {
      uniforms: Wn([
        te.sprite,
        te.fog
      ]),
      vertexShader: Re.sprite_vert,
      fragmentShader: Re.sprite_frag
    },
    background: {
      uniforms: {
        uvTransform: {
          value: new Te()
        },
        t2D: {
          value: null
        },
        backgroundIntensity: {
          value: 1
        }
      },
      vertexShader: Re.background_vert,
      fragmentShader: Re.background_frag
    },
    backgroundCube: {
      uniforms: {
        envMap: {
          value: null
        },
        flipEnvMap: {
          value: -1
        },
        backgroundBlurriness: {
          value: 0
        },
        backgroundIntensity: {
          value: 1
        },
        backgroundRotation: {
          value: new Te()
        }
      },
      vertexShader: Re.backgroundCube_vert,
      fragmentShader: Re.backgroundCube_frag
    },
    cube: {
      uniforms: {
        tCube: {
          value: null
        },
        tFlip: {
          value: -1
        },
        opacity: {
          value: 1
        }
      },
      vertexShader: Re.cube_vert,
      fragmentShader: Re.cube_frag
    },
    equirect: {
      uniforms: {
        tEquirect: {
          value: null
        }
      },
      vertexShader: Re.equirect_vert,
      fragmentShader: Re.equirect_frag
    },
    distanceRGBA: {
      uniforms: Wn([
        te.common,
        te.displacementmap,
        {
          referencePosition: {
            value: new u1()
          },
          nearDistance: {
            value: 1
          },
          farDistance: {
            value: 1e3
          }
        }
      ]),
      vertexShader: Re.distanceRGBA_vert,
      fragmentShader: Re.distanceRGBA_frag
    },
    shadow: {
      uniforms: Wn([
        te.lights,
        te.fog,
        {
          color: {
            value: new xe(0)
          },
          opacity: {
            value: 1
          }
        }
      ]),
      vertexShader: Re.shadow_vert,
      fragmentShader: Re.shadow_frag
    }
  };
  Ii.physical = {
    uniforms: Wn([
      Ii.standard.uniforms,
      {
        clearcoat: {
          value: 0
        },
        clearcoatMap: {
          value: null
        },
        clearcoatMapTransform: {
          value: new Te()
        },
        clearcoatNormalMap: {
          value: null
        },
        clearcoatNormalMapTransform: {
          value: new Te()
        },
        clearcoatNormalScale: {
          value: new Ue(1, 1)
        },
        clearcoatRoughness: {
          value: 0
        },
        clearcoatRoughnessMap: {
          value: null
        },
        clearcoatRoughnessMapTransform: {
          value: new Te()
        },
        dispersion: {
          value: 0
        },
        iridescence: {
          value: 0
        },
        iridescenceMap: {
          value: null
        },
        iridescenceMapTransform: {
          value: new Te()
        },
        iridescenceIOR: {
          value: 1.3
        },
        iridescenceThicknessMinimum: {
          value: 100
        },
        iridescenceThicknessMaximum: {
          value: 400
        },
        iridescenceThicknessMap: {
          value: null
        },
        iridescenceThicknessMapTransform: {
          value: new Te()
        },
        sheen: {
          value: 0
        },
        sheenColor: {
          value: new xe(0)
        },
        sheenColorMap: {
          value: null
        },
        sheenColorMapTransform: {
          value: new Te()
        },
        sheenRoughness: {
          value: 1
        },
        sheenRoughnessMap: {
          value: null
        },
        sheenRoughnessMapTransform: {
          value: new Te()
        },
        transmission: {
          value: 0
        },
        transmissionMap: {
          value: null
        },
        transmissionMapTransform: {
          value: new Te()
        },
        transmissionSamplerSize: {
          value: new Ue()
        },
        transmissionSamplerMap: {
          value: null
        },
        thickness: {
          value: 0
        },
        thicknessMap: {
          value: null
        },
        thicknessMapTransform: {
          value: new Te()
        },
        attenuationDistance: {
          value: 0
        },
        attenuationColor: {
          value: new xe(0)
        },
        specularColor: {
          value: new xe(1, 1, 1)
        },
        specularColorMap: {
          value: null
        },
        specularColorMapTransform: {
          value: new Te()
        },
        specularIntensity: {
          value: 1
        },
        specularIntensityMap: {
          value: null
        },
        specularIntensityMapTransform: {
          value: new Te()
        },
        anisotropyVector: {
          value: new Ue()
        },
        anisotropyMap: {
          value: null
        },
        anisotropyMapTransform: {
          value: new Te()
        }
      }
    ]),
    vertexShader: Re.meshphysical_vert,
    fragmentShader: Re.meshphysical_frag
  };
  const bc = {
    r: 0,
    b: 0,
    g: 0
  }, Xr = new Yi(), wk = new Ee();
  function Mk(n, e, t, i, r, s, o) {
    const a = new xe(0);
    let l = s === true ? 0 : 1, c, u, h = null, d = 0, f = null;
    function m(b) {
      let v = b.isScene === true ? b.background : null;
      return v && v.isTexture && (v = (b.backgroundBlurriness > 0 ? t : e).get(v)), v;
    }
    function _(b) {
      let v = false;
      const x = m(b);
      x === null ? g(a, l) : x && x.isColor && (g(x, 1), v = true);
      const C = n.xr.getEnvironmentBlendMode();
      C === "additive" ? i.buffers.color.setClear(0, 0, 0, 1, o) : C === "alpha-blend" && i.buffers.color.setClear(0, 0, 0, 0, o), (n.autoClear || v) && (i.buffers.depth.setTest(true), i.buffers.depth.setMask(true), i.buffers.color.setMask(true), n.clear(n.autoClearColor, n.autoClearDepth, n.autoClearStencil));
    }
    function p(b, v) {
      const x = m(v);
      x && (x.isCubeTexture || x.mapping === Af) ? (u === void 0 && (u = new Zn(new Al(1, 1, 1), new Mr({
        name: "BackgroundCubeMaterial",
        uniforms: oa(Ii.backgroundCube.uniforms),
        vertexShader: Ii.backgroundCube.vertexShader,
        fragmentShader: Ii.backgroundCube.fragmentShader,
        side: h2,
        depthTest: false,
        depthWrite: false,
        fog: false,
        allowOverride: false
      })), u.geometry.deleteAttribute("normal"), u.geometry.deleteAttribute("uv"), u.onBeforeRender = function(C, A, P) {
        this.matrixWorld.copyPosition(P.matrixWorld);
      }, Object.defineProperty(u.material, "envMap", {
        get: function() {
          return this.uniforms.envMap.value;
        }
      }), r.update(u)), Xr.copy(v.backgroundRotation), Xr.x *= -1, Xr.y *= -1, Xr.z *= -1, x.isCubeTexture && x.isRenderTargetTexture === false && (Xr.y *= -1, Xr.z *= -1), u.material.uniforms.envMap.value = x, u.material.uniforms.flipEnvMap.value = x.isCubeTexture && x.isRenderTargetTexture === false ? -1 : 1, u.material.uniforms.backgroundBlurriness.value = v.backgroundBlurriness, u.material.uniforms.backgroundIntensity.value = v.backgroundIntensity, u.material.uniforms.backgroundRotation.value.setFromMatrix4(wk.makeRotationFromEuler(Xr)), u.material.toneMapped = ze.getTransfer(x.colorSpace) !== nt, (h !== x || d !== x.version || f !== n.toneMapping) && (u.material.needsUpdate = true, h = x, d = x.version, f = n.toneMapping), u.layers.enableAll(), b.unshift(u, u.geometry, u.material, 0, 0, null)) : x && x.isTexture && (c === void 0 && (c = new Zn(new Pf(2, 2), new Mr({
        name: "BackgroundMaterial",
        uniforms: oa(Ii.background.uniforms),
        vertexShader: Ii.background.vertexShader,
        fragmentShader: Ii.background.fragmentShader,
        side: D3,
        depthTest: false,
        depthWrite: false,
        fog: false,
        allowOverride: false
      })), c.geometry.deleteAttribute("normal"), Object.defineProperty(c.material, "map", {
        get: function() {
          return this.uniforms.t2D.value;
        }
      }), r.update(c)), c.material.uniforms.t2D.value = x, c.material.uniforms.backgroundIntensity.value = v.backgroundIntensity, c.material.toneMapped = ze.getTransfer(x.colorSpace) !== nt, x.matrixAutoUpdate === true && x.updateMatrix(), c.material.uniforms.uvTransform.value.copy(x.matrix), (h !== x || d !== x.version || f !== n.toneMapping) && (c.material.needsUpdate = true, h = x, d = x.version, f = n.toneMapping), c.layers.enableAll(), b.unshift(c, c.geometry, c.material, 0, 0, null));
    }
    function g(b, v) {
      b.getRGB(bc, S8(n)), i.buffers.color.setClear(bc.r, bc.g, bc.b, v, o);
    }
    function y() {
      u !== void 0 && (u.geometry.dispose(), u.material.dispose(), u = void 0), c !== void 0 && (c.geometry.dispose(), c.material.dispose(), c = void 0);
    }
    return {
      getClearColor: function() {
        return a;
      },
      setClearColor: function(b, v = 1) {
        a.set(b), l = v, g(a, l);
      },
      getClearAlpha: function() {
        return l;
      },
      setClearAlpha: function(b) {
        l = b, g(a, l);
      },
      render: _,
      addToRenderList: p,
      dispose: y
    };
  }
  function Tk(n, e) {
    const t = n.getParameter(n.MAX_VERTEX_ATTRIBS), i = {}, r = d(null);
    let s = r, o = false;
    function a(E, I, k, H, K) {
      let J = false;
      const z = h(H, k, I);
      s !== z && (s = z, c(s.object)), J = f(E, H, k, K), J && m(E, H, k, K), K !== null && e.update(K, n.ELEMENT_ARRAY_BUFFER), (J || o) && (o = false, v(E, I, k, H), K !== null && n.bindBuffer(n.ELEMENT_ARRAY_BUFFER, e.get(K).buffer));
    }
    function l() {
      return n.createVertexArray();
    }
    function c(E) {
      return n.bindVertexArray(E);
    }
    function u(E) {
      return n.deleteVertexArray(E);
    }
    function h(E, I, k) {
      const H = k.wireframe === true;
      let K = i[E.id];
      K === void 0 && (K = {}, i[E.id] = K);
      let J = K[I.id];
      J === void 0 && (J = {}, K[I.id] = J);
      let z = J[H];
      return z === void 0 && (z = d(l()), J[H] = z), z;
    }
    function d(E) {
      const I = [], k = [], H = [];
      for (let K = 0; K < t; K++) I[K] = 0, k[K] = 0, H[K] = 0;
      return {
        geometry: null,
        program: null,
        wireframe: false,
        newAttributes: I,
        enabledAttributes: k,
        attributeDivisors: H,
        object: E,
        attributes: {},
        index: null
      };
    }
    function f(E, I, k, H) {
      const K = s.attributes, J = I.attributes;
      let z = 0;
      const $ = k.getAttributes();
      for (const G in $) if ($[G].location >= 0) {
        const V = K[G];
        let w1 = J[G];
        if (w1 === void 0 && (G === "instanceMatrix" && E.instanceMatrix && (w1 = E.instanceMatrix), G === "instanceColor" && E.instanceColor && (w1 = E.instanceColor)), V === void 0 || V.attribute !== w1 || w1 && V.data !== w1.data) return true;
        z++;
      }
      return s.attributesNum !== z || s.index !== H;
    }
    function m(E, I, k, H) {
      const K = {}, J = I.attributes;
      let z = 0;
      const $ = k.getAttributes();
      for (const G in $) if ($[G].location >= 0) {
        let V = J[G];
        V === void 0 && (G === "instanceMatrix" && E.instanceMatrix && (V = E.instanceMatrix), G === "instanceColor" && E.instanceColor && (V = E.instanceColor));
        const w1 = {};
        w1.attribute = V, V && V.data && (w1.data = V.data), K[G] = w1, z++;
      }
      s.attributes = K, s.attributesNum = z, s.index = H;
    }
    function _() {
      const E = s.newAttributes;
      for (let I = 0, k = E.length; I < k; I++) E[I] = 0;
    }
    function p(E) {
      g(E, 0);
    }
    function g(E, I) {
      const k = s.newAttributes, H = s.enabledAttributes, K = s.attributeDivisors;
      k[E] = 1, H[E] === 0 && (n.enableVertexAttribArray(E), H[E] = 1), K[E] !== I && (n.vertexAttribDivisor(E, I), K[E] = I);
    }
    function y() {
      const E = s.newAttributes, I = s.enabledAttributes;
      for (let k = 0, H = I.length; k < H; k++) I[k] !== E[k] && (n.disableVertexAttribArray(k), I[k] = 0);
    }
    function b(E, I, k, H, K, J, z) {
      z === true ? n.vertexAttribIPointer(E, I, k, K, J) : n.vertexAttribPointer(E, I, k, H, K, J);
    }
    function v(E, I, k, H) {
      _();
      const K = H.attributes, J = k.getAttributes(), z = I.defaultAttributeValues;
      for (const $ in J) {
        const G = J[$];
        if (G.location >= 0) {
          let Q = K[$];
          if (Q === void 0 && ($ === "instanceMatrix" && E.instanceMatrix && (Q = E.instanceMatrix), $ === "instanceColor" && E.instanceColor && (Q = E.instanceColor)), Q !== void 0) {
            const V = Q.normalized, w1 = Q.itemSize, m1 = e.get(Q);
            if (m1 === void 0) continue;
            const I1 = m1.buffer, Z = m1.type, f1 = m1.bytesPerElement, M1 = Z === n.INT || Z === n.UNSIGNED_INT || Q.gpuType === Up;
            if (Q.isInterleavedBufferAttribute) {
              const W = Q.data, r1 = W.stride, v1 = Q.offset;
              if (W.isInstancedInterleavedBuffer) {
                for (let S1 = 0; S1 < G.locationSize; S1++) g(G.location + S1, W.meshPerAttribute);
                E.isInstancedMesh !== true && H._maxInstanceCount === void 0 && (H._maxInstanceCount = W.meshPerAttribute * W.count);
              } else for (let S1 = 0; S1 < G.locationSize; S1++) p(G.location + S1);
              n.bindBuffer(n.ARRAY_BUFFER, I1);
              for (let S1 = 0; S1 < G.locationSize; S1++) b(G.location + S1, w1 / G.locationSize, Z, V, r1 * f1, (v1 + w1 / G.locationSize * S1) * f1, M1);
            } else {
              if (Q.isInstancedBufferAttribute) {
                for (let W = 0; W < G.locationSize; W++) g(G.location + W, Q.meshPerAttribute);
                E.isInstancedMesh !== true && H._maxInstanceCount === void 0 && (H._maxInstanceCount = Q.meshPerAttribute * Q.count);
              } else for (let W = 0; W < G.locationSize; W++) p(G.location + W);
              n.bindBuffer(n.ARRAY_BUFFER, I1);
              for (let W = 0; W < G.locationSize; W++) b(G.location + W, w1 / G.locationSize, Z, V, w1 * f1, w1 / G.locationSize * W * f1, M1);
            }
          } else if (z !== void 0) {
            const V = z[$];
            if (V !== void 0) switch (V.length) {
              case 2:
                n.vertexAttrib2fv(G.location, V);
                break;
              case 3:
                n.vertexAttrib3fv(G.location, V);
                break;
              case 4:
                n.vertexAttrib4fv(G.location, V);
                break;
              default:
                n.vertexAttrib1fv(G.location, V);
            }
          }
        }
      }
      y();
    }
    function x() {
      P();
      for (const E in i) {
        const I = i[E];
        for (const k in I) {
          const H = I[k];
          for (const K in H) u(H[K].object), delete H[K];
          delete I[k];
        }
        delete i[E];
      }
    }
    function C(E) {
      if (i[E.id] === void 0) return;
      const I = i[E.id];
      for (const k in I) {
        const H = I[k];
        for (const K in H) u(H[K].object), delete H[K];
        delete I[k];
      }
      delete i[E.id];
    }
    function A(E) {
      for (const I in i) {
        const k = i[I];
        if (k[E.id] === void 0) continue;
        const H = k[E.id];
        for (const K in H) u(H[K].object), delete H[K];
        delete k[E.id];
      }
    }
    function P() {
      M(), o = true, s !== r && (s = r, c(s.object));
    }
    function M() {
      r.geometry = null, r.program = null, r.wireframe = false;
    }
    return {
      setup: a,
      reset: P,
      resetDefaultState: M,
      dispose: x,
      releaseStatesOfGeometry: C,
      releaseStatesOfProgram: A,
      initAttributes: _,
      enableAttribute: p,
      disableUnusedAttributes: y
    };
  }
  function Ck(n, e, t) {
    let i;
    function r(c) {
      i = c;
    }
    function s(c, u) {
      n.drawArrays(i, c, u), t.update(u, i, 1);
    }
    function o(c, u, h) {
      h !== 0 && (n.drawArraysInstanced(i, c, u, h), t.update(u, i, h));
    }
    function a(c, u, h) {
      if (h === 0) return;
      e.get("WEBGL_multi_draw").multiDrawArraysWEBGL(i, c, 0, u, 0, h);
      let f = 0;
      for (let m = 0; m < h; m++) f += u[m];
      t.update(f, i, 1);
    }
    function l(c, u, h, d) {
      if (h === 0) return;
      const f = e.get("WEBGL_multi_draw");
      if (f === null) for (let m = 0; m < c.length; m++) o(c[m], u[m], d[m]);
      else {
        f.multiDrawArraysInstancedWEBGL(i, c, 0, u, 0, d, 0, h);
        let m = 0;
        for (let _ = 0; _ < h; _++) m += u[_] * d[_];
        t.update(m, i, 1);
      }
    }
    this.setMode = r, this.render = s, this.renderInstances = o, this.renderMultiDraw = a, this.renderMultiDrawInstances = l;
  }
  function Ak(n, e, t, i) {
    let r;
    function s() {
      if (r !== void 0) return r;
      if (e.has("EXT_texture_filter_anisotropic") === true) {
        const A = e.get("EXT_texture_filter_anisotropic");
        r = n.getParameter(A.MAX_TEXTURE_MAX_ANISOTROPY_EXT);
      } else r = 0;
      return r;
    }
    function o(A) {
      return !(A !== f2 && i.convert(A) !== n.getParameter(n.IMPLEMENTATION_COLOR_READ_FORMAT));
    }
    function a(A) {
      const P = A === Tl && (e.has("EXT_color_buffer_half_float") || e.has("EXT_color_buffer_float"));
      return !(A !== qi && i.convert(A) !== n.getParameter(n.IMPLEMENTATION_COLOR_READ_TYPE) && A !== L2 && !P);
    }
    function l(A) {
      if (A === "highp") {
        if (n.getShaderPrecisionFormat(n.VERTEX_SHADER, n.HIGH_FLOAT).precision > 0 && n.getShaderPrecisionFormat(n.FRAGMENT_SHADER, n.HIGH_FLOAT).precision > 0) return "highp";
        A = "mediump";
      }
      return A === "mediump" && n.getShaderPrecisionFormat(n.VERTEX_SHADER, n.MEDIUM_FLOAT).precision > 0 && n.getShaderPrecisionFormat(n.FRAGMENT_SHADER, n.MEDIUM_FLOAT).precision > 0 ? "mediump" : "lowp";
    }
    let c = t.precision !== void 0 ? t.precision : "highp";
    const u = l(c);
    u !== c && (console.warn("THREE.WebGLRenderer:", c, "not supported, using", u, "instead."), c = u);
    const h = t.logarithmicDepthBuffer === true, d = t.reverseDepthBuffer === true && e.has("EXT_clip_control"), f = n.getParameter(n.MAX_TEXTURE_IMAGE_UNITS), m = n.getParameter(n.MAX_VERTEX_TEXTURE_IMAGE_UNITS), _ = n.getParameter(n.MAX_TEXTURE_SIZE), p = n.getParameter(n.MAX_CUBE_MAP_TEXTURE_SIZE), g = n.getParameter(n.MAX_VERTEX_ATTRIBS), y = n.getParameter(n.MAX_VERTEX_UNIFORM_VECTORS), b = n.getParameter(n.MAX_VARYING_VECTORS), v = n.getParameter(n.MAX_FRAGMENT_UNIFORM_VECTORS), x = m > 0, C = n.getParameter(n.MAX_SAMPLES);
    return {
      isWebGL2: true,
      getMaxAnisotropy: s,
      getMaxPrecision: l,
      textureFormatReadable: o,
      textureTypeReadable: a,
      precision: c,
      logarithmicDepthBuffer: h,
      reverseDepthBuffer: d,
      maxTextures: f,
      maxVertexTextures: m,
      maxTextureSize: _,
      maxCubemapSize: p,
      maxAttributes: g,
      maxVertexUniforms: y,
      maxVaryings: b,
      maxFragmentUniforms: v,
      vertexTextures: x,
      maxSamples: C
    };
  }
  function Dk(n) {
    const e = this;
    let t = null, i = 0, r = false, s = false;
    const o = new es(), a = new Te(), l = {
      value: null,
      needsUpdate: false
    };
    this.uniform = l, this.numPlanes = 0, this.numIntersection = 0, this.init = function(h, d) {
      const f = h.length !== 0 || d || i !== 0 || r;
      return r = d, i = h.length, f;
    }, this.beginShadows = function() {
      s = true, u(null);
    }, this.endShadows = function() {
      s = false;
    }, this.setGlobalState = function(h, d) {
      t = u(h, d, 0);
    }, this.setState = function(h, d, f) {
      const m = h.clippingPlanes, _ = h.clipIntersection, p = h.clipShadows, g = n.get(h);
      if (!r || m === null || m.length === 0 || s && !p) s ? u(null) : c();
      else {
        const y = s ? 0 : i, b = y * 4;
        let v = g.clippingState || null;
        l.value = v, v = u(m, d, b, f);
        for (let x = 0; x !== b; ++x) v[x] = t[x];
        g.clippingState = v, this.numIntersection = _ ? this.numPlanes : 0, this.numPlanes += y;
      }
    };
    function c() {
      l.value !== t && (l.value = t, l.needsUpdate = i > 0), e.numPlanes = i, e.numIntersection = 0;
    }
    function u(h, d, f, m) {
      const _ = h !== null ? h.length : 0;
      let p = null;
      if (_ !== 0) {
        if (p = l.value, m !== true || p === null) {
          const g = f + _ * 4, y = d.matrixWorldInverse;
          a.getNormalMatrix(y), (p === null || p.length < g) && (p = new Float32Array(g));
          for (let b = 0, v = f; b !== _; ++b, v += 4) o.copy(h[b]).applyMatrix4(y, a), o.normal.toArray(p, v), p[v + 3] = o.constant;
        }
        l.value = p, l.needsUpdate = true;
      }
      return e.numPlanes = _, e.numIntersection = 0, p;
    }
  }
  function Rk(n) {
    let e = /* @__PURE__ */ new WeakMap();
    function t(o, a) {
      return a === P4 ? o.mapping = na : a === L4 && (o.mapping = ia), o;
    }
    function i(o) {
      if (o && o.isTexture) {
        const a = o.mapping;
        if (a === P4 || a === L4) if (e.has(o)) {
          const l = e.get(o).texture;
          return t(l, o.mapping);
        } else {
          const l = o.image;
          if (l && l.height > 0) {
            const c = new XL(l.height);
            return c.fromEquirectangularTexture(n, o), e.set(o, c), o.addEventListener("dispose", r), t(c.texture, o.mapping);
          } else return null;
        }
      }
      return o;
    }
    function r(o) {
      const a = o.target;
      a.removeEventListener("dispose", r);
      const l = e.get(a);
      l !== void 0 && (e.delete(a), l.dispose());
    }
    function s() {
      e = /* @__PURE__ */ new WeakMap();
    }
    return {
      get: i,
      dispose: s
    };
  }
  const bo = 4, wg = [
    0.125,
    0.215,
    0.35,
    0.446,
    0.526,
    0.582
  ], as = 20, Zh = new e6(), Mg = new xe();
  let ed = null, td = 0, nd = 0, id = false;
  const ts = (1 + Math.sqrt(5)) / 2, io = 1 / ts, Tg = [
    new u1(-ts, io, 0),
    new u1(ts, io, 0),
    new u1(-io, 0, ts),
    new u1(io, 0, ts),
    new u1(0, ts, -io),
    new u1(0, ts, io),
    new u1(-1, 1, -1),
    new u1(1, 1, -1),
    new u1(-1, 1, 1),
    new u1(1, 1, 1)
  ], Pk = new u1();
  class Cg {
    constructor(e) {
      this._renderer = e, this._pingPongRenderTarget = null, this._lodMax = 0, this._cubeSize = 0, this._lodPlanes = [], this._sizeLods = [], this._sigmas = [], this._blurMaterial = null, this._cubemapMaterial = null, this._equirectMaterial = null, this._compileMaterial(this._blurMaterial);
    }
    fromScene(e, t = 0, i = 0.1, r = 100, s = {}) {
      const { size: o = 256, position: a = Pk } = s;
      ed = this._renderer.getRenderTarget(), td = this._renderer.getActiveCubeFace(), nd = this._renderer.getActiveMipmapLevel(), id = this._renderer.xr.enabled, this._renderer.xr.enabled = false, this._setSize(o);
      const l = this._allocateTargets();
      return l.depthBuffer = true, this._sceneToCubeUV(e, i, r, l, a), t > 0 && this._blur(l, 0, 0, t), this._applyPMREM(l), this._cleanup(l), l;
    }
    fromEquirectangular(e, t = null) {
      return this._fromTexture(e, t);
    }
    fromCubemap(e, t = null) {
      return this._fromTexture(e, t);
    }
    compileCubemapShader() {
      this._cubemapMaterial === null && (this._cubemapMaterial = Rg(), this._compileMaterial(this._cubemapMaterial));
    }
    compileEquirectangularShader() {
      this._equirectMaterial === null && (this._equirectMaterial = Dg(), this._compileMaterial(this._equirectMaterial));
    }
    dispose() {
      this._dispose(), this._cubemapMaterial !== null && this._cubemapMaterial.dispose(), this._equirectMaterial !== null && this._equirectMaterial.dispose();
    }
    _setSize(e) {
      this._lodMax = Math.floor(Math.log2(e)), this._cubeSize = Math.pow(2, this._lodMax);
    }
    _dispose() {
      this._blurMaterial !== null && this._blurMaterial.dispose(), this._pingPongRenderTarget !== null && this._pingPongRenderTarget.dispose();
      for (let e = 0; e < this._lodPlanes.length; e++) this._lodPlanes[e].dispose();
    }
    _cleanup(e) {
      this._renderer.setRenderTarget(ed, td, nd), this._renderer.xr.enabled = id, e.scissorTest = false, vc(e, 0, 0, e.width, e.height);
    }
    _fromTexture(e, t) {
      e.mapping === na || e.mapping === ia ? this._setSize(e.image.length === 0 ? 16 : e.image[0].width || e.image[0].image.width) : this._setSize(e.image.width / 4), ed = this._renderer.getRenderTarget(), td = this._renderer.getActiveCubeFace(), nd = this._renderer.getActiveMipmapLevel(), id = this._renderer.xr.enabled, this._renderer.xr.enabled = false;
      const i = t || this._allocateTargets();
      return this._textureToCubeUV(e, i), this._applyPMREM(i), this._cleanup(i), i;
    }
    _allocateTargets() {
      const e = 3 * Math.max(this._cubeSize, 112), t = 4 * this._cubeSize, i = {
        magFilter: Pn,
        minFilter: Pn,
        generateMipmaps: false,
        type: Tl,
        format: f2,
        colorSpace: kn,
        depthBuffer: false
      }, r = Ag(e, t, i);
      if (this._pingPongRenderTarget === null || this._pingPongRenderTarget.width !== e || this._pingPongRenderTarget.height !== t) {
        this._pingPongRenderTarget !== null && this._dispose(), this._pingPongRenderTarget = Ag(e, t, i);
        const { _lodMax: s } = this;
        ({ sizeLods: this._sizeLods, lodPlanes: this._lodPlanes, sigmas: this._sigmas } = Lk(s)), this._blurMaterial = Ik(s, e, t);
      }
      return r;
    }
    _compileMaterial(e) {
      const t = new Zn(this._lodPlanes[0], e);
      this._renderer.compile(t, Zh);
    }
    _sceneToCubeUV(e, t, i, r, s) {
      const l = new l2(90, 1, t, i), c = [
        1,
        -1,
        1,
        1,
        1,
        1
      ], u = [
        1,
        1,
        1,
        -1,
        -1,
        -1
      ], h = this._renderer, d = h.autoClear, f = h.toneMapping;
      h.getClearColor(Mg), h.toneMapping = br, h.autoClear = false;
      const m = new ls({
        name: "PMREM.Background",
        side: h2,
        depthWrite: false,
        depthTest: false
      }), _ = new Zn(new Al(), m);
      let p = false;
      const g = e.background;
      g ? g.isColor && (m.color.copy(g), e.background = null, p = true) : (m.color.copy(Mg), p = true);
      for (let y = 0; y < 6; y++) {
        const b = y % 3;
        b === 0 ? (l.up.set(0, c[y], 0), l.position.set(s.x, s.y, s.z), l.lookAt(s.x + u[y], s.y, s.z)) : b === 1 ? (l.up.set(0, 0, c[y]), l.position.set(s.x, s.y, s.z), l.lookAt(s.x, s.y + u[y], s.z)) : (l.up.set(0, c[y], 0), l.position.set(s.x, s.y, s.z), l.lookAt(s.x, s.y, s.z + u[y]));
        const v = this._cubeSize;
        vc(r, b * v, y > 2 ? v : 0, v, v), h.setRenderTarget(r), p && h.render(_, l), h.render(e, l);
      }
      _.geometry.dispose(), _.material.dispose(), h.toneMapping = f, h.autoClear = d, e.background = g;
    }
    _textureToCubeUV(e, t) {
      const i = this._renderer, r = e.mapping === na || e.mapping === ia;
      r ? (this._cubemapMaterial === null && (this._cubemapMaterial = Rg()), this._cubemapMaterial.uniforms.flipEnvMap.value = e.isRenderTargetTexture === false ? -1 : 1) : this._equirectMaterial === null && (this._equirectMaterial = Dg());
      const s = r ? this._cubemapMaterial : this._equirectMaterial, o = new Zn(this._lodPlanes[0], s), a = s.uniforms;
      a.envMap.value = e;
      const l = this._cubeSize;
      vc(t, 0, 0, 3 * l, 2 * l), i.setRenderTarget(t), i.render(o, Zh);
    }
    _applyPMREM(e) {
      const t = this._renderer, i = t.autoClear;
      t.autoClear = false;
      const r = this._lodPlanes.length;
      for (let s = 1; s < r; s++) {
        const o = Math.sqrt(this._sigmas[s] * this._sigmas[s] - this._sigmas[s - 1] * this._sigmas[s - 1]), a = Tg[(r - s - 1) % Tg.length];
        this._blur(e, s - 1, s, o, a);
      }
      t.autoClear = i;
    }
    _blur(e, t, i, r, s) {
      const o = this._pingPongRenderTarget;
      this._halfBlur(e, o, t, i, r, "latitudinal", s), this._halfBlur(o, e, i, i, r, "longitudinal", s);
    }
    _halfBlur(e, t, i, r, s, o, a) {
      const l = this._renderer, c = this._blurMaterial;
      o !== "latitudinal" && o !== "longitudinal" && console.error("blur direction must be either latitudinal or longitudinal!");
      const u = 3, h = new Zn(this._lodPlanes[r], c), d = c.uniforms, f = this._sizeLods[i] - 1, m = isFinite(s) ? Math.PI / (2 * f) : 2 * Math.PI / (2 * as - 1), _ = s / m, p = isFinite(s) ? 1 + Math.floor(u * _) : as;
      p > as && console.warn(`sigmaRadians, ${s}, is too large and will clip, as it requested ${p} samples when the maximum is set to ${as}`);
      const g = [];
      let y = 0;
      for (let A = 0; A < as; ++A) {
        const P = A / _, M = Math.exp(-P * P / 2);
        g.push(M), A === 0 ? y += M : A < p && (y += 2 * M);
      }
      for (let A = 0; A < g.length; A++) g[A] = g[A] / y;
      d.envMap.value = e.texture, d.samples.value = p, d.weights.value = g, d.latitudinal.value = o === "latitudinal", a && (d.poleAxis.value = a);
      const { _lodMax: b } = this;
      d.dTheta.value = m, d.mipInt.value = b - i;
      const v = this._sizeLods[r], x = 3 * v * (r > b - bo ? r - b + bo : 0), C = 4 * (this._cubeSize - v);
      vc(t, x, C, 3 * v, 2 * v), l.setRenderTarget(t), l.render(h, Zh);
    }
  }
  function Lk(n) {
    const e = [], t = [], i = [];
    let r = n;
    const s = n - bo + 1 + wg.length;
    for (let o = 0; o < s; o++) {
      const a = Math.pow(2, r);
      t.push(a);
      let l = 1 / a;
      o > n - bo ? l = wg[o - n + bo - 1] : o === 0 && (l = 0), i.push(l);
      const c = 1 / (a - 2), u = -c, h = 1 + c, d = [
        u,
        u,
        h,
        u,
        h,
        h,
        u,
        u,
        h,
        h,
        u,
        h
      ], f = 6, m = 6, _ = 3, p = 2, g = 1, y = new Float32Array(_ * m * f), b = new Float32Array(p * m * f), v = new Float32Array(g * m * f);
      for (let C = 0; C < f; C++) {
        const A = C % 3 * 2 / 3 - 1, P = C > 2 ? 0 : -1, M = [
          A,
          P,
          0,
          A + 2 / 3,
          P,
          0,
          A + 2 / 3,
          P + 1,
          0,
          A,
          P,
          0,
          A + 2 / 3,
          P + 1,
          0,
          A,
          P + 1,
          0
        ];
        y.set(M, _ * m * C), b.set(d, p * m * C);
        const E = [
          C,
          C,
          C,
          C,
          C,
          C
        ];
        v.set(E, g * m * C);
      }
      const x = new i2();
      x.setAttribute("position", new nn(y, _)), x.setAttribute("uv", new nn(b, p)), x.setAttribute("faceIndex", new nn(v, g)), e.push(x), r > bo && r--;
    }
    return {
      lodPlanes: e,
      sizeLods: t,
      sigmas: i
    };
  }
  function Ag(n, e, t) {
    const i = new Cs(n, e, t);
    return i.texture.mapping = Af, i.texture.name = "PMREM.cubeUv", i.scissorTest = true, i;
  }
  function vc(n, e, t, i, r) {
    n.viewport.set(e, t, i, r), n.scissor.set(e, t, i, r);
  }
  function Ik(n, e, t) {
    const i = new Float32Array(as), r = new u1(0, 1, 0);
    return new Mr({
      name: "SphericalGaussianBlur",
      defines: {
        n: as,
        CUBEUV_TEXEL_WIDTH: 1 / e,
        CUBEUV_TEXEL_HEIGHT: 1 / t,
        CUBEUV_MAX_MIP: `${n}.0`
      },
      uniforms: {
        envMap: {
          value: null
        },
        samples: {
          value: 1
        },
        weights: {
          value: i
        },
        latitudinal: {
          value: false
        },
        dTheta: {
          value: 0
        },
        mipInt: {
          value: 0
        },
        poleAxis: {
          value: r
        }
      },
      vertexShader: i6(),
      fragmentShader: `

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;
			uniform int samples;
			uniform float weights[ n ];
			uniform bool latitudinal;
			uniform float dTheta;
			uniform float mipInt;
			uniform vec3 poleAxis;

			#define ENVMAP_TYPE_CUBE_UV
			#include <cube_uv_reflection_fragment>

			vec3 getSample( float theta, vec3 axis ) {

				float cosTheta = cos( theta );
				// Rodrigues' axis-angle rotation
				vec3 sampleDirection = vOutputDirection * cosTheta
					+ cross( axis, vOutputDirection ) * sin( theta )
					+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );

				return bilinearCubeUV( envMap, sampleDirection, mipInt );

			}

			void main() {

				vec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );

				if ( all( equal( axis, vec3( 0.0 ) ) ) ) {

					axis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );

				}

				axis = normalize( axis );

				gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );
				gl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );

				for ( int i = 1; i < n; i++ ) {

					if ( i >= samples ) {

						break;

					}

					float theta = dTheta * float( i );
					gl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );
					gl_FragColor.rgb += weights[ i ] * getSample( theta, axis );

				}

			}
		`,
      blending: _r,
      depthTest: false,
      depthWrite: false
    });
  }
  function Dg() {
    return new Mr({
      name: "EquirectangularToCubeUV",
      uniforms: {
        envMap: {
          value: null
        }
      },
      vertexShader: i6(),
      fragmentShader: `

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;

			#include <common>

			void main() {

				vec3 outputDirection = normalize( vOutputDirection );
				vec2 uv = equirectUv( outputDirection );

				gl_FragColor = vec4( texture2D ( envMap, uv ).rgb, 1.0 );

			}
		`,
      blending: _r,
      depthTest: false,
      depthWrite: false
    });
  }
  function Rg() {
    return new Mr({
      name: "CubemapToCubeUV",
      uniforms: {
        envMap: {
          value: null
        },
        flipEnvMap: {
          value: -1
        }
      },
      vertexShader: i6(),
      fragmentShader: `

			precision mediump float;
			precision mediump int;

			uniform float flipEnvMap;

			varying vec3 vOutputDirection;

			uniform samplerCube envMap;

			void main() {

				gl_FragColor = textureCube( envMap, vec3( flipEnvMap * vOutputDirection.x, vOutputDirection.yz ) );

			}
		`,
      blending: _r,
      depthTest: false,
      depthWrite: false
    });
  }
  function i6() {
    return `

		precision mediump float;
		precision mediump int;

		attribute float faceIndex;

		varying vec3 vOutputDirection;

		// RH coordinate system; PMREM face-indexing convention
		vec3 getDirection( vec2 uv, float face ) {

			uv = 2.0 * uv - 1.0;

			vec3 direction = vec3( uv, 1.0 );

			if ( face == 0.0 ) {

				direction = direction.zyx; // ( 1, v, u ) pos x

			} else if ( face == 1.0 ) {

				direction = direction.xzy;
				direction.xz *= -1.0; // ( -u, 1, -v ) pos y

			} else if ( face == 2.0 ) {

				direction.x *= -1.0; // ( -u, v, 1 ) pos z

			} else if ( face == 3.0 ) {

				direction = direction.zyx;
				direction.xz *= -1.0; // ( -1, v, -u ) neg x

			} else if ( face == 4.0 ) {

				direction = direction.xzy;
				direction.xy *= -1.0; // ( -u, -1, v ) neg y

			} else if ( face == 5.0 ) {

				direction.z *= -1.0; // ( u, v, -1 ) neg z

			}

			return direction;

		}

		void main() {

			vOutputDirection = getDirection( uv, faceIndex );
			gl_Position = vec4( position, 1.0 );

		}
	`;
  }
  function Fk(n) {
    let e = /* @__PURE__ */ new WeakMap(), t = null;
    function i(a) {
      if (a && a.isTexture) {
        const l = a.mapping, c = l === P4 || l === L4, u = l === na || l === ia;
        if (c || u) {
          let h = e.get(a);
          const d = h !== void 0 ? h.texture.pmremVersion : 0;
          if (a.isRenderTargetTexture && a.pmremVersion !== d) return t === null && (t = new Cg(n)), h = c ? t.fromEquirectangular(a, h) : t.fromCubemap(a, h), h.texture.pmremVersion = a.pmremVersion, e.set(a, h), h.texture;
          if (h !== void 0) return h.texture;
          {
            const f = a.image;
            return c && f && f.height > 0 || u && f && r(f) ? (t === null && (t = new Cg(n)), h = c ? t.fromEquirectangular(a) : t.fromCubemap(a), h.texture.pmremVersion = a.pmremVersion, e.set(a, h), a.addEventListener("dispose", s), h.texture) : null;
          }
        }
      }
      return a;
    }
    function r(a) {
      let l = 0;
      const c = 6;
      for (let u = 0; u < c; u++) a[u] !== void 0 && l++;
      return l === c;
    }
    function s(a) {
      const l = a.target;
      l.removeEventListener("dispose", s);
      const c = e.get(l);
      c !== void 0 && (e.delete(l), c.dispose());
    }
    function o() {
      e = /* @__PURE__ */ new WeakMap(), t !== null && (t.dispose(), t = null);
    }
    return {
      get: i,
      dispose: o
    };
  }
  function Ok(n) {
    const e = {};
    function t(i) {
      if (e[i] !== void 0) return e[i];
      let r;
      switch (i) {
        case "WEBGL_depth_texture":
          r = n.getExtension("WEBGL_depth_texture") || n.getExtension("MOZ_WEBGL_depth_texture") || n.getExtension("WEBKIT_WEBGL_depth_texture");
          break;
        case "EXT_texture_filter_anisotropic":
          r = n.getExtension("EXT_texture_filter_anisotropic") || n.getExtension("MOZ_EXT_texture_filter_anisotropic") || n.getExtension("WEBKIT_EXT_texture_filter_anisotropic");
          break;
        case "WEBGL_compressed_texture_s3tc":
          r = n.getExtension("WEBGL_compressed_texture_s3tc") || n.getExtension("MOZ_WEBGL_compressed_texture_s3tc") || n.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");
          break;
        case "WEBGL_compressed_texture_pvrtc":
          r = n.getExtension("WEBGL_compressed_texture_pvrtc") || n.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");
          break;
        default:
          r = n.getExtension(i);
      }
      return e[i] = r, r;
    }
    return {
      has: function(i) {
        return t(i) !== null;
      },
      init: function() {
        t("EXT_color_buffer_float"), t("WEBGL_clip_cull_distance"), t("OES_texture_float_linear"), t("EXT_color_buffer_half_float"), t("WEBGL_multisampled_render_to_texture"), t("WEBGL_render_shared_exponent");
      },
      get: function(i) {
        const r = t(i);
        return r === null && Oo("THREE.WebGLRenderer: " + i + " extension not supported."), r;
      }
    };
  }
  function kk(n, e, t, i) {
    const r = {}, s = /* @__PURE__ */ new WeakMap();
    function o(h) {
      const d = h.target;
      d.index !== null && e.remove(d.index);
      for (const m in d.attributes) e.remove(d.attributes[m]);
      d.removeEventListener("dispose", o), delete r[d.id];
      const f = s.get(d);
      f && (e.remove(f), s.delete(d)), i.releaseStatesOfGeometry(d), d.isInstancedBufferGeometry === true && delete d._maxInstanceCount, t.memory.geometries--;
    }
    function a(h, d) {
      return r[d.id] === true || (d.addEventListener("dispose", o), r[d.id] = true, t.memory.geometries++), d;
    }
    function l(h) {
      const d = h.attributes;
      for (const f in d) e.update(d[f], n.ARRAY_BUFFER);
    }
    function c(h) {
      const d = [], f = h.index, m = h.attributes.position;
      let _ = 0;
      if (f !== null) {
        const y = f.array;
        _ = f.version;
        for (let b = 0, v = y.length; b < v; b += 3) {
          const x = y[b + 0], C = y[b + 1], A = y[b + 2];
          d.push(x, C, C, A, A, x);
        }
      } else if (m !== void 0) {
        const y = m.array;
        _ = m.version;
        for (let b = 0, v = y.length / 3 - 1; b < v; b += 3) {
          const x = b + 0, C = b + 1, A = b + 2;
          d.push(x, C, C, A, A, x);
        }
      } else return;
      const p = new (_8(d) ? x8 : y8)(d, 1);
      p.version = _;
      const g = s.get(h);
      g && e.remove(g), s.set(h, p);
    }
    function u(h) {
      const d = s.get(h);
      if (d) {
        const f = h.index;
        f !== null && d.version < f.version && c(h);
      } else c(h);
      return s.get(h);
    }
    return {
      get: a,
      update: l,
      getWireframeAttribute: u
    };
  }
  function Nk(n, e, t) {
    let i;
    function r(d) {
      i = d;
    }
    let s, o;
    function a(d) {
      s = d.type, o = d.bytesPerElement;
    }
    function l(d, f) {
      n.drawElements(i, f, s, d * o), t.update(f, i, 1);
    }
    function c(d, f, m) {
      m !== 0 && (n.drawElementsInstanced(i, f, s, d * o, m), t.update(f, i, m));
    }
    function u(d, f, m) {
      if (m === 0) return;
      e.get("WEBGL_multi_draw").multiDrawElementsWEBGL(i, f, 0, s, d, 0, m);
      let p = 0;
      for (let g = 0; g < m; g++) p += f[g];
      t.update(p, i, 1);
    }
    function h(d, f, m, _) {
      if (m === 0) return;
      const p = e.get("WEBGL_multi_draw");
      if (p === null) for (let g = 0; g < d.length; g++) c(d[g] / o, f[g], _[g]);
      else {
        p.multiDrawElementsInstancedWEBGL(i, f, 0, s, d, 0, _, 0, m);
        let g = 0;
        for (let y = 0; y < m; y++) g += f[y] * _[y];
        t.update(g, i, 1);
      }
    }
    this.setMode = r, this.setIndex = a, this.render = l, this.renderInstances = c, this.renderMultiDraw = u, this.renderMultiDrawInstances = h;
  }
  function Uk(n) {
    const e = {
      geometries: 0,
      textures: 0
    }, t = {
      frame: 0,
      calls: 0,
      triangles: 0,
      points: 0,
      lines: 0
    };
    function i(s, o, a) {
      switch (t.calls++, o) {
        case n.TRIANGLES:
          t.triangles += a * (s / 3);
          break;
        case n.LINES:
          t.lines += a * (s / 2);
          break;
        case n.LINE_STRIP:
          t.lines += a * (s - 1);
          break;
        case n.LINE_LOOP:
          t.lines += a * s;
          break;
        case n.POINTS:
          t.points += a * s;
          break;
        default:
          console.error("THREE.WebGLInfo: Unknown draw mode:", o);
          break;
      }
    }
    function r() {
      t.calls = 0, t.triangles = 0, t.points = 0, t.lines = 0;
    }
    return {
      memory: e,
      render: t,
      programs: null,
      autoReset: true,
      reset: r,
      update: i
    };
  }
  function Bk(n, e, t) {
    const i = /* @__PURE__ */ new WeakMap(), r = new Je();
    function s(o, a, l) {
      const c = o.morphTargetInfluences, u = a.morphAttributes.position || a.morphAttributes.normal || a.morphAttributes.color, h = u !== void 0 ? u.length : 0;
      let d = i.get(a);
      if (d === void 0 || d.count !== h) {
        let M = function() {
          A.dispose(), i.delete(a), a.removeEventListener("dispose", M);
        };
        d !== void 0 && d.texture.dispose();
        const f = a.morphAttributes.position !== void 0, m = a.morphAttributes.normal !== void 0, _ = a.morphAttributes.color !== void 0, p = a.morphAttributes.position || [], g = a.morphAttributes.normal || [], y = a.morphAttributes.color || [];
        let b = 0;
        f === true && (b = 1), m === true && (b = 2), _ === true && (b = 3);
        let v = a.attributes.position.count * b, x = 1;
        v > e.maxTextureSize && (x = Math.ceil(v / e.maxTextureSize), v = e.maxTextureSize);
        const C = new Float32Array(v * x * 4 * h), A = new b8(C, v, x, h);
        A.type = L2, A.needsUpdate = true;
        const P = b * 4;
        for (let E = 0; E < h; E++) {
          const I = p[E], k = g[E], H = y[E], K = v * x * 4 * E;
          for (let J = 0; J < I.count; J++) {
            const z = J * P;
            f === true && (r.fromBufferAttribute(I, J), C[K + z + 0] = r.x, C[K + z + 1] = r.y, C[K + z + 2] = r.z, C[K + z + 3] = 0), m === true && (r.fromBufferAttribute(k, J), C[K + z + 4] = r.x, C[K + z + 5] = r.y, C[K + z + 6] = r.z, C[K + z + 7] = 0), _ === true && (r.fromBufferAttribute(H, J), C[K + z + 8] = r.x, C[K + z + 9] = r.y, C[K + z + 10] = r.z, C[K + z + 11] = H.itemSize === 4 ? r.w : 1);
          }
        }
        d = {
          count: h,
          texture: A,
          size: new Ue(v, x)
        }, i.set(a, d), a.addEventListener("dispose", M);
      }
      if (o.isInstancedMesh === true && o.morphTexture !== null) l.getUniforms().setValue(n, "morphTexture", o.morphTexture, t);
      else {
        let f = 0;
        for (let _ = 0; _ < c.length; _++) f += c[_];
        const m = a.morphTargetsRelative ? 1 : 1 - f;
        l.getUniforms().setValue(n, "morphTargetBaseInfluence", m), l.getUniforms().setValue(n, "morphTargetInfluences", c);
      }
      l.getUniforms().setValue(n, "morphTargetsTexture", d.texture, t), l.getUniforms().setValue(n, "morphTargetsTextureSize", d.size);
    }
    return {
      update: s
    };
  }
  function Hk(n, e, t, i) {
    let r = /* @__PURE__ */ new WeakMap();
    function s(l) {
      const c = i.render.frame, u = l.geometry, h = e.get(l, u);
      if (r.get(h) !== c && (e.update(h), r.set(h, c)), l.isInstancedMesh && (l.hasEventListener("dispose", a) === false && l.addEventListener("dispose", a), r.get(l) !== c && (t.update(l.instanceMatrix, n.ARRAY_BUFFER), l.instanceColor !== null && t.update(l.instanceColor, n.ARRAY_BUFFER), r.set(l, c))), l.isSkinnedMesh) {
        const d = l.skeleton;
        r.get(d) !== c && (d.update(), r.set(d, c));
      }
      return h;
    }
    function o() {
      r = /* @__PURE__ */ new WeakMap();
    }
    function a(l) {
      const c = l.target;
      c.removeEventListener("dispose", a), t.remove(c.instanceMatrix), c.instanceColor !== null && t.remove(c.instanceColor);
    }
    return {
      update: s,
      dispose: o
    };
  }
  const k8 = new hn(), Pg = new A8(1, 1), N8 = new b8(), U8 = new TL(), B8 = new w8(), Lg = [], Ig = [], Fg = new Float32Array(16), Og = new Float32Array(9), kg = new Float32Array(4);
  function Ma(n, e, t) {
    const i = n[0];
    if (i <= 0 || i > 0) return n;
    const r = e * t;
    let s = Lg[r];
    if (s === void 0 && (s = new Float32Array(r), Lg[r] = s), e !== 0) {
      i.toArray(s, 0);
      for (let o = 1, a = 0; o !== e; ++o) a += t, n[o].toArray(s, a);
    }
    return s;
  }
  function rn(n, e) {
    if (n.length !== e.length) return false;
    for (let t = 0, i = n.length; t < i; t++) if (n[t] !== e[t]) return false;
    return true;
  }
  function sn(n, e) {
    for (let t = 0, i = e.length; t < i; t++) n[t] = e[t];
  }
  function Lf(n, e) {
    let t = Ig[e];
    t === void 0 && (t = new Int32Array(e), Ig[e] = t);
    for (let i = 0; i !== e; ++i) t[i] = n.allocateTextureUnit();
    return t;
  }
  function zk(n, e) {
    const t = this.cache;
    t[0] !== e && (n.uniform1f(this.addr, e), t[0] = e);
  }
  function Vk(n, e) {
    const t = this.cache;
    if (e.x !== void 0) (t[0] !== e.x || t[1] !== e.y) && (n.uniform2f(this.addr, e.x, e.y), t[0] = e.x, t[1] = e.y);
    else {
      if (rn(t, e)) return;
      n.uniform2fv(this.addr, e), sn(t, e);
    }
  }
  function Gk(n, e) {
    const t = this.cache;
    if (e.x !== void 0) (t[0] !== e.x || t[1] !== e.y || t[2] !== e.z) && (n.uniform3f(this.addr, e.x, e.y, e.z), t[0] = e.x, t[1] = e.y, t[2] = e.z);
    else if (e.r !== void 0) (t[0] !== e.r || t[1] !== e.g || t[2] !== e.b) && (n.uniform3f(this.addr, e.r, e.g, e.b), t[0] = e.r, t[1] = e.g, t[2] = e.b);
    else {
      if (rn(t, e)) return;
      n.uniform3fv(this.addr, e), sn(t, e);
    }
  }
  function Wk(n, e) {
    const t = this.cache;
    if (e.x !== void 0) (t[0] !== e.x || t[1] !== e.y || t[2] !== e.z || t[3] !== e.w) && (n.uniform4f(this.addr, e.x, e.y, e.z, e.w), t[0] = e.x, t[1] = e.y, t[2] = e.z, t[3] = e.w);
    else {
      if (rn(t, e)) return;
      n.uniform4fv(this.addr, e), sn(t, e);
    }
  }
  function jk(n, e) {
    const t = this.cache, i = e.elements;
    if (i === void 0) {
      if (rn(t, e)) return;
      n.uniformMatrix2fv(this.addr, false, e), sn(t, e);
    } else {
      if (rn(t, i)) return;
      kg.set(i), n.uniformMatrix2fv(this.addr, false, kg), sn(t, i);
    }
  }
  function Xk(n, e) {
    const t = this.cache, i = e.elements;
    if (i === void 0) {
      if (rn(t, e)) return;
      n.uniformMatrix3fv(this.addr, false, e), sn(t, e);
    } else {
      if (rn(t, i)) return;
      Og.set(i), n.uniformMatrix3fv(this.addr, false, Og), sn(t, i);
    }
  }
  function $k(n, e) {
    const t = this.cache, i = e.elements;
    if (i === void 0) {
      if (rn(t, e)) return;
      n.uniformMatrix4fv(this.addr, false, e), sn(t, e);
    } else {
      if (rn(t, i)) return;
      Fg.set(i), n.uniformMatrix4fv(this.addr, false, Fg), sn(t, i);
    }
  }
  function qk(n, e) {
    const t = this.cache;
    t[0] !== e && (n.uniform1i(this.addr, e), t[0] = e);
  }
  function Yk(n, e) {
    const t = this.cache;
    if (e.x !== void 0) (t[0] !== e.x || t[1] !== e.y) && (n.uniform2i(this.addr, e.x, e.y), t[0] = e.x, t[1] = e.y);
    else {
      if (rn(t, e)) return;
      n.uniform2iv(this.addr, e), sn(t, e);
    }
  }
  function Kk(n, e) {
    const t = this.cache;
    if (e.x !== void 0) (t[0] !== e.x || t[1] !== e.y || t[2] !== e.z) && (n.uniform3i(this.addr, e.x, e.y, e.z), t[0] = e.x, t[1] = e.y, t[2] = e.z);
    else {
      if (rn(t, e)) return;
      n.uniform3iv(this.addr, e), sn(t, e);
    }
  }
  function Jk(n, e) {
    const t = this.cache;
    if (e.x !== void 0) (t[0] !== e.x || t[1] !== e.y || t[2] !== e.z || t[3] !== e.w) && (n.uniform4i(this.addr, e.x, e.y, e.z, e.w), t[0] = e.x, t[1] = e.y, t[2] = e.z, t[3] = e.w);
    else {
      if (rn(t, e)) return;
      n.uniform4iv(this.addr, e), sn(t, e);
    }
  }
  function Qk(n, e) {
    const t = this.cache;
    t[0] !== e && (n.uniform1ui(this.addr, e), t[0] = e);
  }
  function Zk(n, e) {
    const t = this.cache;
    if (e.x !== void 0) (t[0] !== e.x || t[1] !== e.y) && (n.uniform2ui(this.addr, e.x, e.y), t[0] = e.x, t[1] = e.y);
    else {
      if (rn(t, e)) return;
      n.uniform2uiv(this.addr, e), sn(t, e);
    }
  }
  function eN(n, e) {
    const t = this.cache;
    if (e.x !== void 0) (t[0] !== e.x || t[1] !== e.y || t[2] !== e.z) && (n.uniform3ui(this.addr, e.x, e.y, e.z), t[0] = e.x, t[1] = e.y, t[2] = e.z);
    else {
      if (rn(t, e)) return;
      n.uniform3uiv(this.addr, e), sn(t, e);
    }
  }
  function tN(n, e) {
    const t = this.cache;
    if (e.x !== void 0) (t[0] !== e.x || t[1] !== e.y || t[2] !== e.z || t[3] !== e.w) && (n.uniform4ui(this.addr, e.x, e.y, e.z, e.w), t[0] = e.x, t[1] = e.y, t[2] = e.z, t[3] = e.w);
    else {
      if (rn(t, e)) return;
      n.uniform4uiv(this.addr, e), sn(t, e);
    }
  }
  function nN(n, e, t) {
    const i = this.cache, r = t.allocateTextureUnit();
    i[0] !== r && (n.uniform1i(this.addr, r), i[0] = r);
    let s;
    this.type === n.SAMPLER_2D_SHADOW ? (Pg.compareFunction = g8, s = Pg) : s = k8, t.setTexture2D(e || s, r);
  }
  function iN(n, e, t) {
    const i = this.cache, r = t.allocateTextureUnit();
    i[0] !== r && (n.uniform1i(this.addr, r), i[0] = r), t.setTexture3D(e || U8, r);
  }
  function rN(n, e, t) {
    const i = this.cache, r = t.allocateTextureUnit();
    i[0] !== r && (n.uniform1i(this.addr, r), i[0] = r), t.setTextureCube(e || B8, r);
  }
  function sN(n, e, t) {
    const i = this.cache, r = t.allocateTextureUnit();
    i[0] !== r && (n.uniform1i(this.addr, r), i[0] = r), t.setTexture2DArray(e || N8, r);
  }
  function oN(n) {
    switch (n) {
      case 5126:
        return zk;
      case 35664:
        return Vk;
      case 35665:
        return Gk;
      case 35666:
        return Wk;
      case 35674:
        return jk;
      case 35675:
        return Xk;
      case 35676:
        return $k;
      case 5124:
      case 35670:
        return qk;
      case 35667:
      case 35671:
        return Yk;
      case 35668:
      case 35672:
        return Kk;
      case 35669:
      case 35673:
        return Jk;
      case 5125:
        return Qk;
      case 36294:
        return Zk;
      case 36295:
        return eN;
      case 36296:
        return tN;
      case 35678:
      case 36198:
      case 36298:
      case 36306:
      case 35682:
        return nN;
      case 35679:
      case 36299:
      case 36307:
        return iN;
      case 35680:
      case 36300:
      case 36308:
      case 36293:
        return rN;
      case 36289:
      case 36303:
      case 36311:
      case 36292:
        return sN;
    }
  }
  function aN(n, e) {
    n.uniform1fv(this.addr, e);
  }
  function lN(n, e) {
    const t = Ma(e, this.size, 2);
    n.uniform2fv(this.addr, t);
  }
  function cN(n, e) {
    const t = Ma(e, this.size, 3);
    n.uniform3fv(this.addr, t);
  }
  function uN(n, e) {
    const t = Ma(e, this.size, 4);
    n.uniform4fv(this.addr, t);
  }
  function fN(n, e) {
    const t = Ma(e, this.size, 4);
    n.uniformMatrix2fv(this.addr, false, t);
  }
  function hN(n, e) {
    const t = Ma(e, this.size, 9);
    n.uniformMatrix3fv(this.addr, false, t);
  }
  function dN(n, e) {
    const t = Ma(e, this.size, 16);
    n.uniformMatrix4fv(this.addr, false, t);
  }
  function pN(n, e) {
    n.uniform1iv(this.addr, e);
  }
  function mN(n, e) {
    n.uniform2iv(this.addr, e);
  }
  function gN(n, e) {
    n.uniform3iv(this.addr, e);
  }
  function _N(n, e) {
    n.uniform4iv(this.addr, e);
  }
  function bN(n, e) {
    n.uniform1uiv(this.addr, e);
  }
  function vN(n, e) {
    n.uniform2uiv(this.addr, e);
  }
  function yN(n, e) {
    n.uniform3uiv(this.addr, e);
  }
  function xN(n, e) {
    n.uniform4uiv(this.addr, e);
  }
  function SN(n, e, t) {
    const i = this.cache, r = e.length, s = Lf(t, r);
    rn(i, s) || (n.uniform1iv(this.addr, s), sn(i, s));
    for (let o = 0; o !== r; ++o) t.setTexture2D(e[o] || k8, s[o]);
  }
  function EN(n, e, t) {
    const i = this.cache, r = e.length, s = Lf(t, r);
    rn(i, s) || (n.uniform1iv(this.addr, s), sn(i, s));
    for (let o = 0; o !== r; ++o) t.setTexture3D(e[o] || U8, s[o]);
  }
  function wN(n, e, t) {
    const i = this.cache, r = e.length, s = Lf(t, r);
    rn(i, s) || (n.uniform1iv(this.addr, s), sn(i, s));
    for (let o = 0; o !== r; ++o) t.setTextureCube(e[o] || B8, s[o]);
  }
  function MN(n, e, t) {
    const i = this.cache, r = e.length, s = Lf(t, r);
    rn(i, s) || (n.uniform1iv(this.addr, s), sn(i, s));
    for (let o = 0; o !== r; ++o) t.setTexture2DArray(e[o] || N8, s[o]);
  }
  function TN(n) {
    switch (n) {
      case 5126:
        return aN;
      case 35664:
        return lN;
      case 35665:
        return cN;
      case 35666:
        return uN;
      case 35674:
        return fN;
      case 35675:
        return hN;
      case 35676:
        return dN;
      case 5124:
      case 35670:
        return pN;
      case 35667:
      case 35671:
        return mN;
      case 35668:
      case 35672:
        return gN;
      case 35669:
      case 35673:
        return _N;
      case 5125:
        return bN;
      case 36294:
        return vN;
      case 36295:
        return yN;
      case 36296:
        return xN;
      case 35678:
      case 36198:
      case 36298:
      case 36306:
      case 35682:
        return SN;
      case 35679:
      case 36299:
      case 36307:
        return EN;
      case 35680:
      case 36300:
      case 36308:
      case 36293:
        return wN;
      case 36289:
      case 36303:
      case 36311:
      case 36292:
        return MN;
    }
  }
  class CN {
    constructor(e, t, i) {
      this.id = e, this.addr = i, this.cache = [], this.type = t.type, this.setValue = oN(t.type);
    }
  }
  class AN {
    constructor(e, t, i) {
      this.id = e, this.addr = i, this.cache = [], this.type = t.type, this.size = t.size, this.setValue = TN(t.type);
    }
  }
  class DN {
    constructor(e) {
      this.id = e, this.seq = [], this.map = {};
    }
    setValue(e, t, i) {
      const r = this.seq;
      for (let s = 0, o = r.length; s !== o; ++s) {
        const a = r[s];
        a.setValue(e, t[a.id], i);
      }
    }
  }
  const rd = /(\w+)(\])?(\[|\.)?/g;
  function Ng(n, e) {
    n.seq.push(e), n.map[e.id] = e;
  }
  function RN(n, e, t) {
    const i = n.name, r = i.length;
    for (rd.lastIndex = 0; ; ) {
      const s = rd.exec(i), o = rd.lastIndex;
      let a = s[1];
      const l = s[2] === "]", c = s[3];
      if (l && (a = a | 0), c === void 0 || c === "[" && o + 2 === r) {
        Ng(t, c === void 0 ? new CN(a, n, e) : new AN(a, n, e));
        break;
      } else {
        let h = t.map[a];
        h === void 0 && (h = new DN(a), Ng(t, h)), t = h;
      }
    }
  }
  class Kc {
    constructor(e, t) {
      this.seq = [], this.map = {};
      const i = e.getProgramParameter(t, e.ACTIVE_UNIFORMS);
      for (let r = 0; r < i; ++r) {
        const s = e.getActiveUniform(t, r), o = e.getUniformLocation(t, s.name);
        RN(s, o, this);
      }
    }
    setValue(e, t, i, r) {
      const s = this.map[t];
      s !== void 0 && s.setValue(e, i, r);
    }
    setOptional(e, t, i) {
      const r = t[i];
      r !== void 0 && this.setValue(e, i, r);
    }
    static upload(e, t, i, r) {
      for (let s = 0, o = t.length; s !== o; ++s) {
        const a = t[s], l = i[a.id];
        l.needsUpdate !== false && a.setValue(e, l.value, r);
      }
    }
    static seqWithValue(e, t) {
      const i = [];
      for (let r = 0, s = e.length; r !== s; ++r) {
        const o = e[r];
        o.id in t && i.push(o);
      }
      return i;
    }
  }
  function Ug(n, e, t) {
    const i = n.createShader(e);
    return n.shaderSource(i, t), n.compileShader(i), i;
  }
  const PN = 37297;
  let LN = 0;
  function IN(n, e) {
    const t = n.split(`
`), i = [], r = Math.max(e - 6, 0), s = Math.min(e + 6, t.length);
    for (let o = r; o < s; o++) {
      const a = o + 1;
      i.push(`${a === e ? ">" : " "} ${a}: ${t[o]}`);
    }
    return i.join(`
`);
  }
  const Bg = new Te();
  function FN(n) {
    ze._getMatrix(Bg, ze.workingColorSpace, n);
    const e = `mat3( ${Bg.elements.map((t) => t.toFixed(4))} )`;
    switch (ze.getTransfer(n)) {
      case Fu:
        return [
          e,
          "LinearTransferOETF"
        ];
      case nt:
        return [
          e,
          "sRGBTransferOETF"
        ];
      default:
        return console.warn("THREE.WebGLProgram: Unsupported color space: ", n), [
          e,
          "LinearTransferOETF"
        ];
    }
  }
  function Hg(n, e, t) {
    const i = n.getShaderParameter(e, n.COMPILE_STATUS), r = n.getShaderInfoLog(e).trim();
    if (i && r === "") return "";
    const s = /ERROR: 0:(\d+)/.exec(r);
    if (s) {
      const o = parseInt(s[1]);
      return t.toUpperCase() + `

` + r + `

` + IN(n.getShaderSource(e), o);
    } else return r;
  }
  function ON(n, e) {
    const t = FN(e);
    return [
      `vec4 ${n}( vec4 value ) {`,
      `	return ${t[1]}( vec4( value.rgb * ${t[0]}, value.a ) );`,
      "}"
    ].join(`
`);
  }
  function kN(n, e) {
    let t;
    switch (e) {
      case FP:
        t = "Linear";
        break;
      case OP:
        t = "Reinhard";
        break;
      case kP:
        t = "Cineon";
        break;
      case NP:
        t = "ACESFilmic";
        break;
      case BP:
        t = "AgX";
        break;
      case HP:
        t = "Neutral";
        break;
      case UP:
        t = "Custom";
        break;
      default:
        console.warn("THREE.WebGLProgram: Unsupported toneMapping:", e), t = "Linear";
    }
    return "vec3 " + n + "( vec3 color ) { return " + t + "ToneMapping( color ); }";
  }
  const yc = new u1();
  function NN() {
    ze.getLuminanceCoefficients(yc);
    const n = yc.x.toFixed(4), e = yc.y.toFixed(4), t = yc.z.toFixed(4);
    return [
      "float luminance( const in vec3 rgb ) {",
      `	const vec3 weights = vec3( ${n}, ${e}, ${t} );`,
      "	return dot( weights, rgb );",
      "}"
    ].join(`
`);
  }
  function UN(n) {
    return [
      n.extensionClipCullDistance ? "#extension GL_ANGLE_clip_cull_distance : require" : "",
      n.extensionMultiDraw ? "#extension GL_ANGLE_multi_draw : require" : ""
    ].filter(Ja).join(`
`);
  }
  function BN(n) {
    const e = [];
    for (const t in n) {
      const i = n[t];
      i !== false && e.push("#define " + t + " " + i);
    }
    return e.join(`
`);
  }
  function HN(n, e) {
    const t = {}, i = n.getProgramParameter(e, n.ACTIVE_ATTRIBUTES);
    for (let r = 0; r < i; r++) {
      const s = n.getActiveAttrib(e, r), o = s.name;
      let a = 1;
      s.type === n.FLOAT_MAT2 && (a = 2), s.type === n.FLOAT_MAT3 && (a = 3), s.type === n.FLOAT_MAT4 && (a = 4), t[o] = {
        type: s.type,
        location: n.getAttribLocation(e, o),
        locationSize: a
      };
    }
    return t;
  }
  function Ja(n) {
    return n !== "";
  }
  function zg(n, e) {
    const t = e.numSpotLightShadows + e.numSpotLightMaps - e.numSpotLightShadowsWithMaps;
    return n.replace(/NUM_DIR_LIGHTS/g, e.numDirLights).replace(/NUM_SPOT_LIGHTS/g, e.numSpotLights).replace(/NUM_SPOT_LIGHT_MAPS/g, e.numSpotLightMaps).replace(/NUM_SPOT_LIGHT_COORDS/g, t).replace(/NUM_RECT_AREA_LIGHTS/g, e.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g, e.numPointLights).replace(/NUM_HEMI_LIGHTS/g, e.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g, e.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS/g, e.numSpotLightShadowsWithMaps).replace(/NUM_SPOT_LIGHT_SHADOWS/g, e.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g, e.numPointLightShadows);
  }
  function Vg(n, e) {
    return n.replace(/NUM_CLIPPING_PLANES/g, e.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g, e.numClippingPlanes - e.numClipIntersection);
  }
  const zN = /^[ \t]*#include +<([\w\d./]+)>/gm;
  function u9(n) {
    return n.replace(zN, GN);
  }
  const VN = /* @__PURE__ */ new Map();
  function GN(n, e) {
    let t = Re[e];
    if (t === void 0) {
      const i = VN.get(e);
      if (i !== void 0) t = Re[i], console.warn('THREE.WebGLRenderer: Shader chunk "%s" has been deprecated. Use "%s" instead.', e, i);
      else throw new Error("Can not resolve #include <" + e + ">");
    }
    return u9(t);
  }
  const WN = /#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;
  function Gg(n) {
    return n.replace(WN, jN);
  }
  function jN(n, e, t, i) {
    let r = "";
    for (let s = parseInt(e); s < parseInt(t); s++) r += i.replace(/\[\s*i\s*\]/g, "[ " + s + " ]").replace(/UNROLLED_LOOP_INDEX/g, s);
    return r;
  }
  function Wg(n) {
    let e = `precision ${n.precision} float;
	precision ${n.precision} int;
	precision ${n.precision} sampler2D;
	precision ${n.precision} samplerCube;
	precision ${n.precision} sampler3D;
	precision ${n.precision} sampler2DArray;
	precision ${n.precision} sampler2DShadow;
	precision ${n.precision} samplerCubeShadow;
	precision ${n.precision} sampler2DArrayShadow;
	precision ${n.precision} isampler2D;
	precision ${n.precision} isampler3D;
	precision ${n.precision} isamplerCube;
	precision ${n.precision} isampler2DArray;
	precision ${n.precision} usampler2D;
	precision ${n.precision} usampler3D;
	precision ${n.precision} usamplerCube;
	precision ${n.precision} usampler2DArray;
	`;
    return n.precision === "highp" ? e += `
#define HIGH_PRECISION` : n.precision === "mediump" ? e += `
#define MEDIUM_PRECISION` : n.precision === "lowp" && (e += `
#define LOW_PRECISION`), e;
  }
  function XN(n) {
    let e = "SHADOWMAP_TYPE_BASIC";
    return n.shadowMapType === r8 ? e = "SHADOWMAP_TYPE_PCF" : n.shadowMapType === dP ? e = "SHADOWMAP_TYPE_PCF_SOFT" : n.shadowMapType === c3 && (e = "SHADOWMAP_TYPE_VSM"), e;
  }
  function $N(n) {
    let e = "ENVMAP_TYPE_CUBE";
    if (n.envMap) switch (n.envMapMode) {
      case na:
      case ia:
        e = "ENVMAP_TYPE_CUBE";
        break;
      case Af:
        e = "ENVMAP_TYPE_CUBE_UV";
        break;
    }
    return e;
  }
  function qN(n) {
    let e = "ENVMAP_MODE_REFLECTION";
    if (n.envMap) switch (n.envMapMode) {
      case ia:
        e = "ENVMAP_MODE_REFRACTION";
        break;
    }
    return e;
  }
  function YN(n) {
    let e = "ENVMAP_BLENDING_NONE";
    if (n.envMap) switch (n.combine) {
      case s8:
        e = "ENVMAP_BLENDING_MULTIPLY";
        break;
      case LP:
        e = "ENVMAP_BLENDING_MIX";
        break;
      case IP:
        e = "ENVMAP_BLENDING_ADD";
        break;
    }
    return e;
  }
  function KN(n) {
    const e = n.envMapCubeUVHeight;
    if (e === null) return null;
    const t = Math.log2(e) - 2, i = 1 / e;
    return {
      texelWidth: 1 / (3 * Math.max(Math.pow(2, t), 7 * 16)),
      texelHeight: i,
      maxMip: t
    };
  }
  function JN(n, e, t, i) {
    const r = n.getContext(), s = t.defines;
    let o = t.vertexShader, a = t.fragmentShader;
    const l = XN(t), c = $N(t), u = qN(t), h = YN(t), d = KN(t), f = UN(t), m = BN(s), _ = r.createProgram();
    let p, g, y = t.glslVersion ? "#version " + t.glslVersion + `
` : "";
    t.isRawShaderMaterial ? (p = [
      "#define SHADER_TYPE " + t.shaderType,
      "#define SHADER_NAME " + t.shaderName,
      m
    ].filter(Ja).join(`
`), p.length > 0 && (p += `
`), g = [
      "#define SHADER_TYPE " + t.shaderType,
      "#define SHADER_NAME " + t.shaderName,
      m
    ].filter(Ja).join(`
`), g.length > 0 && (g += `
`)) : (p = [
      Wg(t),
      "#define SHADER_TYPE " + t.shaderType,
      "#define SHADER_NAME " + t.shaderName,
      m,
      t.extensionClipCullDistance ? "#define USE_CLIP_DISTANCE" : "",
      t.batching ? "#define USE_BATCHING" : "",
      t.batchingColor ? "#define USE_BATCHING_COLOR" : "",
      t.instancing ? "#define USE_INSTANCING" : "",
      t.instancingColor ? "#define USE_INSTANCING_COLOR" : "",
      t.instancingMorph ? "#define USE_INSTANCING_MORPH" : "",
      t.useFog && t.fog ? "#define USE_FOG" : "",
      t.useFog && t.fogExp2 ? "#define FOG_EXP2" : "",
      t.map ? "#define USE_MAP" : "",
      t.envMap ? "#define USE_ENVMAP" : "",
      t.envMap ? "#define " + u : "",
      t.lightMap ? "#define USE_LIGHTMAP" : "",
      t.aoMap ? "#define USE_AOMAP" : "",
      t.bumpMap ? "#define USE_BUMPMAP" : "",
      t.normalMap ? "#define USE_NORMALMAP" : "",
      t.normalMapObjectSpace ? "#define USE_NORMALMAP_OBJECTSPACE" : "",
      t.normalMapTangentSpace ? "#define USE_NORMALMAP_TANGENTSPACE" : "",
      t.displacementMap ? "#define USE_DISPLACEMENTMAP" : "",
      t.emissiveMap ? "#define USE_EMISSIVEMAP" : "",
      t.anisotropy ? "#define USE_ANISOTROPY" : "",
      t.anisotropyMap ? "#define USE_ANISOTROPYMAP" : "",
      t.clearcoatMap ? "#define USE_CLEARCOATMAP" : "",
      t.clearcoatRoughnessMap ? "#define USE_CLEARCOAT_ROUGHNESSMAP" : "",
      t.clearcoatNormalMap ? "#define USE_CLEARCOAT_NORMALMAP" : "",
      t.iridescenceMap ? "#define USE_IRIDESCENCEMAP" : "",
      t.iridescenceThicknessMap ? "#define USE_IRIDESCENCE_THICKNESSMAP" : "",
      t.specularMap ? "#define USE_SPECULARMAP" : "",
      t.specularColorMap ? "#define USE_SPECULAR_COLORMAP" : "",
      t.specularIntensityMap ? "#define USE_SPECULAR_INTENSITYMAP" : "",
      t.roughnessMap ? "#define USE_ROUGHNESSMAP" : "",
      t.metalnessMap ? "#define USE_METALNESSMAP" : "",
      t.alphaMap ? "#define USE_ALPHAMAP" : "",
      t.alphaHash ? "#define USE_ALPHAHASH" : "",
      t.transmission ? "#define USE_TRANSMISSION" : "",
      t.transmissionMap ? "#define USE_TRANSMISSIONMAP" : "",
      t.thicknessMap ? "#define USE_THICKNESSMAP" : "",
      t.sheenColorMap ? "#define USE_SHEEN_COLORMAP" : "",
      t.sheenRoughnessMap ? "#define USE_SHEEN_ROUGHNESSMAP" : "",
      t.mapUv ? "#define MAP_UV " + t.mapUv : "",
      t.alphaMapUv ? "#define ALPHAMAP_UV " + t.alphaMapUv : "",
      t.lightMapUv ? "#define LIGHTMAP_UV " + t.lightMapUv : "",
      t.aoMapUv ? "#define AOMAP_UV " + t.aoMapUv : "",
      t.emissiveMapUv ? "#define EMISSIVEMAP_UV " + t.emissiveMapUv : "",
      t.bumpMapUv ? "#define BUMPMAP_UV " + t.bumpMapUv : "",
      t.normalMapUv ? "#define NORMALMAP_UV " + t.normalMapUv : "",
      t.displacementMapUv ? "#define DISPLACEMENTMAP_UV " + t.displacementMapUv : "",
      t.metalnessMapUv ? "#define METALNESSMAP_UV " + t.metalnessMapUv : "",
      t.roughnessMapUv ? "#define ROUGHNESSMAP_UV " + t.roughnessMapUv : "",
      t.anisotropyMapUv ? "#define ANISOTROPYMAP_UV " + t.anisotropyMapUv : "",
      t.clearcoatMapUv ? "#define CLEARCOATMAP_UV " + t.clearcoatMapUv : "",
      t.clearcoatNormalMapUv ? "#define CLEARCOAT_NORMALMAP_UV " + t.clearcoatNormalMapUv : "",
      t.clearcoatRoughnessMapUv ? "#define CLEARCOAT_ROUGHNESSMAP_UV " + t.clearcoatRoughnessMapUv : "",
      t.iridescenceMapUv ? "#define IRIDESCENCEMAP_UV " + t.iridescenceMapUv : "",
      t.iridescenceThicknessMapUv ? "#define IRIDESCENCE_THICKNESSMAP_UV " + t.iridescenceThicknessMapUv : "",
      t.sheenColorMapUv ? "#define SHEEN_COLORMAP_UV " + t.sheenColorMapUv : "",
      t.sheenRoughnessMapUv ? "#define SHEEN_ROUGHNESSMAP_UV " + t.sheenRoughnessMapUv : "",
      t.specularMapUv ? "#define SPECULARMAP_UV " + t.specularMapUv : "",
      t.specularColorMapUv ? "#define SPECULAR_COLORMAP_UV " + t.specularColorMapUv : "",
      t.specularIntensityMapUv ? "#define SPECULAR_INTENSITYMAP_UV " + t.specularIntensityMapUv : "",
      t.transmissionMapUv ? "#define TRANSMISSIONMAP_UV " + t.transmissionMapUv : "",
      t.thicknessMapUv ? "#define THICKNESSMAP_UV " + t.thicknessMapUv : "",
      t.vertexTangents && t.flatShading === false ? "#define USE_TANGENT" : "",
      t.vertexColors ? "#define USE_COLOR" : "",
      t.vertexAlphas ? "#define USE_COLOR_ALPHA" : "",
      t.vertexUv1s ? "#define USE_UV1" : "",
      t.vertexUv2s ? "#define USE_UV2" : "",
      t.vertexUv3s ? "#define USE_UV3" : "",
      t.pointsUvs ? "#define USE_POINTS_UV" : "",
      t.flatShading ? "#define FLAT_SHADED" : "",
      t.skinning ? "#define USE_SKINNING" : "",
      t.morphTargets ? "#define USE_MORPHTARGETS" : "",
      t.morphNormals && t.flatShading === false ? "#define USE_MORPHNORMALS" : "",
      t.morphColors ? "#define USE_MORPHCOLORS" : "",
      t.morphTargetsCount > 0 ? "#define MORPHTARGETS_TEXTURE_STRIDE " + t.morphTextureStride : "",
      t.morphTargetsCount > 0 ? "#define MORPHTARGETS_COUNT " + t.morphTargetsCount : "",
      t.doubleSided ? "#define DOUBLE_SIDED" : "",
      t.flipSided ? "#define FLIP_SIDED" : "",
      t.shadowMapEnabled ? "#define USE_SHADOWMAP" : "",
      t.shadowMapEnabled ? "#define " + l : "",
      t.sizeAttenuation ? "#define USE_SIZEATTENUATION" : "",
      t.numLightProbes > 0 ? "#define USE_LIGHT_PROBES" : "",
      t.logarithmicDepthBuffer ? "#define USE_LOGDEPTHBUF" : "",
      t.reverseDepthBuffer ? "#define USE_REVERSEDEPTHBUF" : "",
      "uniform mat4 modelMatrix;",
      "uniform mat4 modelViewMatrix;",
      "uniform mat4 projectionMatrix;",
      "uniform mat4 viewMatrix;",
      "uniform mat3 normalMatrix;",
      "uniform vec3 cameraPosition;",
      "uniform bool isOrthographic;",
      "#ifdef USE_INSTANCING",
      "	attribute mat4 instanceMatrix;",
      "#endif",
      "#ifdef USE_INSTANCING_COLOR",
      "	attribute vec3 instanceColor;",
      "#endif",
      "#ifdef USE_INSTANCING_MORPH",
      "	uniform sampler2D morphTexture;",
      "#endif",
      "attribute vec3 position;",
      "attribute vec3 normal;",
      "attribute vec2 uv;",
      "#ifdef USE_UV1",
      "	attribute vec2 uv1;",
      "#endif",
      "#ifdef USE_UV2",
      "	attribute vec2 uv2;",
      "#endif",
      "#ifdef USE_UV3",
      "	attribute vec2 uv3;",
      "#endif",
      "#ifdef USE_TANGENT",
      "	attribute vec4 tangent;",
      "#endif",
      "#if defined( USE_COLOR_ALPHA )",
      "	attribute vec4 color;",
      "#elif defined( USE_COLOR )",
      "	attribute vec3 color;",
      "#endif",
      "#ifdef USE_SKINNING",
      "	attribute vec4 skinIndex;",
      "	attribute vec4 skinWeight;",
      "#endif",
      `
`
    ].filter(Ja).join(`
`), g = [
      Wg(t),
      "#define SHADER_TYPE " + t.shaderType,
      "#define SHADER_NAME " + t.shaderName,
      m,
      t.useFog && t.fog ? "#define USE_FOG" : "",
      t.useFog && t.fogExp2 ? "#define FOG_EXP2" : "",
      t.alphaToCoverage ? "#define ALPHA_TO_COVERAGE" : "",
      t.map ? "#define USE_MAP" : "",
      t.matcap ? "#define USE_MATCAP" : "",
      t.envMap ? "#define USE_ENVMAP" : "",
      t.envMap ? "#define " + c : "",
      t.envMap ? "#define " + u : "",
      t.envMap ? "#define " + h : "",
      d ? "#define CUBEUV_TEXEL_WIDTH " + d.texelWidth : "",
      d ? "#define CUBEUV_TEXEL_HEIGHT " + d.texelHeight : "",
      d ? "#define CUBEUV_MAX_MIP " + d.maxMip + ".0" : "",
      t.lightMap ? "#define USE_LIGHTMAP" : "",
      t.aoMap ? "#define USE_AOMAP" : "",
      t.bumpMap ? "#define USE_BUMPMAP" : "",
      t.normalMap ? "#define USE_NORMALMAP" : "",
      t.normalMapObjectSpace ? "#define USE_NORMALMAP_OBJECTSPACE" : "",
      t.normalMapTangentSpace ? "#define USE_NORMALMAP_TANGENTSPACE" : "",
      t.emissiveMap ? "#define USE_EMISSIVEMAP" : "",
      t.anisotropy ? "#define USE_ANISOTROPY" : "",
      t.anisotropyMap ? "#define USE_ANISOTROPYMAP" : "",
      t.clearcoat ? "#define USE_CLEARCOAT" : "",
      t.clearcoatMap ? "#define USE_CLEARCOATMAP" : "",
      t.clearcoatRoughnessMap ? "#define USE_CLEARCOAT_ROUGHNESSMAP" : "",
      t.clearcoatNormalMap ? "#define USE_CLEARCOAT_NORMALMAP" : "",
      t.dispersion ? "#define USE_DISPERSION" : "",
      t.iridescence ? "#define USE_IRIDESCENCE" : "",
      t.iridescenceMap ? "#define USE_IRIDESCENCEMAP" : "",
      t.iridescenceThicknessMap ? "#define USE_IRIDESCENCE_THICKNESSMAP" : "",
      t.specularMap ? "#define USE_SPECULARMAP" : "",
      t.specularColorMap ? "#define USE_SPECULAR_COLORMAP" : "",
      t.specularIntensityMap ? "#define USE_SPECULAR_INTENSITYMAP" : "",
      t.roughnessMap ? "#define USE_ROUGHNESSMAP" : "",
      t.metalnessMap ? "#define USE_METALNESSMAP" : "",
      t.alphaMap ? "#define USE_ALPHAMAP" : "",
      t.alphaTest ? "#define USE_ALPHATEST" : "",
      t.alphaHash ? "#define USE_ALPHAHASH" : "",
      t.sheen ? "#define USE_SHEEN" : "",
      t.sheenColorMap ? "#define USE_SHEEN_COLORMAP" : "",
      t.sheenRoughnessMap ? "#define USE_SHEEN_ROUGHNESSMAP" : "",
      t.transmission ? "#define USE_TRANSMISSION" : "",
      t.transmissionMap ? "#define USE_TRANSMISSIONMAP" : "",
      t.thicknessMap ? "#define USE_THICKNESSMAP" : "",
      t.vertexTangents && t.flatShading === false ? "#define USE_TANGENT" : "",
      t.vertexColors || t.instancingColor || t.batchingColor ? "#define USE_COLOR" : "",
      t.vertexAlphas ? "#define USE_COLOR_ALPHA" : "",
      t.vertexUv1s ? "#define USE_UV1" : "",
      t.vertexUv2s ? "#define USE_UV2" : "",
      t.vertexUv3s ? "#define USE_UV3" : "",
      t.pointsUvs ? "#define USE_POINTS_UV" : "",
      t.gradientMap ? "#define USE_GRADIENTMAP" : "",
      t.flatShading ? "#define FLAT_SHADED" : "",
      t.doubleSided ? "#define DOUBLE_SIDED" : "",
      t.flipSided ? "#define FLIP_SIDED" : "",
      t.shadowMapEnabled ? "#define USE_SHADOWMAP" : "",
      t.shadowMapEnabled ? "#define " + l : "",
      t.premultipliedAlpha ? "#define PREMULTIPLIED_ALPHA" : "",
      t.numLightProbes > 0 ? "#define USE_LIGHT_PROBES" : "",
      t.decodeVideoTexture ? "#define DECODE_VIDEO_TEXTURE" : "",
      t.decodeVideoTextureEmissive ? "#define DECODE_VIDEO_TEXTURE_EMISSIVE" : "",
      t.logarithmicDepthBuffer ? "#define USE_LOGDEPTHBUF" : "",
      t.reverseDepthBuffer ? "#define USE_REVERSEDEPTHBUF" : "",
      "uniform mat4 viewMatrix;",
      "uniform vec3 cameraPosition;",
      "uniform bool isOrthographic;",
      t.toneMapping !== br ? "#define TONE_MAPPING" : "",
      t.toneMapping !== br ? Re.tonemapping_pars_fragment : "",
      t.toneMapping !== br ? kN("toneMapping", t.toneMapping) : "",
      t.dithering ? "#define DITHERING" : "",
      t.opaque ? "#define OPAQUE" : "",
      Re.colorspace_pars_fragment,
      ON("linearToOutputTexel", t.outputColorSpace),
      NN(),
      t.useDepthPacking ? "#define DEPTH_PACKING " + t.depthPacking : "",
      `
`
    ].filter(Ja).join(`
`)), o = u9(o), o = zg(o, t), o = Vg(o, t), a = u9(a), a = zg(a, t), a = Vg(a, t), o = Gg(o), a = Gg(a), t.isRawShaderMaterial !== true && (y = `#version 300 es
`, p = [
      f,
      "#define attribute in",
      "#define varying out",
      "#define texture2D texture"
    ].join(`
`) + `
` + p, g = [
      "#define varying in",
      t.glslVersion === Om ? "" : "layout(location = 0) out highp vec4 pc_fragColor;",
      t.glslVersion === Om ? "" : "#define gl_FragColor pc_fragColor",
      "#define gl_FragDepthEXT gl_FragDepth",
      "#define texture2D texture",
      "#define textureCube texture",
      "#define texture2DProj textureProj",
      "#define texture2DLodEXT textureLod",
      "#define texture2DProjLodEXT textureProjLod",
      "#define textureCubeLodEXT textureLod",
      "#define texture2DGradEXT textureGrad",
      "#define texture2DProjGradEXT textureProjGrad",
      "#define textureCubeGradEXT textureGrad"
    ].join(`
`) + `
` + g);
    const b = y + p + o, v = y + g + a, x = Ug(r, r.VERTEX_SHADER, b), C = Ug(r, r.FRAGMENT_SHADER, v);
    r.attachShader(_, x), r.attachShader(_, C), t.index0AttributeName !== void 0 ? r.bindAttribLocation(_, 0, t.index0AttributeName) : t.morphTargets === true && r.bindAttribLocation(_, 0, "position"), r.linkProgram(_);
    function A(I) {
      if (n.debug.checkShaderErrors) {
        const k = r.getProgramInfoLog(_).trim(), H = r.getShaderInfoLog(x).trim(), K = r.getShaderInfoLog(C).trim();
        let J = true, z = true;
        if (r.getProgramParameter(_, r.LINK_STATUS) === false) if (J = false, typeof n.debug.onShaderError == "function") n.debug.onShaderError(r, _, x, C);
        else {
          const $ = Hg(r, x, "vertex"), G = Hg(r, C, "fragment");
          console.error("THREE.WebGLProgram: Shader Error " + r.getError() + " - VALIDATE_STATUS " + r.getProgramParameter(_, r.VALIDATE_STATUS) + `

Material Name: ` + I.name + `
Material Type: ` + I.type + `

Program Info Log: ` + k + `
` + $ + `
` + G);
        }
        else k !== "" ? console.warn("THREE.WebGLProgram: Program Info Log:", k) : (H === "" || K === "") && (z = false);
        z && (I.diagnostics = {
          runnable: J,
          programLog: k,
          vertexShader: {
            log: H,
            prefix: p
          },
          fragmentShader: {
            log: K,
            prefix: g
          }
        });
      }
      r.deleteShader(x), r.deleteShader(C), P = new Kc(r, _), M = HN(r, _);
    }
    let P;
    this.getUniforms = function() {
      return P === void 0 && A(this), P;
    };
    let M;
    this.getAttributes = function() {
      return M === void 0 && A(this), M;
    };
    let E = t.rendererExtensionParallelShaderCompile === false;
    return this.isReady = function() {
      return E === false && (E = r.getProgramParameter(_, PN)), E;
    }, this.destroy = function() {
      i.releaseStatesOfProgram(this), r.deleteProgram(_), this.program = void 0;
    }, this.type = t.shaderType, this.name = t.shaderName, this.id = LN++, this.cacheKey = e, this.usedTimes = 1, this.program = _, this.vertexShader = x, this.fragmentShader = C, this;
  }
  let QN = 0;
  class ZN {
    constructor() {
      this.shaderCache = /* @__PURE__ */ new Map(), this.materialCache = /* @__PURE__ */ new Map();
    }
    update(e) {
      const t = e.vertexShader, i = e.fragmentShader, r = this._getShaderStage(t), s = this._getShaderStage(i), o = this._getShaderCacheForMaterial(e);
      return o.has(r) === false && (o.add(r), r.usedTimes++), o.has(s) === false && (o.add(s), s.usedTimes++), this;
    }
    remove(e) {
      const t = this.materialCache.get(e);
      for (const i of t) i.usedTimes--, i.usedTimes === 0 && this.shaderCache.delete(i.code);
      return this.materialCache.delete(e), this;
    }
    getVertexShaderID(e) {
      return this._getShaderStage(e.vertexShader).id;
    }
    getFragmentShaderID(e) {
      return this._getShaderStage(e.fragmentShader).id;
    }
    dispose() {
      this.shaderCache.clear(), this.materialCache.clear();
    }
    _getShaderCacheForMaterial(e) {
      const t = this.materialCache;
      let i = t.get(e);
      return i === void 0 && (i = /* @__PURE__ */ new Set(), t.set(e, i)), i;
    }
    _getShaderStage(e) {
      const t = this.shaderCache;
      let i = t.get(e);
      return i === void 0 && (i = new eU(e), t.set(e, i)), i;
    }
  }
  class eU {
    constructor(e) {
      this.id = QN++, this.code = e, this.usedTimes = 0;
    }
  }
  function tU(n, e, t, i, r, s, o) {
    const a = new Xp(), l = new ZN(), c = /* @__PURE__ */ new Set(), u = [], h = r.logarithmicDepthBuffer, d = r.vertexTextures;
    let f = r.precision;
    const m = {
      MeshDepthMaterial: "depth",
      MeshDistanceMaterial: "distanceRGBA",
      MeshNormalMaterial: "normal",
      MeshBasicMaterial: "basic",
      MeshLambertMaterial: "lambert",
      MeshPhongMaterial: "phong",
      MeshToonMaterial: "toon",
      MeshStandardMaterial: "physical",
      MeshPhysicalMaterial: "physical",
      MeshMatcapMaterial: "matcap",
      LineBasicMaterial: "basic",
      LineDashedMaterial: "dashed",
      PointsMaterial: "points",
      ShadowMaterial: "shadow",
      SpriteMaterial: "sprite"
    };
    function _(M) {
      return c.add(M), M === 0 ? "uv" : `uv${M}`;
    }
    function p(M, E, I, k, H) {
      const K = k.fog, J = H.geometry, z = M.isMeshStandardMaterial ? k.environment : null, $ = (M.isMeshStandardMaterial ? t : e).get(M.envMap || z), G = $ && $.mapping === Af ? $.image.height : null, Q = m[M.type];
      M.precision !== null && (f = r.getMaxPrecision(M.precision), f !== M.precision && console.warn("THREE.WebGLProgram.getParameters:", M.precision, "not supported, using", f, "instead."));
      const V = J.morphAttributes.position || J.morphAttributes.normal || J.morphAttributes.color, w1 = V !== void 0 ? V.length : 0;
      let m1 = 0;
      J.morphAttributes.position !== void 0 && (m1 = 1), J.morphAttributes.normal !== void 0 && (m1 = 2), J.morphAttributes.color !== void 0 && (m1 = 3);
      let I1, Z, f1, M1;
      if (Q) {
        const t1 = Ii[Q];
        I1 = t1.vertexShader, Z = t1.fragmentShader;
      } else I1 = M.vertexShader, Z = M.fragmentShader, l.update(M), f1 = l.getVertexShaderID(M), M1 = l.getFragmentShaderID(M);
      const W = n.getRenderTarget(), r1 = n.state.buffers.depth.getReversed(), v1 = H.isInstancedMesh === true, S1 = H.isBatchedMesh === true, z1 = !!M.map, Z1 = !!M.matcap, F = !!$, T = !!M.aoMap, e1 = !!M.lightMap, _1 = !!M.bumpMap, B = !!M.normalMap, l1 = !!M.displacementMap, D1 = !!M.emissiveMap, p1 = !!M.metalnessMap, o1 = !!M.roughnessMap, E1 = M.anisotropy > 0, N = M.clearcoat > 0, D = M.dispersion > 0, q = M.iridescence > 0, c1 = M.sheen > 0, h1 = M.transmission > 0, d1 = E1 && !!M.anisotropyMap, U1 = N && !!M.clearcoatMap, B1 = N && !!M.clearcoatNormalMap, j1 = N && !!M.clearcoatRoughnessMap, G1 = q && !!M.iridescenceMap, A1 = q && !!M.iridescenceThicknessMap, $1 = c1 && !!M.sheenColorMap, ne = c1 && !!M.sheenRoughnessMap, K1 = !!M.specularMap, V1 = !!M.specularColorMap, ie = !!M.specularIntensityMap, X = h1 && !!M.transmissionMap, X1 = h1 && !!M.thicknessMap, P1 = !!M.gradientMap, Y1 = !!M.alphaMap, N1 = M.alphaTest > 0, L1 = !!M.alphaHash, R1 = !!M.extensions;
      let j = br;
      M.toneMapped && (W === null || W.isXRRenderTarget === true) && (j = n.toneMapping);
      const T1 = {
        shaderID: Q,
        shaderType: M.type,
        shaderName: M.name,
        vertexShader: I1,
        fragmentShader: Z,
        defines: M.defines,
        customVertexShaderID: f1,
        customFragmentShaderID: M1,
        isRawShaderMaterial: M.isRawShaderMaterial === true,
        glslVersion: M.glslVersion,
        precision: f,
        batching: S1,
        batchingColor: S1 && H._colorsTexture !== null,
        instancing: v1,
        instancingColor: v1 && H.instanceColor !== null,
        instancingMorph: v1 && H.morphTexture !== null,
        supportsVertexTextures: d,
        outputColorSpace: W === null ? n.outputColorSpace : W.isXRRenderTarget === true ? W.texture.colorSpace : kn,
        alphaToCoverage: !!M.alphaToCoverage,
        map: z1,
        matcap: Z1,
        envMap: F,
        envMapMode: F && $.mapping,
        envMapCubeUVHeight: G,
        aoMap: T,
        lightMap: e1,
        bumpMap: _1,
        normalMap: B,
        displacementMap: d && l1,
        emissiveMap: D1,
        normalMapObjectSpace: B && M.normalMapType === XP,
        normalMapTangentSpace: B && M.normalMapType === Rf,
        metalnessMap: p1,
        roughnessMap: o1,
        anisotropy: E1,
        anisotropyMap: d1,
        clearcoat: N,
        clearcoatMap: U1,
        clearcoatNormalMap: B1,
        clearcoatRoughnessMap: j1,
        dispersion: D,
        iridescence: q,
        iridescenceMap: G1,
        iridescenceThicknessMap: A1,
        sheen: c1,
        sheenColorMap: $1,
        sheenRoughnessMap: ne,
        specularMap: K1,
        specularColorMap: V1,
        specularIntensityMap: ie,
        transmission: h1,
        transmissionMap: X,
        thicknessMap: X1,
        gradientMap: P1,
        opaque: M.transparent === false && M.blending === Fo && M.alphaToCoverage === false,
        alphaMap: Y1,
        alphaTest: N1,
        alphaHash: L1,
        combine: M.combine,
        mapUv: z1 && _(M.map.channel),
        aoMapUv: T && _(M.aoMap.channel),
        lightMapUv: e1 && _(M.lightMap.channel),
        bumpMapUv: _1 && _(M.bumpMap.channel),
        normalMapUv: B && _(M.normalMap.channel),
        displacementMapUv: l1 && _(M.displacementMap.channel),
        emissiveMapUv: D1 && _(M.emissiveMap.channel),
        metalnessMapUv: p1 && _(M.metalnessMap.channel),
        roughnessMapUv: o1 && _(M.roughnessMap.channel),
        anisotropyMapUv: d1 && _(M.anisotropyMap.channel),
        clearcoatMapUv: U1 && _(M.clearcoatMap.channel),
        clearcoatNormalMapUv: B1 && _(M.clearcoatNormalMap.channel),
        clearcoatRoughnessMapUv: j1 && _(M.clearcoatRoughnessMap.channel),
        iridescenceMapUv: G1 && _(M.iridescenceMap.channel),
        iridescenceThicknessMapUv: A1 && _(M.iridescenceThicknessMap.channel),
        sheenColorMapUv: $1 && _(M.sheenColorMap.channel),
        sheenRoughnessMapUv: ne && _(M.sheenRoughnessMap.channel),
        specularMapUv: K1 && _(M.specularMap.channel),
        specularColorMapUv: V1 && _(M.specularColorMap.channel),
        specularIntensityMapUv: ie && _(M.specularIntensityMap.channel),
        transmissionMapUv: X && _(M.transmissionMap.channel),
        thicknessMapUv: X1 && _(M.thicknessMap.channel),
        alphaMapUv: Y1 && _(M.alphaMap.channel),
        vertexTangents: !!J.attributes.tangent && (B || E1),
        vertexColors: M.vertexColors,
        vertexAlphas: M.vertexColors === true && !!J.attributes.color && J.attributes.color.itemSize === 4,
        pointsUvs: H.isPoints === true && !!J.attributes.uv && (z1 || Y1),
        fog: !!K,
        useFog: M.fog === true,
        fogExp2: !!K && K.isFogExp2,
        flatShading: M.flatShading === true,
        sizeAttenuation: M.sizeAttenuation === true,
        logarithmicDepthBuffer: h,
        reverseDepthBuffer: r1,
        skinning: H.isSkinnedMesh === true,
        morphTargets: J.morphAttributes.position !== void 0,
        morphNormals: J.morphAttributes.normal !== void 0,
        morphColors: J.morphAttributes.color !== void 0,
        morphTargetsCount: w1,
        morphTextureStride: m1,
        numDirLights: E.directional.length,
        numPointLights: E.point.length,
        numSpotLights: E.spot.length,
        numSpotLightMaps: E.spotLightMap.length,
        numRectAreaLights: E.rectArea.length,
        numHemiLights: E.hemi.length,
        numDirLightShadows: E.directionalShadowMap.length,
        numPointLightShadows: E.pointShadowMap.length,
        numSpotLightShadows: E.spotShadowMap.length,
        numSpotLightShadowsWithMaps: E.numSpotLightShadowsWithMaps,
        numLightProbes: E.numLightProbes,
        numClippingPlanes: o.numPlanes,
        numClipIntersection: o.numIntersection,
        dithering: M.dithering,
        shadowMapEnabled: n.shadowMap.enabled && I.length > 0,
        shadowMapType: n.shadowMap.type,
        toneMapping: j,
        decodeVideoTexture: z1 && M.map.isVideoTexture === true && ze.getTransfer(M.map.colorSpace) === nt,
        decodeVideoTextureEmissive: D1 && M.emissiveMap.isVideoTexture === true && ze.getTransfer(M.emissiveMap.colorSpace) === nt,
        premultipliedAlpha: M.premultipliedAlpha,
        doubleSided: M.side === Oi,
        flipSided: M.side === h2,
        useDepthPacking: M.depthPacking >= 0,
        depthPacking: M.depthPacking || 0,
        index0AttributeName: M.index0AttributeName,
        extensionClipCullDistance: R1 && M.extensions.clipCullDistance === true && i.has("WEBGL_clip_cull_distance"),
        extensionMultiDraw: (R1 && M.extensions.multiDraw === true || S1) && i.has("WEBGL_multi_draw"),
        rendererExtensionParallelShaderCompile: i.has("KHR_parallel_shader_compile"),
        customProgramCacheKey: M.customProgramCacheKey()
      };
      return T1.vertexUv1s = c.has(1), T1.vertexUv2s = c.has(2), T1.vertexUv3s = c.has(3), c.clear(), T1;
    }
    function g(M) {
      const E = [];
      if (M.shaderID ? E.push(M.shaderID) : (E.push(M.customVertexShaderID), E.push(M.customFragmentShaderID)), M.defines !== void 0) for (const I in M.defines) E.push(I), E.push(M.defines[I]);
      return M.isRawShaderMaterial === false && (y(E, M), b(E, M), E.push(n.outputColorSpace)), E.push(M.customProgramCacheKey), E.join();
    }
    function y(M, E) {
      M.push(E.precision), M.push(E.outputColorSpace), M.push(E.envMapMode), M.push(E.envMapCubeUVHeight), M.push(E.mapUv), M.push(E.alphaMapUv), M.push(E.lightMapUv), M.push(E.aoMapUv), M.push(E.bumpMapUv), M.push(E.normalMapUv), M.push(E.displacementMapUv), M.push(E.emissiveMapUv), M.push(E.metalnessMapUv), M.push(E.roughnessMapUv), M.push(E.anisotropyMapUv), M.push(E.clearcoatMapUv), M.push(E.clearcoatNormalMapUv), M.push(E.clearcoatRoughnessMapUv), M.push(E.iridescenceMapUv), M.push(E.iridescenceThicknessMapUv), M.push(E.sheenColorMapUv), M.push(E.sheenRoughnessMapUv), M.push(E.specularMapUv), M.push(E.specularColorMapUv), M.push(E.specularIntensityMapUv), M.push(E.transmissionMapUv), M.push(E.thicknessMapUv), M.push(E.combine), M.push(E.fogExp2), M.push(E.sizeAttenuation), M.push(E.morphTargetsCount), M.push(E.morphAttributeCount), M.push(E.numDirLights), M.push(E.numPointLights), M.push(E.numSpotLights), M.push(E.numSpotLightMaps), M.push(E.numHemiLights), M.push(E.numRectAreaLights), M.push(E.numDirLightShadows), M.push(E.numPointLightShadows), M.push(E.numSpotLightShadows), M.push(E.numSpotLightShadowsWithMaps), M.push(E.numLightProbes), M.push(E.shadowMapType), M.push(E.toneMapping), M.push(E.numClippingPlanes), M.push(E.numClipIntersection), M.push(E.depthPacking);
    }
    function b(M, E) {
      a.disableAll(), E.supportsVertexTextures && a.enable(0), E.instancing && a.enable(1), E.instancingColor && a.enable(2), E.instancingMorph && a.enable(3), E.matcap && a.enable(4), E.envMap && a.enable(5), E.normalMapObjectSpace && a.enable(6), E.normalMapTangentSpace && a.enable(7), E.clearcoat && a.enable(8), E.iridescence && a.enable(9), E.alphaTest && a.enable(10), E.vertexColors && a.enable(11), E.vertexAlphas && a.enable(12), E.vertexUv1s && a.enable(13), E.vertexUv2s && a.enable(14), E.vertexUv3s && a.enable(15), E.vertexTangents && a.enable(16), E.anisotropy && a.enable(17), E.alphaHash && a.enable(18), E.batching && a.enable(19), E.dispersion && a.enable(20), E.batchingColor && a.enable(21), M.push(a.mask), a.disableAll(), E.fog && a.enable(0), E.useFog && a.enable(1), E.flatShading && a.enable(2), E.logarithmicDepthBuffer && a.enable(3), E.reverseDepthBuffer && a.enable(4), E.skinning && a.enable(5), E.morphTargets && a.enable(6), E.morphNormals && a.enable(7), E.morphColors && a.enable(8), E.premultipliedAlpha && a.enable(9), E.shadowMapEnabled && a.enable(10), E.doubleSided && a.enable(11), E.flipSided && a.enable(12), E.useDepthPacking && a.enable(13), E.dithering && a.enable(14), E.transmission && a.enable(15), E.sheen && a.enable(16), E.opaque && a.enable(17), E.pointsUvs && a.enable(18), E.decodeVideoTexture && a.enable(19), E.decodeVideoTextureEmissive && a.enable(20), E.alphaToCoverage && a.enable(21), M.push(a.mask);
    }
    function v(M) {
      const E = m[M.type];
      let I;
      if (E) {
        const k = Ii[E];
        I = VL.clone(k.uniforms);
      } else I = M.uniforms;
      return I;
    }
    function x(M, E) {
      let I;
      for (let k = 0, H = u.length; k < H; k++) {
        const K = u[k];
        if (K.cacheKey === E) {
          I = K, ++I.usedTimes;
          break;
        }
      }
      return I === void 0 && (I = new JN(n, E, M, s), u.push(I)), I;
    }
    function C(M) {
      if (--M.usedTimes === 0) {
        const E = u.indexOf(M);
        u[E] = u[u.length - 1], u.pop(), M.destroy();
      }
    }
    function A(M) {
      l.remove(M);
    }
    function P() {
      l.dispose();
    }
    return {
      getParameters: p,
      getProgramCacheKey: g,
      getUniforms: v,
      acquireProgram: x,
      releaseProgram: C,
      releaseShaderCache: A,
      programs: u,
      dispose: P
    };
  }
  function nU() {
    let n = /* @__PURE__ */ new WeakMap();
    function e(o) {
      return n.has(o);
    }
    function t(o) {
      let a = n.get(o);
      return a === void 0 && (a = {}, n.set(o, a)), a;
    }
    function i(o) {
      n.delete(o);
    }
    function r(o, a, l) {
      n.get(o)[a] = l;
    }
    function s() {
      n = /* @__PURE__ */ new WeakMap();
    }
    return {
      has: e,
      get: t,
      remove: i,
      update: r,
      dispose: s
    };
  }
  function iU(n, e) {
    return n.groupOrder !== e.groupOrder ? n.groupOrder - e.groupOrder : n.renderOrder !== e.renderOrder ? n.renderOrder - e.renderOrder : n.material.id !== e.material.id ? n.material.id - e.material.id : n.z !== e.z ? n.z - e.z : n.id - e.id;
  }
  function jg(n, e) {
    return n.groupOrder !== e.groupOrder ? n.groupOrder - e.groupOrder : n.renderOrder !== e.renderOrder ? n.renderOrder - e.renderOrder : n.z !== e.z ? e.z - n.z : n.id - e.id;
  }
  function Xg() {
    const n = [];
    let e = 0;
    const t = [], i = [], r = [];
    function s() {
      e = 0, t.length = 0, i.length = 0, r.length = 0;
    }
    function o(h, d, f, m, _, p) {
      let g = n[e];
      return g === void 0 ? (g = {
        id: h.id,
        object: h,
        geometry: d,
        material: f,
        groupOrder: m,
        renderOrder: h.renderOrder,
        z: _,
        group: p
      }, n[e] = g) : (g.id = h.id, g.object = h, g.geometry = d, g.material = f, g.groupOrder = m, g.renderOrder = h.renderOrder, g.z = _, g.group = p), e++, g;
    }
    function a(h, d, f, m, _, p) {
      const g = o(h, d, f, m, _, p);
      f.transmission > 0 ? i.push(g) : f.transparent === true ? r.push(g) : t.push(g);
    }
    function l(h, d, f, m, _, p) {
      const g = o(h, d, f, m, _, p);
      f.transmission > 0 ? i.unshift(g) : f.transparent === true ? r.unshift(g) : t.unshift(g);
    }
    function c(h, d) {
      t.length > 1 && t.sort(h || iU), i.length > 1 && i.sort(d || jg), r.length > 1 && r.sort(d || jg);
    }
    function u() {
      for (let h = e, d = n.length; h < d; h++) {
        const f = n[h];
        if (f.id === null) break;
        f.id = null, f.object = null, f.geometry = null, f.material = null, f.group = null;
      }
    }
    return {
      opaque: t,
      transmissive: i,
      transparent: r,
      init: s,
      push: a,
      unshift: l,
      finish: u,
      sort: c
    };
  }
  function rU() {
    let n = /* @__PURE__ */ new WeakMap();
    function e(i, r) {
      const s = n.get(i);
      let o;
      return s === void 0 ? (o = new Xg(), n.set(i, [
        o
      ])) : r >= s.length ? (o = new Xg(), s.push(o)) : o = s[r], o;
    }
    function t() {
      n = /* @__PURE__ */ new WeakMap();
    }
    return {
      get: e,
      dispose: t
    };
  }
  function sU() {
    const n = {};
    return {
      get: function(e) {
        if (n[e.id] !== void 0) return n[e.id];
        let t;
        switch (e.type) {
          case "DirectionalLight":
            t = {
              direction: new u1(),
              color: new xe()
            };
            break;
          case "SpotLight":
            t = {
              position: new u1(),
              direction: new u1(),
              color: new xe(),
              distance: 0,
              coneCos: 0,
              penumbraCos: 0,
              decay: 0
            };
            break;
          case "PointLight":
            t = {
              position: new u1(),
              color: new xe(),
              distance: 0,
              decay: 0
            };
            break;
          case "HemisphereLight":
            t = {
              direction: new u1(),
              skyColor: new xe(),
              groundColor: new xe()
            };
            break;
          case "RectAreaLight":
            t = {
              color: new xe(),
              position: new u1(),
              halfWidth: new u1(),
              halfHeight: new u1()
            };
            break;
        }
        return n[e.id] = t, t;
      }
    };
  }
  function oU() {
    const n = {};
    return {
      get: function(e) {
        if (n[e.id] !== void 0) return n[e.id];
        let t;
        switch (e.type) {
          case "DirectionalLight":
            t = {
              shadowIntensity: 1,
              shadowBias: 0,
              shadowNormalBias: 0,
              shadowRadius: 1,
              shadowMapSize: new Ue()
            };
            break;
          case "SpotLight":
            t = {
              shadowIntensity: 1,
              shadowBias: 0,
              shadowNormalBias: 0,
              shadowRadius: 1,
              shadowMapSize: new Ue()
            };
            break;
          case "PointLight":
            t = {
              shadowIntensity: 1,
              shadowBias: 0,
              shadowNormalBias: 0,
              shadowRadius: 1,
              shadowMapSize: new Ue(),
              shadowCameraNear: 1,
              shadowCameraFar: 1e3
            };
            break;
        }
        return n[e.id] = t, t;
      }
    };
  }
  let aU = 0;
  function lU(n, e) {
    return (e.castShadow ? 2 : 0) - (n.castShadow ? 2 : 0) + (e.map ? 1 : 0) - (n.map ? 1 : 0);
  }
  function cU(n) {
    const e = new sU(), t = oU(), i = {
      version: 0,
      hash: {
        directionalLength: -1,
        pointLength: -1,
        spotLength: -1,
        rectAreaLength: -1,
        hemiLength: -1,
        numDirectionalShadows: -1,
        numPointShadows: -1,
        numSpotShadows: -1,
        numSpotMaps: -1,
        numLightProbes: -1
      },
      ambient: [
        0,
        0,
        0
      ],
      probe: [],
      directional: [],
      directionalShadow: [],
      directionalShadowMap: [],
      directionalShadowMatrix: [],
      spot: [],
      spotLightMap: [],
      spotShadow: [],
      spotShadowMap: [],
      spotLightMatrix: [],
      rectArea: [],
      rectAreaLTC1: null,
      rectAreaLTC2: null,
      point: [],
      pointShadow: [],
      pointShadowMap: [],
      pointShadowMatrix: [],
      hemi: [],
      numSpotLightShadowsWithMaps: 0,
      numLightProbes: 0
    };
    for (let c = 0; c < 9; c++) i.probe.push(new u1());
    const r = new u1(), s = new Ee(), o = new Ee();
    function a(c) {
      let u = 0, h = 0, d = 0;
      for (let M = 0; M < 9; M++) i.probe[M].set(0, 0, 0);
      let f = 0, m = 0, _ = 0, p = 0, g = 0, y = 0, b = 0, v = 0, x = 0, C = 0, A = 0;
      c.sort(lU);
      for (let M = 0, E = c.length; M < E; M++) {
        const I = c[M], k = I.color, H = I.intensity, K = I.distance, J = I.shadow && I.shadow.map ? I.shadow.map.texture : null;
        if (I.isAmbientLight) u += k.r * H, h += k.g * H, d += k.b * H;
        else if (I.isLightProbe) {
          for (let z = 0; z < 9; z++) i.probe[z].addScaledVector(I.sh.coefficients[z], H);
          A++;
        } else if (I.isDirectionalLight) {
          const z = e.get(I);
          if (z.color.copy(I.color).multiplyScalar(I.intensity), I.castShadow) {
            const $ = I.shadow, G = t.get(I);
            G.shadowIntensity = $.intensity, G.shadowBias = $.bias, G.shadowNormalBias = $.normalBias, G.shadowRadius = $.radius, G.shadowMapSize = $.mapSize, i.directionalShadow[f] = G, i.directionalShadowMap[f] = J, i.directionalShadowMatrix[f] = I.shadow.matrix, y++;
          }
          i.directional[f] = z, f++;
        } else if (I.isSpotLight) {
          const z = e.get(I);
          z.position.setFromMatrixPosition(I.matrixWorld), z.color.copy(k).multiplyScalar(H), z.distance = K, z.coneCos = Math.cos(I.angle), z.penumbraCos = Math.cos(I.angle * (1 - I.penumbra)), z.decay = I.decay, i.spot[_] = z;
          const $ = I.shadow;
          if (I.map && (i.spotLightMap[x] = I.map, x++, $.updateMatrices(I), I.castShadow && C++), i.spotLightMatrix[_] = $.matrix, I.castShadow) {
            const G = t.get(I);
            G.shadowIntensity = $.intensity, G.shadowBias = $.bias, G.shadowNormalBias = $.normalBias, G.shadowRadius = $.radius, G.shadowMapSize = $.mapSize, i.spotShadow[_] = G, i.spotShadowMap[_] = J, v++;
          }
          _++;
        } else if (I.isRectAreaLight) {
          const z = e.get(I);
          z.color.copy(k).multiplyScalar(H), z.halfWidth.set(I.width * 0.5, 0, 0), z.halfHeight.set(0, I.height * 0.5, 0), i.rectArea[p] = z, p++;
        } else if (I.isPointLight) {
          const z = e.get(I);
          if (z.color.copy(I.color).multiplyScalar(I.intensity), z.distance = I.distance, z.decay = I.decay, I.castShadow) {
            const $ = I.shadow, G = t.get(I);
            G.shadowIntensity = $.intensity, G.shadowBias = $.bias, G.shadowNormalBias = $.normalBias, G.shadowRadius = $.radius, G.shadowMapSize = $.mapSize, G.shadowCameraNear = $.camera.near, G.shadowCameraFar = $.camera.far, i.pointShadow[m] = G, i.pointShadowMap[m] = J, i.pointShadowMatrix[m] = I.shadow.matrix, b++;
          }
          i.point[m] = z, m++;
        } else if (I.isHemisphereLight) {
          const z = e.get(I);
          z.skyColor.copy(I.color).multiplyScalar(H), z.groundColor.copy(I.groundColor).multiplyScalar(H), i.hemi[g] = z, g++;
        }
      }
      p > 0 && (n.has("OES_texture_float_linear") === true ? (i.rectAreaLTC1 = te.LTC_FLOAT_1, i.rectAreaLTC2 = te.LTC_FLOAT_2) : (i.rectAreaLTC1 = te.LTC_HALF_1, i.rectAreaLTC2 = te.LTC_HALF_2)), i.ambient[0] = u, i.ambient[1] = h, i.ambient[2] = d;
      const P = i.hash;
      (P.directionalLength !== f || P.pointLength !== m || P.spotLength !== _ || P.rectAreaLength !== p || P.hemiLength !== g || P.numDirectionalShadows !== y || P.numPointShadows !== b || P.numSpotShadows !== v || P.numSpotMaps !== x || P.numLightProbes !== A) && (i.directional.length = f, i.spot.length = _, i.rectArea.length = p, i.point.length = m, i.hemi.length = g, i.directionalShadow.length = y, i.directionalShadowMap.length = y, i.pointShadow.length = b, i.pointShadowMap.length = b, i.spotShadow.length = v, i.spotShadowMap.length = v, i.directionalShadowMatrix.length = y, i.pointShadowMatrix.length = b, i.spotLightMatrix.length = v + x - C, i.spotLightMap.length = x, i.numSpotLightShadowsWithMaps = C, i.numLightProbes = A, P.directionalLength = f, P.pointLength = m, P.spotLength = _, P.rectAreaLength = p, P.hemiLength = g, P.numDirectionalShadows = y, P.numPointShadows = b, P.numSpotShadows = v, P.numSpotMaps = x, P.numLightProbes = A, i.version = aU++);
    }
    function l(c, u) {
      let h = 0, d = 0, f = 0, m = 0, _ = 0;
      const p = u.matrixWorldInverse;
      for (let g = 0, y = c.length; g < y; g++) {
        const b = c[g];
        if (b.isDirectionalLight) {
          const v = i.directional[h];
          v.direction.setFromMatrixPosition(b.matrixWorld), r.setFromMatrixPosition(b.target.matrixWorld), v.direction.sub(r), v.direction.transformDirection(p), h++;
        } else if (b.isSpotLight) {
          const v = i.spot[f];
          v.position.setFromMatrixPosition(b.matrixWorld), v.position.applyMatrix4(p), v.direction.setFromMatrixPosition(b.matrixWorld), r.setFromMatrixPosition(b.target.matrixWorld), v.direction.sub(r), v.direction.transformDirection(p), f++;
        } else if (b.isRectAreaLight) {
          const v = i.rectArea[m];
          v.position.setFromMatrixPosition(b.matrixWorld), v.position.applyMatrix4(p), o.identity(), s.copy(b.matrixWorld), s.premultiply(p), o.extractRotation(s), v.halfWidth.set(b.width * 0.5, 0, 0), v.halfHeight.set(0, b.height * 0.5, 0), v.halfWidth.applyMatrix4(o), v.halfHeight.applyMatrix4(o), m++;
        } else if (b.isPointLight) {
          const v = i.point[d];
          v.position.setFromMatrixPosition(b.matrixWorld), v.position.applyMatrix4(p), d++;
        } else if (b.isHemisphereLight) {
          const v = i.hemi[_];
          v.direction.setFromMatrixPosition(b.matrixWorld), v.direction.transformDirection(p), _++;
        }
      }
    }
    return {
      setup: a,
      setupView: l,
      state: i
    };
  }
  function $g(n) {
    const e = new cU(n), t = [], i = [];
    function r(u) {
      c.camera = u, t.length = 0, i.length = 0;
    }
    function s(u) {
      t.push(u);
    }
    function o(u) {
      i.push(u);
    }
    function a() {
      e.setup(t);
    }
    function l(u) {
      e.setupView(t, u);
    }
    const c = {
      lightsArray: t,
      shadowsArray: i,
      camera: null,
      lights: e,
      transmissionRenderTarget: {}
    };
    return {
      init: r,
      state: c,
      setupLights: a,
      setupLightsView: l,
      pushLight: s,
      pushShadow: o
    };
  }
  function uU(n) {
    let e = /* @__PURE__ */ new WeakMap();
    function t(r, s = 0) {
      const o = e.get(r);
      let a;
      return o === void 0 ? (a = new $g(n), e.set(r, [
        a
      ])) : s >= o.length ? (a = new $g(n), o.push(a)) : a = o[s], a;
    }
    function i() {
      e = /* @__PURE__ */ new WeakMap();
    }
    return {
      get: t,
      dispose: i
    };
  }
  const fU = `void main() {
	gl_Position = vec4( position, 1.0 );
}`, hU = `uniform sampler2D shadow_pass;
uniform vec2 resolution;
uniform float radius;
#include <packing>
void main() {
	const float samples = float( VSM_SAMPLES );
	float mean = 0.0;
	float squared_mean = 0.0;
	float uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );
	float uvStart = samples <= 1.0 ? 0.0 : - 1.0;
	for ( float i = 0.0; i < samples; i ++ ) {
		float uvOffset = uvStart + i * uvStride;
		#ifdef HORIZONTAL_PASS
			vec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );
			mean += distribution.x;
			squared_mean += distribution.y * distribution.y + distribution.x * distribution.x;
		#else
			float depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );
			mean += depth;
			squared_mean += depth * depth;
		#endif
	}
	mean = mean / samples;
	squared_mean = squared_mean / samples;
	float std_dev = sqrt( squared_mean - mean * mean );
	gl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );
}`;
  function dU(n, e, t) {
    let i = new Dl();
    const r = new Ue(), s = new Ue(), o = new Je(), a = new hI({
      depthPacking: jP
    }), l = new dI(), c = {}, u = t.maxTextureSize, h = {
      [D3]: h2,
      [h2]: D3,
      [Oi]: Oi
    }, d = new Mr({
      defines: {
        VSM_SAMPLES: 8
      },
      uniforms: {
        shadow_pass: {
          value: null
        },
        resolution: {
          value: new Ue()
        },
        radius: {
          value: 4
        }
      },
      vertexShader: fU,
      fragmentShader: hU
    }), f = d.clone();
    f.defines.HORIZONTAL_PASS = 1;
    const m = new i2();
    m.setAttribute("position", new nn(new Float32Array([
      -1,
      -1,
      0.5,
      3,
      -1,
      0.5,
      -1,
      3,
      0.5
    ]), 3));
    const _ = new Zn(m, d), p = this;
    this.enabled = false, this.autoUpdate = true, this.needsUpdate = false, this.type = r8;
    let g = this.type;
    this.render = function(C, A, P) {
      if (p.enabled === false || p.autoUpdate === false && p.needsUpdate === false || C.length === 0) return;
      const M = n.getRenderTarget(), E = n.getActiveCubeFace(), I = n.getActiveMipmapLevel(), k = n.state;
      k.setBlending(_r), k.buffers.color.setClear(1, 1, 1, 1), k.buffers.depth.setTest(true), k.setScissorTest(false);
      const H = g !== c3 && this.type === c3, K = g === c3 && this.type !== c3;
      for (let J = 0, z = C.length; J < z; J++) {
        const $ = C[J], G = $.shadow;
        if (G === void 0) {
          console.warn("THREE.WebGLShadowMap:", $, "has no shadow.");
          continue;
        }
        if (G.autoUpdate === false && G.needsUpdate === false) continue;
        r.copy(G.mapSize);
        const Q = G.getFrameExtents();
        if (r.multiply(Q), s.copy(G.mapSize), (r.x > u || r.y > u) && (r.x > u && (s.x = Math.floor(u / Q.x), r.x = s.x * Q.x, G.mapSize.x = s.x), r.y > u && (s.y = Math.floor(u / Q.y), r.y = s.y * Q.y, G.mapSize.y = s.y)), G.map === null || H === true || K === true) {
          const w1 = this.type !== c3 ? {
            minFilter: t2,
            magFilter: t2
          } : {};
          G.map !== null && G.map.dispose(), G.map = new Cs(r.x, r.y, w1), G.map.texture.name = $.name + ".shadowMap", G.camera.updateProjectionMatrix();
        }
        n.setRenderTarget(G.map), n.clear();
        const V = G.getViewportCount();
        for (let w1 = 0; w1 < V; w1++) {
          const m1 = G.getViewport(w1);
          o.set(s.x * m1.x, s.y * m1.y, s.x * m1.z, s.y * m1.w), k.viewport(o), G.updateMatrices($, w1), i = G.getFrustum(), v(A, P, G.camera, $, this.type);
        }
        G.isPointLightShadow !== true && this.type === c3 && y(G, P), G.needsUpdate = false;
      }
      g = this.type, p.needsUpdate = false, n.setRenderTarget(M, E, I);
    };
    function y(C, A) {
      const P = e.update(_);
      d.defines.VSM_SAMPLES !== C.blurSamples && (d.defines.VSM_SAMPLES = C.blurSamples, f.defines.VSM_SAMPLES = C.blurSamples, d.needsUpdate = true, f.needsUpdate = true), C.mapPass === null && (C.mapPass = new Cs(r.x, r.y)), d.uniforms.shadow_pass.value = C.map.texture, d.uniforms.resolution.value = C.mapSize, d.uniforms.radius.value = C.radius, n.setRenderTarget(C.mapPass), n.clear(), n.renderBufferDirect(A, null, P, d, _, null), f.uniforms.shadow_pass.value = C.mapPass.texture, f.uniforms.resolution.value = C.mapSize, f.uniforms.radius.value = C.radius, n.setRenderTarget(C.map), n.clear(), n.renderBufferDirect(A, null, P, f, _, null);
    }
    function b(C, A, P, M) {
      let E = null;
      const I = P.isPointLight === true ? C.customDistanceMaterial : C.customDepthMaterial;
      if (I !== void 0) E = I;
      else if (E = P.isPointLight === true ? l : a, n.localClippingEnabled && A.clipShadows === true && Array.isArray(A.clippingPlanes) && A.clippingPlanes.length !== 0 || A.displacementMap && A.displacementScale !== 0 || A.alphaMap && A.alphaTest > 0 || A.map && A.alphaTest > 0 || A.alphaToCoverage === true) {
        const k = E.uuid, H = A.uuid;
        let K = c[k];
        K === void 0 && (K = {}, c[k] = K);
        let J = K[H];
        J === void 0 && (J = E.clone(), K[H] = J, A.addEventListener("dispose", x)), E = J;
      }
      if (E.visible = A.visible, E.wireframe = A.wireframe, M === c3 ? E.side = A.shadowSide !== null ? A.shadowSide : A.side : E.side = A.shadowSide !== null ? A.shadowSide : h[A.side], E.alphaMap = A.alphaMap, E.alphaTest = A.alphaToCoverage === true ? 0.5 : A.alphaTest, E.map = A.map, E.clipShadows = A.clipShadows, E.clippingPlanes = A.clippingPlanes, E.clipIntersection = A.clipIntersection, E.displacementMap = A.displacementMap, E.displacementScale = A.displacementScale, E.displacementBias = A.displacementBias, E.wireframeLinewidth = A.wireframeLinewidth, E.linewidth = A.linewidth, P.isPointLight === true && E.isMeshDistanceMaterial === true) {
        const k = n.properties.get(E);
        k.light = P;
      }
      return E;
    }
    function v(C, A, P, M, E) {
      if (C.visible === false) return;
      if (C.layers.test(A.layers) && (C.isMesh || C.isLine || C.isPoints) && (C.castShadow || C.receiveShadow && E === c3) && (!C.frustumCulled || i.intersectsObject(C))) {
        C.modelViewMatrix.multiplyMatrices(P.matrixWorldInverse, C.matrixWorld);
        const H = e.update(C), K = C.material;
        if (Array.isArray(K)) {
          const J = H.groups;
          for (let z = 0, $ = J.length; z < $; z++) {
            const G = J[z], Q = K[G.materialIndex];
            if (Q && Q.visible) {
              const V = b(C, Q, M, E);
              C.onBeforeShadow(n, C, A, P, H, V, G), n.renderBufferDirect(P, null, H, V, C, G), C.onAfterShadow(n, C, A, P, H, V, G);
            }
          }
        } else if (K.visible) {
          const J = b(C, K, M, E);
          C.onBeforeShadow(n, C, A, P, H, J, null), n.renderBufferDirect(P, null, H, J, C, null), C.onAfterShadow(n, C, A, P, H, J, null);
        }
      }
      const k = C.children;
      for (let H = 0, K = k.length; H < K; H++) v(k[H], A, P, M, E);
    }
    function x(C) {
      C.target.removeEventListener("dispose", x);
      for (const P in c) {
        const M = c[P], E = C.target.uuid;
        E in M && (M[E].dispose(), delete M[E]);
      }
    }
  }
  const pU = {
    [w4]: M4,
    [T4]: D4,
    [C4]: R4,
    [ta]: A4,
    [M4]: w4,
    [D4]: T4,
    [R4]: C4,
    [A4]: ta
  };
  function mU(n, e) {
    function t() {
      let X = false;
      const X1 = new Je();
      let P1 = null;
      const Y1 = new Je(0, 0, 0, 0);
      return {
        setMask: function(N1) {
          P1 !== N1 && !X && (n.colorMask(N1, N1, N1, N1), P1 = N1);
        },
        setLocked: function(N1) {
          X = N1;
        },
        setClear: function(N1, L1, R1, j, T1) {
          T1 === true && (N1 *= j, L1 *= j, R1 *= j), X1.set(N1, L1, R1, j), Y1.equals(X1) === false && (n.clearColor(N1, L1, R1, j), Y1.copy(X1));
        },
        reset: function() {
          X = false, P1 = null, Y1.set(-1, 0, 0, 0);
        }
      };
    }
    function i() {
      let X = false, X1 = false, P1 = null, Y1 = null, N1 = null;
      return {
        setReversed: function(L1) {
          if (X1 !== L1) {
            const R1 = e.get("EXT_clip_control");
            L1 ? R1.clipControlEXT(R1.LOWER_LEFT_EXT, R1.ZERO_TO_ONE_EXT) : R1.clipControlEXT(R1.LOWER_LEFT_EXT, R1.NEGATIVE_ONE_TO_ONE_EXT), X1 = L1;
            const j = N1;
            N1 = null, this.setClear(j);
          }
        },
        getReversed: function() {
          return X1;
        },
        setTest: function(L1) {
          L1 ? W(n.DEPTH_TEST) : r1(n.DEPTH_TEST);
        },
        setMask: function(L1) {
          P1 !== L1 && !X && (n.depthMask(L1), P1 = L1);
        },
        setFunc: function(L1) {
          if (X1 && (L1 = pU[L1]), Y1 !== L1) {
            switch (L1) {
              case w4:
                n.depthFunc(n.NEVER);
                break;
              case M4:
                n.depthFunc(n.ALWAYS);
                break;
              case T4:
                n.depthFunc(n.LESS);
                break;
              case ta:
                n.depthFunc(n.LEQUAL);
                break;
              case C4:
                n.depthFunc(n.EQUAL);
                break;
              case A4:
                n.depthFunc(n.GEQUAL);
                break;
              case D4:
                n.depthFunc(n.GREATER);
                break;
              case R4:
                n.depthFunc(n.NOTEQUAL);
                break;
              default:
                n.depthFunc(n.LEQUAL);
            }
            Y1 = L1;
          }
        },
        setLocked: function(L1) {
          X = L1;
        },
        setClear: function(L1) {
          N1 !== L1 && (X1 && (L1 = 1 - L1), n.clearDepth(L1), N1 = L1);
        },
        reset: function() {
          X = false, P1 = null, Y1 = null, N1 = null, X1 = false;
        }
      };
    }
    function r() {
      let X = false, X1 = null, P1 = null, Y1 = null, N1 = null, L1 = null, R1 = null, j = null, T1 = null;
      return {
        setTest: function(t1) {
          X || (t1 ? W(n.STENCIL_TEST) : r1(n.STENCIL_TEST));
        },
        setMask: function(t1) {
          X1 !== t1 && !X && (n.stencilMask(t1), X1 = t1);
        },
        setFunc: function(t1, b1, O1) {
          (P1 !== t1 || Y1 !== b1 || N1 !== O1) && (n.stencilFunc(t1, b1, O1), P1 = t1, Y1 = b1, N1 = O1);
        },
        setOp: function(t1, b1, O1) {
          (L1 !== t1 || R1 !== b1 || j !== O1) && (n.stencilOp(t1, b1, O1), L1 = t1, R1 = b1, j = O1);
        },
        setLocked: function(t1) {
          X = t1;
        },
        setClear: function(t1) {
          T1 !== t1 && (n.clearStencil(t1), T1 = t1);
        },
        reset: function() {
          X = false, X1 = null, P1 = null, Y1 = null, N1 = null, L1 = null, R1 = null, j = null, T1 = null;
        }
      };
    }
    const s = new t(), o = new i(), a = new r(), l = /* @__PURE__ */ new WeakMap(), c = /* @__PURE__ */ new WeakMap();
    let u = {}, h = {}, d = /* @__PURE__ */ new WeakMap(), f = [], m = null, _ = false, p = null, g = null, y = null, b = null, v = null, x = null, C = null, A = new xe(0, 0, 0), P = 0, M = false, E = null, I = null, k = null, H = null, K = null;
    const J = n.getParameter(n.MAX_COMBINED_TEXTURE_IMAGE_UNITS);
    let z = false, $ = 0;
    const G = n.getParameter(n.VERSION);
    G.indexOf("WebGL") !== -1 ? ($ = parseFloat(/^WebGL (\d)/.exec(G)[1]), z = $ >= 1) : G.indexOf("OpenGL ES") !== -1 && ($ = parseFloat(/^OpenGL ES (\d)/.exec(G)[1]), z = $ >= 2);
    let Q = null, V = {};
    const w1 = n.getParameter(n.SCISSOR_BOX), m1 = n.getParameter(n.VIEWPORT), I1 = new Je().fromArray(w1), Z = new Je().fromArray(m1);
    function f1(X, X1, P1, Y1) {
      const N1 = new Uint8Array(4), L1 = n.createTexture();
      n.bindTexture(X, L1), n.texParameteri(X, n.TEXTURE_MIN_FILTER, n.NEAREST), n.texParameteri(X, n.TEXTURE_MAG_FILTER, n.NEAREST);
      for (let R1 = 0; R1 < P1; R1++) X === n.TEXTURE_3D || X === n.TEXTURE_2D_ARRAY ? n.texImage3D(X1, 0, n.RGBA, 1, 1, Y1, 0, n.RGBA, n.UNSIGNED_BYTE, N1) : n.texImage2D(X1 + R1, 0, n.RGBA, 1, 1, 0, n.RGBA, n.UNSIGNED_BYTE, N1);
      return L1;
    }
    const M1 = {};
    M1[n.TEXTURE_2D] = f1(n.TEXTURE_2D, n.TEXTURE_2D, 1), M1[n.TEXTURE_CUBE_MAP] = f1(n.TEXTURE_CUBE_MAP, n.TEXTURE_CUBE_MAP_POSITIVE_X, 6), M1[n.TEXTURE_2D_ARRAY] = f1(n.TEXTURE_2D_ARRAY, n.TEXTURE_2D_ARRAY, 1, 1), M1[n.TEXTURE_3D] = f1(n.TEXTURE_3D, n.TEXTURE_3D, 1, 1), s.setClear(0, 0, 0, 1), o.setClear(1), a.setClear(0), W(n.DEPTH_TEST), o.setFunc(ta), _1(false), B(Tm), W(n.CULL_FACE), T(_r);
    function W(X) {
      u[X] !== true && (n.enable(X), u[X] = true);
    }
    function r1(X) {
      u[X] !== false && (n.disable(X), u[X] = false);
    }
    function v1(X, X1) {
      return h[X] !== X1 ? (n.bindFramebuffer(X, X1), h[X] = X1, X === n.DRAW_FRAMEBUFFER && (h[n.FRAMEBUFFER] = X1), X === n.FRAMEBUFFER && (h[n.DRAW_FRAMEBUFFER] = X1), true) : false;
    }
    function S1(X, X1) {
      let P1 = f, Y1 = false;
      if (X) {
        P1 = d.get(X1), P1 === void 0 && (P1 = [], d.set(X1, P1));
        const N1 = X.textures;
        if (P1.length !== N1.length || P1[0] !== n.COLOR_ATTACHMENT0) {
          for (let L1 = 0, R1 = N1.length; L1 < R1; L1++) P1[L1] = n.COLOR_ATTACHMENT0 + L1;
          P1.length = N1.length, Y1 = true;
        }
      } else P1[0] !== n.BACK && (P1[0] = n.BACK, Y1 = true);
      Y1 && n.drawBuffers(P1);
    }
    function z1(X) {
      return m !== X ? (n.useProgram(X), m = X, true) : false;
    }
    const Z1 = {
      [os]: n.FUNC_ADD,
      [mP]: n.FUNC_SUBTRACT,
      [gP]: n.FUNC_REVERSE_SUBTRACT
    };
    Z1[_P] = n.MIN, Z1[bP] = n.MAX;
    const F = {
      [vP]: n.ZERO,
      [yP]: n.ONE,
      [xP]: n.SRC_COLOR,
      [S4]: n.SRC_ALPHA,
      [CP]: n.SRC_ALPHA_SATURATE,
      [MP]: n.DST_COLOR,
      [EP]: n.DST_ALPHA,
      [SP]: n.ONE_MINUS_SRC_COLOR,
      [E4]: n.ONE_MINUS_SRC_ALPHA,
      [TP]: n.ONE_MINUS_DST_COLOR,
      [wP]: n.ONE_MINUS_DST_ALPHA,
      [AP]: n.CONSTANT_COLOR,
      [DP]: n.ONE_MINUS_CONSTANT_COLOR,
      [RP]: n.CONSTANT_ALPHA,
      [PP]: n.ONE_MINUS_CONSTANT_ALPHA
    };
    function T(X, X1, P1, Y1, N1, L1, R1, j, T1, t1) {
      if (X === _r) {
        _ === true && (r1(n.BLEND), _ = false);
        return;
      }
      if (_ === false && (W(n.BLEND), _ = true), X !== pP) {
        if (X !== p || t1 !== M) {
          if ((g !== os || v !== os) && (n.blendEquation(n.FUNC_ADD), g = os, v = os), t1) switch (X) {
            case Fo:
              n.blendFuncSeparate(n.ONE, n.ONE_MINUS_SRC_ALPHA, n.ONE, n.ONE_MINUS_SRC_ALPHA);
              break;
            case Cm:
              n.blendFunc(n.ONE, n.ONE);
              break;
            case Am:
              n.blendFuncSeparate(n.ZERO, n.ONE_MINUS_SRC_COLOR, n.ZERO, n.ONE);
              break;
            case Dm:
              n.blendFuncSeparate(n.ZERO, n.SRC_COLOR, n.ZERO, n.SRC_ALPHA);
              break;
            default:
              console.error("THREE.WebGLState: Invalid blending: ", X);
              break;
          }
          else switch (X) {
            case Fo:
              n.blendFuncSeparate(n.SRC_ALPHA, n.ONE_MINUS_SRC_ALPHA, n.ONE, n.ONE_MINUS_SRC_ALPHA);
              break;
            case Cm:
              n.blendFunc(n.SRC_ALPHA, n.ONE);
              break;
            case Am:
              n.blendFuncSeparate(n.ZERO, n.ONE_MINUS_SRC_COLOR, n.ZERO, n.ONE);
              break;
            case Dm:
              n.blendFunc(n.ZERO, n.SRC_COLOR);
              break;
            default:
              console.error("THREE.WebGLState: Invalid blending: ", X);
              break;
          }
          y = null, b = null, x = null, C = null, A.set(0, 0, 0), P = 0, p = X, M = t1;
        }
        return;
      }
      N1 = N1 || X1, L1 = L1 || P1, R1 = R1 || Y1, (X1 !== g || N1 !== v) && (n.blendEquationSeparate(Z1[X1], Z1[N1]), g = X1, v = N1), (P1 !== y || Y1 !== b || L1 !== x || R1 !== C) && (n.blendFuncSeparate(F[P1], F[Y1], F[L1], F[R1]), y = P1, b = Y1, x = L1, C = R1), (j.equals(A) === false || T1 !== P) && (n.blendColor(j.r, j.g, j.b, T1), A.copy(j), P = T1), p = X, M = false;
    }
    function e1(X, X1) {
      X.side === Oi ? r1(n.CULL_FACE) : W(n.CULL_FACE);
      let P1 = X.side === h2;
      X1 && (P1 = !P1), _1(P1), X.blending === Fo && X.transparent === false ? T(_r) : T(X.blending, X.blendEquation, X.blendSrc, X.blendDst, X.blendEquationAlpha, X.blendSrcAlpha, X.blendDstAlpha, X.blendColor, X.blendAlpha, X.premultipliedAlpha), o.setFunc(X.depthFunc), o.setTest(X.depthTest), o.setMask(X.depthWrite), s.setMask(X.colorWrite);
      const Y1 = X.stencilWrite;
      a.setTest(Y1), Y1 && (a.setMask(X.stencilWriteMask), a.setFunc(X.stencilFunc, X.stencilRef, X.stencilFuncMask), a.setOp(X.stencilFail, X.stencilZFail, X.stencilZPass)), D1(X.polygonOffset, X.polygonOffsetFactor, X.polygonOffsetUnits), X.alphaToCoverage === true ? W(n.SAMPLE_ALPHA_TO_COVERAGE) : r1(n.SAMPLE_ALPHA_TO_COVERAGE);
    }
    function _1(X) {
      E !== X && (X ? n.frontFace(n.CW) : n.frontFace(n.CCW), E = X);
    }
    function B(X) {
      X !== fP ? (W(n.CULL_FACE), X !== I && (X === Tm ? n.cullFace(n.BACK) : X === hP ? n.cullFace(n.FRONT) : n.cullFace(n.FRONT_AND_BACK))) : r1(n.CULL_FACE), I = X;
    }
    function l1(X) {
      X !== k && (z && n.lineWidth(X), k = X);
    }
    function D1(X, X1, P1) {
      X ? (W(n.POLYGON_OFFSET_FILL), (H !== X1 || K !== P1) && (n.polygonOffset(X1, P1), H = X1, K = P1)) : r1(n.POLYGON_OFFSET_FILL);
    }
    function p1(X) {
      X ? W(n.SCISSOR_TEST) : r1(n.SCISSOR_TEST);
    }
    function o1(X) {
      X === void 0 && (X = n.TEXTURE0 + J - 1), Q !== X && (n.activeTexture(X), Q = X);
    }
    function E1(X, X1, P1) {
      P1 === void 0 && (Q === null ? P1 = n.TEXTURE0 + J - 1 : P1 = Q);
      let Y1 = V[P1];
      Y1 === void 0 && (Y1 = {
        type: void 0,
        texture: void 0
      }, V[P1] = Y1), (Y1.type !== X || Y1.texture !== X1) && (Q !== P1 && (n.activeTexture(P1), Q = P1), n.bindTexture(X, X1 || M1[X]), Y1.type = X, Y1.texture = X1);
    }
    function N() {
      const X = V[Q];
      X !== void 0 && X.type !== void 0 && (n.bindTexture(X.type, null), X.type = void 0, X.texture = void 0);
    }
    function D() {
      try {
        n.compressedTexImage2D(...arguments);
      } catch (X) {
        console.error("THREE.WebGLState:", X);
      }
    }
    function q() {
      try {
        n.compressedTexImage3D(...arguments);
      } catch (X) {
        console.error("THREE.WebGLState:", X);
      }
    }
    function c1() {
      try {
        n.texSubImage2D(...arguments);
      } catch (X) {
        console.error("THREE.WebGLState:", X);
      }
    }
    function h1() {
      try {
        n.texSubImage3D(...arguments);
      } catch (X) {
        console.error("THREE.WebGLState:", X);
      }
    }
    function d1() {
      try {
        n.compressedTexSubImage2D(...arguments);
      } catch (X) {
        console.error("THREE.WebGLState:", X);
      }
    }
    function U1() {
      try {
        n.compressedTexSubImage3D(...arguments);
      } catch (X) {
        console.error("THREE.WebGLState:", X);
      }
    }
    function B1() {
      try {
        n.texStorage2D(...arguments);
      } catch (X) {
        console.error("THREE.WebGLState:", X);
      }
    }
    function j1() {
      try {
        n.texStorage3D(...arguments);
      } catch (X) {
        console.error("THREE.WebGLState:", X);
      }
    }
    function G1() {
      try {
        n.texImage2D(...arguments);
      } catch (X) {
        console.error("THREE.WebGLState:", X);
      }
    }
    function A1() {
      try {
        n.texImage3D(...arguments);
      } catch (X) {
        console.error("THREE.WebGLState:", X);
      }
    }
    function $1(X) {
      I1.equals(X) === false && (n.scissor(X.x, X.y, X.z, X.w), I1.copy(X));
    }
    function ne(X) {
      Z.equals(X) === false && (n.viewport(X.x, X.y, X.z, X.w), Z.copy(X));
    }
    function K1(X, X1) {
      let P1 = c.get(X1);
      P1 === void 0 && (P1 = /* @__PURE__ */ new WeakMap(), c.set(X1, P1));
      let Y1 = P1.get(X);
      Y1 === void 0 && (Y1 = n.getUniformBlockIndex(X1, X.name), P1.set(X, Y1));
    }
    function V1(X, X1) {
      const Y1 = c.get(X1).get(X);
      l.get(X1) !== Y1 && (n.uniformBlockBinding(X1, Y1, X.__bindingPointIndex), l.set(X1, Y1));
    }
    function ie() {
      n.disable(n.BLEND), n.disable(n.CULL_FACE), n.disable(n.DEPTH_TEST), n.disable(n.POLYGON_OFFSET_FILL), n.disable(n.SCISSOR_TEST), n.disable(n.STENCIL_TEST), n.disable(n.SAMPLE_ALPHA_TO_COVERAGE), n.blendEquation(n.FUNC_ADD), n.blendFunc(n.ONE, n.ZERO), n.blendFuncSeparate(n.ONE, n.ZERO, n.ONE, n.ZERO), n.blendColor(0, 0, 0, 0), n.colorMask(true, true, true, true), n.clearColor(0, 0, 0, 0), n.depthMask(true), n.depthFunc(n.LESS), o.setReversed(false), n.clearDepth(1), n.stencilMask(4294967295), n.stencilFunc(n.ALWAYS, 0, 4294967295), n.stencilOp(n.KEEP, n.KEEP, n.KEEP), n.clearStencil(0), n.cullFace(n.BACK), n.frontFace(n.CCW), n.polygonOffset(0, 0), n.activeTexture(n.TEXTURE0), n.bindFramebuffer(n.FRAMEBUFFER, null), n.bindFramebuffer(n.DRAW_FRAMEBUFFER, null), n.bindFramebuffer(n.READ_FRAMEBUFFER, null), n.useProgram(null), n.lineWidth(1), n.scissor(0, 0, n.canvas.width, n.canvas.height), n.viewport(0, 0, n.canvas.width, n.canvas.height), u = {}, Q = null, V = {}, h = {}, d = /* @__PURE__ */ new WeakMap(), f = [], m = null, _ = false, p = null, g = null, y = null, b = null, v = null, x = null, C = null, A = new xe(0, 0, 0), P = 0, M = false, E = null, I = null, k = null, H = null, K = null, I1.set(0, 0, n.canvas.width, n.canvas.height), Z.set(0, 0, n.canvas.width, n.canvas.height), s.reset(), o.reset(), a.reset();
    }
    return {
      buffers: {
        color: s,
        depth: o,
        stencil: a
      },
      enable: W,
      disable: r1,
      bindFramebuffer: v1,
      drawBuffers: S1,
      useProgram: z1,
      setBlending: T,
      setMaterial: e1,
      setFlipSided: _1,
      setCullFace: B,
      setLineWidth: l1,
      setPolygonOffset: D1,
      setScissorTest: p1,
      activeTexture: o1,
      bindTexture: E1,
      unbindTexture: N,
      compressedTexImage2D: D,
      compressedTexImage3D: q,
      texImage2D: G1,
      texImage3D: A1,
      updateUBOMapping: K1,
      uniformBlockBinding: V1,
      texStorage2D: B1,
      texStorage3D: j1,
      texSubImage2D: c1,
      texSubImage3D: h1,
      compressedTexSubImage2D: d1,
      compressedTexSubImage3D: U1,
      scissor: $1,
      viewport: ne,
      reset: ie
    };
  }
  function gU(n, e, t, i, r, s, o) {
    const a = e.has("WEBGL_multisampled_render_to_texture") ? e.get("WEBGL_multisampled_render_to_texture") : null, l = typeof navigator > "u" ? false : /OculusBrowser/g.test(navigator.userAgent), c = new Ue(), u = /* @__PURE__ */ new WeakMap();
    let h;
    const d = /* @__PURE__ */ new WeakMap();
    let f = false;
    try {
      f = typeof OffscreenCanvas < "u" && new OffscreenCanvas(1, 1).getContext("2d") !== null;
    } catch {
    }
    function m(N, D) {
      return f ? new OffscreenCanvas(N, D) : il("canvas");
    }
    function _(N, D, q) {
      let c1 = 1;
      const h1 = E1(N);
      if ((h1.width > q || h1.height > q) && (c1 = q / Math.max(h1.width, h1.height)), c1 < 1) if (typeof HTMLImageElement < "u" && N instanceof HTMLImageElement || typeof HTMLCanvasElement < "u" && N instanceof HTMLCanvasElement || typeof ImageBitmap < "u" && N instanceof ImageBitmap || typeof VideoFrame < "u" && N instanceof VideoFrame) {
        const d1 = Math.floor(c1 * h1.width), U1 = Math.floor(c1 * h1.height);
        h === void 0 && (h = m(d1, U1));
        const B1 = D ? m(d1, U1) : h;
        return B1.width = d1, B1.height = U1, B1.getContext("2d").drawImage(N, 0, 0, d1, U1), console.warn("THREE.WebGLRenderer: Texture has been resized from (" + h1.width + "x" + h1.height + ") to (" + d1 + "x" + U1 + ")."), B1;
      } else return "data" in N && console.warn("THREE.WebGLRenderer: Image in DataTexture is too big (" + h1.width + "x" + h1.height + ")."), N;
      return N;
    }
    function p(N) {
      return N.generateMipmaps;
    }
    function g(N) {
      n.generateMipmap(N);
    }
    function y(N) {
      return N.isWebGLCubeRenderTarget ? n.TEXTURE_CUBE_MAP : N.isWebGL3DRenderTarget ? n.TEXTURE_3D : N.isWebGLArrayRenderTarget || N.isCompressedArrayTexture ? n.TEXTURE_2D_ARRAY : n.TEXTURE_2D;
    }
    function b(N, D, q, c1, h1 = false) {
      if (N !== null) {
        if (n[N] !== void 0) return n[N];
        console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '" + N + "'");
      }
      let d1 = D;
      if (D === n.RED && (q === n.FLOAT && (d1 = n.R32F), q === n.HALF_FLOAT && (d1 = n.R16F), q === n.UNSIGNED_BYTE && (d1 = n.R8)), D === n.RED_INTEGER && (q === n.UNSIGNED_BYTE && (d1 = n.R8UI), q === n.UNSIGNED_SHORT && (d1 = n.R16UI), q === n.UNSIGNED_INT && (d1 = n.R32UI), q === n.BYTE && (d1 = n.R8I), q === n.SHORT && (d1 = n.R16I), q === n.INT && (d1 = n.R32I)), D === n.RG && (q === n.FLOAT && (d1 = n.RG32F), q === n.HALF_FLOAT && (d1 = n.RG16F), q === n.UNSIGNED_BYTE && (d1 = n.RG8)), D === n.RG_INTEGER && (q === n.UNSIGNED_BYTE && (d1 = n.RG8UI), q === n.UNSIGNED_SHORT && (d1 = n.RG16UI), q === n.UNSIGNED_INT && (d1 = n.RG32UI), q === n.BYTE && (d1 = n.RG8I), q === n.SHORT && (d1 = n.RG16I), q === n.INT && (d1 = n.RG32I)), D === n.RGB_INTEGER && (q === n.UNSIGNED_BYTE && (d1 = n.RGB8UI), q === n.UNSIGNED_SHORT && (d1 = n.RGB16UI), q === n.UNSIGNED_INT && (d1 = n.RGB32UI), q === n.BYTE && (d1 = n.RGB8I), q === n.SHORT && (d1 = n.RGB16I), q === n.INT && (d1 = n.RGB32I)), D === n.RGBA_INTEGER && (q === n.UNSIGNED_BYTE && (d1 = n.RGBA8UI), q === n.UNSIGNED_SHORT && (d1 = n.RGBA16UI), q === n.UNSIGNED_INT && (d1 = n.RGBA32UI), q === n.BYTE && (d1 = n.RGBA8I), q === n.SHORT && (d1 = n.RGBA16I), q === n.INT && (d1 = n.RGBA32I)), D === n.RGB && q === n.UNSIGNED_INT_5_9_9_9_REV && (d1 = n.RGB9_E5), D === n.RGBA) {
        const U1 = h1 ? Fu : ze.getTransfer(c1);
        q === n.FLOAT && (d1 = n.RGBA32F), q === n.HALF_FLOAT && (d1 = n.RGBA16F), q === n.UNSIGNED_BYTE && (d1 = U1 === nt ? n.SRGB8_ALPHA8 : n.RGBA8), q === n.UNSIGNED_SHORT_4_4_4_4 && (d1 = n.RGBA4), q === n.UNSIGNED_SHORT_5_5_5_1 && (d1 = n.RGB5_A1);
      }
      return (d1 === n.R16F || d1 === n.R32F || d1 === n.RG16F || d1 === n.RG32F || d1 === n.RGBA16F || d1 === n.RGBA32F) && e.get("EXT_color_buffer_float"), d1;
    }
    function v(N, D) {
      let q;
      return N ? D === null || D === wr || D === Q0 ? q = n.DEPTH24_STENCIL8 : D === L2 ? q = n.DEPTH32F_STENCIL8 : D === J0 && (q = n.DEPTH24_STENCIL8, console.warn("DepthTexture: 16 bit depth attachment is not supported with stencil. Using 24-bit attachment.")) : D === null || D === wr || D === Q0 ? q = n.DEPTH_COMPONENT24 : D === L2 ? q = n.DEPTH_COMPONENT32F : D === J0 && (q = n.DEPTH_COMPONENT16), q;
    }
    function x(N, D) {
      return p(N) === true || N.isFramebufferTexture && N.minFilter !== t2 && N.minFilter !== Pn ? Math.log2(Math.max(D.width, D.height)) + 1 : N.mipmaps !== void 0 && N.mipmaps.length > 0 ? N.mipmaps.length : N.isCompressedTexture && Array.isArray(N.image) ? D.mipmaps.length : 1;
    }
    function C(N) {
      const D = N.target;
      D.removeEventListener("dispose", C), P(D), D.isVideoTexture && u.delete(D);
    }
    function A(N) {
      const D = N.target;
      D.removeEventListener("dispose", A), E(D);
    }
    function P(N) {
      const D = i.get(N);
      if (D.__webglInit === void 0) return;
      const q = N.source, c1 = d.get(q);
      if (c1) {
        const h1 = c1[D.__cacheKey];
        h1.usedTimes--, h1.usedTimes === 0 && M(N), Object.keys(c1).length === 0 && d.delete(q);
      }
      i.remove(N);
    }
    function M(N) {
      const D = i.get(N);
      n.deleteTexture(D.__webglTexture);
      const q = N.source, c1 = d.get(q);
      delete c1[D.__cacheKey], o.memory.textures--;
    }
    function E(N) {
      const D = i.get(N);
      if (N.depthTexture && (N.depthTexture.dispose(), i.remove(N.depthTexture)), N.isWebGLCubeRenderTarget) for (let c1 = 0; c1 < 6; c1++) {
        if (Array.isArray(D.__webglFramebuffer[c1])) for (let h1 = 0; h1 < D.__webglFramebuffer[c1].length; h1++) n.deleteFramebuffer(D.__webglFramebuffer[c1][h1]);
        else n.deleteFramebuffer(D.__webglFramebuffer[c1]);
        D.__webglDepthbuffer && n.deleteRenderbuffer(D.__webglDepthbuffer[c1]);
      }
      else {
        if (Array.isArray(D.__webglFramebuffer)) for (let c1 = 0; c1 < D.__webglFramebuffer.length; c1++) n.deleteFramebuffer(D.__webglFramebuffer[c1]);
        else n.deleteFramebuffer(D.__webglFramebuffer);
        if (D.__webglDepthbuffer && n.deleteRenderbuffer(D.__webglDepthbuffer), D.__webglMultisampledFramebuffer && n.deleteFramebuffer(D.__webglMultisampledFramebuffer), D.__webglColorRenderbuffer) for (let c1 = 0; c1 < D.__webglColorRenderbuffer.length; c1++) D.__webglColorRenderbuffer[c1] && n.deleteRenderbuffer(D.__webglColorRenderbuffer[c1]);
        D.__webglDepthRenderbuffer && n.deleteRenderbuffer(D.__webglDepthRenderbuffer);
      }
      const q = N.textures;
      for (let c1 = 0, h1 = q.length; c1 < h1; c1++) {
        const d1 = i.get(q[c1]);
        d1.__webglTexture && (n.deleteTexture(d1.__webglTexture), o.memory.textures--), i.remove(q[c1]);
      }
      i.remove(N);
    }
    let I = 0;
    function k() {
      I = 0;
    }
    function H() {
      const N = I;
      return N >= r.maxTextures && console.warn("THREE.WebGLTextures: Trying to use " + N + " texture units while this GPU supports only " + r.maxTextures), I += 1, N;
    }
    function K(N) {
      const D = [];
      return D.push(N.wrapS), D.push(N.wrapT), D.push(N.wrapR || 0), D.push(N.magFilter), D.push(N.minFilter), D.push(N.anisotropy), D.push(N.internalFormat), D.push(N.format), D.push(N.type), D.push(N.generateMipmaps), D.push(N.premultiplyAlpha), D.push(N.flipY), D.push(N.unpackAlignment), D.push(N.colorSpace), D.join();
    }
    function J(N, D) {
      const q = i.get(N);
      if (N.isVideoTexture && p1(N), N.isRenderTargetTexture === false && N.version > 0 && q.__version !== N.version) {
        const c1 = N.image;
        if (c1 === null) console.warn("THREE.WebGLRenderer: Texture marked for update but no image data found.");
        else if (c1.complete === false) console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete");
        else {
          M1(q, N, D);
          return;
        }
      }
      t.bindTexture(n.TEXTURE_2D, q.__webglTexture, n.TEXTURE0 + D);
    }
    function z(N, D) {
      const q = i.get(N);
      if (N.version > 0 && q.__version !== N.version) {
        M1(q, N, D);
        return;
      }
      t.bindTexture(n.TEXTURE_2D_ARRAY, q.__webglTexture, n.TEXTURE0 + D);
    }
    function $(N, D) {
      const q = i.get(N);
      if (N.version > 0 && q.__version !== N.version) {
        M1(q, N, D);
        return;
      }
      t.bindTexture(n.TEXTURE_3D, q.__webglTexture, n.TEXTURE0 + D);
    }
    function G(N, D) {
      const q = i.get(N);
      if (N.version > 0 && q.__version !== N.version) {
        W(q, N, D);
        return;
      }
      t.bindTexture(n.TEXTURE_CUBE_MAP, q.__webglTexture, n.TEXTURE0 + D);
    }
    const Q = {
      [ra]: n.REPEAT,
      [Bi]: n.CLAMP_TO_EDGE,
      [Iu]: n.MIRRORED_REPEAT
    }, V = {
      [t2]: n.NEAREST,
      [a8]: n.NEAREST_MIPMAP_NEAREST,
      [Ka]: n.NEAREST_MIPMAP_LINEAR,
      [Pn]: n.LINEAR,
      [Wc]: n.LINEAR_MIPMAP_NEAREST,
      [Hi]: n.LINEAR_MIPMAP_LINEAR
    }, w1 = {
      [$P]: n.NEVER,
      [ZP]: n.ALWAYS,
      [qP]: n.LESS,
      [g8]: n.LEQUAL,
      [YP]: n.EQUAL,
      [QP]: n.GEQUAL,
      [KP]: n.GREATER,
      [JP]: n.NOTEQUAL
    };
    function m1(N, D) {
      if (D.type === L2 && e.has("OES_texture_float_linear") === false && (D.magFilter === Pn || D.magFilter === Wc || D.magFilter === Ka || D.magFilter === Hi || D.minFilter === Pn || D.minFilter === Wc || D.minFilter === Ka || D.minFilter === Hi) && console.warn("THREE.WebGLRenderer: Unable to use linear filtering with floating point textures. OES_texture_float_linear not supported on this device."), n.texParameteri(N, n.TEXTURE_WRAP_S, Q[D.wrapS]), n.texParameteri(N, n.TEXTURE_WRAP_T, Q[D.wrapT]), (N === n.TEXTURE_3D || N === n.TEXTURE_2D_ARRAY) && n.texParameteri(N, n.TEXTURE_WRAP_R, Q[D.wrapR]), n.texParameteri(N, n.TEXTURE_MAG_FILTER, V[D.magFilter]), n.texParameteri(N, n.TEXTURE_MIN_FILTER, V[D.minFilter]), D.compareFunction && (n.texParameteri(N, n.TEXTURE_COMPARE_MODE, n.COMPARE_REF_TO_TEXTURE), n.texParameteri(N, n.TEXTURE_COMPARE_FUNC, w1[D.compareFunction])), e.has("EXT_texture_filter_anisotropic") === true) {
        if (D.magFilter === t2 || D.minFilter !== Ka && D.minFilter !== Hi || D.type === L2 && e.has("OES_texture_float_linear") === false) return;
        if (D.anisotropy > 1 || i.get(D).__currentAnisotropy) {
          const q = e.get("EXT_texture_filter_anisotropic");
          n.texParameterf(N, q.TEXTURE_MAX_ANISOTROPY_EXT, Math.min(D.anisotropy, r.getMaxAnisotropy())), i.get(D).__currentAnisotropy = D.anisotropy;
        }
      }
    }
    function I1(N, D) {
      let q = false;
      N.__webglInit === void 0 && (N.__webglInit = true, D.addEventListener("dispose", C));
      const c1 = D.source;
      let h1 = d.get(c1);
      h1 === void 0 && (h1 = {}, d.set(c1, h1));
      const d1 = K(D);
      if (d1 !== N.__cacheKey) {
        h1[d1] === void 0 && (h1[d1] = {
          texture: n.createTexture(),
          usedTimes: 0
        }, o.memory.textures++, q = true), h1[d1].usedTimes++;
        const U1 = h1[N.__cacheKey];
        U1 !== void 0 && (h1[N.__cacheKey].usedTimes--, U1.usedTimes === 0 && M(D)), N.__cacheKey = d1, N.__webglTexture = h1[d1].texture;
      }
      return q;
    }
    function Z(N, D, q) {
      return Math.floor(Math.floor(N / q) / D);
    }
    function f1(N, D, q, c1) {
      const d1 = N.updateRanges;
      if (d1.length === 0) t.texSubImage2D(n.TEXTURE_2D, 0, 0, 0, D.width, D.height, q, c1, D.data);
      else {
        d1.sort((A1, $1) => A1.start - $1.start);
        let U1 = 0;
        for (let A1 = 1; A1 < d1.length; A1++) {
          const $1 = d1[U1], ne = d1[A1], K1 = $1.start + $1.count, V1 = Z(ne.start, D.width, 4), ie = Z($1.start, D.width, 4);
          ne.start <= K1 + 1 && V1 === ie && Z(ne.start + ne.count - 1, D.width, 4) === V1 ? $1.count = Math.max($1.count, ne.start + ne.count - $1.start) : (++U1, d1[U1] = ne);
        }
        d1.length = U1 + 1;
        const B1 = n.getParameter(n.UNPACK_ROW_LENGTH), j1 = n.getParameter(n.UNPACK_SKIP_PIXELS), G1 = n.getParameter(n.UNPACK_SKIP_ROWS);
        n.pixelStorei(n.UNPACK_ROW_LENGTH, D.width);
        for (let A1 = 0, $1 = d1.length; A1 < $1; A1++) {
          const ne = d1[A1], K1 = Math.floor(ne.start / 4), V1 = Math.ceil(ne.count / 4), ie = K1 % D.width, X = Math.floor(K1 / D.width), X1 = V1, P1 = 1;
          n.pixelStorei(n.UNPACK_SKIP_PIXELS, ie), n.pixelStorei(n.UNPACK_SKIP_ROWS, X), t.texSubImage2D(n.TEXTURE_2D, 0, ie, X, X1, P1, q, c1, D.data);
        }
        N.clearUpdateRanges(), n.pixelStorei(n.UNPACK_ROW_LENGTH, B1), n.pixelStorei(n.UNPACK_SKIP_PIXELS, j1), n.pixelStorei(n.UNPACK_SKIP_ROWS, G1);
      }
    }
    function M1(N, D, q) {
      let c1 = n.TEXTURE_2D;
      (D.isDataArrayTexture || D.isCompressedArrayTexture) && (c1 = n.TEXTURE_2D_ARRAY), D.isData3DTexture && (c1 = n.TEXTURE_3D);
      const h1 = I1(N, D), d1 = D.source;
      t.bindTexture(c1, N.__webglTexture, n.TEXTURE0 + q);
      const U1 = i.get(d1);
      if (d1.version !== U1.__version || h1 === true) {
        t.activeTexture(n.TEXTURE0 + q);
        const B1 = ze.getPrimaries(ze.workingColorSpace), j1 = D.colorSpace === rr ? null : ze.getPrimaries(D.colorSpace), G1 = D.colorSpace === rr || B1 === j1 ? n.NONE : n.BROWSER_DEFAULT_WEBGL;
        n.pixelStorei(n.UNPACK_FLIP_Y_WEBGL, D.flipY), n.pixelStorei(n.UNPACK_PREMULTIPLY_ALPHA_WEBGL, D.premultiplyAlpha), n.pixelStorei(n.UNPACK_ALIGNMENT, D.unpackAlignment), n.pixelStorei(n.UNPACK_COLORSPACE_CONVERSION_WEBGL, G1);
        let A1 = _(D.image, false, r.maxTextureSize);
        A1 = o1(D, A1);
        const $1 = s.convert(D.format, D.colorSpace), ne = s.convert(D.type);
        let K1 = b(D.internalFormat, $1, ne, D.colorSpace, D.isVideoTexture);
        m1(c1, D);
        let V1;
        const ie = D.mipmaps, X = D.isVideoTexture !== true, X1 = U1.__version === void 0 || h1 === true, P1 = d1.dataReady, Y1 = x(D, A1);
        if (D.isDepthTexture) K1 = v(D.format === el, D.type), X1 && (X ? t.texStorage2D(n.TEXTURE_2D, 1, K1, A1.width, A1.height) : t.texImage2D(n.TEXTURE_2D, 0, K1, A1.width, A1.height, 0, $1, ne, null));
        else if (D.isDataTexture) if (ie.length > 0) {
          X && X1 && t.texStorage2D(n.TEXTURE_2D, Y1, K1, ie[0].width, ie[0].height);
          for (let N1 = 0, L1 = ie.length; N1 < L1; N1++) V1 = ie[N1], X ? P1 && t.texSubImage2D(n.TEXTURE_2D, N1, 0, 0, V1.width, V1.height, $1, ne, V1.data) : t.texImage2D(n.TEXTURE_2D, N1, K1, V1.width, V1.height, 0, $1, ne, V1.data);
          D.generateMipmaps = false;
        } else X ? (X1 && t.texStorage2D(n.TEXTURE_2D, Y1, K1, A1.width, A1.height), P1 && f1(D, A1, $1, ne)) : t.texImage2D(n.TEXTURE_2D, 0, K1, A1.width, A1.height, 0, $1, ne, A1.data);
        else if (D.isCompressedTexture) if (D.isCompressedArrayTexture) {
          X && X1 && t.texStorage3D(n.TEXTURE_2D_ARRAY, Y1, K1, ie[0].width, ie[0].height, A1.depth);
          for (let N1 = 0, L1 = ie.length; N1 < L1; N1++) if (V1 = ie[N1], D.format !== f2) if ($1 !== null) if (X) {
            if (P1) if (D.layerUpdates.size > 0) {
              const R1 = Eg(V1.width, V1.height, D.format, D.type);
              for (const j of D.layerUpdates) {
                const T1 = V1.data.subarray(j * R1 / V1.data.BYTES_PER_ELEMENT, (j + 1) * R1 / V1.data.BYTES_PER_ELEMENT);
                t.compressedTexSubImage3D(n.TEXTURE_2D_ARRAY, N1, 0, 0, j, V1.width, V1.height, 1, $1, T1);
              }
              D.clearLayerUpdates();
            } else t.compressedTexSubImage3D(n.TEXTURE_2D_ARRAY, N1, 0, 0, 0, V1.width, V1.height, A1.depth, $1, V1.data);
          } else t.compressedTexImage3D(n.TEXTURE_2D_ARRAY, N1, K1, V1.width, V1.height, A1.depth, 0, V1.data, 0, 0);
          else console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()");
          else X ? P1 && t.texSubImage3D(n.TEXTURE_2D_ARRAY, N1, 0, 0, 0, V1.width, V1.height, A1.depth, $1, ne, V1.data) : t.texImage3D(n.TEXTURE_2D_ARRAY, N1, K1, V1.width, V1.height, A1.depth, 0, $1, ne, V1.data);
        } else {
          X && X1 && t.texStorage2D(n.TEXTURE_2D, Y1, K1, ie[0].width, ie[0].height);
          for (let N1 = 0, L1 = ie.length; N1 < L1; N1++) V1 = ie[N1], D.format !== f2 ? $1 !== null ? X ? P1 && t.compressedTexSubImage2D(n.TEXTURE_2D, N1, 0, 0, V1.width, V1.height, $1, V1.data) : t.compressedTexImage2D(n.TEXTURE_2D, N1, K1, V1.width, V1.height, 0, V1.data) : console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()") : X ? P1 && t.texSubImage2D(n.TEXTURE_2D, N1, 0, 0, V1.width, V1.height, $1, ne, V1.data) : t.texImage2D(n.TEXTURE_2D, N1, K1, V1.width, V1.height, 0, $1, ne, V1.data);
        }
        else if (D.isDataArrayTexture) if (X) {
          if (X1 && t.texStorage3D(n.TEXTURE_2D_ARRAY, Y1, K1, A1.width, A1.height, A1.depth), P1) if (D.layerUpdates.size > 0) {
            const N1 = Eg(A1.width, A1.height, D.format, D.type);
            for (const L1 of D.layerUpdates) {
              const R1 = A1.data.subarray(L1 * N1 / A1.data.BYTES_PER_ELEMENT, (L1 + 1) * N1 / A1.data.BYTES_PER_ELEMENT);
              t.texSubImage3D(n.TEXTURE_2D_ARRAY, 0, 0, 0, L1, A1.width, A1.height, 1, $1, ne, R1);
            }
            D.clearLayerUpdates();
          } else t.texSubImage3D(n.TEXTURE_2D_ARRAY, 0, 0, 0, 0, A1.width, A1.height, A1.depth, $1, ne, A1.data);
        } else t.texImage3D(n.TEXTURE_2D_ARRAY, 0, K1, A1.width, A1.height, A1.depth, 0, $1, ne, A1.data);
        else if (D.isData3DTexture) X ? (X1 && t.texStorage3D(n.TEXTURE_3D, Y1, K1, A1.width, A1.height, A1.depth), P1 && t.texSubImage3D(n.TEXTURE_3D, 0, 0, 0, 0, A1.width, A1.height, A1.depth, $1, ne, A1.data)) : t.texImage3D(n.TEXTURE_3D, 0, K1, A1.width, A1.height, A1.depth, 0, $1, ne, A1.data);
        else if (D.isFramebufferTexture) {
          if (X1) if (X) t.texStorage2D(n.TEXTURE_2D, Y1, K1, A1.width, A1.height);
          else {
            let N1 = A1.width, L1 = A1.height;
            for (let R1 = 0; R1 < Y1; R1++) t.texImage2D(n.TEXTURE_2D, R1, K1, N1, L1, 0, $1, ne, null), N1 >>= 1, L1 >>= 1;
          }
        } else if (ie.length > 0) {
          if (X && X1) {
            const N1 = E1(ie[0]);
            t.texStorage2D(n.TEXTURE_2D, Y1, K1, N1.width, N1.height);
          }
          for (let N1 = 0, L1 = ie.length; N1 < L1; N1++) V1 = ie[N1], X ? P1 && t.texSubImage2D(n.TEXTURE_2D, N1, 0, 0, $1, ne, V1) : t.texImage2D(n.TEXTURE_2D, N1, K1, $1, ne, V1);
          D.generateMipmaps = false;
        } else if (X) {
          if (X1) {
            const N1 = E1(A1);
            t.texStorage2D(n.TEXTURE_2D, Y1, K1, N1.width, N1.height);
          }
          P1 && t.texSubImage2D(n.TEXTURE_2D, 0, 0, 0, $1, ne, A1);
        } else t.texImage2D(n.TEXTURE_2D, 0, K1, $1, ne, A1);
        p(D) && g(c1), U1.__version = d1.version, D.onUpdate && D.onUpdate(D);
      }
      N.__version = D.version;
    }
    function W(N, D, q) {
      if (D.image.length !== 6) return;
      const c1 = I1(N, D), h1 = D.source;
      t.bindTexture(n.TEXTURE_CUBE_MAP, N.__webglTexture, n.TEXTURE0 + q);
      const d1 = i.get(h1);
      if (h1.version !== d1.__version || c1 === true) {
        t.activeTexture(n.TEXTURE0 + q);
        const U1 = ze.getPrimaries(ze.workingColorSpace), B1 = D.colorSpace === rr ? null : ze.getPrimaries(D.colorSpace), j1 = D.colorSpace === rr || U1 === B1 ? n.NONE : n.BROWSER_DEFAULT_WEBGL;
        n.pixelStorei(n.UNPACK_FLIP_Y_WEBGL, D.flipY), n.pixelStorei(n.UNPACK_PREMULTIPLY_ALPHA_WEBGL, D.premultiplyAlpha), n.pixelStorei(n.UNPACK_ALIGNMENT, D.unpackAlignment), n.pixelStorei(n.UNPACK_COLORSPACE_CONVERSION_WEBGL, j1);
        const G1 = D.isCompressedTexture || D.image[0].isCompressedTexture, A1 = D.image[0] && D.image[0].isDataTexture, $1 = [];
        for (let L1 = 0; L1 < 6; L1++) !G1 && !A1 ? $1[L1] = _(D.image[L1], true, r.maxCubemapSize) : $1[L1] = A1 ? D.image[L1].image : D.image[L1], $1[L1] = o1(D, $1[L1]);
        const ne = $1[0], K1 = s.convert(D.format, D.colorSpace), V1 = s.convert(D.type), ie = b(D.internalFormat, K1, V1, D.colorSpace), X = D.isVideoTexture !== true, X1 = d1.__version === void 0 || c1 === true, P1 = h1.dataReady;
        let Y1 = x(D, ne);
        m1(n.TEXTURE_CUBE_MAP, D);
        let N1;
        if (G1) {
          X && X1 && t.texStorage2D(n.TEXTURE_CUBE_MAP, Y1, ie, ne.width, ne.height);
          for (let L1 = 0; L1 < 6; L1++) {
            N1 = $1[L1].mipmaps;
            for (let R1 = 0; R1 < N1.length; R1++) {
              const j = N1[R1];
              D.format !== f2 ? K1 !== null ? X ? P1 && t.compressedTexSubImage2D(n.TEXTURE_CUBE_MAP_POSITIVE_X + L1, R1, 0, 0, j.width, j.height, K1, j.data) : t.compressedTexImage2D(n.TEXTURE_CUBE_MAP_POSITIVE_X + L1, R1, ie, j.width, j.height, 0, j.data) : console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()") : X ? P1 && t.texSubImage2D(n.TEXTURE_CUBE_MAP_POSITIVE_X + L1, R1, 0, 0, j.width, j.height, K1, V1, j.data) : t.texImage2D(n.TEXTURE_CUBE_MAP_POSITIVE_X + L1, R1, ie, j.width, j.height, 0, K1, V1, j.data);
            }
          }
        } else {
          if (N1 = D.mipmaps, X && X1) {
            N1.length > 0 && Y1++;
            const L1 = E1($1[0]);
            t.texStorage2D(n.TEXTURE_CUBE_MAP, Y1, ie, L1.width, L1.height);
          }
          for (let L1 = 0; L1 < 6; L1++) if (A1) {
            X ? P1 && t.texSubImage2D(n.TEXTURE_CUBE_MAP_POSITIVE_X + L1, 0, 0, 0, $1[L1].width, $1[L1].height, K1, V1, $1[L1].data) : t.texImage2D(n.TEXTURE_CUBE_MAP_POSITIVE_X + L1, 0, ie, $1[L1].width, $1[L1].height, 0, K1, V1, $1[L1].data);
            for (let R1 = 0; R1 < N1.length; R1++) {
              const T1 = N1[R1].image[L1].image;
              X ? P1 && t.texSubImage2D(n.TEXTURE_CUBE_MAP_POSITIVE_X + L1, R1 + 1, 0, 0, T1.width, T1.height, K1, V1, T1.data) : t.texImage2D(n.TEXTURE_CUBE_MAP_POSITIVE_X + L1, R1 + 1, ie, T1.width, T1.height, 0, K1, V1, T1.data);
            }
          } else {
            X ? P1 && t.texSubImage2D(n.TEXTURE_CUBE_MAP_POSITIVE_X + L1, 0, 0, 0, K1, V1, $1[L1]) : t.texImage2D(n.TEXTURE_CUBE_MAP_POSITIVE_X + L1, 0, ie, K1, V1, $1[L1]);
            for (let R1 = 0; R1 < N1.length; R1++) {
              const j = N1[R1];
              X ? P1 && t.texSubImage2D(n.TEXTURE_CUBE_MAP_POSITIVE_X + L1, R1 + 1, 0, 0, K1, V1, j.image[L1]) : t.texImage2D(n.TEXTURE_CUBE_MAP_POSITIVE_X + L1, R1 + 1, ie, K1, V1, j.image[L1]);
            }
          }
        }
        p(D) && g(n.TEXTURE_CUBE_MAP), d1.__version = h1.version, D.onUpdate && D.onUpdate(D);
      }
      N.__version = D.version;
    }
    function r1(N, D, q, c1, h1, d1) {
      const U1 = s.convert(q.format, q.colorSpace), B1 = s.convert(q.type), j1 = b(q.internalFormat, U1, B1, q.colorSpace), G1 = i.get(D), A1 = i.get(q);
      if (A1.__renderTarget = D, !G1.__hasExternalTextures) {
        const $1 = Math.max(1, D.width >> d1), ne = Math.max(1, D.height >> d1);
        h1 === n.TEXTURE_3D || h1 === n.TEXTURE_2D_ARRAY ? t.texImage3D(h1, d1, j1, $1, ne, D.depth, 0, U1, B1, null) : t.texImage2D(h1, d1, j1, $1, ne, 0, U1, B1, null);
      }
      t.bindFramebuffer(n.FRAMEBUFFER, N), D1(D) ? a.framebufferTexture2DMultisampleEXT(n.FRAMEBUFFER, c1, h1, A1.__webglTexture, 0, l1(D)) : (h1 === n.TEXTURE_2D || h1 >= n.TEXTURE_CUBE_MAP_POSITIVE_X && h1 <= n.TEXTURE_CUBE_MAP_NEGATIVE_Z) && n.framebufferTexture2D(n.FRAMEBUFFER, c1, h1, A1.__webglTexture, d1), t.bindFramebuffer(n.FRAMEBUFFER, null);
    }
    function v1(N, D, q) {
      if (n.bindRenderbuffer(n.RENDERBUFFER, N), D.depthBuffer) {
        const c1 = D.depthTexture, h1 = c1 && c1.isDepthTexture ? c1.type : null, d1 = v(D.stencilBuffer, h1), U1 = D.stencilBuffer ? n.DEPTH_STENCIL_ATTACHMENT : n.DEPTH_ATTACHMENT, B1 = l1(D);
        D1(D) ? a.renderbufferStorageMultisampleEXT(n.RENDERBUFFER, B1, d1, D.width, D.height) : q ? n.renderbufferStorageMultisample(n.RENDERBUFFER, B1, d1, D.width, D.height) : n.renderbufferStorage(n.RENDERBUFFER, d1, D.width, D.height), n.framebufferRenderbuffer(n.FRAMEBUFFER, U1, n.RENDERBUFFER, N);
      } else {
        const c1 = D.textures;
        for (let h1 = 0; h1 < c1.length; h1++) {
          const d1 = c1[h1], U1 = s.convert(d1.format, d1.colorSpace), B1 = s.convert(d1.type), j1 = b(d1.internalFormat, U1, B1, d1.colorSpace), G1 = l1(D);
          q && D1(D) === false ? n.renderbufferStorageMultisample(n.RENDERBUFFER, G1, j1, D.width, D.height) : D1(D) ? a.renderbufferStorageMultisampleEXT(n.RENDERBUFFER, G1, j1, D.width, D.height) : n.renderbufferStorage(n.RENDERBUFFER, j1, D.width, D.height);
        }
      }
      n.bindRenderbuffer(n.RENDERBUFFER, null);
    }
    function S1(N, D) {
      if (D && D.isWebGLCubeRenderTarget) throw new Error("Depth Texture with cube render targets is not supported");
      if (t.bindFramebuffer(n.FRAMEBUFFER, N), !(D.depthTexture && D.depthTexture.isDepthTexture)) throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");
      const c1 = i.get(D.depthTexture);
      c1.__renderTarget = D, (!c1.__webglTexture || D.depthTexture.image.width !== D.width || D.depthTexture.image.height !== D.height) && (D.depthTexture.image.width = D.width, D.depthTexture.image.height = D.height, D.depthTexture.needsUpdate = true), J(D.depthTexture, 0);
      const h1 = c1.__webglTexture, d1 = l1(D);
      if (D.depthTexture.format === Z0) D1(D) ? a.framebufferTexture2DMultisampleEXT(n.FRAMEBUFFER, n.DEPTH_ATTACHMENT, n.TEXTURE_2D, h1, 0, d1) : n.framebufferTexture2D(n.FRAMEBUFFER, n.DEPTH_ATTACHMENT, n.TEXTURE_2D, h1, 0);
      else if (D.depthTexture.format === el) D1(D) ? a.framebufferTexture2DMultisampleEXT(n.FRAMEBUFFER, n.DEPTH_STENCIL_ATTACHMENT, n.TEXTURE_2D, h1, 0, d1) : n.framebufferTexture2D(n.FRAMEBUFFER, n.DEPTH_STENCIL_ATTACHMENT, n.TEXTURE_2D, h1, 0);
      else throw new Error("Unknown depthTexture format");
    }
    function z1(N) {
      const D = i.get(N), q = N.isWebGLCubeRenderTarget === true;
      if (D.__boundDepthTexture !== N.depthTexture) {
        const c1 = N.depthTexture;
        if (D.__depthDisposeCallback && D.__depthDisposeCallback(), c1) {
          const h1 = () => {
            delete D.__boundDepthTexture, delete D.__depthDisposeCallback, c1.removeEventListener("dispose", h1);
          };
          c1.addEventListener("dispose", h1), D.__depthDisposeCallback = h1;
        }
        D.__boundDepthTexture = c1;
      }
      if (N.depthTexture && !D.__autoAllocateDepthBuffer) {
        if (q) throw new Error("target.depthTexture not supported in Cube render targets");
        const c1 = N.texture.mipmaps;
        c1 && c1.length > 0 ? S1(D.__webglFramebuffer[0], N) : S1(D.__webglFramebuffer, N);
      } else if (q) {
        D.__webglDepthbuffer = [];
        for (let c1 = 0; c1 < 6; c1++) if (t.bindFramebuffer(n.FRAMEBUFFER, D.__webglFramebuffer[c1]), D.__webglDepthbuffer[c1] === void 0) D.__webglDepthbuffer[c1] = n.createRenderbuffer(), v1(D.__webglDepthbuffer[c1], N, false);
        else {
          const h1 = N.stencilBuffer ? n.DEPTH_STENCIL_ATTACHMENT : n.DEPTH_ATTACHMENT, d1 = D.__webglDepthbuffer[c1];
          n.bindRenderbuffer(n.RENDERBUFFER, d1), n.framebufferRenderbuffer(n.FRAMEBUFFER, h1, n.RENDERBUFFER, d1);
        }
      } else {
        const c1 = N.texture.mipmaps;
        if (c1 && c1.length > 0 ? t.bindFramebuffer(n.FRAMEBUFFER, D.__webglFramebuffer[0]) : t.bindFramebuffer(n.FRAMEBUFFER, D.__webglFramebuffer), D.__webglDepthbuffer === void 0) D.__webglDepthbuffer = n.createRenderbuffer(), v1(D.__webglDepthbuffer, N, false);
        else {
          const h1 = N.stencilBuffer ? n.DEPTH_STENCIL_ATTACHMENT : n.DEPTH_ATTACHMENT, d1 = D.__webglDepthbuffer;
          n.bindRenderbuffer(n.RENDERBUFFER, d1), n.framebufferRenderbuffer(n.FRAMEBUFFER, h1, n.RENDERBUFFER, d1);
        }
      }
      t.bindFramebuffer(n.FRAMEBUFFER, null);
    }
    function Z1(N, D, q) {
      const c1 = i.get(N);
      D !== void 0 && r1(c1.__webglFramebuffer, N, N.texture, n.COLOR_ATTACHMENT0, n.TEXTURE_2D, 0), q !== void 0 && z1(N);
    }
    function F(N) {
      const D = N.texture, q = i.get(N), c1 = i.get(D);
      N.addEventListener("dispose", A);
      const h1 = N.textures, d1 = N.isWebGLCubeRenderTarget === true, U1 = h1.length > 1;
      if (U1 || (c1.__webglTexture === void 0 && (c1.__webglTexture = n.createTexture()), c1.__version = D.version, o.memory.textures++), d1) {
        q.__webglFramebuffer = [];
        for (let B1 = 0; B1 < 6; B1++) if (D.mipmaps && D.mipmaps.length > 0) {
          q.__webglFramebuffer[B1] = [];
          for (let j1 = 0; j1 < D.mipmaps.length; j1++) q.__webglFramebuffer[B1][j1] = n.createFramebuffer();
        } else q.__webglFramebuffer[B1] = n.createFramebuffer();
      } else {
        if (D.mipmaps && D.mipmaps.length > 0) {
          q.__webglFramebuffer = [];
          for (let B1 = 0; B1 < D.mipmaps.length; B1++) q.__webglFramebuffer[B1] = n.createFramebuffer();
        } else q.__webglFramebuffer = n.createFramebuffer();
        if (U1) for (let B1 = 0, j1 = h1.length; B1 < j1; B1++) {
          const G1 = i.get(h1[B1]);
          G1.__webglTexture === void 0 && (G1.__webglTexture = n.createTexture(), o.memory.textures++);
        }
        if (N.samples > 0 && D1(N) === false) {
          q.__webglMultisampledFramebuffer = n.createFramebuffer(), q.__webglColorRenderbuffer = [], t.bindFramebuffer(n.FRAMEBUFFER, q.__webglMultisampledFramebuffer);
          for (let B1 = 0; B1 < h1.length; B1++) {
            const j1 = h1[B1];
            q.__webglColorRenderbuffer[B1] = n.createRenderbuffer(), n.bindRenderbuffer(n.RENDERBUFFER, q.__webglColorRenderbuffer[B1]);
            const G1 = s.convert(j1.format, j1.colorSpace), A1 = s.convert(j1.type), $1 = b(j1.internalFormat, G1, A1, j1.colorSpace, N.isXRRenderTarget === true), ne = l1(N);
            n.renderbufferStorageMultisample(n.RENDERBUFFER, ne, $1, N.width, N.height), n.framebufferRenderbuffer(n.FRAMEBUFFER, n.COLOR_ATTACHMENT0 + B1, n.RENDERBUFFER, q.__webglColorRenderbuffer[B1]);
          }
          n.bindRenderbuffer(n.RENDERBUFFER, null), N.depthBuffer && (q.__webglDepthRenderbuffer = n.createRenderbuffer(), v1(q.__webglDepthRenderbuffer, N, true)), t.bindFramebuffer(n.FRAMEBUFFER, null);
        }
      }
      if (d1) {
        t.bindTexture(n.TEXTURE_CUBE_MAP, c1.__webglTexture), m1(n.TEXTURE_CUBE_MAP, D);
        for (let B1 = 0; B1 < 6; B1++) if (D.mipmaps && D.mipmaps.length > 0) for (let j1 = 0; j1 < D.mipmaps.length; j1++) r1(q.__webglFramebuffer[B1][j1], N, D, n.COLOR_ATTACHMENT0, n.TEXTURE_CUBE_MAP_POSITIVE_X + B1, j1);
        else r1(q.__webglFramebuffer[B1], N, D, n.COLOR_ATTACHMENT0, n.TEXTURE_CUBE_MAP_POSITIVE_X + B1, 0);
        p(D) && g(n.TEXTURE_CUBE_MAP), t.unbindTexture();
      } else if (U1) {
        for (let B1 = 0, j1 = h1.length; B1 < j1; B1++) {
          const G1 = h1[B1], A1 = i.get(G1);
          t.bindTexture(n.TEXTURE_2D, A1.__webglTexture), m1(n.TEXTURE_2D, G1), r1(q.__webglFramebuffer, N, G1, n.COLOR_ATTACHMENT0 + B1, n.TEXTURE_2D, 0), p(G1) && g(n.TEXTURE_2D);
        }
        t.unbindTexture();
      } else {
        let B1 = n.TEXTURE_2D;
        if ((N.isWebGL3DRenderTarget || N.isWebGLArrayRenderTarget) && (B1 = N.isWebGL3DRenderTarget ? n.TEXTURE_3D : n.TEXTURE_2D_ARRAY), t.bindTexture(B1, c1.__webglTexture), m1(B1, D), D.mipmaps && D.mipmaps.length > 0) for (let j1 = 0; j1 < D.mipmaps.length; j1++) r1(q.__webglFramebuffer[j1], N, D, n.COLOR_ATTACHMENT0, B1, j1);
        else r1(q.__webglFramebuffer, N, D, n.COLOR_ATTACHMENT0, B1, 0);
        p(D) && g(B1), t.unbindTexture();
      }
      N.depthBuffer && z1(N);
    }
    function T(N) {
      const D = N.textures;
      for (let q = 0, c1 = D.length; q < c1; q++) {
        const h1 = D[q];
        if (p(h1)) {
          const d1 = y(N), U1 = i.get(h1).__webglTexture;
          t.bindTexture(d1, U1), g(d1), t.unbindTexture();
        }
      }
    }
    const e1 = [], _1 = [];
    function B(N) {
      if (N.samples > 0) {
        if (D1(N) === false) {
          const D = N.textures, q = N.width, c1 = N.height;
          let h1 = n.COLOR_BUFFER_BIT;
          const d1 = N.stencilBuffer ? n.DEPTH_STENCIL_ATTACHMENT : n.DEPTH_ATTACHMENT, U1 = i.get(N), B1 = D.length > 1;
          if (B1) for (let G1 = 0; G1 < D.length; G1++) t.bindFramebuffer(n.FRAMEBUFFER, U1.__webglMultisampledFramebuffer), n.framebufferRenderbuffer(n.FRAMEBUFFER, n.COLOR_ATTACHMENT0 + G1, n.RENDERBUFFER, null), t.bindFramebuffer(n.FRAMEBUFFER, U1.__webglFramebuffer), n.framebufferTexture2D(n.DRAW_FRAMEBUFFER, n.COLOR_ATTACHMENT0 + G1, n.TEXTURE_2D, null, 0);
          t.bindFramebuffer(n.READ_FRAMEBUFFER, U1.__webglMultisampledFramebuffer);
          const j1 = N.texture.mipmaps;
          j1 && j1.length > 0 ? t.bindFramebuffer(n.DRAW_FRAMEBUFFER, U1.__webglFramebuffer[0]) : t.bindFramebuffer(n.DRAW_FRAMEBUFFER, U1.__webglFramebuffer);
          for (let G1 = 0; G1 < D.length; G1++) {
            if (N.resolveDepthBuffer && (N.depthBuffer && (h1 |= n.DEPTH_BUFFER_BIT), N.stencilBuffer && N.resolveStencilBuffer && (h1 |= n.STENCIL_BUFFER_BIT)), B1) {
              n.framebufferRenderbuffer(n.READ_FRAMEBUFFER, n.COLOR_ATTACHMENT0, n.RENDERBUFFER, U1.__webglColorRenderbuffer[G1]);
              const A1 = i.get(D[G1]).__webglTexture;
              n.framebufferTexture2D(n.DRAW_FRAMEBUFFER, n.COLOR_ATTACHMENT0, n.TEXTURE_2D, A1, 0);
            }
            n.blitFramebuffer(0, 0, q, c1, 0, 0, q, c1, h1, n.NEAREST), l === true && (e1.length = 0, _1.length = 0, e1.push(n.COLOR_ATTACHMENT0 + G1), N.depthBuffer && N.resolveDepthBuffer === false && (e1.push(d1), _1.push(d1), n.invalidateFramebuffer(n.DRAW_FRAMEBUFFER, _1)), n.invalidateFramebuffer(n.READ_FRAMEBUFFER, e1));
          }
          if (t.bindFramebuffer(n.READ_FRAMEBUFFER, null), t.bindFramebuffer(n.DRAW_FRAMEBUFFER, null), B1) for (let G1 = 0; G1 < D.length; G1++) {
            t.bindFramebuffer(n.FRAMEBUFFER, U1.__webglMultisampledFramebuffer), n.framebufferRenderbuffer(n.FRAMEBUFFER, n.COLOR_ATTACHMENT0 + G1, n.RENDERBUFFER, U1.__webglColorRenderbuffer[G1]);
            const A1 = i.get(D[G1]).__webglTexture;
            t.bindFramebuffer(n.FRAMEBUFFER, U1.__webglFramebuffer), n.framebufferTexture2D(n.DRAW_FRAMEBUFFER, n.COLOR_ATTACHMENT0 + G1, n.TEXTURE_2D, A1, 0);
          }
          t.bindFramebuffer(n.DRAW_FRAMEBUFFER, U1.__webglMultisampledFramebuffer);
        } else if (N.depthBuffer && N.resolveDepthBuffer === false && l) {
          const D = N.stencilBuffer ? n.DEPTH_STENCIL_ATTACHMENT : n.DEPTH_ATTACHMENT;
          n.invalidateFramebuffer(n.DRAW_FRAMEBUFFER, [
            D
          ]);
        }
      }
    }
    function l1(N) {
      return Math.min(r.maxSamples, N.samples);
    }
    function D1(N) {
      const D = i.get(N);
      return N.samples > 0 && e.has("WEBGL_multisampled_render_to_texture") === true && D.__useRenderToTexture !== false;
    }
    function p1(N) {
      const D = o.render.frame;
      u.get(N) !== D && (u.set(N, D), N.update());
    }
    function o1(N, D) {
      const q = N.colorSpace, c1 = N.format, h1 = N.type;
      return N.isCompressedTexture === true || N.isVideoTexture === true || q !== kn && q !== rr && (ze.getTransfer(q) === nt ? (c1 !== f2 || h1 !== qi) && console.warn("THREE.WebGLTextures: sRGB encoded textures have to use RGBAFormat and UnsignedByteType.") : console.error("THREE.WebGLTextures: Unsupported texture color space:", q)), D;
    }
    function E1(N) {
      return typeof HTMLImageElement < "u" && N instanceof HTMLImageElement ? (c.width = N.naturalWidth || N.width, c.height = N.naturalHeight || N.height) : typeof VideoFrame < "u" && N instanceof VideoFrame ? (c.width = N.displayWidth, c.height = N.displayHeight) : (c.width = N.width, c.height = N.height), c;
    }
    this.allocateTextureUnit = H, this.resetTextureUnits = k, this.setTexture2D = J, this.setTexture2DArray = z, this.setTexture3D = $, this.setTextureCube = G, this.rebindTextures = Z1, this.setupRenderTarget = F, this.updateRenderTargetMipmap = T, this.updateMultisampleRenderTarget = B, this.setupDepthRenderbuffer = z1, this.setupFrameBufferTexture = r1, this.useMultisampledRTT = D1;
  }
  function _U(n, e) {
    function t(i, r = rr) {
      let s;
      const o = ze.getTransfer(r);
      if (i === qi) return n.UNSIGNED_BYTE;
      if (i === Bp) return n.UNSIGNED_SHORT_4_4_4_4;
      if (i === Hp) return n.UNSIGNED_SHORT_5_5_5_1;
      if (i === u8) return n.UNSIGNED_INT_5_9_9_9_REV;
      if (i === l8) return n.BYTE;
      if (i === c8) return n.SHORT;
      if (i === J0) return n.UNSIGNED_SHORT;
      if (i === Up) return n.INT;
      if (i === wr) return n.UNSIGNED_INT;
      if (i === L2) return n.FLOAT;
      if (i === Tl) return n.HALF_FLOAT;
      if (i === f8) return n.ALPHA;
      if (i === h8) return n.RGB;
      if (i === f2) return n.RGBA;
      if (i === Z0) return n.DEPTH_COMPONENT;
      if (i === el) return n.DEPTH_STENCIL;
      if (i === zp) return n.RED;
      if (i === Df) return n.RED_INTEGER;
      if (i === d8) return n.RG;
      if (i === Vp) return n.RG_INTEGER;
      if (i === Gp) return n.RGBA_INTEGER;
      if (i === jc || i === Xc || i === $c || i === qc) if (o === nt) if (s = e.get("WEBGL_compressed_texture_s3tc_srgb"), s !== null) {
        if (i === jc) return s.COMPRESSED_SRGB_S3TC_DXT1_EXT;
        if (i === Xc) return s.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;
        if (i === $c) return s.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;
        if (i === qc) return s.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT;
      } else return null;
      else if (s = e.get("WEBGL_compressed_texture_s3tc"), s !== null) {
        if (i === jc) return s.COMPRESSED_RGB_S3TC_DXT1_EXT;
        if (i === Xc) return s.COMPRESSED_RGBA_S3TC_DXT1_EXT;
        if (i === $c) return s.COMPRESSED_RGBA_S3TC_DXT3_EXT;
        if (i === qc) return s.COMPRESSED_RGBA_S3TC_DXT5_EXT;
      } else return null;
      if (i === I4 || i === F4 || i === O4 || i === k4) if (s = e.get("WEBGL_compressed_texture_pvrtc"), s !== null) {
        if (i === I4) return s.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;
        if (i === F4) return s.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;
        if (i === O4) return s.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;
        if (i === k4) return s.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;
      } else return null;
      if (i === N4 || i === U4 || i === B4) if (s = e.get("WEBGL_compressed_texture_etc"), s !== null) {
        if (i === N4 || i === U4) return o === nt ? s.COMPRESSED_SRGB8_ETC2 : s.COMPRESSED_RGB8_ETC2;
        if (i === B4) return o === nt ? s.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC : s.COMPRESSED_RGBA8_ETC2_EAC;
      } else return null;
      if (i === H4 || i === z4 || i === V4 || i === G4 || i === W4 || i === j4 || i === X4 || i === $4 || i === q4 || i === Y4 || i === K4 || i === J4 || i === Q4 || i === Z4) if (s = e.get("WEBGL_compressed_texture_astc"), s !== null) {
        if (i === H4) return o === nt ? s.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR : s.COMPRESSED_RGBA_ASTC_4x4_KHR;
        if (i === z4) return o === nt ? s.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR : s.COMPRESSED_RGBA_ASTC_5x4_KHR;
        if (i === V4) return o === nt ? s.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR : s.COMPRESSED_RGBA_ASTC_5x5_KHR;
        if (i === G4) return o === nt ? s.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR : s.COMPRESSED_RGBA_ASTC_6x5_KHR;
        if (i === W4) return o === nt ? s.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR : s.COMPRESSED_RGBA_ASTC_6x6_KHR;
        if (i === j4) return o === nt ? s.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR : s.COMPRESSED_RGBA_ASTC_8x5_KHR;
        if (i === X4) return o === nt ? s.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR : s.COMPRESSED_RGBA_ASTC_8x6_KHR;
        if (i === $4) return o === nt ? s.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR : s.COMPRESSED_RGBA_ASTC_8x8_KHR;
        if (i === q4) return o === nt ? s.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR : s.COMPRESSED_RGBA_ASTC_10x5_KHR;
        if (i === Y4) return o === nt ? s.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR : s.COMPRESSED_RGBA_ASTC_10x6_KHR;
        if (i === K4) return o === nt ? s.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR : s.COMPRESSED_RGBA_ASTC_10x8_KHR;
        if (i === J4) return o === nt ? s.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR : s.COMPRESSED_RGBA_ASTC_10x10_KHR;
        if (i === Q4) return o === nt ? s.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR : s.COMPRESSED_RGBA_ASTC_12x10_KHR;
        if (i === Z4) return o === nt ? s.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR : s.COMPRESSED_RGBA_ASTC_12x12_KHR;
      } else return null;
      if (i === Yc || i === e9 || i === t9) if (s = e.get("EXT_texture_compression_bptc"), s !== null) {
        if (i === Yc) return o === nt ? s.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT : s.COMPRESSED_RGBA_BPTC_UNORM_EXT;
        if (i === e9) return s.COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT;
        if (i === t9) return s.COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT;
      } else return null;
      if (i === p8 || i === n9 || i === i9 || i === r9) if (s = e.get("EXT_texture_compression_rgtc"), s !== null) {
        if (i === Yc) return s.COMPRESSED_RED_RGTC1_EXT;
        if (i === n9) return s.COMPRESSED_SIGNED_RED_RGTC1_EXT;
        if (i === i9) return s.COMPRESSED_RED_GREEN_RGTC2_EXT;
        if (i === r9) return s.COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT;
      } else return null;
      return i === Q0 ? n.UNSIGNED_INT_24_8 : n[i] !== void 0 ? n[i] : null;
    }
    return {
      convert: t
    };
  }
  const bU = `
void main() {

	gl_Position = vec4( position, 1.0 );

}`, vU = `
uniform sampler2DArray depthColor;
uniform float depthWidth;
uniform float depthHeight;

void main() {

	vec2 coord = vec2( gl_FragCoord.x / depthWidth, gl_FragCoord.y / depthHeight );

	if ( coord.x >= 1.0 ) {

		gl_FragDepth = texture( depthColor, vec3( coord.x - 1.0, coord.y, 1 ) ).r;

	} else {

		gl_FragDepth = texture( depthColor, vec3( coord.x, coord.y, 0 ) ).r;

	}

}`;
  class yU {
    constructor() {
      this.texture = null, this.mesh = null, this.depthNear = 0, this.depthFar = 0;
    }
    init(e, t, i) {
      if (this.texture === null) {
        const r = new hn(), s = e.properties.get(r);
        s.__webglTexture = t.texture, (t.depthNear !== i.depthNear || t.depthFar !== i.depthFar) && (this.depthNear = t.depthNear, this.depthFar = t.depthFar), this.texture = r;
      }
    }
    getMesh(e) {
      if (this.texture !== null && this.mesh === null) {
        const t = e.cameras[0].viewport, i = new Mr({
          vertexShader: bU,
          fragmentShader: vU,
          uniforms: {
            depthColor: {
              value: this.texture
            },
            depthWidth: {
              value: t.z
            },
            depthHeight: {
              value: t.w
            }
          }
        });
        this.mesh = new Zn(new Pf(20, 20), i);
      }
      return this.mesh;
    }
    reset() {
      this.texture = null, this.mesh = null;
    }
    getDepthTexture() {
      return this.texture;
    }
  }
  class xU extends Us {
    constructor(e, t) {
      super();
      const i = this;
      let r = null, s = 1, o = null, a = "local-floor", l = 1, c = null, u = null, h = null, d = null, f = null, m = null;
      const _ = new yU(), p = t.getContextAttributes();
      let g = null, y = null;
      const b = [], v = [], x = new Ue();
      let C = null;
      const A = new l2();
      A.viewport = new Je();
      const P = new l2();
      P.viewport = new Je();
      const M = [
        A,
        P
      ], E = new II();
      let I = null, k = null;
      this.cameraAutoUpdate = true, this.enabled = false, this.isPresenting = false, this.getController = function(Z) {
        let f1 = b[Z];
        return f1 === void 0 && (f1 = new Gh(), b[Z] = f1), f1.getTargetRaySpace();
      }, this.getControllerGrip = function(Z) {
        let f1 = b[Z];
        return f1 === void 0 && (f1 = new Gh(), b[Z] = f1), f1.getGripSpace();
      }, this.getHand = function(Z) {
        let f1 = b[Z];
        return f1 === void 0 && (f1 = new Gh(), b[Z] = f1), f1.getHandSpace();
      };
      function H(Z) {
        const f1 = v.indexOf(Z.inputSource);
        if (f1 === -1) return;
        const M1 = b[f1];
        M1 !== void 0 && (M1.update(Z.inputSource, Z.frame, c || o), M1.dispatchEvent({
          type: Z.type,
          data: Z.inputSource
        }));
      }
      function K() {
        r.removeEventListener("select", H), r.removeEventListener("selectstart", H), r.removeEventListener("selectend", H), r.removeEventListener("squeeze", H), r.removeEventListener("squeezestart", H), r.removeEventListener("squeezeend", H), r.removeEventListener("end", K), r.removeEventListener("inputsourceschange", J);
        for (let Z = 0; Z < b.length; Z++) {
          const f1 = v[Z];
          f1 !== null && (v[Z] = null, b[Z].disconnect(f1));
        }
        I = null, k = null, _.reset(), e.setRenderTarget(g), f = null, d = null, h = null, r = null, y = null, I1.stop(), i.isPresenting = false, e.setPixelRatio(C), e.setSize(x.width, x.height, false), i.dispatchEvent({
          type: "sessionend"
        });
      }
      this.setFramebufferScaleFactor = function(Z) {
        s = Z, i.isPresenting === true && console.warn("THREE.WebXRManager: Cannot change framebuffer scale while presenting.");
      }, this.setReferenceSpaceType = function(Z) {
        a = Z, i.isPresenting === true && console.warn("THREE.WebXRManager: Cannot change reference space type while presenting.");
      }, this.getReferenceSpace = function() {
        return c || o;
      }, this.setReferenceSpace = function(Z) {
        c = Z;
      }, this.getBaseLayer = function() {
        return d !== null ? d : f;
      }, this.getBinding = function() {
        return h;
      }, this.getFrame = function() {
        return m;
      }, this.getSession = function() {
        return r;
      }, this.setSession = async function(Z) {
        if (r = Z, r !== null) {
          if (g = e.getRenderTarget(), r.addEventListener("select", H), r.addEventListener("selectstart", H), r.addEventListener("selectend", H), r.addEventListener("squeeze", H), r.addEventListener("squeezestart", H), r.addEventListener("squeezeend", H), r.addEventListener("end", K), r.addEventListener("inputsourceschange", J), p.xrCompatible !== true && await t.makeXRCompatible(), C = e.getPixelRatio(), e.getSize(x), typeof XRWebGLBinding < "u" && "createProjectionLayer" in XRWebGLBinding.prototype) {
            let M1 = null, W = null, r1 = null;
            p.depth && (r1 = p.stencil ? t.DEPTH24_STENCIL8 : t.DEPTH_COMPONENT24, M1 = p.stencil ? el : Z0, W = p.stencil ? Q0 : wr);
            const v1 = {
              colorFormat: t.RGBA8,
              depthFormat: r1,
              scaleFactor: s
            };
            h = new XRWebGLBinding(r, t), d = h.createProjectionLayer(v1), r.updateRenderState({
              layers: [
                d
              ]
            }), e.setPixelRatio(1), e.setSize(d.textureWidth, d.textureHeight, false), y = new Cs(d.textureWidth, d.textureHeight, {
              format: f2,
              type: qi,
              depthTexture: new A8(d.textureWidth, d.textureHeight, W, void 0, void 0, void 0, void 0, void 0, void 0, M1),
              stencilBuffer: p.stencil,
              colorSpace: e.outputColorSpace,
              samples: p.antialias ? 4 : 0,
              resolveDepthBuffer: d.ignoreDepthValues === false,
              resolveStencilBuffer: d.ignoreDepthValues === false
            });
          } else {
            const M1 = {
              antialias: p.antialias,
              alpha: true,
              depth: p.depth,
              stencil: p.stencil,
              framebufferScaleFactor: s
            };
            f = new XRWebGLLayer(r, t, M1), r.updateRenderState({
              baseLayer: f
            }), e.setPixelRatio(1), e.setSize(f.framebufferWidth, f.framebufferHeight, false), y = new Cs(f.framebufferWidth, f.framebufferHeight, {
              format: f2,
              type: qi,
              colorSpace: e.outputColorSpace,
              stencilBuffer: p.stencil,
              resolveDepthBuffer: f.ignoreDepthValues === false,
              resolveStencilBuffer: f.ignoreDepthValues === false
            });
          }
          y.isXRRenderTarget = true, this.setFoveation(l), c = null, o = await r.requestReferenceSpace(a), I1.setContext(r), I1.start(), i.isPresenting = true, i.dispatchEvent({
            type: "sessionstart"
          });
        }
      }, this.getEnvironmentBlendMode = function() {
        if (r !== null) return r.environmentBlendMode;
      }, this.getDepthTexture = function() {
        return _.getDepthTexture();
      };
      function J(Z) {
        for (let f1 = 0; f1 < Z.removed.length; f1++) {
          const M1 = Z.removed[f1], W = v.indexOf(M1);
          W >= 0 && (v[W] = null, b[W].disconnect(M1));
        }
        for (let f1 = 0; f1 < Z.added.length; f1++) {
          const M1 = Z.added[f1];
          let W = v.indexOf(M1);
          if (W === -1) {
            for (let v1 = 0; v1 < b.length; v1++) if (v1 >= v.length) {
              v.push(M1), W = v1;
              break;
            } else if (v[v1] === null) {
              v[v1] = M1, W = v1;
              break;
            }
            if (W === -1) break;
          }
          const r1 = b[W];
          r1 && r1.connect(M1);
        }
      }
      const z = new u1(), $ = new u1();
      function G(Z, f1, M1) {
        z.setFromMatrixPosition(f1.matrixWorld), $.setFromMatrixPosition(M1.matrixWorld);
        const W = z.distanceTo($), r1 = f1.projectionMatrix.elements, v1 = M1.projectionMatrix.elements, S1 = r1[14] / (r1[10] - 1), z1 = r1[14] / (r1[10] + 1), Z1 = (r1[9] + 1) / r1[5], F = (r1[9] - 1) / r1[5], T = (r1[8] - 1) / r1[0], e1 = (v1[8] + 1) / v1[0], _1 = S1 * T, B = S1 * e1, l1 = W / (-T + e1), D1 = l1 * -T;
        if (f1.matrixWorld.decompose(Z.position, Z.quaternion, Z.scale), Z.translateX(D1), Z.translateZ(l1), Z.matrixWorld.compose(Z.position, Z.quaternion, Z.scale), Z.matrixWorldInverse.copy(Z.matrixWorld).invert(), r1[10] === -1) Z.projectionMatrix.copy(f1.projectionMatrix), Z.projectionMatrixInverse.copy(f1.projectionMatrixInverse);
        else {
          const p1 = S1 + l1, o1 = z1 + l1, E1 = _1 - D1, N = B + (W - D1), D = Z1 * z1 / o1 * p1, q = F * z1 / o1 * p1;
          Z.projectionMatrix.makePerspective(E1, N, D, q, p1, o1), Z.projectionMatrixInverse.copy(Z.projectionMatrix).invert();
        }
      }
      function Q(Z, f1) {
        f1 === null ? Z.matrixWorld.copy(Z.matrix) : Z.matrixWorld.multiplyMatrices(f1.matrixWorld, Z.matrix), Z.matrixWorldInverse.copy(Z.matrixWorld).invert();
      }
      this.updateCamera = function(Z) {
        if (r === null) return;
        let f1 = Z.near, M1 = Z.far;
        _.texture !== null && (_.depthNear > 0 && (f1 = _.depthNear), _.depthFar > 0 && (M1 = _.depthFar)), E.near = P.near = A.near = f1, E.far = P.far = A.far = M1, (I !== E.near || k !== E.far) && (r.updateRenderState({
          depthNear: E.near,
          depthFar: E.far
        }), I = E.near, k = E.far), A.layers.mask = Z.layers.mask | 2, P.layers.mask = Z.layers.mask | 4, E.layers.mask = A.layers.mask | P.layers.mask;
        const W = Z.parent, r1 = E.cameras;
        Q(E, W);
        for (let v1 = 0; v1 < r1.length; v1++) Q(r1[v1], W);
        r1.length === 2 ? G(E, A, P) : E.projectionMatrix.copy(A.projectionMatrix), V(Z, E, W);
      };
      function V(Z, f1, M1) {
        M1 === null ? Z.matrix.copy(f1.matrixWorld) : (Z.matrix.copy(M1.matrixWorld), Z.matrix.invert(), Z.matrix.multiply(f1.matrixWorld)), Z.matrix.decompose(Z.position, Z.quaternion, Z.scale), Z.updateMatrixWorld(true), Z.projectionMatrix.copy(f1.projectionMatrix), Z.projectionMatrixInverse.copy(f1.projectionMatrixInverse), Z.isPerspectiveCamera && (Z.fov = sa * 2 * Math.atan(1 / Z.projectionMatrix.elements[5]), Z.zoom = 1);
      }
      this.getCamera = function() {
        return E;
      }, this.getFoveation = function() {
        if (!(d === null && f === null)) return l;
      }, this.setFoveation = function(Z) {
        l = Z, d !== null && (d.fixedFoveation = Z), f !== null && f.fixedFoveation !== void 0 && (f.fixedFoveation = Z);
      }, this.hasDepthSensing = function() {
        return _.texture !== null;
      }, this.getDepthSensingMesh = function() {
        return _.getMesh(E);
      };
      let w1 = null;
      function m1(Z, f1) {
        if (u = f1.getViewerPose(c || o), m = f1, u !== null) {
          const M1 = u.views;
          f !== null && (e.setRenderTargetFramebuffer(y, f.framebuffer), e.setRenderTarget(y));
          let W = false;
          M1.length !== E.cameras.length && (E.cameras.length = 0, W = true);
          for (let S1 = 0; S1 < M1.length; S1++) {
            const z1 = M1[S1];
            let Z1 = null;
            if (f !== null) Z1 = f.getViewport(z1);
            else {
              const T = h.getViewSubImage(d, z1);
              Z1 = T.viewport, S1 === 0 && (e.setRenderTargetTextures(y, T.colorTexture, T.depthStencilTexture), e.setRenderTarget(y));
            }
            let F = M[S1];
            F === void 0 && (F = new l2(), F.layers.enable(S1), F.viewport = new Je(), M[S1] = F), F.matrix.fromArray(z1.transform.matrix), F.matrix.decompose(F.position, F.quaternion, F.scale), F.projectionMatrix.fromArray(z1.projectionMatrix), F.projectionMatrixInverse.copy(F.projectionMatrix).invert(), F.viewport.set(Z1.x, Z1.y, Z1.width, Z1.height), S1 === 0 && (E.matrix.copy(F.matrix), E.matrix.decompose(E.position, E.quaternion, E.scale)), W === true && E.cameras.push(F);
          }
          const r1 = r.enabledFeatures;
          if (r1 && r1.includes("depth-sensing") && r.depthUsage == "gpu-optimized" && h) {
            const S1 = h.getDepthInformation(M1[0]);
            S1 && S1.isValid && S1.texture && _.init(e, S1, r.renderState);
          }
        }
        for (let M1 = 0; M1 < b.length; M1++) {
          const W = v[M1], r1 = b[M1];
          W !== null && r1 !== void 0 && r1.update(W, f1, c || o);
        }
        w1 && w1(Z, f1), f1.detectedPlanes && i.dispatchEvent({
          type: "planesdetected",
          data: f1
        }), m = null;
      }
      const I1 = new O8();
      I1.setAnimationLoop(m1), this.setAnimationLoop = function(Z) {
        w1 = Z;
      }, this.dispose = function() {
      };
    }
  }
  const $r = new Yi(), SU = new Ee();
  function EU(n, e) {
    function t(p, g) {
      p.matrixAutoUpdate === true && p.updateMatrix(), g.value.copy(p.matrix);
    }
    function i(p, g) {
      g.color.getRGB(p.fogColor.value, S8(n)), g.isFog ? (p.fogNear.value = g.near, p.fogFar.value = g.far) : g.isFogExp2 && (p.fogDensity.value = g.density);
    }
    function r(p, g, y, b, v) {
      g.isMeshBasicMaterial || g.isMeshLambertMaterial ? s(p, g) : g.isMeshToonMaterial ? (s(p, g), h(p, g)) : g.isMeshPhongMaterial ? (s(p, g), u(p, g)) : g.isMeshStandardMaterial ? (s(p, g), d(p, g), g.isMeshPhysicalMaterial && f(p, g, v)) : g.isMeshMatcapMaterial ? (s(p, g), m(p, g)) : g.isMeshDepthMaterial ? s(p, g) : g.isMeshDistanceMaterial ? (s(p, g), _(p, g)) : g.isMeshNormalMaterial ? s(p, g) : g.isLineBasicMaterial ? (o(p, g), g.isLineDashedMaterial && a(p, g)) : g.isPointsMaterial ? l(p, g, y, b) : g.isSpriteMaterial ? c(p, g) : g.isShadowMaterial ? (p.color.value.copy(g.color), p.opacity.value = g.opacity) : g.isShaderMaterial && (g.uniformsNeedUpdate = false);
    }
    function s(p, g) {
      p.opacity.value = g.opacity, g.color && p.diffuse.value.copy(g.color), g.emissive && p.emissive.value.copy(g.emissive).multiplyScalar(g.emissiveIntensity), g.map && (p.map.value = g.map, t(g.map, p.mapTransform)), g.alphaMap && (p.alphaMap.value = g.alphaMap, t(g.alphaMap, p.alphaMapTransform)), g.bumpMap && (p.bumpMap.value = g.bumpMap, t(g.bumpMap, p.bumpMapTransform), p.bumpScale.value = g.bumpScale, g.side === h2 && (p.bumpScale.value *= -1)), g.normalMap && (p.normalMap.value = g.normalMap, t(g.normalMap, p.normalMapTransform), p.normalScale.value.copy(g.normalScale), g.side === h2 && p.normalScale.value.negate()), g.displacementMap && (p.displacementMap.value = g.displacementMap, t(g.displacementMap, p.displacementMapTransform), p.displacementScale.value = g.displacementScale, p.displacementBias.value = g.displacementBias), g.emissiveMap && (p.emissiveMap.value = g.emissiveMap, t(g.emissiveMap, p.emissiveMapTransform)), g.specularMap && (p.specularMap.value = g.specularMap, t(g.specularMap, p.specularMapTransform)), g.alphaTest > 0 && (p.alphaTest.value = g.alphaTest);
      const y = e.get(g), b = y.envMap, v = y.envMapRotation;
      b && (p.envMap.value = b, $r.copy(v), $r.x *= -1, $r.y *= -1, $r.z *= -1, b.isCubeTexture && b.isRenderTargetTexture === false && ($r.y *= -1, $r.z *= -1), p.envMapRotation.value.setFromMatrix4(SU.makeRotationFromEuler($r)), p.flipEnvMap.value = b.isCubeTexture && b.isRenderTargetTexture === false ? -1 : 1, p.reflectivity.value = g.reflectivity, p.ior.value = g.ior, p.refractionRatio.value = g.refractionRatio), g.lightMap && (p.lightMap.value = g.lightMap, p.lightMapIntensity.value = g.lightMapIntensity, t(g.lightMap, p.lightMapTransform)), g.aoMap && (p.aoMap.value = g.aoMap, p.aoMapIntensity.value = g.aoMapIntensity, t(g.aoMap, p.aoMapTransform));
    }
    function o(p, g) {
      p.diffuse.value.copy(g.color), p.opacity.value = g.opacity, g.map && (p.map.value = g.map, t(g.map, p.mapTransform));
    }
    function a(p, g) {
      p.dashSize.value = g.dashSize, p.totalSize.value = g.dashSize + g.gapSize, p.scale.value = g.scale;
    }
    function l(p, g, y, b) {
      p.diffuse.value.copy(g.color), p.opacity.value = g.opacity, p.size.value = g.size * y, p.scale.value = b * 0.5, g.map && (p.map.value = g.map, t(g.map, p.uvTransform)), g.alphaMap && (p.alphaMap.value = g.alphaMap, t(g.alphaMap, p.alphaMapTransform)), g.alphaTest > 0 && (p.alphaTest.value = g.alphaTest);
    }
    function c(p, g) {
      p.diffuse.value.copy(g.color), p.opacity.value = g.opacity, p.rotation.value = g.rotation, g.map && (p.map.value = g.map, t(g.map, p.mapTransform)), g.alphaMap && (p.alphaMap.value = g.alphaMap, t(g.alphaMap, p.alphaMapTransform)), g.alphaTest > 0 && (p.alphaTest.value = g.alphaTest);
    }
    function u(p, g) {
      p.specular.value.copy(g.specular), p.shininess.value = Math.max(g.shininess, 1e-4);
    }
    function h(p, g) {
      g.gradientMap && (p.gradientMap.value = g.gradientMap);
    }
    function d(p, g) {
      p.metalness.value = g.metalness, g.metalnessMap && (p.metalnessMap.value = g.metalnessMap, t(g.metalnessMap, p.metalnessMapTransform)), p.roughness.value = g.roughness, g.roughnessMap && (p.roughnessMap.value = g.roughnessMap, t(g.roughnessMap, p.roughnessMapTransform)), g.envMap && (p.envMapIntensity.value = g.envMapIntensity);
    }
    function f(p, g, y) {
      p.ior.value = g.ior, g.sheen > 0 && (p.sheenColor.value.copy(g.sheenColor).multiplyScalar(g.sheen), p.sheenRoughness.value = g.sheenRoughness, g.sheenColorMap && (p.sheenColorMap.value = g.sheenColorMap, t(g.sheenColorMap, p.sheenColorMapTransform)), g.sheenRoughnessMap && (p.sheenRoughnessMap.value = g.sheenRoughnessMap, t(g.sheenRoughnessMap, p.sheenRoughnessMapTransform))), g.clearcoat > 0 && (p.clearcoat.value = g.clearcoat, p.clearcoatRoughness.value = g.clearcoatRoughness, g.clearcoatMap && (p.clearcoatMap.value = g.clearcoatMap, t(g.clearcoatMap, p.clearcoatMapTransform)), g.clearcoatRoughnessMap && (p.clearcoatRoughnessMap.value = g.clearcoatRoughnessMap, t(g.clearcoatRoughnessMap, p.clearcoatRoughnessMapTransform)), g.clearcoatNormalMap && (p.clearcoatNormalMap.value = g.clearcoatNormalMap, t(g.clearcoatNormalMap, p.clearcoatNormalMapTransform), p.clearcoatNormalScale.value.copy(g.clearcoatNormalScale), g.side === h2 && p.clearcoatNormalScale.value.negate())), g.dispersion > 0 && (p.dispersion.value = g.dispersion), g.iridescence > 0 && (p.iridescence.value = g.iridescence, p.iridescenceIOR.value = g.iridescenceIOR, p.iridescenceThicknessMinimum.value = g.iridescenceThicknessRange[0], p.iridescenceThicknessMaximum.value = g.iridescenceThicknessRange[1], g.iridescenceMap && (p.iridescenceMap.value = g.iridescenceMap, t(g.iridescenceMap, p.iridescenceMapTransform)), g.iridescenceThicknessMap && (p.iridescenceThicknessMap.value = g.iridescenceThicknessMap, t(g.iridescenceThicknessMap, p.iridescenceThicknessMapTransform))), g.transmission > 0 && (p.transmission.value = g.transmission, p.transmissionSamplerMap.value = y.texture, p.transmissionSamplerSize.value.set(y.width, y.height), g.transmissionMap && (p.transmissionMap.value = g.transmissionMap, t(g.transmissionMap, p.transmissionMapTransform)), p.thickness.value = g.thickness, g.thicknessMap && (p.thicknessMap.value = g.thicknessMap, t(g.thicknessMap, p.thicknessMapTransform)), p.attenuationDistance.value = g.attenuationDistance, p.attenuationColor.value.copy(g.attenuationColor)), g.anisotropy > 0 && (p.anisotropyVector.value.set(g.anisotropy * Math.cos(g.anisotropyRotation), g.anisotropy * Math.sin(g.anisotropyRotation)), g.anisotropyMap && (p.anisotropyMap.value = g.anisotropyMap, t(g.anisotropyMap, p.anisotropyMapTransform))), p.specularIntensity.value = g.specularIntensity, p.specularColor.value.copy(g.specularColor), g.specularColorMap && (p.specularColorMap.value = g.specularColorMap, t(g.specularColorMap, p.specularColorMapTransform)), g.specularIntensityMap && (p.specularIntensityMap.value = g.specularIntensityMap, t(g.specularIntensityMap, p.specularIntensityMapTransform));
    }
    function m(p, g) {
      g.matcap && (p.matcap.value = g.matcap);
    }
    function _(p, g) {
      const y = e.get(g).light;
      p.referencePosition.value.setFromMatrixPosition(y.matrixWorld), p.nearDistance.value = y.shadow.camera.near, p.farDistance.value = y.shadow.camera.far;
    }
    return {
      refreshFogUniforms: i,
      refreshMaterialUniforms: r
    };
  }
  function wU(n, e, t, i) {
    let r = {}, s = {}, o = [];
    const a = n.getParameter(n.MAX_UNIFORM_BUFFER_BINDINGS);
    function l(y, b) {
      const v = b.program;
      i.uniformBlockBinding(y, v);
    }
    function c(y, b) {
      let v = r[y.id];
      v === void 0 && (m(y), v = u(y), r[y.id] = v, y.addEventListener("dispose", p));
      const x = b.program;
      i.updateUBOMapping(y, x);
      const C = e.render.frame;
      s[y.id] !== C && (d(y), s[y.id] = C);
    }
    function u(y) {
      const b = h();
      y.__bindingPointIndex = b;
      const v = n.createBuffer(), x = y.__size, C = y.usage;
      return n.bindBuffer(n.UNIFORM_BUFFER, v), n.bufferData(n.UNIFORM_BUFFER, x, C), n.bindBuffer(n.UNIFORM_BUFFER, null), n.bindBufferBase(n.UNIFORM_BUFFER, b, v), v;
    }
    function h() {
      for (let y = 0; y < a; y++) if (o.indexOf(y) === -1) return o.push(y), y;
      return console.error("THREE.WebGLRenderer: Maximum number of simultaneously usable uniforms groups reached."), 0;
    }
    function d(y) {
      const b = r[y.id], v = y.uniforms, x = y.__cache;
      n.bindBuffer(n.UNIFORM_BUFFER, b);
      for (let C = 0, A = v.length; C < A; C++) {
        const P = Array.isArray(v[C]) ? v[C] : [
          v[C]
        ];
        for (let M = 0, E = P.length; M < E; M++) {
          const I = P[M];
          if (f(I, C, M, x) === true) {
            const k = I.__offset, H = Array.isArray(I.value) ? I.value : [
              I.value
            ];
            let K = 0;
            for (let J = 0; J < H.length; J++) {
              const z = H[J], $ = _(z);
              typeof z == "number" || typeof z == "boolean" ? (I.__data[0] = z, n.bufferSubData(n.UNIFORM_BUFFER, k + K, I.__data)) : z.isMatrix3 ? (I.__data[0] = z.elements[0], I.__data[1] = z.elements[1], I.__data[2] = z.elements[2], I.__data[3] = 0, I.__data[4] = z.elements[3], I.__data[5] = z.elements[4], I.__data[6] = z.elements[5], I.__data[7] = 0, I.__data[8] = z.elements[6], I.__data[9] = z.elements[7], I.__data[10] = z.elements[8], I.__data[11] = 0) : (z.toArray(I.__data, K), K += $.storage / Float32Array.BYTES_PER_ELEMENT);
            }
            n.bufferSubData(n.UNIFORM_BUFFER, k, I.__data);
          }
        }
      }
      n.bindBuffer(n.UNIFORM_BUFFER, null);
    }
    function f(y, b, v, x) {
      const C = y.value, A = b + "_" + v;
      if (x[A] === void 0) return typeof C == "number" || typeof C == "boolean" ? x[A] = C : x[A] = C.clone(), true;
      {
        const P = x[A];
        if (typeof C == "number" || typeof C == "boolean") {
          if (P !== C) return x[A] = C, true;
        } else if (P.equals(C) === false) return P.copy(C), true;
      }
      return false;
    }
    function m(y) {
      const b = y.uniforms;
      let v = 0;
      const x = 16;
      for (let A = 0, P = b.length; A < P; A++) {
        const M = Array.isArray(b[A]) ? b[A] : [
          b[A]
        ];
        for (let E = 0, I = M.length; E < I; E++) {
          const k = M[E], H = Array.isArray(k.value) ? k.value : [
            k.value
          ];
          for (let K = 0, J = H.length; K < J; K++) {
            const z = H[K], $ = _(z), G = v % x, Q = G % $.boundary, V = G + Q;
            v += Q, V !== 0 && x - V < $.storage && (v += x - V), k.__data = new Float32Array($.storage / Float32Array.BYTES_PER_ELEMENT), k.__offset = v, v += $.storage;
          }
        }
      }
      const C = v % x;
      return C > 0 && (v += x - C), y.__size = v, y.__cache = {}, this;
    }
    function _(y) {
      const b = {
        boundary: 0,
        storage: 0
      };
      return typeof y == "number" || typeof y == "boolean" ? (b.boundary = 4, b.storage = 4) : y.isVector2 ? (b.boundary = 8, b.storage = 8) : y.isVector3 || y.isColor ? (b.boundary = 16, b.storage = 12) : y.isVector4 ? (b.boundary = 16, b.storage = 16) : y.isMatrix3 ? (b.boundary = 48, b.storage = 48) : y.isMatrix4 ? (b.boundary = 64, b.storage = 64) : y.isTexture ? console.warn("THREE.WebGLRenderer: Texture samplers can not be part of an uniforms group.") : console.warn("THREE.WebGLRenderer: Unsupported uniform value type.", y), b;
    }
    function p(y) {
      const b = y.target;
      b.removeEventListener("dispose", p);
      const v = o.indexOf(b.__bindingPointIndex);
      o.splice(v, 1), n.deleteBuffer(r[b.id]), delete r[b.id], delete s[b.id];
    }
    function g() {
      for (const y in r) n.deleteBuffer(r[y]);
      o = [], r = {}, s = {};
    }
    return {
      bind: l,
      update: c,
      dispose: g
    };
  }
  YV = class {
    constructor(e = {}) {
      const { canvas: t = _L(), context: i = null, depth: r = true, stencil: s = false, alpha: o = false, antialias: a = false, premultipliedAlpha: l = true, preserveDrawingBuffer: c = false, powerPreference: u = "default", failIfMajorPerformanceCaveat: h = false, reverseDepthBuffer: d = false } = e;
      this.isWebGLRenderer = true;
      let f;
      if (i !== null) {
        if (typeof WebGLRenderingContext < "u" && i instanceof WebGLRenderingContext) throw new Error("THREE.WebGLRenderer: WebGL 1 is not supported since r163.");
        f = i.getContextAttributes().alpha;
      } else f = o;
      const m = new Uint32Array(4), _ = new Int32Array(4);
      let p = null, g = null;
      const y = [], b = [];
      this.domElement = t, this.debug = {
        checkShaderErrors: true,
        onShaderError: null
      }, this.autoClear = true, this.autoClearColor = true, this.autoClearDepth = true, this.autoClearStencil = true, this.sortObjects = true, this.clippingPlanes = [], this.localClippingEnabled = false, this.toneMapping = br, this.toneMappingExposure = 1, this.transmissionResolutionScale = 1;
      const v = this;
      let x = false;
      this._outputColorSpace = Wt;
      let C = 0, A = 0, P = null, M = -1, E = null;
      const I = new Je(), k = new Je();
      let H = null;
      const K = new xe(0);
      let J = 0, z = t.width, $ = t.height, G = 1, Q = null, V = null;
      const w1 = new Je(0, 0, z, $), m1 = new Je(0, 0, z, $);
      let I1 = false;
      const Z = new Dl();
      let f1 = false, M1 = false;
      const W = new Ee(), r1 = new Ee(), v1 = new u1(), S1 = new Je(), z1 = {
        background: null,
        fog: null,
        environment: null,
        overrideMaterial: null,
        isScene: true
      };
      let Z1 = false;
      function F() {
        return P === null ? G : 1;
      }
      let T = i;
      function e1(O, a1) {
        return t.getContext(O, a1);
      }
      try {
        const O = {
          alpha: true,
          depth: r,
          stencil: s,
          antialias: a,
          premultipliedAlpha: l,
          preserveDrawingBuffer: c,
          powerPreference: u,
          failIfMajorPerformanceCaveat: h
        };
        if ("setAttribute" in t && t.setAttribute("data-engine", `three.js r${Np}`), t.addEventListener("webglcontextlost", Y1, false), t.addEventListener("webglcontextrestored", N1, false), t.addEventListener("webglcontextcreationerror", L1, false), T === null) {
          const a1 = "webgl2";
          if (T = e1(a1, O), T === null) throw e1(a1) ? new Error("Error creating WebGL context with your selected attributes.") : new Error("Error creating WebGL context.");
        }
      } catch (O) {
        throw console.error("THREE.WebGLRenderer: " + O.message), O;
      }
      let _1, B, l1, D1, p1, o1, E1, N, D, q, c1, h1, d1, U1, B1, j1, G1, A1, $1, ne, K1, V1, ie, X;
      function X1() {
        _1 = new Ok(T), _1.init(), V1 = new _U(T, _1), B = new Ak(T, _1, e, V1), l1 = new mU(T, _1), B.reverseDepthBuffer && d && l1.buffers.depth.setReversed(true), D1 = new Uk(T), p1 = new nU(), o1 = new gU(T, _1, l1, p1, B, V1, D1), E1 = new Rk(v), N = new Fk(v), D = new WI(T), ie = new Tk(T, D), q = new kk(T, D, D1, ie), c1 = new Hk(T, q, D, D1), $1 = new Bk(T, B, o1), j1 = new Dk(p1), h1 = new tU(v, E1, N, _1, B, ie, j1), d1 = new EU(v, p1), U1 = new rU(), B1 = new uU(_1), A1 = new Mk(v, E1, N, l1, c1, f, l), G1 = new dU(v, c1, B), X = new wU(T, D1, B, l1), ne = new Ck(T, _1, D1), K1 = new Nk(T, _1, D1), D1.programs = h1.programs, v.capabilities = B, v.extensions = _1, v.properties = p1, v.renderLists = U1, v.shadowMap = G1, v.state = l1, v.info = D1;
      }
      X1();
      const P1 = new xU(v, T);
      this.xr = P1, this.getContext = function() {
        return T;
      }, this.getContextAttributes = function() {
        return T.getContextAttributes();
      }, this.forceContextLoss = function() {
        const O = _1.get("WEBGL_lose_context");
        O && O.loseContext();
      }, this.forceContextRestore = function() {
        const O = _1.get("WEBGL_lose_context");
        O && O.restoreContext();
      }, this.getPixelRatio = function() {
        return G;
      }, this.setPixelRatio = function(O) {
        O !== void 0 && (G = O, this.setSize(z, $, false));
      }, this.getSize = function(O) {
        return O.set(z, $);
      }, this.setSize = function(O, a1, y1 = true) {
        if (P1.isPresenting) {
          console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting.");
          return;
        }
        z = O, $ = a1, t.width = Math.floor(O * G), t.height = Math.floor(a1 * G), y1 === true && (t.style.width = O + "px", t.style.height = a1 + "px"), this.setViewport(0, 0, O, a1);
      }, this.getDrawingBufferSize = function(O) {
        return O.set(z * G, $ * G).floor();
      }, this.setDrawingBufferSize = function(O, a1, y1) {
        z = O, $ = a1, G = y1, t.width = Math.floor(O * y1), t.height = Math.floor(a1 * y1), this.setViewport(0, 0, O, a1);
      }, this.getCurrentViewport = function(O) {
        return O.copy(I);
      }, this.getViewport = function(O) {
        return O.copy(w1);
      }, this.setViewport = function(O, a1, y1, g1) {
        O.isVector4 ? w1.set(O.x, O.y, O.z, O.w) : w1.set(O, a1, y1, g1), l1.viewport(I.copy(w1).multiplyScalar(G).round());
      }, this.getScissor = function(O) {
        return O.copy(m1);
      }, this.setScissor = function(O, a1, y1, g1) {
        O.isVector4 ? m1.set(O.x, O.y, O.z, O.w) : m1.set(O, a1, y1, g1), l1.scissor(k.copy(m1).multiplyScalar(G).round());
      }, this.getScissorTest = function() {
        return I1;
      }, this.setScissorTest = function(O) {
        l1.setScissorTest(I1 = O);
      }, this.setOpaqueSort = function(O) {
        Q = O;
      }, this.setTransparentSort = function(O) {
        V = O;
      }, this.getClearColor = function(O) {
        return O.copy(A1.getClearColor());
      }, this.setClearColor = function() {
        A1.setClearColor(...arguments);
      }, this.getClearAlpha = function() {
        return A1.getClearAlpha();
      }, this.setClearAlpha = function() {
        A1.setClearAlpha(...arguments);
      }, this.clear = function(O = true, a1 = true, y1 = true) {
        let g1 = 0;
        if (O) {
          let i1 = false;
          if (P !== null) {
            const H1 = P.texture.format;
            i1 = H1 === Gp || H1 === Vp || H1 === Df;
          }
          if (i1) {
            const H1 = P.texture.type, ee = H1 === qi || H1 === wr || H1 === J0 || H1 === Q0 || H1 === Bp || H1 === Hp, se = A1.getClearColor(), re = A1.getClearAlpha(), he = se.r, me = se.g, ce = se.b;
            ee ? (m[0] = he, m[1] = me, m[2] = ce, m[3] = re, T.clearBufferuiv(T.COLOR, 0, m)) : (_[0] = he, _[1] = me, _[2] = ce, _[3] = re, T.clearBufferiv(T.COLOR, 0, _));
          } else g1 |= T.COLOR_BUFFER_BIT;
        }
        a1 && (g1 |= T.DEPTH_BUFFER_BIT), y1 && (g1 |= T.STENCIL_BUFFER_BIT, this.state.buffers.stencil.setMask(4294967295)), T.clear(g1);
      }, this.clearColor = function() {
        this.clear(true, false, false);
      }, this.clearDepth = function() {
        this.clear(false, true, false);
      }, this.clearStencil = function() {
        this.clear(false, false, true);
      }, this.dispose = function() {
        t.removeEventListener("webglcontextlost", Y1, false), t.removeEventListener("webglcontextrestored", N1, false), t.removeEventListener("webglcontextcreationerror", L1, false), A1.dispose(), U1.dispose(), B1.dispose(), p1.dispose(), E1.dispose(), N.dispose(), c1.dispose(), ie.dispose(), X.dispose(), h1.dispose(), P1.dispose(), P1.removeEventListener("sessionstart", x1), P1.removeEventListener("sessionend", q1), F1.stop();
      };
      function Y1(O) {
        O.preventDefault(), console.log("THREE.WebGLRenderer: Context Lost."), x = true;
      }
      function N1() {
        console.log("THREE.WebGLRenderer: Context Restored."), x = false;
        const O = D1.autoReset, a1 = G1.enabled, y1 = G1.autoUpdate, g1 = G1.needsUpdate, i1 = G1.type;
        X1(), D1.autoReset = O, G1.enabled = a1, G1.autoUpdate = y1, G1.needsUpdate = g1, G1.type = i1;
      }
      function L1(O) {
        console.error("THREE.WebGLRenderer: A WebGL context could not be created. Reason: ", O.statusMessage);
      }
      function R1(O) {
        const a1 = O.target;
        a1.removeEventListener("dispose", R1), j(a1);
      }
      function j(O) {
        T1(O), p1.remove(O);
      }
      function T1(O) {
        const a1 = p1.get(O).programs;
        a1 !== void 0 && (a1.forEach(function(y1) {
          h1.releaseProgram(y1);
        }), O.isShaderMaterial && h1.releaseShaderCache(O));
      }
      this.renderBufferDirect = function(O, a1, y1, g1, i1, H1) {
        a1 === null && (a1 = z1);
        const ee = i1.isMesh && i1.matrixWorld.determinant() < 0, se = Be(O, a1, y1, g1, i1);
        l1.setMaterial(g1, ee);
        let re = y1.index, he = 1;
        if (g1.wireframe === true) {
          if (re = q.getWireframeAttribute(y1), re === void 0) return;
          he = 2;
        }
        const me = y1.drawRange, ce = y1.attributes.position;
        let ye = me.start * he, Ke = (me.start + me.count) * he;
        H1 !== null && (ye = Math.max(ye, H1.start * he), Ke = Math.min(Ke, (H1.start + H1.count) * he)), re !== null ? (ye = Math.max(ye, 0), Ke = Math.min(Ke, re.count)) : ce != null && (ye = Math.max(ye, 0), Ke = Math.min(Ke, ce.count));
        const ft = Ke - ye;
        if (ft < 0 || ft === 1 / 0) return;
        ie.setup(i1, g1, se, y1, re);
        let mt, Ie = ne;
        if (re !== null && (mt = D.get(re), Ie = K1, Ie.setIndex(mt)), i1.isMesh) g1.wireframe === true ? (l1.setLineWidth(g1.wireframeLinewidth * F()), Ie.setMode(T.LINES)) : Ie.setMode(T.TRIANGLES);
        else if (i1.isLine) {
          let ge = g1.linewidth;
          ge === void 0 && (ge = 1), l1.setLineWidth(ge * F()), i1.isLineSegments ? Ie.setMode(T.LINES) : i1.isLineLoop ? Ie.setMode(T.LINE_LOOP) : Ie.setMode(T.LINE_STRIP);
        } else i1.isPoints ? Ie.setMode(T.POINTS) : i1.isSprite && Ie.setMode(T.TRIANGLES);
        if (i1.isBatchedMesh) if (i1._multiDrawInstances !== null) Oo("THREE.WebGLRenderer: renderMultiDrawInstances has been deprecated and will be removed in r184. Append to renderMultiDraw arguments and use indirection."), Ie.renderMultiDrawInstances(i1._multiDrawStarts, i1._multiDrawCounts, i1._multiDrawCount, i1._multiDrawInstances);
        else if (_1.get("WEBGL_multi_draw")) Ie.renderMultiDraw(i1._multiDrawStarts, i1._multiDrawCounts, i1._multiDrawCount);
        else {
          const ge = i1._multiDrawStarts, Ot = i1._multiDrawCounts, $e = i1._multiDrawCount, Nn = re ? D.get(re).bytesPerElement : 1, Qi = p1.get(g1).currentProgram.getUniforms();
          for (let mn = 0; mn < $e; mn++) Qi.setValue(T, "_gl_DrawID", mn), Ie.render(ge[mn] / Nn, Ot[mn]);
        }
        else if (i1.isInstancedMesh) Ie.renderInstances(ye, ft, i1.count);
        else if (y1.isInstancedBufferGeometry) {
          const ge = y1._maxInstanceCount !== void 0 ? y1._maxInstanceCount : 1 / 0, Ot = Math.min(y1.instanceCount, ge);
          Ie.renderInstances(ye, ft, Ot);
        } else Ie.render(ye, ft);
      };
      function t1(O, a1, y1) {
        O.transparent === true && O.side === Oi && O.forceSinglePass === false ? (O.side = h2, O.needsUpdate = true, we(O, a1, y1), O.side = D3, O.needsUpdate = true, we(O, a1, y1), O.side = Oi) : we(O, a1, y1);
      }
      this.compile = function(O, a1, y1 = null) {
        y1 === null && (y1 = O), g = B1.get(y1), g.init(a1), b.push(g), y1.traverseVisible(function(i1) {
          i1.isLight && i1.layers.test(a1.layers) && (g.pushLight(i1), i1.castShadow && g.pushShadow(i1));
        }), O !== y1 && O.traverseVisible(function(i1) {
          i1.isLight && i1.layers.test(a1.layers) && (g.pushLight(i1), i1.castShadow && g.pushShadow(i1));
        }), g.setupLights();
        const g1 = /* @__PURE__ */ new Set();
        return O.traverse(function(i1) {
          if (!(i1.isMesh || i1.isPoints || i1.isLine || i1.isSprite)) return;
          const H1 = i1.material;
          if (H1) if (Array.isArray(H1)) for (let ee = 0; ee < H1.length; ee++) {
            const se = H1[ee];
            t1(se, y1, i1), g1.add(se);
          }
          else t1(H1, y1, i1), g1.add(H1);
        }), g = b.pop(), g1;
      }, this.compileAsync = function(O, a1, y1 = null) {
        const g1 = this.compile(O, a1, y1);
        return new Promise((i1) => {
          function H1() {
            if (g1.forEach(function(ee) {
              p1.get(ee).currentProgram.isReady() && g1.delete(ee);
            }), g1.size === 0) {
              i1(O);
              return;
            }
            setTimeout(H1, 10);
          }
          _1.get("KHR_parallel_shader_compile") !== null ? H1() : setTimeout(H1, 10);
        });
      };
      let b1 = null;
      function O1(O) {
        b1 && b1(O);
      }
      function x1() {
        F1.stop();
      }
      function q1() {
        F1.start();
      }
      const F1 = new O8();
      F1.setAnimationLoop(O1), typeof self < "u" && F1.setContext(self), this.setAnimationLoop = function(O) {
        b1 = O, P1.setAnimationLoop(O), O === null ? F1.stop() : F1.start();
      }, P1.addEventListener("sessionstart", x1), P1.addEventListener("sessionend", q1), this.render = function(O, a1) {
        if (a1 !== void 0 && a1.isCamera !== true) {
          console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");
          return;
        }
        if (x === true) return;
        if (O.matrixWorldAutoUpdate === true && O.updateMatrixWorld(), a1.parent === null && a1.matrixWorldAutoUpdate === true && a1.updateMatrixWorld(), P1.enabled === true && P1.isPresenting === true && (P1.cameraAutoUpdate === true && P1.updateCamera(a1), a1 = P1.getCamera()), O.isScene === true && O.onBeforeRender(v, O, a1, P), g = B1.get(O, b.length), g.init(a1), b.push(g), r1.multiplyMatrices(a1.projectionMatrix, a1.matrixWorldInverse), Z.setFromProjectionMatrix(r1), M1 = this.localClippingEnabled, f1 = j1.init(this.clippingPlanes, M1), p = U1.get(O, y.length), p.init(), y.push(p), P1.enabled === true && P1.isPresenting === true) {
          const H1 = v.xr.getDepthSensingMesh();
          H1 !== null && J1(H1, a1, -1 / 0, v.sortObjects);
        }
        J1(O, a1, 0, v.sortObjects), p.finish(), v.sortObjects === true && p.sort(Q, V), Z1 = P1.enabled === false || P1.isPresenting === false || P1.hasDepthSensing() === false, Z1 && A1.addToRenderList(p, O), this.info.render.frame++, f1 === true && j1.beginShadows();
        const y1 = g.state.shadowsArray;
        G1.render(y1, O, a1), f1 === true && j1.endShadows(), this.info.autoReset === true && this.info.reset();
        const g1 = p.opaque, i1 = p.transmissive;
        if (g.setupLights(), a1.isArrayCamera) {
          const H1 = a1.cameras;
          if (i1.length > 0) for (let ee = 0, se = H1.length; ee < se; ee++) {
            const re = H1[ee];
            C1(g1, i1, O, re);
          }
          Z1 && A1.render(O);
          for (let ee = 0, se = H1.length; ee < se; ee++) {
            const re = H1[ee];
            de(p, O, re, re.viewport);
          }
        } else i1.length > 0 && C1(g1, i1, O, a1), Z1 && A1.render(O), de(p, O, a1);
        P !== null && A === 0 && (o1.updateMultisampleRenderTarget(P), o1.updateRenderTargetMipmap(P)), O.isScene === true && O.onAfterRender(v, O, a1), ie.resetDefaultState(), M = -1, E = null, b.pop(), b.length > 0 ? (g = b[b.length - 1], f1 === true && j1.setGlobalState(v.clippingPlanes, g.state.camera)) : g = null, y.pop(), y.length > 0 ? p = y[y.length - 1] : p = null;
      };
      function J1(O, a1, y1, g1) {
        if (O.visible === false) return;
        if (O.layers.test(a1.layers)) {
          if (O.isGroup) y1 = O.renderOrder;
          else if (O.isLOD) O.autoUpdate === true && O.update(a1);
          else if (O.isLight) g.pushLight(O), O.castShadow && g.pushShadow(O);
          else if (O.isSprite) {
            if (!O.frustumCulled || Z.intersectsSprite(O)) {
              g1 && S1.setFromMatrixPosition(O.matrixWorld).applyMatrix4(r1);
              const ee = c1.update(O), se = O.material;
              se.visible && p.push(O, ee, se, y1, S1.z, null);
            }
          } else if ((O.isMesh || O.isLine || O.isPoints) && (!O.frustumCulled || Z.intersectsObject(O))) {
            const ee = c1.update(O), se = O.material;
            if (g1 && (O.boundingSphere !== void 0 ? (O.boundingSphere === null && O.computeBoundingSphere(), S1.copy(O.boundingSphere.center)) : (ee.boundingSphere === null && ee.computeBoundingSphere(), S1.copy(ee.boundingSphere.center)), S1.applyMatrix4(O.matrixWorld).applyMatrix4(r1)), Array.isArray(se)) {
              const re = ee.groups;
              for (let he = 0, me = re.length; he < me; he++) {
                const ce = re[he], ye = se[ce.materialIndex];
                ye && ye.visible && p.push(O, ee, ye, y1, S1.z, ce);
              }
            } else se.visible && p.push(O, ee, se, y1, S1.z, null);
          }
        }
        const H1 = O.children;
        for (let ee = 0, se = H1.length; ee < se; ee++) J1(H1[ee], a1, y1, g1);
      }
      function de(O, a1, y1, g1) {
        const i1 = O.opaque, H1 = O.transmissive, ee = O.transparent;
        g.setupLightsView(y1), f1 === true && j1.setGlobalState(v.clippingPlanes, y1), g1 && l1.viewport(I.copy(g1)), i1.length > 0 && oe(i1, a1, y1), H1.length > 0 && oe(H1, a1, y1), ee.length > 0 && oe(ee, a1, y1), l1.buffers.depth.setTest(true), l1.buffers.depth.setMask(true), l1.buffers.color.setMask(true), l1.setPolygonOffset(false);
      }
      function C1(O, a1, y1, g1) {
        if ((y1.isScene === true ? y1.overrideMaterial : null) !== null) return;
        g.state.transmissionRenderTarget[g1.id] === void 0 && (g.state.transmissionRenderTarget[g1.id] = new Cs(1, 1, {
          generateMipmaps: true,
          type: _1.has("EXT_color_buffer_half_float") || _1.has("EXT_color_buffer_float") ? Tl : qi,
          minFilter: Hi,
          samples: 4,
          stencilBuffer: s,
          resolveDepthBuffer: false,
          resolveStencilBuffer: false,
          colorSpace: ze.workingColorSpace
        }));
        const H1 = g.state.transmissionRenderTarget[g1.id], ee = g1.viewport || I;
        H1.setSize(ee.z * v.transmissionResolutionScale, ee.w * v.transmissionResolutionScale);
        const se = v.getRenderTarget();
        v.setRenderTarget(H1), v.getClearColor(K), J = v.getClearAlpha(), J < 1 && v.setClearColor(16777215, 0.5), v.clear(), Z1 && A1.render(y1);
        const re = v.toneMapping;
        v.toneMapping = br;
        const he = g1.viewport;
        if (g1.viewport !== void 0 && (g1.viewport = void 0), g.setupLightsView(g1), f1 === true && j1.setGlobalState(v.clippingPlanes, g1), oe(O, y1, g1), o1.updateMultisampleRenderTarget(H1), o1.updateRenderTargetMipmap(H1), _1.has("WEBGL_multisampled_render_to_texture") === false) {
          let me = false;
          for (let ce = 0, ye = a1.length; ce < ye; ce++) {
            const Ke = a1[ce], ft = Ke.object, mt = Ke.geometry, Ie = Ke.material, ge = Ke.group;
            if (Ie.side === Oi && ft.layers.test(g1.layers)) {
              const Ot = Ie.side;
              Ie.side = h2, Ie.needsUpdate = true, Le(ft, y1, g1, mt, Ie, ge), Ie.side = Ot, Ie.needsUpdate = true, me = true;
            }
          }
          me === true && (o1.updateMultisampleRenderTarget(H1), o1.updateRenderTargetMipmap(H1));
        }
        v.setRenderTarget(se), v.setClearColor(K, J), he !== void 0 && (g1.viewport = he), v.toneMapping = re;
      }
      function oe(O, a1, y1) {
        const g1 = a1.isScene === true ? a1.overrideMaterial : null;
        for (let i1 = 0, H1 = O.length; i1 < H1; i1++) {
          const ee = O[i1], se = ee.object, re = ee.geometry, he = ee.group;
          let me = ee.material;
          me.allowOverride === true && g1 !== null && (me = g1), se.layers.test(y1.layers) && Le(se, a1, y1, re, me, he);
        }
      }
      function Le(O, a1, y1, g1, i1, H1) {
        O.onBeforeRender(v, a1, y1, g1, i1, H1), O.modelViewMatrix.multiplyMatrices(y1.matrixWorldInverse, O.matrixWorld), O.normalMatrix.getNormalMatrix(O.modelViewMatrix), i1.onBeforeRender(v, a1, y1, g1, O, H1), i1.transparent === true && i1.side === Oi && i1.forceSinglePass === false ? (i1.side = h2, i1.needsUpdate = true, v.renderBufferDirect(y1, a1, g1, i1, O, H1), i1.side = D3, i1.needsUpdate = true, v.renderBufferDirect(y1, a1, g1, i1, O, H1), i1.side = Oi) : v.renderBufferDirect(y1, a1, g1, i1, O, H1), O.onAfterRender(v, a1, y1, g1, i1, H1);
      }
      function we(O, a1, y1) {
        a1.isScene !== true && (a1 = z1);
        const g1 = p1.get(O), i1 = g.state.lights, H1 = g.state.shadowsArray, ee = i1.state.version, se = h1.getParameters(O, i1.state, H1, a1, y1), re = h1.getProgramCacheKey(se);
        let he = g1.programs;
        g1.environment = O.isMeshStandardMaterial ? a1.environment : null, g1.fog = a1.fog, g1.envMap = (O.isMeshStandardMaterial ? N : E1).get(O.envMap || g1.environment), g1.envMapRotation = g1.environment !== null && O.envMap === null ? a1.environmentRotation : O.envMapRotation, he === void 0 && (O.addEventListener("dispose", R1), he = /* @__PURE__ */ new Map(), g1.programs = he);
        let me = he.get(re);
        if (me !== void 0) {
          if (g1.currentProgram === me && g1.lightsStateVersion === ee) return Se(O, se), me;
        } else se.uniforms = h1.getUniforms(O), O.onBeforeCompile(se, v), me = h1.acquireProgram(se, re), he.set(re, me), g1.uniforms = se.uniforms;
        const ce = g1.uniforms;
        return (!O.isShaderMaterial && !O.isRawShaderMaterial || O.clipping === true) && (ce.clippingPlanes = j1.uniform), Se(O, se), g1.needsLights = xt(O), g1.lightsStateVersion = ee, g1.needsLights && (ce.ambientLightColor.value = i1.state.ambient, ce.lightProbe.value = i1.state.probe, ce.directionalLights.value = i1.state.directional, ce.directionalLightShadows.value = i1.state.directionalShadow, ce.spotLights.value = i1.state.spot, ce.spotLightShadows.value = i1.state.spotShadow, ce.rectAreaLights.value = i1.state.rectArea, ce.ltc_1.value = i1.state.rectAreaLTC1, ce.ltc_2.value = i1.state.rectAreaLTC2, ce.pointLights.value = i1.state.point, ce.pointLightShadows.value = i1.state.pointShadow, ce.hemisphereLights.value = i1.state.hemi, ce.directionalShadowMap.value = i1.state.directionalShadowMap, ce.directionalShadowMatrix.value = i1.state.directionalShadowMatrix, ce.spotShadowMap.value = i1.state.spotShadowMap, ce.spotLightMatrix.value = i1.state.spotLightMatrix, ce.spotLightMap.value = i1.state.spotLightMap, ce.pointShadowMap.value = i1.state.pointShadowMap, ce.pointShadowMatrix.value = i1.state.pointShadowMatrix), g1.currentProgram = me, g1.uniformsList = null, me;
      }
      function Me(O) {
        if (O.uniformsList === null) {
          const a1 = O.currentProgram.getUniforms();
          O.uniformsList = Kc.seqWithValue(a1.seq, O.uniforms);
        }
        return O.uniformsList;
      }
      function Se(O, a1) {
        const y1 = p1.get(O);
        y1.outputColorSpace = a1.outputColorSpace, y1.batching = a1.batching, y1.batchingColor = a1.batchingColor, y1.instancing = a1.instancing, y1.instancingColor = a1.instancingColor, y1.instancingMorph = a1.instancingMorph, y1.skinning = a1.skinning, y1.morphTargets = a1.morphTargets, y1.morphNormals = a1.morphNormals, y1.morphColors = a1.morphColors, y1.morphTargetsCount = a1.morphTargetsCount, y1.numClippingPlanes = a1.numClippingPlanes, y1.numIntersection = a1.numClipIntersection, y1.vertexAlphas = a1.vertexAlphas, y1.vertexTangents = a1.vertexTangents, y1.toneMapping = a1.toneMapping;
      }
      function Be(O, a1, y1, g1, i1) {
        a1.isScene !== true && (a1 = z1), o1.resetTextureUnits();
        const H1 = a1.fog, ee = g1.isMeshStandardMaterial ? a1.environment : null, se = P === null ? v.outputColorSpace : P.isXRRenderTarget === true ? P.texture.colorSpace : kn, re = (g1.isMeshStandardMaterial ? N : E1).get(g1.envMap || ee), he = g1.vertexColors === true && !!y1.attributes.color && y1.attributes.color.itemSize === 4, me = !!y1.attributes.tangent && (!!g1.normalMap || g1.anisotropy > 0), ce = !!y1.morphAttributes.position, ye = !!y1.morphAttributes.normal, Ke = !!y1.morphAttributes.color;
        let ft = br;
        g1.toneMapped && (P === null || P.isXRRenderTarget === true) && (ft = v.toneMapping);
        const mt = y1.morphAttributes.position || y1.morphAttributes.normal || y1.morphAttributes.color, Ie = mt !== void 0 ? mt.length : 0, ge = p1.get(g1), Ot = g.state.lights;
        if (f1 === true && (M1 === true || O !== E)) {
          const kt = O === E && g1.id === M;
          j1.setState(g1, O, kt);
        }
        let $e = false;
        g1.version === ge.__version ? (ge.needsLights && ge.lightsStateVersion !== Ot.state.version || ge.outputColorSpace !== se || i1.isBatchedMesh && ge.batching === false || !i1.isBatchedMesh && ge.batching === true || i1.isBatchedMesh && ge.batchingColor === true && i1.colorTexture === null || i1.isBatchedMesh && ge.batchingColor === false && i1.colorTexture !== null || i1.isInstancedMesh && ge.instancing === false || !i1.isInstancedMesh && ge.instancing === true || i1.isSkinnedMesh && ge.skinning === false || !i1.isSkinnedMesh && ge.skinning === true || i1.isInstancedMesh && ge.instancingColor === true && i1.instanceColor === null || i1.isInstancedMesh && ge.instancingColor === false && i1.instanceColor !== null || i1.isInstancedMesh && ge.instancingMorph === true && i1.morphTexture === null || i1.isInstancedMesh && ge.instancingMorph === false && i1.morphTexture !== null || ge.envMap !== re || g1.fog === true && ge.fog !== H1 || ge.numClippingPlanes !== void 0 && (ge.numClippingPlanes !== j1.numPlanes || ge.numIntersection !== j1.numIntersection) || ge.vertexAlphas !== he || ge.vertexTangents !== me || ge.morphTargets !== ce || ge.morphNormals !== ye || ge.morphColors !== Ke || ge.toneMapping !== ft || ge.morphTargetsCount !== Ie) && ($e = true) : ($e = true, ge.__version = g1.version);
        let Nn = ge.currentProgram;
        $e === true && (Nn = we(g1, a1, i1));
        let Qi = false, mn = false, Fr = false;
        const lt = Nn.getUniforms(), Un = ge.uniforms;
        if (l1.useProgram(Nn.program) && (Qi = true, mn = true, Fr = true), g1.id !== M && (M = g1.id, mn = true), Qi || E !== O) {
          l1.buffers.depth.getReversed() ? (W.copy(O.projectionMatrix), vL(W), yL(W), lt.setValue(T, "projectionMatrix", W)) : lt.setValue(T, "projectionMatrix", O.projectionMatrix), lt.setValue(T, "viewMatrix", O.matrixWorldInverse);
          const yn = lt.map.cameraPosition;
          yn !== void 0 && yn.setValue(T, v1.setFromMatrixPosition(O.matrixWorld)), B.logarithmicDepthBuffer && lt.setValue(T, "logDepthBufFC", 2 / (Math.log(O.far + 1) / Math.LN2)), (g1.isMeshPhongMaterial || g1.isMeshToonMaterial || g1.isMeshLambertMaterial || g1.isMeshBasicMaterial || g1.isMeshStandardMaterial || g1.isShaderMaterial) && lt.setValue(T, "isOrthographic", O.isOrthographicCamera === true), E !== O && (E = O, mn = true, Fr = true);
        }
        if (i1.isSkinnedMesh) {
          lt.setOptional(T, i1, "bindMatrix"), lt.setOptional(T, i1, "bindMatrixInverse");
          const kt = i1.skeleton;
          kt && (kt.boneTexture === null && kt.computeBoneTexture(), lt.setValue(T, "boneTexture", kt.boneTexture, o1));
        }
        i1.isBatchedMesh && (lt.setOptional(T, i1, "batchingTexture"), lt.setValue(T, "batchingTexture", i1._matricesTexture, o1), lt.setOptional(T, i1, "batchingIdTexture"), lt.setValue(T, "batchingIdTexture", i1._indirectTexture, o1), lt.setOptional(T, i1, "batchingColorTexture"), i1._colorsTexture !== null && lt.setValue(T, "batchingColorTexture", i1._colorsTexture, o1));
        const Bn = y1.morphAttributes;
        if ((Bn.position !== void 0 || Bn.normal !== void 0 || Bn.color !== void 0) && $1.update(i1, y1, Nn), (mn || ge.receiveShadow !== i1.receiveShadow) && (ge.receiveShadow = i1.receiveShadow, lt.setValue(T, "receiveShadow", i1.receiveShadow)), g1.isMeshGouraudMaterial && g1.envMap !== null && (Un.envMap.value = re, Un.flipEnvMap.value = re.isCubeTexture && re.isRenderTargetTexture === false ? -1 : 1), g1.isMeshStandardMaterial && g1.envMap === null && a1.environment !== null && (Un.envMapIntensity.value = a1.environmentIntensity), mn && (lt.setValue(T, "toneMappingExposure", v.toneMappingExposure), ge.needsLights && _e(Un, Fr), H1 && g1.fog === true && d1.refreshFogUniforms(Un, H1), d1.refreshMaterialUniforms(Un, g1, G, $, g.state.transmissionRenderTarget[O.id]), Kc.upload(T, Me(ge), Un, o1)), g1.isShaderMaterial && g1.uniformsNeedUpdate === true && (Kc.upload(T, Me(ge), Un, o1), g1.uniformsNeedUpdate = false), g1.isSpriteMaterial && lt.setValue(T, "center", i1.center), lt.setValue(T, "modelViewMatrix", i1.modelViewMatrix), lt.setValue(T, "normalMatrix", i1.normalMatrix), lt.setValue(T, "modelMatrix", i1.matrixWorld), g1.isShaderMaterial || g1.isRawShaderMaterial) {
          const kt = g1.uniformsGroups;
          for (let yn = 0, Lt = kt.length; yn < Lt; yn++) {
            const Ei = kt[yn];
            X.update(Ei, Nn), X.bind(Ei, Nn);
          }
        }
        return Nn;
      }
      function _e(O, a1) {
        O.ambientLightColor.needsUpdate = a1, O.lightProbe.needsUpdate = a1, O.directionalLights.needsUpdate = a1, O.directionalLightShadows.needsUpdate = a1, O.pointLights.needsUpdate = a1, O.pointLightShadows.needsUpdate = a1, O.spotLights.needsUpdate = a1, O.spotLightShadows.needsUpdate = a1, O.rectAreaLights.needsUpdate = a1, O.hemisphereLights.needsUpdate = a1;
      }
      function xt(O) {
        return O.isMeshLambertMaterial || O.isMeshToonMaterial || O.isMeshPhongMaterial || O.isMeshStandardMaterial || O.isShadowMaterial || O.isShaderMaterial && O.lights === true;
      }
      this.getActiveCubeFace = function() {
        return C;
      }, this.getActiveMipmapLevel = function() {
        return A;
      }, this.getRenderTarget = function() {
        return P;
      }, this.setRenderTargetTextures = function(O, a1, y1) {
        const g1 = p1.get(O);
        g1.__autoAllocateDepthBuffer = O.resolveDepthBuffer === false, g1.__autoAllocateDepthBuffer === false && (g1.__useRenderToTexture = false), p1.get(O.texture).__webglTexture = a1, p1.get(O.depthTexture).__webglTexture = g1.__autoAllocateDepthBuffer ? void 0 : y1, g1.__hasExternalTextures = true;
      }, this.setRenderTargetFramebuffer = function(O, a1) {
        const y1 = p1.get(O);
        y1.__webglFramebuffer = a1, y1.__useDefaultFramebuffer = a1 === void 0;
      };
      const it = T.createFramebuffer();
      this.setRenderTarget = function(O, a1 = 0, y1 = 0) {
        P = O, C = a1, A = y1;
        let g1 = true, i1 = null, H1 = false, ee = false;
        if (O) {
          const re = p1.get(O);
          if (re.__useDefaultFramebuffer !== void 0) l1.bindFramebuffer(T.FRAMEBUFFER, null), g1 = false;
          else if (re.__webglFramebuffer === void 0) o1.setupRenderTarget(O);
          else if (re.__hasExternalTextures) o1.rebindTextures(O, p1.get(O.texture).__webglTexture, p1.get(O.depthTexture).__webglTexture);
          else if (O.depthBuffer) {
            const ce = O.depthTexture;
            if (re.__boundDepthTexture !== ce) {
              if (ce !== null && p1.has(ce) && (O.width !== ce.image.width || O.height !== ce.image.height)) throw new Error("WebGLRenderTarget: Attached DepthTexture is initialized to the incorrect size.");
              o1.setupDepthRenderbuffer(O);
            }
          }
          const he = O.texture;
          (he.isData3DTexture || he.isDataArrayTexture || he.isCompressedArrayTexture) && (ee = true);
          const me = p1.get(O).__webglFramebuffer;
          O.isWebGLCubeRenderTarget ? (Array.isArray(me[a1]) ? i1 = me[a1][y1] : i1 = me[a1], H1 = true) : O.samples > 0 && o1.useMultisampledRTT(O) === false ? i1 = p1.get(O).__webglMultisampledFramebuffer : Array.isArray(me) ? i1 = me[y1] : i1 = me, I.copy(O.viewport), k.copy(O.scissor), H = O.scissorTest;
        } else I.copy(w1).multiplyScalar(G).floor(), k.copy(m1).multiplyScalar(G).floor(), H = I1;
        if (y1 !== 0 && (i1 = it), l1.bindFramebuffer(T.FRAMEBUFFER, i1) && g1 && l1.drawBuffers(O, i1), l1.viewport(I), l1.scissor(k), l1.setScissorTest(H), H1) {
          const re = p1.get(O.texture);
          T.framebufferTexture2D(T.FRAMEBUFFER, T.COLOR_ATTACHMENT0, T.TEXTURE_CUBE_MAP_POSITIVE_X + a1, re.__webglTexture, y1);
        } else if (ee) {
          const re = p1.get(O.texture), he = a1;
          T.framebufferTextureLayer(T.FRAMEBUFFER, T.COLOR_ATTACHMENT0, re.__webglTexture, y1, he);
        } else if (O !== null && y1 !== 0) {
          const re = p1.get(O.texture);
          T.framebufferTexture2D(T.FRAMEBUFFER, T.COLOR_ATTACHMENT0, T.TEXTURE_2D, re.__webglTexture, y1);
        }
        M = -1;
      }, this.readRenderTargetPixels = function(O, a1, y1, g1, i1, H1, ee, se = 0) {
        if (!(O && O.isWebGLRenderTarget)) {
          console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");
          return;
        }
        let re = p1.get(O).__webglFramebuffer;
        if (O.isWebGLCubeRenderTarget && ee !== void 0 && (re = re[ee]), re) {
          l1.bindFramebuffer(T.FRAMEBUFFER, re);
          try {
            const he = O.textures[se], me = he.format, ce = he.type;
            if (!B.textureFormatReadable(me)) {
              console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");
              return;
            }
            if (!B.textureTypeReadable(ce)) {
              console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");
              return;
            }
            a1 >= 0 && a1 <= O.width - g1 && y1 >= 0 && y1 <= O.height - i1 && (O.textures.length > 1 && T.readBuffer(T.COLOR_ATTACHMENT0 + se), T.readPixels(a1, y1, g1, i1, V1.convert(me), V1.convert(ce), H1));
          } finally {
            const he = P !== null ? p1.get(P).__webglFramebuffer : null;
            l1.bindFramebuffer(T.FRAMEBUFFER, he);
          }
        }
      }, this.readRenderTargetPixelsAsync = async function(O, a1, y1, g1, i1, H1, ee, se = 0) {
        if (!(O && O.isWebGLRenderTarget)) throw new Error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");
        let re = p1.get(O).__webglFramebuffer;
        if (O.isWebGLCubeRenderTarget && ee !== void 0 && (re = re[ee]), re) if (a1 >= 0 && a1 <= O.width - g1 && y1 >= 0 && y1 <= O.height - i1) {
          l1.bindFramebuffer(T.FRAMEBUFFER, re);
          const he = O.textures[se], me = he.format, ce = he.type;
          if (!B.textureFormatReadable(me)) throw new Error("THREE.WebGLRenderer.readRenderTargetPixelsAsync: renderTarget is not in RGBA or implementation defined format.");
          if (!B.textureTypeReadable(ce)) throw new Error("THREE.WebGLRenderer.readRenderTargetPixelsAsync: renderTarget is not in UnsignedByteType or implementation defined type.");
          const ye = T.createBuffer();
          T.bindBuffer(T.PIXEL_PACK_BUFFER, ye), T.bufferData(T.PIXEL_PACK_BUFFER, H1.byteLength, T.STREAM_READ), O.textures.length > 1 && T.readBuffer(T.COLOR_ATTACHMENT0 + se), T.readPixels(a1, y1, g1, i1, V1.convert(me), V1.convert(ce), 0);
          const Ke = P !== null ? p1.get(P).__webglFramebuffer : null;
          l1.bindFramebuffer(T.FRAMEBUFFER, Ke);
          const ft = T.fenceSync(T.SYNC_GPU_COMMANDS_COMPLETE, 0);
          return T.flush(), await bL(T, ft, 4), T.bindBuffer(T.PIXEL_PACK_BUFFER, ye), T.getBufferSubData(T.PIXEL_PACK_BUFFER, 0, H1), T.deleteBuffer(ye), T.deleteSync(ft), H1;
        } else throw new Error("THREE.WebGLRenderer.readRenderTargetPixelsAsync: requested read bounds are out of range.");
      }, this.copyFramebufferToTexture = function(O, a1 = null, y1 = 0) {
        const g1 = Math.pow(2, -y1), i1 = Math.floor(O.image.width * g1), H1 = Math.floor(O.image.height * g1), ee = a1 !== null ? a1.x : 0, se = a1 !== null ? a1.y : 0;
        o1.setTexture2D(O, 0), T.copyTexSubImage2D(T.TEXTURE_2D, y1, 0, 0, ee, se, i1, H1), l1.unbindTexture();
      };
      const Rt = T.createFramebuffer(), Pt = T.createFramebuffer();
      this.copyTextureToTexture = function(O, a1, y1 = null, g1 = null, i1 = 0, H1 = null) {
        H1 === null && (i1 !== 0 ? (Oo("WebGLRenderer: copyTextureToTexture function signature has changed to support src and dst mipmap levels."), H1 = i1, i1 = 0) : H1 = 0);
        let ee, se, re, he, me, ce, ye, Ke, ft;
        const mt = O.isCompressedTexture ? O.mipmaps[H1] : O.image;
        if (y1 !== null) ee = y1.max.x - y1.min.x, se = y1.max.y - y1.min.y, re = y1.isBox3 ? y1.max.z - y1.min.z : 1, he = y1.min.x, me = y1.min.y, ce = y1.isBox3 ? y1.min.z : 0;
        else {
          const Bn = Math.pow(2, -i1);
          ee = Math.floor(mt.width * Bn), se = Math.floor(mt.height * Bn), O.isDataArrayTexture ? re = mt.depth : O.isData3DTexture ? re = Math.floor(mt.depth * Bn) : re = 1, he = 0, me = 0, ce = 0;
        }
        g1 !== null ? (ye = g1.x, Ke = g1.y, ft = g1.z) : (ye = 0, Ke = 0, ft = 0);
        const Ie = V1.convert(a1.format), ge = V1.convert(a1.type);
        let Ot;
        a1.isData3DTexture ? (o1.setTexture3D(a1, 0), Ot = T.TEXTURE_3D) : a1.isDataArrayTexture || a1.isCompressedArrayTexture ? (o1.setTexture2DArray(a1, 0), Ot = T.TEXTURE_2D_ARRAY) : (o1.setTexture2D(a1, 0), Ot = T.TEXTURE_2D), T.pixelStorei(T.UNPACK_FLIP_Y_WEBGL, a1.flipY), T.pixelStorei(T.UNPACK_PREMULTIPLY_ALPHA_WEBGL, a1.premultiplyAlpha), T.pixelStorei(T.UNPACK_ALIGNMENT, a1.unpackAlignment);
        const $e = T.getParameter(T.UNPACK_ROW_LENGTH), Nn = T.getParameter(T.UNPACK_IMAGE_HEIGHT), Qi = T.getParameter(T.UNPACK_SKIP_PIXELS), mn = T.getParameter(T.UNPACK_SKIP_ROWS), Fr = T.getParameter(T.UNPACK_SKIP_IMAGES);
        T.pixelStorei(T.UNPACK_ROW_LENGTH, mt.width), T.pixelStorei(T.UNPACK_IMAGE_HEIGHT, mt.height), T.pixelStorei(T.UNPACK_SKIP_PIXELS, he), T.pixelStorei(T.UNPACK_SKIP_ROWS, me), T.pixelStorei(T.UNPACK_SKIP_IMAGES, ce);
        const lt = O.isDataArrayTexture || O.isData3DTexture, Un = a1.isDataArrayTexture || a1.isData3DTexture;
        if (O.isDepthTexture) {
          const Bn = p1.get(O), kt = p1.get(a1), yn = p1.get(Bn.__renderTarget), Lt = p1.get(kt.__renderTarget);
          l1.bindFramebuffer(T.READ_FRAMEBUFFER, yn.__webglFramebuffer), l1.bindFramebuffer(T.DRAW_FRAMEBUFFER, Lt.__webglFramebuffer);
          for (let Ei = 0; Ei < re; Ei++) lt && (T.framebufferTextureLayer(T.READ_FRAMEBUFFER, T.COLOR_ATTACHMENT0, p1.get(O).__webglTexture, i1, ce + Ei), T.framebufferTextureLayer(T.DRAW_FRAMEBUFFER, T.COLOR_ATTACHMENT0, p1.get(a1).__webglTexture, H1, ft + Ei)), T.blitFramebuffer(he, me, ee, se, ye, Ke, ee, se, T.DEPTH_BUFFER_BIT, T.NEAREST);
          l1.bindFramebuffer(T.READ_FRAMEBUFFER, null), l1.bindFramebuffer(T.DRAW_FRAMEBUFFER, null);
        } else if (i1 !== 0 || O.isRenderTargetTexture || p1.has(O)) {
          const Bn = p1.get(O), kt = p1.get(a1);
          l1.bindFramebuffer(T.READ_FRAMEBUFFER, Rt), l1.bindFramebuffer(T.DRAW_FRAMEBUFFER, Pt);
          for (let yn = 0; yn < re; yn++) lt ? T.framebufferTextureLayer(T.READ_FRAMEBUFFER, T.COLOR_ATTACHMENT0, Bn.__webglTexture, i1, ce + yn) : T.framebufferTexture2D(T.READ_FRAMEBUFFER, T.COLOR_ATTACHMENT0, T.TEXTURE_2D, Bn.__webglTexture, i1), Un ? T.framebufferTextureLayer(T.DRAW_FRAMEBUFFER, T.COLOR_ATTACHMENT0, kt.__webglTexture, H1, ft + yn) : T.framebufferTexture2D(T.DRAW_FRAMEBUFFER, T.COLOR_ATTACHMENT0, T.TEXTURE_2D, kt.__webglTexture, H1), i1 !== 0 ? T.blitFramebuffer(he, me, ee, se, ye, Ke, ee, se, T.COLOR_BUFFER_BIT, T.NEAREST) : Un ? T.copyTexSubImage3D(Ot, H1, ye, Ke, ft + yn, he, me, ee, se) : T.copyTexSubImage2D(Ot, H1, ye, Ke, he, me, ee, se);
          l1.bindFramebuffer(T.READ_FRAMEBUFFER, null), l1.bindFramebuffer(T.DRAW_FRAMEBUFFER, null);
        } else Un ? O.isDataTexture || O.isData3DTexture ? T.texSubImage3D(Ot, H1, ye, Ke, ft, ee, se, re, Ie, ge, mt.data) : a1.isCompressedArrayTexture ? T.compressedTexSubImage3D(Ot, H1, ye, Ke, ft, ee, se, re, Ie, mt.data) : T.texSubImage3D(Ot, H1, ye, Ke, ft, ee, se, re, Ie, ge, mt) : O.isDataTexture ? T.texSubImage2D(T.TEXTURE_2D, H1, ye, Ke, ee, se, Ie, ge, mt.data) : O.isCompressedTexture ? T.compressedTexSubImage2D(T.TEXTURE_2D, H1, ye, Ke, mt.width, mt.height, Ie, mt.data) : T.texSubImage2D(T.TEXTURE_2D, H1, ye, Ke, ee, se, Ie, ge, mt);
        T.pixelStorei(T.UNPACK_ROW_LENGTH, $e), T.pixelStorei(T.UNPACK_IMAGE_HEIGHT, Nn), T.pixelStorei(T.UNPACK_SKIP_PIXELS, Qi), T.pixelStorei(T.UNPACK_SKIP_ROWS, mn), T.pixelStorei(T.UNPACK_SKIP_IMAGES, Fr), H1 === 0 && a1.generateMipmaps && T.generateMipmap(Ot), l1.unbindTexture();
      }, this.copyTextureToTexture3D = function(O, a1, y1 = null, g1 = null, i1 = 0) {
        return Oo('WebGLRenderer: copyTextureToTexture3D function has been deprecated. Use "copyTextureToTexture" instead.'), this.copyTextureToTexture(O, a1, y1, g1, i1);
      }, this.initRenderTarget = function(O) {
        p1.get(O).__webglFramebuffer === void 0 && o1.setupRenderTarget(O);
      }, this.initTexture = function(O) {
        O.isCubeTexture ? o1.setTextureCube(O, 0) : O.isData3DTexture ? o1.setTexture3D(O, 0) : O.isDataArrayTexture || O.isCompressedArrayTexture ? o1.setTexture2DArray(O, 0) : o1.setTexture2D(O, 0), l1.unbindTexture();
      }, this.resetState = function() {
        C = 0, A = 0, P = null, l1.reset(), ie.reset();
      }, typeof __THREE_DEVTOOLS__ < "u" && __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe", {
        detail: this
      }));
    }
    get coordinateSystem() {
      return zi;
    }
    get outputColorSpace() {
      return this._outputColorSpace;
    }
    set outputColorSpace(e) {
      this._outputColorSpace = e;
      const t = this.getContext();
      t.drawingBufferColorSpace = ze._getDrawingBufferColorSpace(e), t.unpackColorSpace = ze._getUnpackColorSpace();
    }
  };
  class MU {
    constructor(e) {
      __privateAdd(this, _MU_instances);
      this.loader = new F8(e);
    }
    async load(e) {
      if (Array.isArray(e)) {
        const t = e.map((i) => __privateMethod(this, _MU_instances, e_fn).call(this, i));
        return await Promise.all(t);
      } else return await __privateMethod(this, _MU_instances, e_fn).call(this, e);
    }
  }
  _MU_instances = new WeakSet();
  e_fn = function(e) {
    return new Promise((t) => {
      this.loader.load(e, (i) => {
        t(i);
      });
    });
  };
  function qg(n, e) {
    if (e === GP) return console.warn("THREE.BufferGeometryUtils.toTrianglesDrawMode(): Geometry already defined as triangles."), n;
    if (e === s9 || e === m8) {
      let t = n.getIndex();
      if (t === null) {
        const o = [], a = n.getAttribute("position");
        if (a !== void 0) {
          for (let l = 0; l < a.count; l++) o.push(l);
          n.setIndex(o), t = n.getIndex();
        } else return console.error("THREE.BufferGeometryUtils.toTrianglesDrawMode(): Undefined position attribute. Processing not possible."), n;
      }
      const i = t.count - 2, r = [];
      if (e === s9) for (let o = 1; o <= i; o++) r.push(t.getX(0)), r.push(t.getX(o)), r.push(t.getX(o + 1));
      else for (let o = 0; o < i; o++) o % 2 === 0 ? (r.push(t.getX(o)), r.push(t.getX(o + 1)), r.push(t.getX(o + 2))) : (r.push(t.getX(o + 2)), r.push(t.getX(o + 1)), r.push(t.getX(o)));
      r.length / 3 !== i && console.error("THREE.BufferGeometryUtils.toTrianglesDrawMode(): Unable to generate correct amount of triangles.");
      const s = n.clone();
      return s.setIndex(r), s.clearGroups(), s;
    } else return console.error("THREE.BufferGeometryUtils.toTrianglesDrawMode(): Unknown draw mode:", e), n;
  }
  let TU = class extends Lr {
    constructor(e) {
      super(e), this.dracoLoader = null, this.ktx2Loader = null, this.meshoptDecoder = null, this.pluginCallbacks = [], this.register(function(t) {
        return new PU(t);
      }), this.register(function(t) {
        return new LU(t);
      }), this.register(function(t) {
        return new zU(t);
      }), this.register(function(t) {
        return new VU(t);
      }), this.register(function(t) {
        return new GU(t);
      }), this.register(function(t) {
        return new FU(t);
      }), this.register(function(t) {
        return new OU(t);
      }), this.register(function(t) {
        return new kU(t);
      }), this.register(function(t) {
        return new NU(t);
      }), this.register(function(t) {
        return new RU(t);
      }), this.register(function(t) {
        return new UU(t);
      }), this.register(function(t) {
        return new IU(t);
      }), this.register(function(t) {
        return new HU(t);
      }), this.register(function(t) {
        return new BU(t);
      }), this.register(function(t) {
        return new AU(t);
      }), this.register(function(t) {
        return new WU(t);
      }), this.register(function(t) {
        return new jU(t);
      });
    }
    load(e, t, i, r) {
      const s = this;
      let o;
      if (this.resourcePath !== "") o = this.resourcePath;
      else if (this.path !== "") {
        const c = S0.extractUrlBase(e);
        o = S0.resolveURL(c, this.path);
      } else o = S0.extractUrlBase(e);
      this.manager.itemStart(e);
      const a = function(c) {
        r ? r(c) : console.error(c), s.manager.itemError(e), s.manager.itemEnd(e);
      }, l = new rl(this.manager);
      l.setPath(this.path), l.setResponseType("arraybuffer"), l.setRequestHeader(this.requestHeader), l.setWithCredentials(this.withCredentials), l.load(e, function(c) {
        try {
          s.parse(c, o, function(u) {
            t(u), s.manager.itemEnd(e);
          }, a);
        } catch (u) {
          a(u);
        }
      }, i, a);
    }
    setDRACOLoader(e) {
      return this.dracoLoader = e, this;
    }
    setKTX2Loader(e) {
      return this.ktx2Loader = e, this;
    }
    setMeshoptDecoder(e) {
      return this.meshoptDecoder = e, this;
    }
    register(e) {
      return this.pluginCallbacks.indexOf(e) === -1 && this.pluginCallbacks.push(e), this;
    }
    unregister(e) {
      return this.pluginCallbacks.indexOf(e) !== -1 && this.pluginCallbacks.splice(this.pluginCallbacks.indexOf(e), 1), this;
    }
    parse(e, t, i, r) {
      let s;
      const o = {}, a = {}, l = new TextDecoder();
      if (typeof e == "string") s = JSON.parse(e);
      else if (e instanceof ArrayBuffer) if (l.decode(new Uint8Array(e, 0, 4)) === H8) {
        try {
          o[Ne.KHR_BINARY_GLTF] = new XU(e);
        } catch (h) {
          r && r(h);
          return;
        }
        s = JSON.parse(o[Ne.KHR_BINARY_GLTF].content);
      } else s = JSON.parse(l.decode(e));
      else s = e;
      if (s.asset === void 0 || s.asset.version[0] < 2) {
        r && r(new Error("THREE.GLTFLoader: Unsupported asset. glTF versions >=2.0 are supported."));
        return;
      }
      const c = new sB(s, {
        path: t || this.resourcePath || "",
        crossOrigin: this.crossOrigin,
        requestHeader: this.requestHeader,
        manager: this.manager,
        ktx2Loader: this.ktx2Loader,
        meshoptDecoder: this.meshoptDecoder
      });
      c.fileLoader.setRequestHeader(this.requestHeader);
      for (let u = 0; u < this.pluginCallbacks.length; u++) {
        const h = this.pluginCallbacks[u](c);
        h.name || console.error("THREE.GLTFLoader: Invalid plugin found: missing name"), a[h.name] = h, o[h.name] = true;
      }
      if (s.extensionsUsed) for (let u = 0; u < s.extensionsUsed.length; ++u) {
        const h = s.extensionsUsed[u], d = s.extensionsRequired || [];
        switch (h) {
          case Ne.KHR_MATERIALS_UNLIT:
            o[h] = new DU();
            break;
          case Ne.KHR_DRACO_MESH_COMPRESSION:
            o[h] = new $U(s, this.dracoLoader);
            break;
          case Ne.KHR_TEXTURE_TRANSFORM:
            o[h] = new qU();
            break;
          case Ne.KHR_MESH_QUANTIZATION:
            o[h] = new YU();
            break;
          default:
            d.indexOf(h) >= 0 && a[h] === void 0 && console.warn('THREE.GLTFLoader: Unknown extension "' + h + '".');
        }
      }
      c.setExtensions(o), c.setPlugins(a), c.parse(i, r);
    }
    parseAsync(e, t) {
      const i = this;
      return new Promise(function(r, s) {
        i.parse(e, t, r, s);
      });
    }
  };
  function CU() {
    let n = {};
    return {
      get: function(e) {
        return n[e];
      },
      add: function(e, t) {
        n[e] = t;
      },
      remove: function(e) {
        delete n[e];
      },
      removeAll: function() {
        n = {};
      }
    };
  }
  const Ne = {
    KHR_BINARY_GLTF: "KHR_binary_glTF",
    KHR_DRACO_MESH_COMPRESSION: "KHR_draco_mesh_compression",
    KHR_LIGHTS_PUNCTUAL: "KHR_lights_punctual",
    KHR_MATERIALS_CLEARCOAT: "KHR_materials_clearcoat",
    KHR_MATERIALS_DISPERSION: "KHR_materials_dispersion",
    KHR_MATERIALS_IOR: "KHR_materials_ior",
    KHR_MATERIALS_SHEEN: "KHR_materials_sheen",
    KHR_MATERIALS_SPECULAR: "KHR_materials_specular",
    KHR_MATERIALS_TRANSMISSION: "KHR_materials_transmission",
    KHR_MATERIALS_IRIDESCENCE: "KHR_materials_iridescence",
    KHR_MATERIALS_ANISOTROPY: "KHR_materials_anisotropy",
    KHR_MATERIALS_UNLIT: "KHR_materials_unlit",
    KHR_MATERIALS_VOLUME: "KHR_materials_volume",
    KHR_TEXTURE_BASISU: "KHR_texture_basisu",
    KHR_TEXTURE_TRANSFORM: "KHR_texture_transform",
    KHR_MESH_QUANTIZATION: "KHR_mesh_quantization",
    KHR_MATERIALS_EMISSIVE_STRENGTH: "KHR_materials_emissive_strength",
    EXT_MATERIALS_BUMP: "EXT_materials_bump",
    EXT_TEXTURE_WEBP: "EXT_texture_webp",
    EXT_TEXTURE_AVIF: "EXT_texture_avif",
    EXT_MESHOPT_COMPRESSION: "EXT_meshopt_compression",
    EXT_MESH_GPU_INSTANCING: "EXT_mesh_gpu_instancing"
  };
  class AU {
    constructor(e) {
      this.parser = e, this.name = Ne.KHR_LIGHTS_PUNCTUAL, this.cache = {
        refs: {},
        uses: {}
      };
    }
    _markDefs() {
      const e = this.parser, t = this.parser.json.nodes || [];
      for (let i = 0, r = t.length; i < r; i++) {
        const s = t[i];
        s.extensions && s.extensions[this.name] && s.extensions[this.name].light !== void 0 && e._addNodeRef(this.cache, s.extensions[this.name].light);
      }
    }
    _loadLight(e) {
      const t = this.parser, i = "light:" + e;
      let r = t.cache.get(i);
      if (r) return r;
      const s = t.json, l = ((s.extensions && s.extensions[this.name] || {}).lights || [])[e];
      let c;
      const u = new xe(16777215);
      l.color !== void 0 && u.setRGB(l.color[0], l.color[1], l.color[2], kn);
      const h = l.range !== void 0 ? l.range : 0;
      switch (l.type) {
        case "directional":
          c = new PI(u), c.target.position.set(0, 0, -1), c.add(c.target);
          break;
        case "point":
          c = new DI(u), c.distance = h;
          break;
        case "spot":
          c = new CI(u), c.distance = h, l.spot = l.spot || {}, l.spot.innerConeAngle = l.spot.innerConeAngle !== void 0 ? l.spot.innerConeAngle : 0, l.spot.outerConeAngle = l.spot.outerConeAngle !== void 0 ? l.spot.outerConeAngle : Math.PI / 4, c.angle = l.spot.outerConeAngle, c.penumbra = 1 - l.spot.innerConeAngle / l.spot.outerConeAngle, c.target.position.set(0, 0, -1), c.add(c.target);
          break;
        default:
          throw new Error("THREE.GLTFLoader: Unexpected light type: " + l.type);
      }
      return c.position.set(0, 0, 0), h3(c, l), l.intensity !== void 0 && (c.intensity = l.intensity), c.name = t.createUniqueName(l.name || "light_" + e), r = Promise.resolve(c), t.cache.add(i, r), r;
    }
    getDependency(e, t) {
      if (e === "light") return this._loadLight(t);
    }
    createNodeAttachment(e) {
      const t = this, i = this.parser, s = i.json.nodes[e], a = (s.extensions && s.extensions[this.name] || {}).light;
      return a === void 0 ? null : this._loadLight(a).then(function(l) {
        return i._getNodeRef(t.cache, a, l);
      });
    }
  }
  class DU {
    constructor() {
      this.name = Ne.KHR_MATERIALS_UNLIT;
    }
    getMaterialType() {
      return ls;
    }
    extendParams(e, t, i) {
      const r = [];
      e.color = new xe(1, 1, 1), e.opacity = 1;
      const s = t.pbrMetallicRoughness;
      if (s) {
        if (Array.isArray(s.baseColorFactor)) {
          const o = s.baseColorFactor;
          e.color.setRGB(o[0], o[1], o[2], kn), e.opacity = o[3];
        }
        s.baseColorTexture !== void 0 && r.push(i.assignTexture(e, "map", s.baseColorTexture, Wt));
      }
      return Promise.all(r);
    }
  }
  class RU {
    constructor(e) {
      this.parser = e, this.name = Ne.KHR_MATERIALS_EMISSIVE_STRENGTH;
    }
    extendMaterialParams(e, t) {
      const r = this.parser.json.materials[e];
      if (!r.extensions || !r.extensions[this.name]) return Promise.resolve();
      const s = r.extensions[this.name].emissiveStrength;
      return s !== void 0 && (t.emissiveIntensity = s), Promise.resolve();
    }
  }
  class PU {
    constructor(e) {
      this.parser = e, this.name = Ne.KHR_MATERIALS_CLEARCOAT;
    }
    getMaterialType(e) {
      const i = this.parser.json.materials[e];
      return !i.extensions || !i.extensions[this.name] ? null : Ji;
    }
    extendMaterialParams(e, t) {
      const i = this.parser, r = i.json.materials[e];
      if (!r.extensions || !r.extensions[this.name]) return Promise.resolve();
      const s = [], o = r.extensions[this.name];
      if (o.clearcoatFactor !== void 0 && (t.clearcoat = o.clearcoatFactor), o.clearcoatTexture !== void 0 && s.push(i.assignTexture(t, "clearcoatMap", o.clearcoatTexture)), o.clearcoatRoughnessFactor !== void 0 && (t.clearcoatRoughness = o.clearcoatRoughnessFactor), o.clearcoatRoughnessTexture !== void 0 && s.push(i.assignTexture(t, "clearcoatRoughnessMap", o.clearcoatRoughnessTexture)), o.clearcoatNormalTexture !== void 0 && (s.push(i.assignTexture(t, "clearcoatNormalMap", o.clearcoatNormalTexture)), o.clearcoatNormalTexture.scale !== void 0)) {
        const a = o.clearcoatNormalTexture.scale;
        t.clearcoatNormalScale = new Ue(a, a);
      }
      return Promise.all(s);
    }
  }
  class LU {
    constructor(e) {
      this.parser = e, this.name = Ne.KHR_MATERIALS_DISPERSION;
    }
    getMaterialType(e) {
      const i = this.parser.json.materials[e];
      return !i.extensions || !i.extensions[this.name] ? null : Ji;
    }
    extendMaterialParams(e, t) {
      const r = this.parser.json.materials[e];
      if (!r.extensions || !r.extensions[this.name]) return Promise.resolve();
      const s = r.extensions[this.name];
      return t.dispersion = s.dispersion !== void 0 ? s.dispersion : 0, Promise.resolve();
    }
  }
  class IU {
    constructor(e) {
      this.parser = e, this.name = Ne.KHR_MATERIALS_IRIDESCENCE;
    }
    getMaterialType(e) {
      const i = this.parser.json.materials[e];
      return !i.extensions || !i.extensions[this.name] ? null : Ji;
    }
    extendMaterialParams(e, t) {
      const i = this.parser, r = i.json.materials[e];
      if (!r.extensions || !r.extensions[this.name]) return Promise.resolve();
      const s = [], o = r.extensions[this.name];
      return o.iridescenceFactor !== void 0 && (t.iridescence = o.iridescenceFactor), o.iridescenceTexture !== void 0 && s.push(i.assignTexture(t, "iridescenceMap", o.iridescenceTexture)), o.iridescenceIor !== void 0 && (t.iridescenceIOR = o.iridescenceIor), t.iridescenceThicknessRange === void 0 && (t.iridescenceThicknessRange = [
        100,
        400
      ]), o.iridescenceThicknessMinimum !== void 0 && (t.iridescenceThicknessRange[0] = o.iridescenceThicknessMinimum), o.iridescenceThicknessMaximum !== void 0 && (t.iridescenceThicknessRange[1] = o.iridescenceThicknessMaximum), o.iridescenceThicknessTexture !== void 0 && s.push(i.assignTexture(t, "iridescenceThicknessMap", o.iridescenceThicknessTexture)), Promise.all(s);
    }
  }
  class FU {
    constructor(e) {
      this.parser = e, this.name = Ne.KHR_MATERIALS_SHEEN;
    }
    getMaterialType(e) {
      const i = this.parser.json.materials[e];
      return !i.extensions || !i.extensions[this.name] ? null : Ji;
    }
    extendMaterialParams(e, t) {
      const i = this.parser, r = i.json.materials[e];
      if (!r.extensions || !r.extensions[this.name]) return Promise.resolve();
      const s = [];
      t.sheenColor = new xe(0, 0, 0), t.sheenRoughness = 0, t.sheen = 1;
      const o = r.extensions[this.name];
      if (o.sheenColorFactor !== void 0) {
        const a = o.sheenColorFactor;
        t.sheenColor.setRGB(a[0], a[1], a[2], kn);
      }
      return o.sheenRoughnessFactor !== void 0 && (t.sheenRoughness = o.sheenRoughnessFactor), o.sheenColorTexture !== void 0 && s.push(i.assignTexture(t, "sheenColorMap", o.sheenColorTexture, Wt)), o.sheenRoughnessTexture !== void 0 && s.push(i.assignTexture(t, "sheenRoughnessMap", o.sheenRoughnessTexture)), Promise.all(s);
    }
  }
  class OU {
    constructor(e) {
      this.parser = e, this.name = Ne.KHR_MATERIALS_TRANSMISSION;
    }
    getMaterialType(e) {
      const i = this.parser.json.materials[e];
      return !i.extensions || !i.extensions[this.name] ? null : Ji;
    }
    extendMaterialParams(e, t) {
      const i = this.parser, r = i.json.materials[e];
      if (!r.extensions || !r.extensions[this.name]) return Promise.resolve();
      const s = [], o = r.extensions[this.name];
      return o.transmissionFactor !== void 0 && (t.transmission = o.transmissionFactor), o.transmissionTexture !== void 0 && s.push(i.assignTexture(t, "transmissionMap", o.transmissionTexture)), Promise.all(s);
    }
  }
  class kU {
    constructor(e) {
      this.parser = e, this.name = Ne.KHR_MATERIALS_VOLUME;
    }
    getMaterialType(e) {
      const i = this.parser.json.materials[e];
      return !i.extensions || !i.extensions[this.name] ? null : Ji;
    }
    extendMaterialParams(e, t) {
      const i = this.parser, r = i.json.materials[e];
      if (!r.extensions || !r.extensions[this.name]) return Promise.resolve();
      const s = [], o = r.extensions[this.name];
      t.thickness = o.thicknessFactor !== void 0 ? o.thicknessFactor : 0, o.thicknessTexture !== void 0 && s.push(i.assignTexture(t, "thicknessMap", o.thicknessTexture)), t.attenuationDistance = o.attenuationDistance || 1 / 0;
      const a = o.attenuationColor || [
        1,
        1,
        1
      ];
      return t.attenuationColor = new xe().setRGB(a[0], a[1], a[2], kn), Promise.all(s);
    }
  }
  class NU {
    constructor(e) {
      this.parser = e, this.name = Ne.KHR_MATERIALS_IOR;
    }
    getMaterialType(e) {
      const i = this.parser.json.materials[e];
      return !i.extensions || !i.extensions[this.name] ? null : Ji;
    }
    extendMaterialParams(e, t) {
      const r = this.parser.json.materials[e];
      if (!r.extensions || !r.extensions[this.name]) return Promise.resolve();
      const s = r.extensions[this.name];
      return t.ior = s.ior !== void 0 ? s.ior : 1.5, Promise.resolve();
    }
  }
  class UU {
    constructor(e) {
      this.parser = e, this.name = Ne.KHR_MATERIALS_SPECULAR;
    }
    getMaterialType(e) {
      const i = this.parser.json.materials[e];
      return !i.extensions || !i.extensions[this.name] ? null : Ji;
    }
    extendMaterialParams(e, t) {
      const i = this.parser, r = i.json.materials[e];
      if (!r.extensions || !r.extensions[this.name]) return Promise.resolve();
      const s = [], o = r.extensions[this.name];
      t.specularIntensity = o.specularFactor !== void 0 ? o.specularFactor : 1, o.specularTexture !== void 0 && s.push(i.assignTexture(t, "specularIntensityMap", o.specularTexture));
      const a = o.specularColorFactor || [
        1,
        1,
        1
      ];
      return t.specularColor = new xe().setRGB(a[0], a[1], a[2], kn), o.specularColorTexture !== void 0 && s.push(i.assignTexture(t, "specularColorMap", o.specularColorTexture, Wt)), Promise.all(s);
    }
  }
  class BU {
    constructor(e) {
      this.parser = e, this.name = Ne.EXT_MATERIALS_BUMP;
    }
    getMaterialType(e) {
      const i = this.parser.json.materials[e];
      return !i.extensions || !i.extensions[this.name] ? null : Ji;
    }
    extendMaterialParams(e, t) {
      const i = this.parser, r = i.json.materials[e];
      if (!r.extensions || !r.extensions[this.name]) return Promise.resolve();
      const s = [], o = r.extensions[this.name];
      return t.bumpScale = o.bumpFactor !== void 0 ? o.bumpFactor : 1, o.bumpTexture !== void 0 && s.push(i.assignTexture(t, "bumpMap", o.bumpTexture)), Promise.all(s);
    }
  }
  class HU {
    constructor(e) {
      this.parser = e, this.name = Ne.KHR_MATERIALS_ANISOTROPY;
    }
    getMaterialType(e) {
      const i = this.parser.json.materials[e];
      return !i.extensions || !i.extensions[this.name] ? null : Ji;
    }
    extendMaterialParams(e, t) {
      const i = this.parser, r = i.json.materials[e];
      if (!r.extensions || !r.extensions[this.name]) return Promise.resolve();
      const s = [], o = r.extensions[this.name];
      return o.anisotropyStrength !== void 0 && (t.anisotropy = o.anisotropyStrength), o.anisotropyRotation !== void 0 && (t.anisotropyRotation = o.anisotropyRotation), o.anisotropyTexture !== void 0 && s.push(i.assignTexture(t, "anisotropyMap", o.anisotropyTexture)), Promise.all(s);
    }
  }
  class zU {
    constructor(e) {
      this.parser = e, this.name = Ne.KHR_TEXTURE_BASISU;
    }
    loadTexture(e) {
      const t = this.parser, i = t.json, r = i.textures[e];
      if (!r.extensions || !r.extensions[this.name]) return null;
      const s = r.extensions[this.name], o = t.options.ktx2Loader;
      if (!o) {
        if (i.extensionsRequired && i.extensionsRequired.indexOf(this.name) >= 0) throw new Error("THREE.GLTFLoader: setKTX2Loader must be called before loading KTX2 textures");
        return null;
      }
      return t.loadTextureImage(e, s.source, o);
    }
  }
  class VU {
    constructor(e) {
      this.parser = e, this.name = Ne.EXT_TEXTURE_WEBP;
    }
    loadTexture(e) {
      const t = this.name, i = this.parser, r = i.json, s = r.textures[e];
      if (!s.extensions || !s.extensions[t]) return null;
      const o = s.extensions[t], a = r.images[o.source];
      let l = i.textureLoader;
      if (a.uri) {
        const c = i.options.manager.getHandler(a.uri);
        c !== null && (l = c);
      }
      return i.loadTextureImage(e, o.source, l);
    }
  }
  class GU {
    constructor(e) {
      this.parser = e, this.name = Ne.EXT_TEXTURE_AVIF;
    }
    loadTexture(e) {
      const t = this.name, i = this.parser, r = i.json, s = r.textures[e];
      if (!s.extensions || !s.extensions[t]) return null;
      const o = s.extensions[t], a = r.images[o.source];
      let l = i.textureLoader;
      if (a.uri) {
        const c = i.options.manager.getHandler(a.uri);
        c !== null && (l = c);
      }
      return i.loadTextureImage(e, o.source, l);
    }
  }
  class WU {
    constructor(e) {
      this.name = Ne.EXT_MESHOPT_COMPRESSION, this.parser = e;
    }
    loadBufferView(e) {
      const t = this.parser.json, i = t.bufferViews[e];
      if (i.extensions && i.extensions[this.name]) {
        const r = i.extensions[this.name], s = this.parser.getDependency("buffer", r.buffer), o = this.parser.options.meshoptDecoder;
        if (!o || !o.supported) {
          if (t.extensionsRequired && t.extensionsRequired.indexOf(this.name) >= 0) throw new Error("THREE.GLTFLoader: setMeshoptDecoder must be called before loading compressed files");
          return null;
        }
        return s.then(function(a) {
          const l = r.byteOffset || 0, c = r.byteLength || 0, u = r.count, h = r.byteStride, d = new Uint8Array(a, l, c);
          return o.decodeGltfBufferAsync ? o.decodeGltfBufferAsync(u, h, d, r.mode, r.filter).then(function(f) {
            return f.buffer;
          }) : o.ready.then(function() {
            const f = new ArrayBuffer(u * h);
            return o.decodeGltfBuffer(new Uint8Array(f), u, h, d, r.mode, r.filter), f;
          });
        });
      } else return null;
    }
  }
  class jU {
    constructor(e) {
      this.name = Ne.EXT_MESH_GPU_INSTANCING, this.parser = e;
    }
    createNodeMesh(e) {
      const t = this.parser.json, i = t.nodes[e];
      if (!i.extensions || !i.extensions[this.name] || i.mesh === void 0) return null;
      const r = t.meshes[i.mesh];
      for (const c of r.primitives) if (c.mode !== W2.TRIANGLES && c.mode !== W2.TRIANGLE_STRIP && c.mode !== W2.TRIANGLE_FAN && c.mode !== void 0) return null;
      const o = i.extensions[this.name].attributes, a = [], l = {};
      for (const c in o) a.push(this.parser.getDependency("accessor", o[c]).then((u) => (l[c] = u, l[c])));
      return a.length < 1 ? null : (a.push(this.parser.createNodeMesh(e)), Promise.all(a).then((c) => {
        const u = c.pop(), h = u.isGroup ? u.children : [
          u
        ], d = c[0].count, f = [];
        for (const m of h) {
          const _ = new Ee(), p = new u1(), g = new Pr(), y = new u1(1, 1, 1), b = new ZL(m.geometry, m.material, d);
          for (let v = 0; v < d; v++) l.TRANSLATION && p.fromBufferAttribute(l.TRANSLATION, v), l.ROTATION && g.fromBufferAttribute(l.ROTATION, v), l.SCALE && y.fromBufferAttribute(l.SCALE, v), b.setMatrixAt(v, _.compose(p, g, y));
          for (const v in l) if (v === "_COLOR_0") {
            const x = l[v];
            b.instanceColor = new a9(x.array, x.itemSize, x.normalized);
          } else v !== "TRANSLATION" && v !== "ROTATION" && v !== "SCALE" && m.geometry.setAttribute(v, l[v]);
          Ct.prototype.copy.call(b, m), this.parser.assignFinalMaterial(b), f.push(b);
        }
        return u.isGroup ? (u.clear(), u.add(...f), u) : f[0];
      }));
    }
  }
  const H8 = "glTF", Va = 12, Yg = {
    JSON: 1313821514,
    BIN: 5130562
  };
  class XU {
    constructor(e) {
      this.name = Ne.KHR_BINARY_GLTF, this.content = null, this.body = null;
      const t = new DataView(e, 0, Va), i = new TextDecoder();
      if (this.header = {
        magic: i.decode(new Uint8Array(e.slice(0, 4))),
        version: t.getUint32(4, true),
        length: t.getUint32(8, true)
      }, this.header.magic !== H8) throw new Error("THREE.GLTFLoader: Unsupported glTF-Binary header.");
      if (this.header.version < 2) throw new Error("THREE.GLTFLoader: Legacy binary file detected.");
      const r = this.header.length - Va, s = new DataView(e, Va);
      let o = 0;
      for (; o < r; ) {
        const a = s.getUint32(o, true);
        o += 4;
        const l = s.getUint32(o, true);
        if (o += 4, l === Yg.JSON) {
          const c = new Uint8Array(e, Va + o, a);
          this.content = i.decode(c);
        } else if (l === Yg.BIN) {
          const c = Va + o;
          this.body = e.slice(c, c + a);
        }
        o += a;
      }
      if (this.content === null) throw new Error("THREE.GLTFLoader: JSON content not found.");
    }
  }
  class $U {
    constructor(e, t) {
      if (!t) throw new Error("THREE.GLTFLoader: No DRACOLoader instance provided.");
      this.name = Ne.KHR_DRACO_MESH_COMPRESSION, this.json = e, this.dracoLoader = t, this.dracoLoader.preload();
    }
    decodePrimitive(e, t) {
      const i = this.json, r = this.dracoLoader, s = e.extensions[this.name].bufferView, o = e.extensions[this.name].attributes, a = {}, l = {}, c = {};
      for (const u in o) {
        const h = f9[u] || u.toLowerCase();
        a[h] = o[u];
      }
      for (const u in e.attributes) {
        const h = f9[u] || u.toLowerCase();
        if (o[u] !== void 0) {
          const d = i.accessors[e.attributes[u]], f = Uo[d.componentType];
          c[h] = f.name, l[h] = d.normalized === true;
        }
      }
      return t.getDependency("bufferView", s).then(function(u) {
        return new Promise(function(h, d) {
          r.decodeDracoFile(u, function(f) {
            for (const m in f.attributes) {
              const _ = f.attributes[m], p = l[m];
              p !== void 0 && (_.normalized = p);
            }
            h(f);
          }, a, c, kn, d);
        });
      });
    }
  }
  class qU {
    constructor() {
      this.name = Ne.KHR_TEXTURE_TRANSFORM;
    }
    extendTexture(e, t) {
      return (t.texCoord === void 0 || t.texCoord === e.channel) && t.offset === void 0 && t.rotation === void 0 && t.scale === void 0 || (e = e.clone(), t.texCoord !== void 0 && (e.channel = t.texCoord), t.offset !== void 0 && e.offset.fromArray(t.offset), t.rotation !== void 0 && (e.rotation = t.rotation), t.scale !== void 0 && e.repeat.fromArray(t.scale), e.needsUpdate = true), e;
    }
  }
  class YU {
    constructor() {
      this.name = Ne.KHR_MESH_QUANTIZATION;
    }
  }
  class z8 extends Rl {
    constructor(e, t, i, r) {
      super(e, t, i, r);
    }
    copySampleValue_(e) {
      const t = this.resultBuffer, i = this.sampleValues, r = this.valueSize, s = e * r * 3 + r;
      for (let o = 0; o !== r; o++) t[o] = i[s + o];
      return t;
    }
    interpolate_(e, t, i, r) {
      const s = this.resultBuffer, o = this.sampleValues, a = this.valueSize, l = a * 2, c = a * 3, u = r - t, h = (i - t) / u, d = h * h, f = d * h, m = e * c, _ = m - c, p = -2 * f + 3 * d, g = f - d, y = 1 - p, b = g - d + h;
      for (let v = 0; v !== a; v++) {
        const x = o[_ + v + a], C = o[_ + v + l] * u, A = o[m + v + a], P = o[m + v] * u;
        s[v] = y * x + b * C + p * A + g * P;
      }
      return s;
    }
  }
  const KU = new Pr();
  class JU extends z8 {
    interpolate_(e, t, i, r) {
      const s = super.interpolate_(e, t, i, r);
      return KU.fromArray(s).normalize().toArray(s), s;
    }
  }
  const W2 = {
    POINTS: 0,
    LINES: 1,
    LINE_LOOP: 2,
    LINE_STRIP: 3,
    TRIANGLES: 4,
    TRIANGLE_STRIP: 5,
    TRIANGLE_FAN: 6
  }, Uo = {
    5120: Int8Array,
    5121: Uint8Array,
    5122: Int16Array,
    5123: Uint16Array,
    5125: Uint32Array,
    5126: Float32Array
  }, Kg = {
    9728: t2,
    9729: Pn,
    9984: a8,
    9985: Wc,
    9986: Ka,
    9987: Hi
  }, Jg = {
    33071: Bi,
    33648: Iu,
    10497: ra
  }, sd = {
    SCALAR: 1,
    VEC2: 2,
    VEC3: 3,
    VEC4: 4,
    MAT2: 4,
    MAT3: 9,
    MAT4: 16
  }, f9 = {
    POSITION: "position",
    NORMAL: "normal",
    TANGENT: "tangent",
    TEXCOORD_0: "uv",
    TEXCOORD_1: "uv1",
    TEXCOORD_2: "uv2",
    TEXCOORD_3: "uv3",
    COLOR_0: "color",
    WEIGHTS_0: "skinWeight",
    JOINTS_0: "skinIndex"
  }, W3 = {
    scale: "scale",
    translation: "position",
    rotation: "quaternion",
    weights: "morphTargetInfluences"
  }, QU = {
    CUBICSPLINE: void 0,
    LINEAR: nl,
    STEP: tl
  }, od = {
    OPAQUE: "OPAQUE",
    MASK: "MASK",
    BLEND: "BLEND"
  };
  function ZU(n) {
    return n.DefaultMaterial === void 0 && (n.DefaultMaterial = new Jp({
      color: 16777215,
      emissive: 0,
      metalness: 1,
      roughness: 1,
      transparent: false,
      depthTest: true,
      side: D3
    })), n.DefaultMaterial;
  }
  function qr(n, e, t) {
    for (const i in t.extensions) n[i] === void 0 && (e.userData.gltfExtensions = e.userData.gltfExtensions || {}, e.userData.gltfExtensions[i] = t.extensions[i]);
  }
  function h3(n, e) {
    e.extras !== void 0 && (typeof e.extras == "object" ? Object.assign(n.userData, e.extras) : console.warn("THREE.GLTFLoader: Ignoring primitive type .extras, " + e.extras));
  }
  function eB(n, e, t) {
    let i = false, r = false, s = false;
    for (let c = 0, u = e.length; c < u; c++) {
      const h = e[c];
      if (h.POSITION !== void 0 && (i = true), h.NORMAL !== void 0 && (r = true), h.COLOR_0 !== void 0 && (s = true), i && r && s) break;
    }
    if (!i && !r && !s) return Promise.resolve(n);
    const o = [], a = [], l = [];
    for (let c = 0, u = e.length; c < u; c++) {
      const h = e[c];
      if (i) {
        const d = h.POSITION !== void 0 ? t.getDependency("accessor", h.POSITION) : n.attributes.position;
        o.push(d);
      }
      if (r) {
        const d = h.NORMAL !== void 0 ? t.getDependency("accessor", h.NORMAL) : n.attributes.normal;
        a.push(d);
      }
      if (s) {
        const d = h.COLOR_0 !== void 0 ? t.getDependency("accessor", h.COLOR_0) : n.attributes.color;
        l.push(d);
      }
    }
    return Promise.all([
      Promise.all(o),
      Promise.all(a),
      Promise.all(l)
    ]).then(function(c) {
      const u = c[0], h = c[1], d = c[2];
      return i && (n.morphAttributes.position = u), r && (n.morphAttributes.normal = h), s && (n.morphAttributes.color = d), n.morphTargetsRelative = true, n;
    });
  }
  function tB(n, e) {
    if (n.updateMorphTargets(), e.weights !== void 0) for (let t = 0, i = e.weights.length; t < i; t++) n.morphTargetInfluences[t] = e.weights[t];
    if (e.extras && Array.isArray(e.extras.targetNames)) {
      const t = e.extras.targetNames;
      if (n.morphTargetInfluences.length === t.length) {
        n.morphTargetDictionary = {};
        for (let i = 0, r = t.length; i < r; i++) n.morphTargetDictionary[t[i]] = i;
      } else console.warn("THREE.GLTFLoader: Invalid extras.targetNames length. Ignoring names.");
    }
  }
  function nB(n) {
    let e;
    const t = n.extensions && n.extensions[Ne.KHR_DRACO_MESH_COMPRESSION];
    if (t ? e = "draco:" + t.bufferView + ":" + t.indices + ":" + ad(t.attributes) : e = n.indices + ":" + ad(n.attributes) + ":" + n.mode, n.targets !== void 0) for (let i = 0, r = n.targets.length; i < r; i++) e += ":" + ad(n.targets[i]);
    return e;
  }
  function ad(n) {
    let e = "";
    const t = Object.keys(n).sort();
    for (let i = 0, r = t.length; i < r; i++) e += t[i] + ":" + n[t[i]] + ";";
    return e;
  }
  function h9(n) {
    switch (n) {
      case Int8Array:
        return 1 / 127;
      case Uint8Array:
        return 1 / 255;
      case Int16Array:
        return 1 / 32767;
      case Uint16Array:
        return 1 / 65535;
      default:
        throw new Error("THREE.GLTFLoader: Unsupported normalized accessor component type.");
    }
  }
  function iB(n) {
    return n.search(/\.jpe?g($|\?)/i) > 0 || n.search(/^data\:image\/jpeg/) === 0 ? "image/jpeg" : n.search(/\.webp($|\?)/i) > 0 || n.search(/^data\:image\/webp/) === 0 ? "image/webp" : n.search(/\.ktx2($|\?)/i) > 0 || n.search(/^data\:image\/ktx2/) === 0 ? "image/ktx2" : "image/png";
  }
  const rB = new Ee();
  class sB {
    constructor(e = {}, t = {}) {
      this.json = e, this.extensions = {}, this.plugins = {}, this.options = t, this.cache = new CU(), this.associations = /* @__PURE__ */ new Map(), this.primitiveCache = {}, this.nodeCache = {}, this.meshCache = {
        refs: {},
        uses: {}
      }, this.cameraCache = {
        refs: {},
        uses: {}
      }, this.lightCache = {
        refs: {},
        uses: {}
      }, this.sourceCache = {}, this.textureCache = {}, this.nodeNamesUsed = {};
      let i = false, r = -1, s = false, o = -1;
      if (typeof navigator < "u") {
        const a = navigator.userAgent;
        i = /^((?!chrome|android).)*safari/i.test(a) === true;
        const l = a.match(/Version\/(\d+)/);
        r = i && l ? parseInt(l[1], 10) : -1, s = a.indexOf("Firefox") > -1, o = s ? a.match(/Firefox\/([0-9]+)\./)[1] : -1;
      }
      typeof createImageBitmap > "u" || i && r < 17 || s && o < 98 ? this.textureLoader = new F8(this.options.manager) : this.textureLoader = new LI(this.options.manager), this.textureLoader.setCrossOrigin(this.options.crossOrigin), this.textureLoader.setRequestHeader(this.options.requestHeader), this.fileLoader = new rl(this.options.manager), this.fileLoader.setResponseType("arraybuffer"), this.options.crossOrigin === "use-credentials" && this.fileLoader.setWithCredentials(true);
    }
    setExtensions(e) {
      this.extensions = e;
    }
    setPlugins(e) {
      this.plugins = e;
    }
    parse(e, t) {
      const i = this, r = this.json, s = this.extensions;
      this.cache.removeAll(), this.nodeCache = {}, this._invokeAll(function(o) {
        return o._markDefs && o._markDefs();
      }), Promise.all(this._invokeAll(function(o) {
        return o.beforeRoot && o.beforeRoot();
      })).then(function() {
        return Promise.all([
          i.getDependencies("scene"),
          i.getDependencies("animation"),
          i.getDependencies("camera")
        ]);
      }).then(function(o) {
        const a = {
          scene: o[0][r.scene || 0],
          scenes: o[0],
          animations: o[1],
          cameras: o[2],
          asset: r.asset,
          parser: i,
          userData: {}
        };
        return qr(s, a, r), h3(a, r), Promise.all(i._invokeAll(function(l) {
          return l.afterRoot && l.afterRoot(a);
        })).then(function() {
          for (const l of a.scenes) l.updateMatrixWorld();
          e(a);
        });
      }).catch(t);
    }
    _markDefs() {
      const e = this.json.nodes || [], t = this.json.skins || [], i = this.json.meshes || [];
      for (let r = 0, s = t.length; r < s; r++) {
        const o = t[r].joints;
        for (let a = 0, l = o.length; a < l; a++) e[o[a]].isBone = true;
      }
      for (let r = 0, s = e.length; r < s; r++) {
        const o = e[r];
        o.mesh !== void 0 && (this._addNodeRef(this.meshCache, o.mesh), o.skin !== void 0 && (i[o.mesh].isSkinnedMesh = true)), o.camera !== void 0 && this._addNodeRef(this.cameraCache, o.camera);
      }
    }
    _addNodeRef(e, t) {
      t !== void 0 && (e.refs[t] === void 0 && (e.refs[t] = e.uses[t] = 0), e.refs[t]++);
    }
    _getNodeRef(e, t, i) {
      if (e.refs[t] <= 1) return i;
      const r = i.clone(), s = (o, a) => {
        const l = this.associations.get(o);
        l != null && this.associations.set(a, l);
        for (const [c, u] of o.children.entries()) s(u, a.children[c]);
      };
      return s(i, r), r.name += "_instance_" + e.uses[t]++, r;
    }
    _invokeOne(e) {
      const t = Object.values(this.plugins);
      t.push(this);
      for (let i = 0; i < t.length; i++) {
        const r = e(t[i]);
        if (r) return r;
      }
      return null;
    }
    _invokeAll(e) {
      const t = Object.values(this.plugins);
      t.unshift(this);
      const i = [];
      for (let r = 0; r < t.length; r++) {
        const s = e(t[r]);
        s && i.push(s);
      }
      return i;
    }
    getDependency(e, t) {
      const i = e + ":" + t;
      let r = this.cache.get(i);
      if (!r) {
        switch (e) {
          case "scene":
            r = this.loadScene(t);
            break;
          case "node":
            r = this._invokeOne(function(s) {
              return s.loadNode && s.loadNode(t);
            });
            break;
          case "mesh":
            r = this._invokeOne(function(s) {
              return s.loadMesh && s.loadMesh(t);
            });
            break;
          case "accessor":
            r = this.loadAccessor(t);
            break;
          case "bufferView":
            r = this._invokeOne(function(s) {
              return s.loadBufferView && s.loadBufferView(t);
            });
            break;
          case "buffer":
            r = this.loadBuffer(t);
            break;
          case "material":
            r = this._invokeOne(function(s) {
              return s.loadMaterial && s.loadMaterial(t);
            });
            break;
          case "texture":
            r = this._invokeOne(function(s) {
              return s.loadTexture && s.loadTexture(t);
            });
            break;
          case "skin":
            r = this.loadSkin(t);
            break;
          case "animation":
            r = this._invokeOne(function(s) {
              return s.loadAnimation && s.loadAnimation(t);
            });
            break;
          case "camera":
            r = this.loadCamera(t);
            break;
          default:
            if (r = this._invokeOne(function(s) {
              return s != this && s.getDependency && s.getDependency(e, t);
            }), !r) throw new Error("Unknown type: " + e);
            break;
        }
        this.cache.add(i, r);
      }
      return r;
    }
    getDependencies(e) {
      let t = this.cache.get(e);
      if (!t) {
        const i = this, r = this.json[e + (e === "mesh" ? "es" : "s")] || [];
        t = Promise.all(r.map(function(s, o) {
          return i.getDependency(e, o);
        })), this.cache.add(e, t);
      }
      return t;
    }
    loadBuffer(e) {
      const t = this.json.buffers[e], i = this.fileLoader;
      if (t.type && t.type !== "arraybuffer") throw new Error("THREE.GLTFLoader: " + t.type + " buffer type is not supported.");
      if (t.uri === void 0 && e === 0) return Promise.resolve(this.extensions[Ne.KHR_BINARY_GLTF].body);
      const r = this.options;
      return new Promise(function(s, o) {
        i.load(S0.resolveURL(t.uri, r.path), s, void 0, function() {
          o(new Error('THREE.GLTFLoader: Failed to load buffer "' + t.uri + '".'));
        });
      });
    }
    loadBufferView(e) {
      const t = this.json.bufferViews[e];
      return this.getDependency("buffer", t.buffer).then(function(i) {
        const r = t.byteLength || 0, s = t.byteOffset || 0;
        return i.slice(s, s + r);
      });
    }
    loadAccessor(e) {
      const t = this, i = this.json, r = this.json.accessors[e];
      if (r.bufferView === void 0 && r.sparse === void 0) {
        const o = sd[r.type], a = Uo[r.componentType], l = r.normalized === true, c = new a(r.count * o);
        return Promise.resolve(new nn(c, o, l));
      }
      const s = [];
      return r.bufferView !== void 0 ? s.push(this.getDependency("bufferView", r.bufferView)) : s.push(null), r.sparse !== void 0 && (s.push(this.getDependency("bufferView", r.sparse.indices.bufferView)), s.push(this.getDependency("bufferView", r.sparse.values.bufferView))), Promise.all(s).then(function(o) {
        const a = o[0], l = sd[r.type], c = Uo[r.componentType], u = c.BYTES_PER_ELEMENT, h = u * l, d = r.byteOffset || 0, f = r.bufferView !== void 0 ? i.bufferViews[r.bufferView].byteStride : void 0, m = r.normalized === true;
        let _, p;
        if (f && f !== h) {
          const g = Math.floor(d / f), y = "InterleavedBuffer:" + r.bufferView + ":" + r.componentType + ":" + g + ":" + r.count;
          let b = t.cache.get(y);
          b || (_ = new c(a, g * f, r.count * f / u), b = new qL(_, f / u), t.cache.add(y, b)), p = new $p(b, l, d % f / u, m);
        } else a === null ? _ = new c(r.count * l) : _ = new c(a, d, r.count * l), p = new nn(_, l, m);
        if (r.sparse !== void 0) {
          const g = sd.SCALAR, y = Uo[r.sparse.indices.componentType], b = r.sparse.indices.byteOffset || 0, v = r.sparse.values.byteOffset || 0, x = new y(o[1], b, r.sparse.count * g), C = new c(o[2], v, r.sparse.count * l);
          a !== null && (p = new nn(p.array.slice(), p.itemSize, p.normalized)), p.normalized = false;
          for (let A = 0, P = x.length; A < P; A++) {
            const M = x[A];
            if (p.setX(M, C[A * l]), l >= 2 && p.setY(M, C[A * l + 1]), l >= 3 && p.setZ(M, C[A * l + 2]), l >= 4 && p.setW(M, C[A * l + 3]), l >= 5) throw new Error("THREE.GLTFLoader: Unsupported itemSize in sparse BufferAttribute.");
          }
          p.normalized = m;
        }
        return p;
      });
    }
    loadTexture(e) {
      const t = this.json, i = this.options, s = t.textures[e].source, o = t.images[s];
      let a = this.textureLoader;
      if (o.uri) {
        const l = i.manager.getHandler(o.uri);
        l !== null && (a = l);
      }
      return this.loadTextureImage(e, s, a);
    }
    loadTextureImage(e, t, i) {
      const r = this, s = this.json, o = s.textures[e], a = s.images[t], l = (a.uri || a.bufferView) + ":" + o.sampler;
      if (this.textureCache[l]) return this.textureCache[l];
      const c = this.loadImageSource(t, i).then(function(u) {
        u.flipY = false, u.name = o.name || a.name || "", u.name === "" && typeof a.uri == "string" && a.uri.startsWith("data:image/") === false && (u.name = a.uri);
        const d = (s.samplers || {})[o.sampler] || {};
        return u.magFilter = Kg[d.magFilter] || Pn, u.minFilter = Kg[d.minFilter] || Hi, u.wrapS = Jg[d.wrapS] || ra, u.wrapT = Jg[d.wrapT] || ra, u.generateMipmaps = !u.isCompressedTexture && u.minFilter !== t2 && u.minFilter !== Pn, r.associations.set(u, {
          textures: e
        }), u;
      }).catch(function() {
        return null;
      });
      return this.textureCache[l] = c, c;
    }
    loadImageSource(e, t) {
      const i = this, r = this.json, s = this.options;
      if (this.sourceCache[e] !== void 0) return this.sourceCache[e].then((h) => h.clone());
      const o = r.images[e], a = self.URL || self.webkitURL;
      let l = o.uri || "", c = false;
      if (o.bufferView !== void 0) l = i.getDependency("bufferView", o.bufferView).then(function(h) {
        c = true;
        const d = new Blob([
          h
        ], {
          type: o.mimeType
        });
        return l = a.createObjectURL(d), l;
      });
      else if (o.uri === void 0) throw new Error("THREE.GLTFLoader: Image " + e + " is missing URI and bufferView");
      const u = Promise.resolve(l).then(function(h) {
        return new Promise(function(d, f) {
          let m = d;
          t.isImageBitmapLoader === true && (m = function(_) {
            const p = new hn(_);
            p.needsUpdate = true, d(p);
          }), t.load(S0.resolveURL(h, s.path), m, void 0, f);
        });
      }).then(function(h) {
        return c === true && a.revokeObjectURL(l), h3(h, o), h.userData.mimeType = o.mimeType || iB(o.uri), h;
      }).catch(function(h) {
        throw console.error("THREE.GLTFLoader: Couldn't load texture", l), h;
      });
      return this.sourceCache[e] = u, u;
    }
    assignTexture(e, t, i, r) {
      const s = this;
      return this.getDependency("texture", i.index).then(function(o) {
        if (!o) return null;
        if (i.texCoord !== void 0 && i.texCoord > 0 && (o = o.clone(), o.channel = i.texCoord), s.extensions[Ne.KHR_TEXTURE_TRANSFORM]) {
          const a = i.extensions !== void 0 ? i.extensions[Ne.KHR_TEXTURE_TRANSFORM] : void 0;
          if (a) {
            const l = s.associations.get(o);
            o = s.extensions[Ne.KHR_TEXTURE_TRANSFORM].extendTexture(o, a), s.associations.set(o, l);
          }
        }
        return r !== void 0 && (o.colorSpace = r), e[t] = o, o;
      });
    }
    assignFinalMaterial(e) {
      const t = e.geometry;
      let i = e.material;
      const r = t.attributes.tangent === void 0, s = t.attributes.color !== void 0, o = t.attributes.normal === void 0;
      if (e.isPoints) {
        const a = "PointsMaterial:" + i.uuid;
        let l = this.cache.get(a);
        l || (l = new C8(), Y2.prototype.copy.call(l, i), l.color.copy(i.color), l.map = i.map, l.sizeAttenuation = false, this.cache.add(a, l)), i = l;
      } else if (e.isLine) {
        const a = "LineBasicMaterial:" + i.uuid;
        let l = this.cache.get(a);
        l || (l = new T8(), Y2.prototype.copy.call(l, i), l.color.copy(i.color), l.map = i.map, this.cache.add(a, l)), i = l;
      }
      if (r || s || o) {
        let a = "ClonedMaterial:" + i.uuid + ":";
        r && (a += "derivative-tangents:"), s && (a += "vertex-colors:"), o && (a += "flat-shading:");
        let l = this.cache.get(a);
        l || (l = i.clone(), s && (l.vertexColors = true), o && (l.flatShading = true), r && (l.normalScale && (l.normalScale.y *= -1), l.clearcoatNormalScale && (l.clearcoatNormalScale.y *= -1)), this.cache.add(a, l), this.associations.set(l, this.associations.get(i))), i = l;
      }
      e.material = i;
    }
    getMaterialType() {
      return Jp;
    }
    loadMaterial(e) {
      const t = this, i = this.json, r = this.extensions, s = i.materials[e];
      let o;
      const a = {}, l = s.extensions || {}, c = [];
      if (l[Ne.KHR_MATERIALS_UNLIT]) {
        const h = r[Ne.KHR_MATERIALS_UNLIT];
        o = h.getMaterialType(), c.push(h.extendParams(a, s, t));
      } else {
        const h = s.pbrMetallicRoughness || {};
        if (a.color = new xe(1, 1, 1), a.opacity = 1, Array.isArray(h.baseColorFactor)) {
          const d = h.baseColorFactor;
          a.color.setRGB(d[0], d[1], d[2], kn), a.opacity = d[3];
        }
        h.baseColorTexture !== void 0 && c.push(t.assignTexture(a, "map", h.baseColorTexture, Wt)), a.metalness = h.metallicFactor !== void 0 ? h.metallicFactor : 1, a.roughness = h.roughnessFactor !== void 0 ? h.roughnessFactor : 1, h.metallicRoughnessTexture !== void 0 && (c.push(t.assignTexture(a, "metalnessMap", h.metallicRoughnessTexture)), c.push(t.assignTexture(a, "roughnessMap", h.metallicRoughnessTexture))), o = this._invokeOne(function(d) {
          return d.getMaterialType && d.getMaterialType(e);
        }), c.push(Promise.all(this._invokeAll(function(d) {
          return d.extendMaterialParams && d.extendMaterialParams(e, a);
        })));
      }
      s.doubleSided === true && (a.side = Oi);
      const u = s.alphaMode || od.OPAQUE;
      if (u === od.BLEND ? (a.transparent = true, a.depthWrite = false) : (a.transparent = false, u === od.MASK && (a.alphaTest = s.alphaCutoff !== void 0 ? s.alphaCutoff : 0.5)), s.normalTexture !== void 0 && o !== ls && (c.push(t.assignTexture(a, "normalMap", s.normalTexture)), a.normalScale = new Ue(1, 1), s.normalTexture.scale !== void 0)) {
        const h = s.normalTexture.scale;
        a.normalScale.set(h, h);
      }
      if (s.occlusionTexture !== void 0 && o !== ls && (c.push(t.assignTexture(a, "aoMap", s.occlusionTexture)), s.occlusionTexture.strength !== void 0 && (a.aoMapIntensity = s.occlusionTexture.strength)), s.emissiveFactor !== void 0 && o !== ls) {
        const h = s.emissiveFactor;
        a.emissive = new xe().setRGB(h[0], h[1], h[2], kn);
      }
      return s.emissiveTexture !== void 0 && o !== ls && c.push(t.assignTexture(a, "emissiveMap", s.emissiveTexture, Wt)), Promise.all(c).then(function() {
        const h = new o(a);
        return s.name && (h.name = s.name), h3(h, s), t.associations.set(h, {
          materials: e
        }), s.extensions && qr(r, h, s), h;
      });
    }
    createUniqueName(e) {
      const t = tt.sanitizeNodeName(e || "");
      return t in this.nodeNamesUsed ? t + "_" + ++this.nodeNamesUsed[t] : (this.nodeNamesUsed[t] = 0, t);
    }
    loadGeometries(e) {
      const t = this, i = this.extensions, r = this.primitiveCache;
      function s(a) {
        return i[Ne.KHR_DRACO_MESH_COMPRESSION].decodePrimitive(a, t).then(function(l) {
          return Qg(l, a, t);
        });
      }
      const o = [];
      for (let a = 0, l = e.length; a < l; a++) {
        const c = e[a], u = nB(c), h = r[u];
        if (h) o.push(h.promise);
        else {
          let d;
          c.extensions && c.extensions[Ne.KHR_DRACO_MESH_COMPRESSION] ? d = s(c) : d = Qg(new i2(), c, t), r[u] = {
            primitive: c,
            promise: d
          }, o.push(d);
        }
      }
      return Promise.all(o);
    }
    loadMesh(e) {
      const t = this, i = this.json, r = this.extensions, s = i.meshes[e], o = s.primitives, a = [];
      for (let l = 0, c = o.length; l < c; l++) {
        const u = o[l].material === void 0 ? ZU(this.cache) : this.getDependency("material", o[l].material);
        a.push(u);
      }
      return a.push(t.loadGeometries(o)), Promise.all(a).then(function(l) {
        const c = l.slice(0, l.length - 1), u = l[l.length - 1], h = [];
        for (let f = 0, m = u.length; f < m; f++) {
          const _ = u[f], p = o[f];
          let g;
          const y = c[f];
          if (p.mode === W2.TRIANGLES || p.mode === W2.TRIANGLE_STRIP || p.mode === W2.TRIANGLE_FAN || p.mode === void 0) g = s.isSkinnedMesh === true ? new KL(_, y) : new Zn(_, y), g.isSkinnedMesh === true && g.normalizeSkinWeights(), p.mode === W2.TRIANGLE_STRIP ? g.geometry = qg(g.geometry, m8) : p.mode === W2.TRIANGLE_FAN && (g.geometry = qg(g.geometry, s9));
          else if (p.mode === W2.LINES) g = new cI(_, y);
          else if (p.mode === W2.LINE_STRIP) g = new Kp(_, y);
          else if (p.mode === W2.LINE_LOOP) g = new uI(_, y);
          else if (p.mode === W2.POINTS) g = new fI(_, y);
          else throw new Error("THREE.GLTFLoader: Primitive mode unsupported: " + p.mode);
          Object.keys(g.geometry.morphAttributes).length > 0 && tB(g, s), g.name = t.createUniqueName(s.name || "mesh_" + e), h3(g, s), p.extensions && qr(r, g, p), t.assignFinalMaterial(g), h.push(g);
        }
        for (let f = 0, m = h.length; f < m; f++) t.associations.set(h[f], {
          meshes: e,
          primitives: f
        });
        if (h.length === 1) return s.extensions && qr(r, h[0], s), h[0];
        const d = new cs();
        s.extensions && qr(r, d, s), t.associations.set(d, {
          meshes: e
        });
        for (let f = 0, m = h.length; f < m; f++) d.add(h[f]);
        return d;
      });
    }
    loadCamera(e) {
      let t;
      const i = this.json.cameras[e], r = i[i.type];
      if (!r) {
        console.warn("THREE.GLTFLoader: Missing camera parameters.");
        return;
      }
      return i.type === "perspective" ? t = new l2(gL.radToDeg(r.yfov), r.aspectRatio || 1, r.znear || 1, r.zfar || 2e6) : i.type === "orthographic" && (t = new e6(-r.xmag, r.xmag, r.ymag, -r.ymag, r.znear, r.zfar)), i.name && (t.name = this.createUniqueName(i.name)), h3(t, i), Promise.resolve(t);
    }
    loadSkin(e) {
      const t = this.json.skins[e], i = [];
      for (let r = 0, s = t.joints.length; r < s; r++) i.push(this._loadNodeShallow(t.joints[r]));
      return t.inverseBindMatrices !== void 0 ? i.push(this.getDependency("accessor", t.inverseBindMatrices)) : i.push(null), Promise.all(i).then(function(r) {
        const s = r.pop(), o = r, a = [], l = [];
        for (let c = 0, u = o.length; c < u; c++) {
          const h = o[c];
          if (h) {
            a.push(h);
            const d = new Ee();
            s !== null && d.fromArray(s.array, c * 16), l.push(d);
          } else console.warn('THREE.GLTFLoader: Joint "%s" could not be found.', t.joints[c]);
        }
        return new qp(a, l);
      });
    }
    loadAnimation(e) {
      const t = this.json, i = this, r = t.animations[e], s = r.name ? r.name : "animation_" + e, o = [], a = [], l = [], c = [], u = [];
      for (let h = 0, d = r.channels.length; h < d; h++) {
        const f = r.channels[h], m = r.samplers[f.sampler], _ = f.target, p = _.node, g = r.parameters !== void 0 ? r.parameters[m.input] : m.input, y = r.parameters !== void 0 ? r.parameters[m.output] : m.output;
        _.node !== void 0 && (o.push(this.getDependency("node", p)), a.push(this.getDependency("accessor", g)), l.push(this.getDependency("accessor", y)), c.push(m), u.push(_));
      }
      return Promise.all([
        Promise.all(o),
        Promise.all(a),
        Promise.all(l),
        Promise.all(c),
        Promise.all(u)
      ]).then(function(h) {
        const d = h[0], f = h[1], m = h[2], _ = h[3], p = h[4], g = [];
        for (let y = 0, b = d.length; y < b; y++) {
          const v = d[y], x = f[y], C = m[y], A = _[y], P = p[y];
          if (v === void 0) continue;
          v.updateMatrix && v.updateMatrix();
          const M = i._createAnimationTracks(v, x, C, A, P);
          if (M) for (let E = 0; E < M.length; E++) g.push(M[E]);
        }
        return new yI(s, void 0, g);
      });
    }
    createNodeMesh(e) {
      const t = this.json, i = this, r = t.nodes[e];
      return r.mesh === void 0 ? null : i.getDependency("mesh", r.mesh).then(function(s) {
        const o = i._getNodeRef(i.meshCache, r.mesh, s);
        return r.weights !== void 0 && o.traverse(function(a) {
          if (a.isMesh) for (let l = 0, c = r.weights.length; l < c; l++) a.morphTargetInfluences[l] = r.weights[l];
        }), o;
      });
    }
    loadNode(e) {
      const t = this.json, i = this, r = t.nodes[e], s = i._loadNodeShallow(e), o = [], a = r.children || [];
      for (let c = 0, u = a.length; c < u; c++) o.push(i.getDependency("node", a[c]));
      const l = r.skin === void 0 ? Promise.resolve(null) : i.getDependency("skin", r.skin);
      return Promise.all([
        s,
        Promise.all(o),
        l
      ]).then(function(c) {
        const u = c[0], h = c[1], d = c[2];
        d !== null && u.traverse(function(f) {
          f.isSkinnedMesh && f.bind(d, rB);
        });
        for (let f = 0, m = h.length; f < m; f++) u.add(h[f]);
        return u;
      });
    }
    _loadNodeShallow(e) {
      const t = this.json, i = this.extensions, r = this;
      if (this.nodeCache[e] !== void 0) return this.nodeCache[e];
      const s = t.nodes[e], o = s.name ? r.createUniqueName(s.name) : "", a = [], l = r._invokeOne(function(c) {
        return c.createNodeMesh && c.createNodeMesh(e);
      });
      return l && a.push(l), s.camera !== void 0 && a.push(r.getDependency("camera", s.camera).then(function(c) {
        return r._getNodeRef(r.cameraCache, s.camera, c);
      })), r._invokeAll(function(c) {
        return c.createNodeAttachment && c.createNodeAttachment(e);
      }).forEach(function(c) {
        a.push(c);
      }), this.nodeCache[e] = Promise.all(a).then(function(c) {
        let u;
        if (s.isBone === true ? u = new M8() : c.length > 1 ? u = new cs() : c.length === 1 ? u = c[0] : u = new Ct(), u !== c[0]) for (let h = 0, d = c.length; h < d; h++) u.add(c[h]);
        if (s.name && (u.userData.name = s.name, u.name = o), h3(u, s), s.extensions && qr(i, u, s), s.matrix !== void 0) {
          const h = new Ee();
          h.fromArray(s.matrix), u.applyMatrix4(h);
        } else s.translation !== void 0 && u.position.fromArray(s.translation), s.rotation !== void 0 && u.quaternion.fromArray(s.rotation), s.scale !== void 0 && u.scale.fromArray(s.scale);
        if (!r.associations.has(u)) r.associations.set(u, {});
        else if (s.mesh !== void 0 && r.meshCache.refs[s.mesh] > 1) {
          const h = r.associations.get(u);
          r.associations.set(u, {
            ...h
          });
        }
        return r.associations.get(u).nodes = e, u;
      }), this.nodeCache[e];
    }
    loadScene(e) {
      const t = this.extensions, i = this.json.scenes[e], r = this, s = new cs();
      i.name && (s.name = r.createUniqueName(i.name)), h3(s, i), i.extensions && qr(t, s, i);
      const o = i.nodes || [], a = [];
      for (let l = 0, c = o.length; l < c; l++) a.push(r.getDependency("node", o[l]));
      return Promise.all(a).then(function(l) {
        for (let u = 0, h = l.length; u < h; u++) s.add(l[u]);
        const c = (u) => {
          const h = /* @__PURE__ */ new Map();
          for (const [d, f] of r.associations) (d instanceof Y2 || d instanceof hn) && h.set(d, f);
          return u.traverse((d) => {
            const f = r.associations.get(d);
            f != null && h.set(d, f);
          }), h;
        };
        return r.associations = c(s), s;
      });
    }
    _createAnimationTracks(e, t, i, r, s) {
      const o = [], a = e.name ? e.name : e.uuid, l = [];
      W3[s.path] === W3.weights ? e.traverse(function(d) {
        d.morphTargetInfluences && l.push(d.name ? d.name : d.uuid);
      }) : l.push(a);
      let c;
      switch (W3[s.path]) {
        case W3.weights:
          c = aa;
          break;
        case W3.rotation:
          c = la;
          break;
        case W3.translation:
        case W3.scale:
          c = ca;
          break;
        default:
          switch (i.itemSize) {
            case 1:
              c = aa;
              break;
            case 2:
            case 3:
            default:
              c = ca;
              break;
          }
          break;
      }
      const u = r.interpolation !== void 0 ? QU[r.interpolation] : nl, h = this._getArrayFromAccessor(i);
      for (let d = 0, f = l.length; d < f; d++) {
        const m = new c(l[d] + "." + W3[s.path], t.array, h, u);
        r.interpolation === "CUBICSPLINE" && this._createCubicSplineTrackInterpolant(m), o.push(m);
      }
      return o;
    }
    _getArrayFromAccessor(e) {
      let t = e.array;
      if (e.normalized) {
        const i = h9(t.constructor), r = new Float32Array(t.length);
        for (let s = 0, o = t.length; s < o; s++) r[s] = t[s] * i;
        t = r;
      }
      return t;
    }
    _createCubicSplineTrackInterpolant(e) {
      e.createInterpolant = function(i) {
        const r = this instanceof la ? JU : z8;
        return new r(this.times, this.values, this.getValueSize() / 3, i);
      }, e.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline = true;
    }
  }
  function oB(n, e, t) {
    const i = e.attributes, r = new F2();
    if (i.POSITION !== void 0) {
      const a = t.json.accessors[i.POSITION], l = a.min, c = a.max;
      if (l !== void 0 && c !== void 0) {
        if (r.set(new u1(l[0], l[1], l[2]), new u1(c[0], c[1], c[2])), a.normalized) {
          const u = h9(Uo[a.componentType]);
          r.min.multiplyScalar(u), r.max.multiplyScalar(u);
        }
      } else {
        console.warn("THREE.GLTFLoader: Missing min/max properties for accessor POSITION.");
        return;
      }
    } else return;
    const s = e.targets;
    if (s !== void 0) {
      const a = new u1(), l = new u1();
      for (let c = 0, u = s.length; c < u; c++) {
        const h = s[c];
        if (h.POSITION !== void 0) {
          const d = t.json.accessors[h.POSITION], f = d.min, m = d.max;
          if (f !== void 0 && m !== void 0) {
            if (l.setX(Math.max(Math.abs(f[0]), Math.abs(m[0]))), l.setY(Math.max(Math.abs(f[1]), Math.abs(m[1]))), l.setZ(Math.max(Math.abs(f[2]), Math.abs(m[2]))), d.normalized) {
              const _ = h9(Uo[d.componentType]);
              l.multiplyScalar(_);
            }
            a.max(l);
          } else console.warn("THREE.GLTFLoader: Missing min/max properties for accessor POSITION.");
        }
      }
      r.expandByVector(a);
    }
    n.boundingBox = r;
    const o = new d2();
    r.getCenter(o.center), o.radius = r.min.distanceTo(r.max) / 2, n.boundingSphere = o;
  }
  function Qg(n, e, t) {
    const i = e.attributes, r = [];
    function s(o, a) {
      return t.getDependency("accessor", o).then(function(l) {
        n.setAttribute(a, l);
      });
    }
    for (const o in i) {
      const a = f9[o] || o.toLowerCase();
      a in n.attributes || r.push(s(i[o], a));
    }
    if (e.indices !== void 0 && !n.index) {
      const o = t.getDependency("accessor", e.indices).then(function(a) {
        n.setIndex(a);
      });
      r.push(o);
    }
    return ze.workingColorSpace !== kn && "COLOR_0" in i && console.warn(`THREE.GLTFLoader: Converting vertex colors from "srgb-linear" to "${ze.workingColorSpace}" not supported.`), h3(n, e), oB(n, e, t), Promise.all(r).then(function() {
      return e.targets !== void 0 ? eB(n, e.targets, t) : n;
    });
  }
  const ld = /* @__PURE__ */ new WeakMap();
  class aB extends Lr {
    constructor(e) {
      super(e), this.decoderPath = "", this.decoderConfig = {}, this.decoderBinary = null, this.decoderPending = null, this.workerLimit = 4, this.workerPool = [], this.workerNextTaskID = 1, this.workerSourceURL = "", this.defaultAttributeIDs = {
        position: "POSITION",
        normal: "NORMAL",
        color: "COLOR",
        uv: "TEX_COORD"
      }, this.defaultAttributeTypes = {
        position: "Float32Array",
        normal: "Float32Array",
        color: "Float32Array",
        uv: "Float32Array"
      };
    }
    setDecoderPath(e) {
      return this.decoderPath = e, this;
    }
    setDecoderConfig(e) {
      return this.decoderConfig = e, this;
    }
    setWorkerLimit(e) {
      return this.workerLimit = e, this;
    }
    load(e, t, i, r) {
      const s = new rl(this.manager);
      s.setPath(this.path), s.setResponseType("arraybuffer"), s.setRequestHeader(this.requestHeader), s.setWithCredentials(this.withCredentials), s.load(e, (o) => {
        this.parse(o, t, r);
      }, i, r);
    }
    parse(e, t, i = () => {
    }) {
      this.decodeDracoFile(e, t, null, null, Wt, i).catch(i);
    }
    decodeDracoFile(e, t, i, r, s = kn, o = () => {
    }) {
      const a = {
        attributeIDs: i || this.defaultAttributeIDs,
        attributeTypes: r || this.defaultAttributeTypes,
        useUniqueIDs: !!i,
        vertexColorSpace: s
      };
      return this.decodeGeometry(e, a).then(t).catch(o);
    }
    decodeGeometry(e, t) {
      const i = JSON.stringify(t);
      if (ld.has(e)) {
        const l = ld.get(e);
        if (l.key === i) return l.promise;
        if (e.byteLength === 0) throw new Error("THREE.DRACOLoader: Unable to re-decode a buffer with different settings. Buffer has already been transferred.");
      }
      let r;
      const s = this.workerNextTaskID++, o = e.byteLength, a = this._getWorker(s, o).then((l) => (r = l, new Promise((c, u) => {
        r._callbacks[s] = {
          resolve: c,
          reject: u
        }, r.postMessage({
          type: "decode",
          id: s,
          taskConfig: t,
          buffer: e
        }, [
          e
        ]);
      }))).then((l) => this._createGeometry(l.geometry));
      return a.catch(() => true).then(() => {
        r && s && this._releaseTask(r, s);
      }), ld.set(e, {
        key: i,
        promise: a
      }), a;
    }
    _createGeometry(e) {
      const t = new i2();
      e.index && t.setIndex(new nn(e.index.array, 1));
      for (let i = 0; i < e.attributes.length; i++) {
        const r = e.attributes[i], s = r.name, o = r.array, a = r.itemSize, l = new nn(o, a);
        s === "color" && (this._assignVertexColorSpace(l, r.vertexColorSpace), l.normalized = !(o instanceof Float32Array)), t.setAttribute(s, l);
      }
      return t;
    }
    _assignVertexColorSpace(e, t) {
      if (t !== Wt) return;
      const i = new xe();
      for (let r = 0, s = e.count; r < s; r++) i.fromBufferAttribute(e, r), ze.colorSpaceToWorking(i, Wt), e.setXYZ(r, i.r, i.g, i.b);
    }
    _loadLibrary(e, t) {
      const i = new rl(this.manager);
      return i.setPath(this.decoderPath), i.setResponseType(t), i.setWithCredentials(this.withCredentials), new Promise((r, s) => {
        i.load(e, r, void 0, s);
      });
    }
    preload() {
      return this._initDecoder(), this;
    }
    _initDecoder() {
      if (this.decoderPending) return this.decoderPending;
      const e = typeof WebAssembly != "object" || this.decoderConfig.type === "js", t = [];
      return e ? t.push(this._loadLibrary("draco_decoder.js", "text")) : (t.push(this._loadLibrary("draco_wasm_wrapper.js", "text")), t.push(this._loadLibrary("draco_decoder.wasm", "arraybuffer"))), this.decoderPending = Promise.all(t).then((i) => {
        const r = i[0];
        e || (this.decoderConfig.wasmBinary = i[1]);
        const s = lB.toString(), o = [
          "/* draco decoder */",
          r,
          "",
          "/* worker */",
          s.substring(s.indexOf("{") + 1, s.lastIndexOf("}"))
        ].join(`
`);
        this.workerSourceURL = URL.createObjectURL(new Blob([
          o
        ]));
      }), this.decoderPending;
    }
    _getWorker(e, t) {
      return this._initDecoder().then(() => {
        if (this.workerPool.length < this.workerLimit) {
          const r = new Worker(this.workerSourceURL);
          r._callbacks = {}, r._taskCosts = {}, r._taskLoad = 0, r.postMessage({
            type: "init",
            decoderConfig: this.decoderConfig
          }), r.onmessage = function(s) {
            const o = s.data;
            switch (o.type) {
              case "decode":
                r._callbacks[o.id].resolve(o);
                break;
              case "error":
                r._callbacks[o.id].reject(o);
                break;
              default:
                console.error('THREE.DRACOLoader: Unexpected message, "' + o.type + '"');
            }
          }, this.workerPool.push(r);
        } else this.workerPool.sort(function(r, s) {
          return r._taskLoad > s._taskLoad ? -1 : 1;
        });
        const i = this.workerPool[this.workerPool.length - 1];
        return i._taskCosts[e] = t, i._taskLoad += t, i;
      });
    }
    _releaseTask(e, t) {
      e._taskLoad -= e._taskCosts[t], delete e._callbacks[t], delete e._taskCosts[t];
    }
    debug() {
      console.log("Task load: ", this.workerPool.map((e) => e._taskLoad));
    }
    dispose() {
      for (let e = 0; e < this.workerPool.length; ++e) this.workerPool[e].terminate();
      return this.workerPool.length = 0, this.workerSourceURL !== "" && URL.revokeObjectURL(this.workerSourceURL), this;
    }
  }
  function lB() {
    let n, e;
    onmessage = function(o) {
      const a = o.data;
      switch (a.type) {
        case "init":
          n = a.decoderConfig, e = new Promise(function(u) {
            n.onModuleLoaded = function(h) {
              u({
                draco: h
              });
            }, DracoDecoderModule(n);
          });
          break;
        case "decode":
          const l = a.buffer, c = a.taskConfig;
          e.then((u) => {
            const h = u.draco, d = new h.Decoder();
            try {
              const f = t(h, d, new Int8Array(l), c), m = f.attributes.map((_) => _.array.buffer);
              f.index && m.push(f.index.array.buffer), self.postMessage({
                type: "decode",
                id: a.id,
                geometry: f
              }, m);
            } catch (f) {
              console.error(f), self.postMessage({
                type: "error",
                id: a.id,
                error: f.message
              });
            } finally {
              h.destroy(d);
            }
          });
          break;
      }
    };
    function t(o, a, l, c) {
      const u = c.attributeIDs, h = c.attributeTypes;
      let d, f;
      const m = a.GetEncodedGeometryType(l);
      if (m === o.TRIANGULAR_MESH) d = new o.Mesh(), f = a.DecodeArrayToMesh(l, l.byteLength, d);
      else if (m === o.POINT_CLOUD) d = new o.PointCloud(), f = a.DecodeArrayToPointCloud(l, l.byteLength, d);
      else throw new Error("THREE.DRACOLoader: Unexpected geometry type.");
      if (!f.ok() || d.ptr === 0) throw new Error("THREE.DRACOLoader: Decoding failed: " + f.error_msg());
      const _ = {
        index: null,
        attributes: []
      };
      for (const p in u) {
        const g = self[h[p]];
        let y, b;
        if (c.useUniqueIDs) b = u[p], y = a.GetAttributeByUniqueId(d, b);
        else {
          if (b = a.GetAttributeId(d, o[u[p]]), b === -1) continue;
          y = a.GetAttribute(d, b);
        }
        const v = r(o, a, d, p, g, y);
        p === "color" && (v.vertexColorSpace = c.vertexColorSpace), _.attributes.push(v);
      }
      return m === o.TRIANGULAR_MESH && (_.index = i(o, a, d)), o.destroy(d), _;
    }
    function i(o, a, l) {
      const u = l.num_faces() * 3, h = u * 4, d = o._malloc(h);
      a.GetTrianglesUInt32Array(l, h, d);
      const f = new Uint32Array(o.HEAPF32.buffer, d, u).slice();
      return o._free(d), {
        array: f,
        itemSize: 1
      };
    }
    function r(o, a, l, c, u, h) {
      const d = h.num_components(), m = l.num_points() * d, _ = m * u.BYTES_PER_ELEMENT, p = s(o, u), g = o._malloc(_);
      a.GetAttributeDataArrayForAllPoints(l, h, p, _, g);
      const y = new u(o.HEAPF32.buffer, g, m).slice();
      return o._free(g), {
        name: c,
        array: y,
        itemSize: d
      };
    }
    function s(o, a) {
      switch (a) {
        case Float32Array:
          return o.DT_FLOAT32;
        case Int8Array:
          return o.DT_INT8;
        case Int16Array:
          return o.DT_INT16;
        case Int32Array:
          return o.DT_INT32;
        case Uint8Array:
          return o.DT_UINT8;
        case Uint16Array:
          return o.DT_UINT16;
        case Uint32Array:
          return o.DT_UINT32;
      }
    }
  }
  var cB = function() {
    var n = "b9H79Tebbbe8Fv9Gbb9Gvuuuuueu9Giuuub9Geueu9Giuuueuikqbeeedddillviebeoweuec:q;iekr;leDo9TW9T9VV95dbH9F9F939H79T9F9J9H229F9Jt9VV7bb8A9TW79O9V9Wt9F9KW9J9V9KW9wWVtW949c919M9MWVbeY9TW79O9V9Wt9F9KW9J9V9KW69U9KW949c919M9MWVbdE9TW79O9V9Wt9F9KW9J9V9KW69U9KW949tWG91W9U9JWbiL9TW79O9V9Wt9F9KW9J9V9KWS9P2tWV9p9JtblK9TW79O9V9Wt9F9KW9J9V9KWS9P2tWV9r919HtbvL9TW79O9V9Wt9F9KW9J9V9KWS9P2tWVT949Wbol79IV9Rbrq:P8Yqdbk;3sezu8Jjjjjbcj;eb9Rgv8Kjjjjbc9:hodnadcefal0mbcuhoaiRbbc:Ge9hmbavaialfgrad9Radz1jjjbhwcj;abad9UhoaicefhldnadTmbaoc;WFbGgocjdaocjd6EhDcbhqinaqae9pmeaDaeaq9RaqaDfae6Egkcsfgocl4cifcd4hxdndndndnaoc9WGgmTmbcbhPcehsawcjdfhzalhHinaraH9Rax6midnaraHaxfgl9RcK6mbczhoinawcj;cbfaogifgoc9WfhOdndndndndnaHaic9WfgAco4fRbbaAci4coG4ciGPlbedibkaO9cb83ibaOcwf9cb83ibxikaOalRblalRbbgAco4gCaCciSgCE86bbaocGfalclfaCfgORbbaAcl4ciGgCaCciSgCE86bbaocVfaOaCfgORbbaAcd4ciGgCaCciSgCE86bbaoc7faOaCfgORbbaAciGgAaAciSgAE86bbaoctfaOaAfgARbbalRbegOco4gCaCciSgCE86bbaoc91faAaCfgARbbaOcl4ciGgCaCciSgCE86bbaoc4faAaCfgARbbaOcd4ciGgCaCciSgCE86bbaoc93faAaCfgARbbaOciGgOaOciSgOE86bbaoc94faAaOfgARbbalRbdgOco4gCaCciSgCE86bbaoc95faAaCfgARbbaOcl4ciGgCaCciSgCE86bbaoc96faAaCfgARbbaOcd4ciGgCaCciSgCE86bbaoc97faAaCfgARbbaOciGgOaOciSgOE86bbaoc98faAaOfgORbbalRbiglco4gAaAciSgAE86bbaoc99faOaAfgORbbalcl4ciGgAaAciSgAE86bbaoc9:faOaAfgORbbalcd4ciGgAaAciSgAE86bbaocufaOaAfgoRbbalciGglalciSglE86bbaoalfhlxdkaOalRbwalRbbgAcl4gCaCcsSgCE86bbaocGfalcwfaCfgORbbaAcsGgAaAcsSgAE86bbaocVfaOaAfgORbbalRbegAcl4gCaCcsSgCE86bbaoc7faOaCfgORbbaAcsGgAaAcsSgAE86bbaoctfaOaAfgORbbalRbdgAcl4gCaCcsSgCE86bbaoc91faOaCfgORbbaAcsGgAaAcsSgAE86bbaoc4faOaAfgORbbalRbigAcl4gCaCcsSgCE86bbaoc93faOaCfgORbbaAcsGgAaAcsSgAE86bbaoc94faOaAfgORbbalRblgAcl4gCaCcsSgCE86bbaoc95faOaCfgORbbaAcsGgAaAcsSgAE86bbaoc96faOaAfgORbbalRbvgAcl4gCaCcsSgCE86bbaoc97faOaCfgORbbaAcsGgAaAcsSgAE86bbaoc98faOaAfgORbbalRbogAcl4gCaCcsSgCE86bbaoc99faOaCfgORbbaAcsGgAaAcsSgAE86bbaoc9:faOaAfgORbbalRbrglcl4gAaAcsSgAE86bbaocufaOaAfgoRbbalcsGglalcsSglE86bbaoalfhlxekaOal8Pbb83bbaOcwfalcwf8Pbb83bbalczfhlkdnaiam9pmbaiczfhoaral9RcL0mekkaiam6mialTmidnakTmbawaPfRbbhOcbhoazhiinaiawcj;cbfaofRbbgAce4cbaAceG9R7aOfgO86bbaiadfhiaocefgoak9hmbkkazcefhzaPcefgPad6hsalhHaPad9hmexvkkcbhlasceGmdxikalaxad2fhCdnakTmbcbhHcehsawcjdfhminaral9Rax6mialTmdalaxfhlawaHfRbbhOcbhoamhiinaiawcj;cbfaofRbbgAce4cbaAceG9R7aOfgO86bbaiadfhiaocefgoak9hmbkamcefhmaHcefgHad6hsaHad9hmbkaChlxikcbhocehsinaral9Rax6mdalTmealaxfhlaocefgoad6hsadao9hmbkaChlxdkcbhlasceGTmekc9:hoxikabaqad2fawcjdfakad2z1jjjb8Aawawcjdfakcufad2fadz1jjjb8Aakaqfhqalmbkc9:hoxekcbc99aral9Radcaadca0ESEhokavcj;ebf8Kjjjjbaok;yzeHu8Jjjjjbc;ae9Rgv8Kjjjjbc9:hodnaeci9UgrcHfal0mbcuhoaiRbbgwc;WeGc;Ge9hmbawcsGgDce0mbavc;abfcFecjez:jjjjb8AavcUf9cu83ibavc8Wf9cu83ibavcyf9cu83ibavcaf9cu83ibavcKf9cu83ibavczf9cu83ibav9cu83iwav9cu83ibaialfc9WfhqaicefgwarfhodnaeTmbcmcsaDceSEhkcbhxcbhmcbhDcbhicbhlindnaoaq9nmbc9:hoxikdndnawRbbgrc;Ve0mbavc;abfalarcl4cu7fcsGcitfgPydlhsaPydbhzdnarcsGgPak9pmbavaiarcu7fcsGcdtfydbaxaPEhraPThPdndnadcd9hmbabaDcetfgHaz87ebaHcdfas87ebaHclfar87ebxekabaDcdtfgHazBdbaHclfasBdbaHcwfarBdbkaxaPfhxavc;abfalcitfgHarBdbaHasBdlavaicdtfarBdbavc;abfalcefcsGglcitfgHazBdbaHarBdlaiaPfhialcefhlxdkdndnaPcsSmbamaPfaPc987fcefhmxekaocefhrao8SbbgPcFeGhHdndnaPcu9mmbarhoxekaocvfhoaHcFbGhHcrhPdninar8SbbgOcFbGaPtaHVhHaOcu9kmearcefhraPcrfgPc8J9hmbxdkkarcefhokaHce4cbaHceG9R7amfhmkdndnadcd9hmbabaDcetfgraz87ebarcdfas87ebarclfam87ebxekabaDcdtfgrazBdbarclfasBdbarcwfamBdbkavc;abfalcitfgramBdbarasBdlavaicdtfamBdbavc;abfalcefcsGglcitfgrazBdbaramBdlaicefhialcefhlxekdnarcpe0mbaxcefgOavaiaqarcsGfRbbgPcl49RcsGcdtfydbaPcz6gHEhravaiaP9RcsGcdtfydbaOaHfgsaPcsGgOEhPaOThOdndnadcd9hmbabaDcetfgzax87ebazcdfar87ebazclfaP87ebxekabaDcdtfgzaxBdbazclfarBdbazcwfaPBdbkavaicdtfaxBdbavc;abfalcitfgzarBdbazaxBdlavaicefgicsGcdtfarBdbavc;abfalcefcsGcitfgzaPBdbazarBdlavaiaHfcsGgicdtfaPBdbavc;abfalcdfcsGglcitfgraxBdbaraPBdlalcefhlaiaOfhiasaOfhxxekaxcbaoRbbgzEgAarc;:eSgrfhsazcsGhCazcl4hXdndnazcs0mbascefhOxekashOavaiaX9RcsGcdtfydbhskdndnaCmbaOcefhxxekaOhxavaiaz9RcsGcdtfydbhOkdndnarTmbaocefhrxekaocdfhrao8SbegHcFeGhPdnaHcu9kmbaocofhAaPcFbGhPcrhodninar8SbbgHcFbGaotaPVhPaHcu9kmearcefhraocrfgoc8J9hmbkaAhrxekarcefhrkaPce4cbaPceG9R7amfgmhAkdndnaXcsSmbarhPxekarcefhPar8SbbgocFeGhHdnaocu9kmbarcvfhsaHcFbGhHcrhodninaP8SbbgrcFbGaotaHVhHarcu9kmeaPcefhPaocrfgoc8J9hmbkashPxekaPcefhPkaHce4cbaHceG9R7amfgmhskdndnaCcsSmbaPhoxekaPcefhoaP8SbbgrcFeGhHdnarcu9kmbaPcvfhOaHcFbGhHcrhrdninao8SbbgPcFbGartaHVhHaPcu9kmeaocefhoarcrfgrc8J9hmbkaOhoxekaocefhokaHce4cbaHceG9R7amfgmhOkdndnadcd9hmbabaDcetfgraA87ebarcdfas87ebarclfaO87ebxekabaDcdtfgraABdbarclfasBdbarcwfaOBdbkavc;abfalcitfgrasBdbaraABdlavaicdtfaABdbavc;abfalcefcsGcitfgraOBdbarasBdlavaicefgicsGcdtfasBdbavc;abfalcdfcsGcitfgraABdbaraOBdlavaiazcz6aXcsSVfgicsGcdtfaOBdbaiaCTaCcsSVfhialcifhlkawcefhwalcsGhlaicsGhiaDcifgDae6mbkkcbc99aoaqSEhokavc;aef8Kjjjjbaok:llevu8Jjjjjbcz9Rhvc9:hodnaecvfal0mbcuhoaiRbbc;:eGc;qe9hmbav9cb83iwaicefhraialfc98fhwdnaeTmbdnadcdSmbcbhDindnaraw6mbc9:skarcefhoar8SbbglcFeGhidndnalcu9mmbaohrxekarcvfhraicFbGhicrhldninao8SbbgdcFbGaltaiVhiadcu9kmeaocefhoalcrfglc8J9hmbxdkkaocefhrkabaDcdtfaicd4cbaice4ceG9R7avcwfaiceGcdtVgoydbfglBdbaoalBdbaDcefgDae9hmbxdkkcbhDindnaraw6mbc9:skarcefhoar8SbbglcFeGhidndnalcu9mmbaohrxekarcvfhraicFbGhicrhldninao8SbbgdcFbGaltaiVhiadcu9kmeaocefhoalcrfglc8J9hmbxdkkaocefhrkabaDcetfaicd4cbaice4ceG9R7avcwfaiceGcdtVgoydbfgl87ebaoalBdbaDcefgDae9hmbkkcbc99arawSEhokaok:Lvoeue99dud99eud99dndnadcl9hmbaeTmeindndnabcdfgd8Sbb:Yab8Sbbgi:Ygl:l:tabcefgv8Sbbgo:Ygr:l:tgwJbb;:9cawawNJbbbbawawJbbbb9GgDEgq:mgkaqaicb9iEalMgwawNakaqaocb9iEarMgqaqNMM:r:vglNJbbbZJbbb:;aDEMgr:lJbbb9p9DTmbar:Ohixekcjjjj94hikadai86bbdndnaqalNJbbbZJbbb:;aqJbbbb9GEMgq:lJbbb9p9DTmbaq:Ohdxekcjjjj94hdkavad86bbdndnawalNJbbbZJbbb:;awJbbbb9GEMgw:lJbbb9p9DTmbaw:Ohdxekcjjjj94hdkabad86bbabclfhbaecufgembxdkkaeTmbindndnabclfgd8Ueb:Yab8Uebgi:Ygl:l:tabcdfgv8Uebgo:Ygr:l:tgwJb;:FSawawNJbbbbawawJbbbb9GgDEgq:mgkaqaicb9iEalMgwawNakaqaocb9iEarMgqaqNMM:r:vglNJbbbZJbbb:;aDEMgr:lJbbb9p9DTmbar:Ohixekcjjjj94hikadai87ebdndnaqalNJbbbZJbbb:;aqJbbbb9GEMgq:lJbbb9p9DTmbaq:Ohdxekcjjjj94hdkavad87ebdndnawalNJbbbZJbbb:;awJbbbb9GEMgw:lJbbb9p9DTmbaw:Ohdxekcjjjj94hdkabad87ebabcwfhbaecufgembkkk;siliui99iue99dnaeTmbcbhiabhlindndnJ;Zl81Zalcof8UebgvciV:Y:vgoal8Ueb:YNgrJb;:FSNJbbbZJbbb:;arJbbbb9GEMgw:lJbbb9p9DTmbaw:OhDxekcjjjj94hDkalclf8Uebhqalcdf8UebhkabavcefciGaiVcetfaD87ebdndnaoak:YNgwJb;:FSNJbbbZJbbb:;awJbbbb9GEMgx:lJbbb9p9DTmbax:Ohkxekcjjjj94hkkabavcdfciGaiVcetfak87ebdndnaoaq:YNgoJb;:FSNJbbbZJbbb:;aoJbbbb9GEMgx:lJbbb9p9DTmbax:Ohqxekcjjjj94hqkabavcufciGaiVcetfaq87ebdndnJbbjZararN:tawawN:taoaoN:tgrJbbbbarJbbbb9GE:rJb;:FSNJbbbZMgr:lJbbb9p9DTmbar:Ohqxekcjjjj94hqkabavciGaiVcetfaq87ebalcwfhlaiclfhiaecufgembkkk9mbdnadcd4ae2geTmbinababydbgdcwtcw91:Yadce91cjjj;8ifcjjj98G::NUdbabclfhbaecufgembkkk9teiucbcbydj1jjbgeabcifc98GfgbBdj1jjbdndnabZbcztgd9nmbcuhiabad9RcFFifcz4nbcuSmekaehikaik;LeeeudndnaeabVciGTmbabhixekdndnadcz9pmbabhixekabhiinaiaeydbBdbaiclfaeclfydbBdbaicwfaecwfydbBdbaicxfaecxfydbBdbaiczfhiaeczfheadc9Wfgdcs0mbkkadcl6mbinaiaeydbBdbaeclfheaiclfhiadc98fgdci0mbkkdnadTmbinaiaeRbb86bbaicefhiaecefheadcufgdmbkkabk;aeedudndnabciGTmbabhixekaecFeGc:b:c:ew2hldndnadcz9pmbabhixekabhiinaialBdbaicxfalBdbaicwfalBdbaiclfalBdbaiczfhiadc9Wfgdcs0mbkkadcl6mbinaialBdbaiclfhiadc98fgdci0mbkkdnadTmbinaiae86bbaicefhiadcufgdmbkkabkkkebcjwklz9Kbb", e = "b9H79TebbbeKl9Gbb9Gvuuuuueu9Giuuub9Geueuikqbbebeedddilve9Weeeviebeoweuec:q;Aekr;leDo9TW9T9VV95dbH9F9F939H79T9F9J9H229F9Jt9VV7bb8A9TW79O9V9Wt9F9KW9J9V9KW9wWVtW949c919M9MWVbdY9TW79O9V9Wt9F9KW9J9V9KW69U9KW949c919M9MWVblE9TW79O9V9Wt9F9KW9J9V9KW69U9KW949tWG91W9U9JWbvL9TW79O9V9Wt9F9KW9J9V9KWS9P2tWV9p9JtboK9TW79O9V9Wt9F9KW9J9V9KWS9P2tWV9r919HtbrL9TW79O9V9Wt9F9KW9J9V9KWS9P2tWVT949Wbwl79IV9RbDq;t9tqlbzik9:evu8Jjjjjbcz9Rhbcbheincbhdcbhiinabcwfadfaicjuaead4ceGglE86bbaialfhiadcefgdcw9hmbkaec:q:yjjbfai86bbaecitc:q1jjbfab8Piw83ibaecefgecjd9hmbkk;h8JlHud97euo978Jjjjjbcj;kb9Rgv8Kjjjjbc9:hodnadcefal0mbcuhoaiRbbc:Ge9hmbavaialfgrad9Rad;8qbbcj;abad9UhoaicefhldnadTmbaoc;WFbGgocjdaocjd6EhwcbhDinaDae9pmeawaeaD9RaDawfae6Egqcsfgoc9WGgkci2hxakcethmaocl4cifcd4hPabaDad2fhscbhzdnincehHalhOcbhAdninaraO9RaP6miavcj;cbfaAak2fhCaOaPfhlcbhidnakc;ab6mbaral9Rc;Gb6mbcbhoinaCaofhidndndndndnaOaoco4fRbbgXciGPlbedibkaipxbbbbbbbbbbbbbbbbpklbxikaialpbblalpbbbgQclp:meaQpmbzeHdOiAlCvXoQrLgQcdp:meaQpmbzeHdOiAlCvXoQrLpxiiiiiiiiiiiiiiiip9ogLpxiiiiiiiiiiiiiiiip8JgQp5b9cjF;8;4;W;G;ab9:9cU1:NgKcitc:q1jjbfpbibaKc:q:yjjbfpbbbgYaYpmbbbbbbbbbbbbbbbbaQp5e9cjF;8;4;W;G;ab9:9cU1:NgKcitc:q1jjbfpbibp9UpmbedilvorzHOACXQLpPaLaQp9spklbalclfaYpQbfaKc:q:yjjbfRbbfhlxdkaialpbbwalpbbbgQclp:meaQpmbzeHdOiAlCvXoQrLpxssssssssssssssssp9ogLpxssssssssssssssssp8JgQp5b9cjF;8;4;W;G;ab9:9cU1:NgKcitc:q1jjbfpbibaKc:q:yjjbfpbbbgYaYpmbbbbbbbbbbbbbbbbaQp5e9cjF;8;4;W;G;ab9:9cU1:NgKcitc:q1jjbfpbibp9UpmbedilvorzHOACXQLpPaLaQp9spklbalcwfaYpQbfaKc:q:yjjbfRbbfhlxekaialpbbbpklbalczfhlkdndndndndnaXcd4ciGPlbedibkaipxbbbbbbbbbbbbbbbbpklzxikaialpbblalpbbbgQclp:meaQpmbzeHdOiAlCvXoQrLgQcdp:meaQpmbzeHdOiAlCvXoQrLpxiiiiiiiiiiiiiiiip9ogLpxiiiiiiiiiiiiiiiip8JgQp5b9cjF;8;4;W;G;ab9:9cU1:NgKcitc:q1jjbfpbibaKc:q:yjjbfpbbbgYaYpmbbbbbbbbbbbbbbbbaQp5e9cjF;8;4;W;G;ab9:9cU1:NgKcitc:q1jjbfpbibp9UpmbedilvorzHOACXQLpPaLaQp9spklzalclfaYpQbfaKc:q:yjjbfRbbfhlxdkaialpbbwalpbbbgQclp:meaQpmbzeHdOiAlCvXoQrLpxssssssssssssssssp9ogLpxssssssssssssssssp8JgQp5b9cjF;8;4;W;G;ab9:9cU1:NgKcitc:q1jjbfpbibaKc:q:yjjbfpbbbgYaYpmbbbbbbbbbbbbbbbbaQp5e9cjF;8;4;W;G;ab9:9cU1:NgKcitc:q1jjbfpbibp9UpmbedilvorzHOACXQLpPaLaQp9spklzalcwfaYpQbfaKc:q:yjjbfRbbfhlxekaialpbbbpklzalczfhlkdndndndndnaXcl4ciGPlbedibkaipxbbbbbbbbbbbbbbbbpklaxikaialpbblalpbbbgQclp:meaQpmbzeHdOiAlCvXoQrLgQcdp:meaQpmbzeHdOiAlCvXoQrLpxiiiiiiiiiiiiiiiip9ogLpxiiiiiiiiiiiiiiiip8JgQp5b9cjF;8;4;W;G;ab9:9cU1:NgKcitc:q1jjbfpbibaKc:q:yjjbfpbbbgYaYpmbbbbbbbbbbbbbbbbaQp5e9cjF;8;4;W;G;ab9:9cU1:NgKcitc:q1jjbfpbibp9UpmbedilvorzHOACXQLpPaLaQp9spklaalclfaYpQbfaKc:q:yjjbfRbbfhlxdkaialpbbwalpbbbgQclp:meaQpmbzeHdOiAlCvXoQrLpxssssssssssssssssp9ogLpxssssssssssssssssp8JgQp5b9cjF;8;4;W;G;ab9:9cU1:NgKcitc:q1jjbfpbibaKc:q:yjjbfpbbbgYaYpmbbbbbbbbbbbbbbbbaQp5e9cjF;8;4;W;G;ab9:9cU1:NgKcitc:q1jjbfpbibp9UpmbedilvorzHOACXQLpPaLaQp9spklaalcwfaYpQbfaKc:q:yjjbfRbbfhlxekaialpbbbpklaalczfhlkdndndndndnaXco4Plbedibkaipxbbbbbbbbbbbbbbbbpkl8WxikaialpbblalpbbbgQclp:meaQpmbzeHdOiAlCvXoQrLgQcdp:meaQpmbzeHdOiAlCvXoQrLpxiiiiiiiiiiiiiiiip9ogLpxiiiiiiiiiiiiiiiip8JgQp5b9cjF;8;4;W;G;ab9:9cU1:NgXcitc:q1jjbfpbibaXc:q:yjjbfpbbbgYaYpmbbbbbbbbbbbbbbbbaQp5e9cjF;8;4;W;G;ab9:9cU1:NgXcitc:q1jjbfpbibp9UpmbedilvorzHOACXQLpPaLaQp9spkl8WalclfaYpQbfaXc:q:yjjbfRbbfhlxdkaialpbbwalpbbbgQclp:meaQpmbzeHdOiAlCvXoQrLpxssssssssssssssssp9ogLpxssssssssssssssssp8JgQp5b9cjF;8;4;W;G;ab9:9cU1:NgXcitc:q1jjbfpbibaXc:q:yjjbfpbbbgYaYpmbbbbbbbbbbbbbbbbaQp5e9cjF;8;4;W;G;ab9:9cU1:NgXcitc:q1jjbfpbibp9UpmbedilvorzHOACXQLpPaLaQp9spkl8WalcwfaYpQbfaXc:q:yjjbfRbbfhlxekaialpbbbpkl8Walczfhlkaoc;abfhiaocjefak0meaihoaral9Rc;Fb0mbkkdndnaiak9pmbaici4hoinaral9RcK6mdaCaifhXdndndndndnaOaico4fRbbaocoG4ciGPlbedibkaXpxbbbbbbbbbbbbbbbbpklbxikaXalpbblalpbbbgQclp:meaQpmbzeHdOiAlCvXoQrLgQcdp:meaQpmbzeHdOiAlCvXoQrLpxiiiiiiiiiiiiiiiip9ogLpxiiiiiiiiiiiiiiiip8JgQp5b9cjF;8;4;W;G;ab9:9cU1:NgKcitc:q1jjbfpbibaKc:q:yjjbfpbbbgYaYpmbbbbbbbbbbbbbbbbaQp5e9cjF;8;4;W;G;ab9:9cU1:NgKcitc:q1jjbfpbibp9UpmbedilvorzHOACXQLpPaLaQp9spklbalclfaYpQbfaKc:q:yjjbfRbbfhlxdkaXalpbbwalpbbbgQclp:meaQpmbzeHdOiAlCvXoQrLpxssssssssssssssssp9ogLpxssssssssssssssssp8JgQp5b9cjF;8;4;W;G;ab9:9cU1:NgKcitc:q1jjbfpbibaKc:q:yjjbfpbbbgYaYpmbbbbbbbbbbbbbbbbaQp5e9cjF;8;4;W;G;ab9:9cU1:NgKcitc:q1jjbfpbibp9UpmbedilvorzHOACXQLpPaLaQp9spklbalcwfaYpQbfaKc:q:yjjbfRbbfhlxekaXalpbbbpklbalczfhlkaocdfhoaiczfgiak6mbkkalTmbaAci6hHalhOaAcefgohAaoclSmdxekkcbhlaHceGmdkdnakTmbavcjdfazfhiavazfpbdbhYcbhXinaiavcj;cbfaXfgopblbgLcep9TaLpxeeeeeeeeeeeeeeeegQp9op9Hp9rgLaoakfpblbg8Acep9Ta8AaQp9op9Hp9rg8ApmbzeHdOiAlCvXoQrLgEaoamfpblbg3cep9Ta3aQp9op9Hp9rg3aoaxfpblbg5cep9Ta5aQp9op9Hp9rg5pmbzeHdOiAlCvXoQrLg8EpmbezHdiOAlvCXorQLgQaQpmbedibedibedibediaYp9UgYp9AdbbaiadfgoaYaQaQpmlvorlvorlvorlvorp9UgYp9AdbbaoadfgoaYaQaQpmwDqkwDqkwDqkwDqkp9UgYp9AdbbaoadfgoaYaQaQpmxmPsxmPsxmPsxmPsp9UgYp9AdbbaoadfgoaYaEa8EpmwDKYqk8AExm35Ps8E8FgQaQpmbedibedibedibedip9UgYp9AdbbaoadfgoaYaQaQpmlvorlvorlvorlvorp9UgYp9AdbbaoadfgoaYaQaQpmwDqkwDqkwDqkwDqkp9UgYp9AdbbaoadfgoaYaQaQpmxmPsxmPsxmPsxmPsp9UgYp9AdbbaoadfgoaYaLa8ApmwKDYq8AkEx3m5P8Es8FgLa3a5pmwKDYq8AkEx3m5P8Es8Fg8ApmbezHdiOAlvCXorQLgQaQpmbedibedibedibedip9UgYp9AdbbaoadfgoaYaQaQpmlvorlvorlvorlvorp9UgYp9AdbbaoadfgoaYaQaQpmwDqkwDqkwDqkwDqkp9UgYp9AdbbaoadfgoaYaQaQpmxmPsxmPsxmPsxmPsp9UgYp9AdbbaoadfgoaYaLa8ApmwDKYqk8AExm35Ps8E8FgQaQpmbedibedibedibedip9UgYp9AdbbaoadfgoaYaQaQpmlvorlvorlvorlvorp9UgYp9AdbbaoadfgoaYaQaQpmwDqkwDqkwDqkwDqkp9UgYp9AdbbaoadfgoaYaQaQpmxmPsxmPsxmPsxmPsp9UgYp9AdbbaoadfhiaXczfgXak6mbkkazclfgzad6mbkasavcjdfaqad2;8qbbavavcjdfaqcufad2fad;8qbbaqaDfhDc9:hoalmexikkc9:hoxekcbc99aral9Radcaadca0ESEhokavcj;kbf8Kjjjjbaokwbz:bjjjbk;uzeHu8Jjjjjbc;ae9Rgv8Kjjjjbc9:hodnaeci9UgrcHfal0mbcuhoaiRbbgwc;WeGc;Ge9hmbawcsGgDce0mbavc;abfcFecje;8kbavcUf9cu83ibavc8Wf9cu83ibavcyf9cu83ibavcaf9cu83ibavcKf9cu83ibavczf9cu83ibav9cu83iwav9cu83ibaialfc9WfhqaicefgwarfhodnaeTmbcmcsaDceSEhkcbhxcbhmcbhDcbhicbhlindnaoaq9nmbc9:hoxikdndnawRbbgrc;Ve0mbavc;abfalarcl4cu7fcsGcitfgPydlhsaPydbhzdnarcsGgPak9pmbavaiarcu7fcsGcdtfydbaxaPEhraPThPdndnadcd9hmbabaDcetfgHaz87ebaHcdfas87ebaHclfar87ebxekabaDcdtfgHazBdbaHclfasBdbaHcwfarBdbkaxaPfhxavc;abfalcitfgHarBdbaHasBdlavaicdtfarBdbavc;abfalcefcsGglcitfgHazBdbaHarBdlaiaPfhialcefhlxdkdndnaPcsSmbamaPfaPc987fcefhmxekaocefhrao8SbbgPcFeGhHdndnaPcu9mmbarhoxekaocvfhoaHcFbGhHcrhPdninar8SbbgOcFbGaPtaHVhHaOcu9kmearcefhraPcrfgPc8J9hmbxdkkarcefhokaHce4cbaHceG9R7amfhmkdndnadcd9hmbabaDcetfgraz87ebarcdfas87ebarclfam87ebxekabaDcdtfgrazBdbarclfasBdbarcwfamBdbkavc;abfalcitfgramBdbarasBdlavaicdtfamBdbavc;abfalcefcsGglcitfgrazBdbaramBdlaicefhialcefhlxekdnarcpe0mbaxcefgOavaiaqarcsGfRbbgPcl49RcsGcdtfydbaPcz6gHEhravaiaP9RcsGcdtfydbaOaHfgsaPcsGgOEhPaOThOdndnadcd9hmbabaDcetfgzax87ebazcdfar87ebazclfaP87ebxekabaDcdtfgzaxBdbazclfarBdbazcwfaPBdbkavaicdtfaxBdbavc;abfalcitfgzarBdbazaxBdlavaicefgicsGcdtfarBdbavc;abfalcefcsGcitfgzaPBdbazarBdlavaiaHfcsGgicdtfaPBdbavc;abfalcdfcsGglcitfgraxBdbaraPBdlalcefhlaiaOfhiasaOfhxxekaxcbaoRbbgzEgAarc;:eSgrfhsazcsGhCazcl4hXdndnazcs0mbascefhOxekashOavaiaX9RcsGcdtfydbhskdndnaCmbaOcefhxxekaOhxavaiaz9RcsGcdtfydbhOkdndnarTmbaocefhrxekaocdfhrao8SbegHcFeGhPdnaHcu9kmbaocofhAaPcFbGhPcrhodninar8SbbgHcFbGaotaPVhPaHcu9kmearcefhraocrfgoc8J9hmbkaAhrxekarcefhrkaPce4cbaPceG9R7amfgmhAkdndnaXcsSmbarhPxekarcefhPar8SbbgocFeGhHdnaocu9kmbarcvfhsaHcFbGhHcrhodninaP8SbbgrcFbGaotaHVhHarcu9kmeaPcefhPaocrfgoc8J9hmbkashPxekaPcefhPkaHce4cbaHceG9R7amfgmhskdndnaCcsSmbaPhoxekaPcefhoaP8SbbgrcFeGhHdnarcu9kmbaPcvfhOaHcFbGhHcrhrdninao8SbbgPcFbGartaHVhHaPcu9kmeaocefhoarcrfgrc8J9hmbkaOhoxekaocefhokaHce4cbaHceG9R7amfgmhOkdndnadcd9hmbabaDcetfgraA87ebarcdfas87ebarclfaO87ebxekabaDcdtfgraABdbarclfasBdbarcwfaOBdbkavc;abfalcitfgrasBdbaraABdlavaicdtfaABdbavc;abfalcefcsGcitfgraOBdbarasBdlavaicefgicsGcdtfasBdbavc;abfalcdfcsGcitfgraABdbaraOBdlavaiazcz6aXcsSVfgicsGcdtfaOBdbaiaCTaCcsSVfhialcifhlkawcefhwalcsGhlaicsGhiaDcifgDae6mbkkcbc99aoaqSEhokavc;aef8Kjjjjbaok:llevu8Jjjjjbcz9Rhvc9:hodnaecvfal0mbcuhoaiRbbc;:eGc;qe9hmbav9cb83iwaicefhraialfc98fhwdnaeTmbdnadcdSmbcbhDindnaraw6mbc9:skarcefhoar8SbbglcFeGhidndnalcu9mmbaohrxekarcvfhraicFbGhicrhldninao8SbbgdcFbGaltaiVhiadcu9kmeaocefhoalcrfglc8J9hmbxdkkaocefhrkabaDcdtfaicd4cbaice4ceG9R7avcwfaiceGcdtVgoydbfglBdbaoalBdbaDcefgDae9hmbxdkkcbhDindnaraw6mbc9:skarcefhoar8SbbglcFeGhidndnalcu9mmbaohrxekarcvfhraicFbGhicrhldninao8SbbgdcFbGaltaiVhiadcu9kmeaocefhoalcrfglc8J9hmbxdkkaocefhrkabaDcetfaicd4cbaice4ceG9R7avcwfaiceGcdtVgoydbfgl87ebaoalBdbaDcefgDae9hmbkkcbc99arawSEhokaok:EPliuo97eue978Jjjjjbca9Rhidndnadcl9hmbdnaec98GglTmbcbhvabhdinadadpbbbgocKp:RecKp:Sep;6egraocwp:RecKp:Sep;6earp;Geaoczp:RecKp:Sep;6egwp;Gep;Kep;LegDpxbbbbbbbbbbbbbbbbp:2egqarpxbbbjbbbjbbbjbbbjgkp9op9rp;Kegrpxbb;:9cbb;:9cbb;:9cbb;:9cararp;MeaDaDp;Meawaqawakp9op9rp;Kegrarp;Mep;Kep;Kep;Jep;Negwp;Mepxbbn0bbn0bbn0bbn0gqp;KepxFbbbFbbbFbbbFbbbp9oaopxbbbFbbbFbbbFbbbFp9op9qarawp;Meaqp;Kecwp:RepxbFbbbFbbbFbbbFbbp9op9qaDawp;Meaqp;Keczp:RepxbbFbbbFbbbFbbbFbp9op9qpkbbadczfhdavclfgval6mbkkalae9pmeaiaeciGgvcdtgdVcbczad9R;8kbaiabalcdtfglad;8qbbdnavTmbaiaipblbgocKp:RecKp:Sep;6egraocwp:RecKp:Sep;6earp;Geaoczp:RecKp:Sep;6egwp;Gep;Kep;LegDpxbbbbbbbbbbbbbbbbp:2egqarpxbbbjbbbjbbbjbbbjgkp9op9rp;Kegrpxbb;:9cbb;:9cbb;:9cbb;:9cararp;MeaDaDp;Meawaqawakp9op9rp;Kegrarp;Mep;Kep;Kep;Jep;Negwp;Mepxbbn0bbn0bbn0bbn0gqp;KepxFbbbFbbbFbbbFbbbp9oaopxbbbFbbbFbbbFbbbFp9op9qarawp;Meaqp;Kecwp:RepxbFbbbFbbbFbbbFbbp9op9qaDawp;Meaqp;Keczp:RepxbbFbbbFbbbFbbbFbp9op9qpklbkalaiad;8qbbskdnaec98GgxTmbcbhvabhdinadczfglalpbbbgopxbbbbbbFFbbbbbbFFgkp9oadpbbbgDaopmlvorxmPsCXQL358E8FpxFubbFubbFubbFubbp9op;6eaDaopmbediwDqkzHOAKY8AEgoczp:Sep;6egrp;Geaoczp:Reczp:Sep;6egwp;Gep;Kep;Legopxb;:FSb;:FSb;:FSb;:FSawaopxbbbbbbbbbbbbbbbbp:2egqawpxbbbjbbbjbbbjbbbjgmp9op9rp;Kegwawp;Meaoaop;Mearaqaramp9op9rp;Kegoaop;Mep;Kep;Kep;Jep;Negrp;Mepxbbn0bbn0bbn0bbn0gqp;Keczp:Reawarp;Meaqp;KepxFFbbFFbbFFbbFFbbp9op9qgwaoarp;Meaqp;KepxFFbbFFbbFFbbFFbbp9ogopmwDKYqk8AExm35Ps8E8Fp9qpkbbadaDakp9oawaopmbezHdiOAlvCXorQLp9qpkbbadcafhdavclfgvax6mbkkaxae9pmbaiaeciGgvcitgdfcbcaad9R;8kbaiabaxcitfglad;8qbbdnavTmbaiaipblzgopxbbbbbbFFbbbbbbFFgkp9oaipblbgDaopmlvorxmPsCXQL358E8FpxFubbFubbFubbFubbp9op;6eaDaopmbediwDqkzHOAKY8AEgoczp:Sep;6egrp;Geaoczp:Reczp:Sep;6egwp;Gep;Kep;Legopxb;:FSb;:FSb;:FSb;:FSawaopxbbbbbbbbbbbbbbbbp:2egqawpxbbbjbbbjbbbjbbbjgmp9op9rp;Kegwawp;Meaoaop;Mearaqaramp9op9rp;Kegoaop;Mep;Kep;Kep;Jep;Negrp;Mepxbbn0bbn0bbn0bbn0gqp;Keczp:Reawarp;Meaqp;KepxFFbbFFbbFFbbFFbbp9op9qgwaoarp;Meaqp;KepxFFbbFFbbFFbbFFbbp9ogopmwDKYqk8AExm35Ps8E8Fp9qpklzaiaDakp9oawaopmbezHdiOAlvCXorQLp9qpklbkalaiad;8qbbkk;4wllue97euv978Jjjjjbc8W9Rhidnaec98GglTmbcbhvabhoinaiaopbbbgraoczfgwpbbbgDpmlvorxmPsCXQL358E8Fgqczp:Segkclp:RepklbaopxbbjZbbjZbbjZbbjZpx;Zl81Z;Zl81Z;Zl81Z;Zl81Zakpxibbbibbbibbbibbbp9qp;6ep;NegkaraDpmbediwDqkzHOAKY8AEgrczp:Reczp:Sep;6ep;MegDaDp;Meakarczp:Sep;6ep;Megxaxp;Meakaqczp:Reczp:Sep;6ep;Megqaqp;Mep;Kep;Kep;Lepxbbbbbbbbbbbbbbbbp:4ep;Jepxb;:FSb;:FSb;:FSb;:FSgkp;Mepxbbn0bbn0bbn0bbn0grp;KepxFFbbFFbbFFbbFFbbgmp9oaxakp;Mearp;Keczp:Rep9qgxaqakp;Mearp;Keczp:ReaDakp;Mearp;Keamp9op9qgkpmbezHdiOAlvCXorQLgrp5baipblbpEb:T:j83ibaocwfarp5eaipblbpEe:T:j83ibawaxakpmwDKYqk8AExm35Ps8E8Fgkp5baipblbpEd:T:j83ibaocKfakp5eaipblbpEi:T:j83ibaocafhoavclfgval6mbkkdnalae9pmbaiaeciGgvcitgofcbcaao9R;8kbaiabalcitfgwao;8qbbdnavTmbaiaipblbgraipblzgDpmlvorxmPsCXQL358E8Fgqczp:Segkclp:RepklaaipxbbjZbbjZbbjZbbjZpx;Zl81Z;Zl81Z;Zl81Z;Zl81Zakpxibbbibbbibbbibbbp9qp;6ep;NegkaraDpmbediwDqkzHOAKY8AEgrczp:Reczp:Sep;6ep;MegDaDp;Meakarczp:Sep;6ep;Megxaxp;Meakaqczp:Reczp:Sep;6ep;Megqaqp;Mep;Kep;Kep;Lepxbbbbbbbbbbbbbbbbp:4ep;Jepxb;:FSb;:FSb;:FSb;:FSgkp;Mepxbbn0bbn0bbn0bbn0grp;KepxFFbbFFbbFFbbFFbbgmp9oaxakp;Mearp;Keczp:Rep9qgxaqakp;Mearp;Keczp:ReaDakp;Mearp;Keamp9op9qgkpmbezHdiOAlvCXorQLgrp5baipblapEb:T:j83ibaiarp5eaipblapEe:T:j83iwaiaxakpmwDKYqk8AExm35Ps8E8Fgkp5baipblapEd:T:j83izaiakp5eaipblapEi:T:j83iKkawaiao;8qbbkk:Pddiue978Jjjjjbc;ab9Rhidnadcd4ae2glc98GgvTmbcbhdabheinaeaepbbbgocwp:Recwp:Sep;6eaocep:SepxbbjZbbjZbbjZbbjZp:UepxbbjFbbjFbbjFbbjFp9op;Mepkbbaeczfheadclfgdav6mbkkdnaval9pmbaialciGgdcdtgeVcbc;abae9R;8kbaiabavcdtfgvae;8qbbdnadTmbaiaipblbgocwp:Recwp:Sep;6eaocep:SepxbbjZbbjZbbjZbbjZp:UepxbbjFbbjFbbjFbbjFp9op;Mepklbkavaiae;8qbbkk9teiucbcbydj1jjbgeabcifc98GfgbBdj1jjbdndnabZbcztgd9nmbcuhiabad9RcFFifcz4nbcuSmekaehikaikkkebcjwklz9Tbb", t = new Uint8Array([
      0,
      97,
      115,
      109,
      1,
      0,
      0,
      0,
      1,
      4,
      1,
      96,
      0,
      0,
      3,
      3,
      2,
      0,
      0,
      5,
      3,
      1,
      0,
      1,
      12,
      1,
      0,
      10,
      22,
      2,
      12,
      0,
      65,
      0,
      65,
      0,
      65,
      0,
      252,
      10,
      0,
      0,
      11,
      7,
      0,
      65,
      0,
      253,
      15,
      26,
      11
    ]), i = new Uint8Array([
      32,
      0,
      65,
      2,
      1,
      106,
      34,
      33,
      3,
      128,
      11,
      4,
      13,
      64,
      6,
      253,
      10,
      7,
      15,
      116,
      127,
      5,
      8,
      12,
      40,
      16,
      19,
      54,
      20,
      9,
      27,
      255,
      113,
      17,
      42,
      67,
      24,
      23,
      146,
      148,
      18,
      14,
      22,
      45,
      70,
      69,
      56,
      114,
      101,
      21,
      25,
      63,
      75,
      136,
      108,
      28,
      118,
      29,
      73,
      115
    ]);
    if (typeof WebAssembly != "object") return {
      supported: false
    };
    var r = WebAssembly.validate(t) ? e : n, s, o = WebAssembly.instantiate(a(r), {}).then(function(g) {
      s = g.instance, s.exports.__wasm_call_ctors();
    });
    function a(g) {
      for (var y = new Uint8Array(g.length), b = 0; b < g.length; ++b) {
        var v = g.charCodeAt(b);
        y[b] = v > 96 ? v - 97 : v > 64 ? v - 39 : v + 4;
      }
      for (var x = 0, b = 0; b < g.length; ++b) y[x++] = y[b] < 60 ? i[y[b]] : (y[b] - 60) * 64 + y[++b];
      return y.buffer.slice(0, x);
    }
    function l(g, y, b, v, x, C) {
      var A = s.exports.sbrk, P = b + 3 & -4, M = A(P * v), E = A(x.length), I = new Uint8Array(s.exports.memory.buffer);
      I.set(x, E);
      var k = g(M, b, v, E, x.length);
      if (k == 0 && C && C(M, P, v), y.set(I.subarray(M, M + b * v)), A(M - A(0)), k != 0) throw new Error("Malformed buffer data: " + k);
    }
    var c = {
      NONE: "",
      OCTAHEDRAL: "meshopt_decodeFilterOct",
      QUATERNION: "meshopt_decodeFilterQuat",
      EXPONENTIAL: "meshopt_decodeFilterExp"
    }, u = {
      ATTRIBUTES: "meshopt_decodeVertexBuffer",
      TRIANGLES: "meshopt_decodeIndexBuffer",
      INDICES: "meshopt_decodeIndexSequence"
    }, h = [], d = 0;
    function f(g) {
      var y = {
        object: new Worker(g),
        pending: 0,
        requests: {}
      };
      return y.object.onmessage = function(b) {
        var v = b.data;
        y.pending -= v.count, y.requests[v.id][v.action](v.value), delete y.requests[v.id];
      }, y;
    }
    function m(g) {
      for (var y = "var instance; var ready = WebAssembly.instantiate(new Uint8Array([" + new Uint8Array(a(r)) + "]), {}).then(function(result) { instance = result.instance; instance.exports.__wasm_call_ctors(); });self.onmessage = workerProcess;" + l.toString() + p.toString(), b = new Blob([
        y
      ], {
        type: "text/javascript"
      }), v = URL.createObjectURL(b), x = 0; x < g; ++x) h[x] = f(v);
      URL.revokeObjectURL(v);
    }
    function _(g, y, b, v, x) {
      for (var C = h[0], A = 1; A < h.length; ++A) h[A].pending < C.pending && (C = h[A]);
      return new Promise(function(P, M) {
        var E = new Uint8Array(b), I = d++;
        C.pending += g, C.requests[I] = {
          resolve: P,
          reject: M
        }, C.object.postMessage({
          id: I,
          count: g,
          size: y,
          source: E,
          mode: v,
          filter: x
        }, [
          E.buffer
        ]);
      });
    }
    function p(g) {
      o.then(function() {
        var y = g.data;
        try {
          var b = new Uint8Array(y.count * y.size);
          l(s.exports[y.mode], b, y.count, y.size, y.source, s.exports[y.filter]), self.postMessage({
            id: y.id,
            count: y.count,
            action: "resolve",
            value: b
          }, [
            b.buffer
          ]);
        } catch (v) {
          self.postMessage({
            id: y.id,
            count: y.count,
            action: "reject",
            value: v
          });
        }
      });
    }
    return {
      ready: o,
      supported: true,
      useWorkers: function(g) {
        m(g);
      },
      decodeVertexBuffer: function(g, y, b, v, x) {
        l(s.exports.meshopt_decodeVertexBuffer, g, y, b, v, s.exports[c[x]]);
      },
      decodeIndexBuffer: function(g, y, b, v) {
        l(s.exports.meshopt_decodeIndexBuffer, g, y, b, v);
      },
      decodeIndexSequence: function(g, y, b, v) {
        l(s.exports.meshopt_decodeIndexSequence, g, y, b, v);
      },
      decodeGltfBuffer: function(g, y, b, v, x, C) {
        l(s.exports[u[x]], g, y, b, v, s.exports[c[C]]);
      },
      decodeGltfBufferAsync: function(g, y, b, v, x) {
        return h.length > 0 ? _(g, y, b, u[v], c[x]) : o.then(function() {
          var C = new Uint8Array(g * y);
          return l(s.exports[u[v]], C, g, y, b, s.exports[c[x]]), C;
        });
      }
    };
  }();
  class uB {
    constructor(e) {
      __privateAdd(this, _uB_instances);
      this.dracoLoader = new aB(), this.loader = new TU(e), this.dracoLoader.setDecoderPath("/draco/"), this.dracoLoader.preload(), this.loader.setDRACOLoader(this.dracoLoader), this.loader.setMeshoptDecoder(cB);
    }
    async load(e) {
      if (Array.isArray(e)) {
        const t = e.map((i) => __privateMethod(this, _uB_instances, e_fn2).call(this, i));
        return await Promise.all(t);
      } else return await __privateMethod(this, _uB_instances, e_fn2).call(this, e);
    }
  }
  _uB_instances = new WeakSet();
  e_fn2 = function(e) {
    return new Promise((t) => {
      this.loader.load(e, (i) => {
        t(i);
      });
    });
  };
  If = new I8();
  If.onProgress = (n, e, t) => {
    console.log(`Loaded ${e} resources out of ${t} -> ${n}`);
  };
  JV = new MU(If);
  QV = new uB(If);
  r6 = Dp("appStore", {
    state: () => ({
      init: false,
      soundEnabled: false,
      bgSoundTrack: "default"
    }),
    actions: {
      setInit(n) {
        this.init = n;
      },
      setSoundEnabled(n) {
        this.soundEnabled = n;
      },
      setBgSoundTrack(n) {
        [
          "default",
          "filtered"
        ].includes(n) && (this.bgSoundTrack = n);
      }
    },
    getters: {
      isInit: (n) => n.init,
      isSoundEnabled: (n) => n.soundEnabled,
      getBgSoundTrack: (n) => n.bgSoundTrack
    }
  });
  s6 = Dp("uiStore", {
    state: () => ({
      qrCodeVisible: false,
      qrButtonVisible: true,
      preloaderVisible: true,
      cursorColor: "orange",
      cursorState: "idle",
      cursorLabel: null,
      headerAnimationProgress: 0,
      contactOverlayVisible: false,
      mobileMenuVisible: false,
      forceUiWhite: false,
      servicesVisible: false
    }),
    actions: {
      setQrCodeVisible(n) {
        if (typeof n != "boolean") return console.warn(`Invalid qr code visible: ${n}. It must be a boolean value.`);
        this.qrCodeVisible = n;
      },
      setQrButtonVisible(n) {
        if (typeof n != "boolean") return console.warn(`Invalid qr button visible: ${n}. It must be a boolean value.`);
        this.qrButtonVisible = n;
      },
      setPreloaderVisible(n) {
        this.preloaderVisible = n;
      },
      setCursorColor(n) {
        if (![
          "white",
          "orange"
        ].includes(n)) return console.warn(`Invalid cursor color: ${n}`);
        this.cursorColor = n;
      },
      setCursorState(n) {
        if (r6().isInit) {
          if (![
            "idle",
            "icon-hover"
          ].includes(n)) return console.warn(`Invalid cursor state: ${n}`);
          this.cursorState = n;
        }
      },
      setCursorLabel(n) {
        if (![
          null,
          "drag"
        ].includes(n)) return console.warn(`Invalid cursor label: ${n}`);
        this.cursorLabel = n;
      },
      setHeaderAnimationProgress(n) {
        this.headerAnimationProgress = n;
      },
      setContactOverlayVisible(n) {
        this.contactOverlayVisible = n;
      },
      setMobileMenuVisible(n) {
        this.mobileMenuVisible = n;
      },
      setForceUiWhite(n) {
        if (typeof n != "boolean") return console.warn(`Invalid force ui white: ${n}. It must be a boolean value.`);
        this.forceUiWhite = n;
      },
      setServicesVisible(n) {
        if (typeof n != "boolean") return console.warn(`Invalid services visible: ${n}. It must be a boolean value.`);
        this.servicesVisible = n;
      }
    },
    getters: {
      isQrCodeVisible: (n) => n.qrCodeVisible,
      isQrButtonVisible: (n) => n.qrButtonVisible,
      isPreloaderVisible: (n) => n.preloaderVisible,
      getCursorColor: (n) => n.cursorColor,
      getCursorState: (n) => n.cursorState,
      getCursorLabel: (n) => n.cursorLabel,
      getHeaderAnimationProgress: (n) => n.headerAnimationProgress,
      isContactOverlayVisible: (n) => n.contactOverlayVisible,
      isMobileMenuVisible: (n) => n.mobileMenuVisible,
      isForceUiWhite: (n) => n.forceUiWhite,
      isServicesVisible: (n) => n.servicesVisible
    }
  });
  V8 = Dp("scrollStore", {
    state: () => ({
      enabled: false,
      animatedScroll: 0,
      progress: 0
    }),
    actions: {
      setEnabled(n) {
        this.enabled = n;
      },
      setAnimatedScroll(n) {
        this.animatedScroll = n;
      },
      setProgress(n) {
        this.progress = n;
      }
    },
    getters: {
      isEnabled() {
        return this.enabled;
      },
      getAnimatedScroll() {
        return this.animatedScroll;
      },
      getProgress() {
        return this.progress;
      }
    }
  });
  function d3(n) {
    if (n === void 0) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    return n;
  }
  function G8(n, e) {
    n.prototype = Object.create(e.prototype), n.prototype.constructor = n, n.__proto__ = e;
  }
  var O2 = {
    autoSleep: 120,
    force3D: "auto",
    nullTargetWarn: 1,
    units: {
      lineHeight: ""
    }
  }, ua = {
    duration: 0.5,
    overwrite: false,
    delay: 0
  }, o6, In, vt, ji = 1e8, Ln = 1 / ji, d9 = Math.PI * 2, fB = d9 / 4, hB = 0, W8 = Math.sqrt, dB = Math.cos, pB = Math.sin, pn = function(e) {
    return typeof e == "string";
  }, Dt = function(e) {
    return typeof e == "function";
  }, R3 = function(e) {
    return typeof e == "number";
  }, a6 = function(e) {
    return typeof e > "u";
  }, Ki = function(e) {
    return typeof e == "object";
  }, p2 = function(e) {
    return e !== false;
  }, l6 = function() {
    return typeof window < "u";
  }, xc = function(e) {
    return Dt(e) || pn(e);
  }, j8 = typeof ArrayBuffer == "function" && ArrayBuffer.isView || function() {
  }, Fn = Array.isArray, p9 = /(?:-?\.?\d|\.)+/gi, X8 = /[-+=.]*\d+[.e\-+]*\d*[e\-+]*\d*/g, vo = /[-+=.]*\d+[.e-]*\d*[a-z%]*/g, cd = /[-+=.]*\d+\.?\d*(?:e-|e\+)?\d*/gi, $8 = /[+-]=-?[.\d]+/, q8 = /[^,'"\[\]\s]+/gi, mB = /^[+\-=e\s\d]*\d+[.\d]*([a-z]*|%)\s*$/i, wt, Pi, m9, c6, N2 = {}, Uu = {}, Y8, K8 = function(e) {
    return (Uu = As(e, N2)) && b2;
  }, u6 = function(e, t) {
    return console.warn("Invalid property", e, "set to", t, "Missing plugin? gsap.registerPlugin()");
  }, sl = function(e, t) {
    return !t && console.warn(e);
  }, J8 = function(e, t) {
    return e && (N2[e] = t) && Uu && (Uu[e] = t) || N2;
  }, ol = function() {
    return 0;
  }, gB = {
    suppressEvents: true,
    isStart: true,
    kill: false
  }, Jc = {
    suppressEvents: true,
    kill: false
  }, _B = {
    suppressEvents: true
  }, f6 = {}, vr = [], g9 = {}, Q8, M2 = {}, ud = {}, Zg = 30, Qc = [], h6 = "", d6 = function(e) {
    var t = e[0], i, r;
    if (Ki(t) || Dt(t) || (e = [
      e
    ]), !(i = (t._gsap || {}).harness)) {
      for (r = Qc.length; r-- && !Qc[r].targetTest(t); ) ;
      i = Qc[r];
    }
    for (r = e.length; r--; ) e[r] && (e[r]._gsap || (e[r]._gsap = new Sy(e[r], i))) || e.splice(r, 1);
    return e;
  }, _s = function(e) {
    return e._gsap || d6($2(e))[0]._gsap;
  }, Z8 = function(e, t, i) {
    return (i = e[t]) && Dt(i) ? e[t]() : a6(i) && e.getAttribute && e.getAttribute(t) || i;
  }, m2 = function(e, t) {
    return (e = e.split(",")).forEach(t) || e;
  }, Ft = function(e) {
    return Math.round(e * 1e5) / 1e5 || 0;
  }, cn = function(e) {
    return Math.round(e * 1e7) / 1e7 || 0;
  }, Bo = function(e, t) {
    var i = t.charAt(0), r = parseFloat(t.substr(2));
    return e = parseFloat(e), i === "+" ? e + r : i === "-" ? e - r : i === "*" ? e * r : e / r;
  }, bB = function(e, t) {
    for (var i = t.length, r = 0; e.indexOf(t[r]) < 0 && ++r < i; ) ;
    return r < i;
  }, Bu = function() {
    var e = vr.length, t = vr.slice(0), i, r;
    for (g9 = {}, vr.length = 0, i = 0; i < e; i++) r = t[i], r && r._lazy && (r.render(r._lazy[0], r._lazy[1], true)._lazy = 0);
  }, ey = function(e, t, i, r) {
    vr.length && !In && Bu(), e.render(t, i, In && t < 0 && (e._initted || e._startAt)), vr.length && !In && Bu();
  }, ty = function(e) {
    var t = parseFloat(e);
    return (t || t === 0) && (e + "").match(q8).length < 2 ? t : pn(e) ? e.trim() : e;
  }, ny = function(e) {
    return e;
  }, Z2 = function(e, t) {
    for (var i in t) i in e || (e[i] = t[i]);
    return e;
  }, vB = function(e) {
    return function(t, i) {
      for (var r in i) r in t || r === "duration" && e || r === "ease" || (t[r] = i[r]);
    };
  }, As = function(e, t) {
    for (var i in t) e[i] = t[i];
    return e;
  }, e_ = function n(e, t) {
    for (var i in t) i !== "__proto__" && i !== "constructor" && i !== "prototype" && (e[i] = Ki(t[i]) ? n(e[i] || (e[i] = {}), t[i]) : t[i]);
    return e;
  }, Hu = function(e, t) {
    var i = {}, r;
    for (r in e) r in t || (i[r] = e[r]);
    return i;
  }, E0 = function(e) {
    var t = e.parent || wt, i = e.keyframes ? vB(Fn(e.keyframes)) : Z2;
    if (p2(e.inherit)) for (; t; ) i(e, t.vars.defaults), t = t.parent || t._dp;
    return e;
  }, yB = function(e, t) {
    for (var i = e.length, r = i === t.length; r && i-- && e[i] === t[i]; ) ;
    return i < 0;
  }, iy = function(e, t, i, r, s) {
    var o = e[r], a;
    if (s) for (a = t[s]; o && o[s] > a; ) o = o._prev;
    return o ? (t._next = o._next, o._next = t) : (t._next = e[i], e[i] = t), t._next ? t._next._prev = t : e[r] = t, t._prev = o, t.parent = t._dp = e, t;
  }, Ff = function(e, t, i, r) {
    i === void 0 && (i = "_first"), r === void 0 && (r = "_last");
    var s = t._prev, o = t._next;
    s ? s._next = o : e[i] === t && (e[i] = o), o ? o._prev = s : e[r] === t && (e[r] = s), t._next = t._prev = t.parent = null;
  }, Tr = function(e, t) {
    e.parent && (!t || e.parent.autoRemoveChildren) && e.parent.remove && e.parent.remove(e), e._act = 0;
  }, bs = function(e, t) {
    if (e && (!t || t._end > e._dur || t._start < 0)) for (var i = e; i; ) i._dirty = 1, i = i.parent;
    return e;
  }, xB = function(e) {
    for (var t = e.parent; t && t.parent; ) t._dirty = 1, t.totalDuration(), t = t.parent;
    return e;
  }, _9 = function(e, t, i, r) {
    return e._startAt && (In ? e._startAt.revert(Jc) : e.vars.immediateRender && !e.vars.autoRevert || e._startAt.render(t, true, r));
  }, SB = function n(e) {
    return !e || e._ts && n(e.parent);
  }, t_ = function(e) {
    return e._repeat ? fa(e._tTime, e = e.duration() + e._rDelay) * e : 0;
  }, fa = function(e, t) {
    var i = Math.floor(e /= t);
    return e && i === e ? i - 1 : i;
  }, zu = function(e, t) {
    return (e - t._start) * t._ts + (t._ts >= 0 ? 0 : t._dirty ? t.totalDuration() : t._tDur);
  }, Of = function(e) {
    return e._end = cn(e._start + (e._tDur / Math.abs(e._ts || e._rts || Ln) || 0));
  }, kf = function(e, t) {
    var i = e._dp;
    return i && i.smoothChildTiming && e._ts && (e._start = cn(i._time - (e._ts > 0 ? t / e._ts : ((e._dirty ? e.totalDuration() : e._tDur) - t) / -e._ts)), Of(e), i._dirty || bs(i, e)), e;
  }, ry = function(e, t) {
    var i;
    if ((t._time || !t._dur && t._initted || t._start < e._time && (t._dur || !t.add)) && (i = zu(e.rawTime(), t), (!t._dur || Pl(0, t.totalDuration(), i) - t._tTime > Ln) && t.render(i, true)), bs(e, t)._dp && e._initted && e._time >= e._dur && e._ts) {
      if (e._dur < e.duration()) for (i = e; i._dp; ) i.rawTime() >= 0 && i.totalTime(i._tTime), i = i._dp;
      e._zTime = -1e-8;
    }
  }, ki = function(e, t, i, r) {
    return t.parent && Tr(t), t._start = cn((R3(i) ? i : i || e !== wt ? G2(e, i, t) : e._time) + t._delay), t._end = cn(t._start + (t.totalDuration() / Math.abs(t.timeScale()) || 0)), iy(e, t, "_first", "_last", e._sort ? "_start" : 0), b9(t) || (e._recent = t), r || ry(e, t), e._ts < 0 && kf(e, e._tTime), e;
  }, sy = function(e, t) {
    return (N2.ScrollTrigger || u6("scrollTrigger", t)) && N2.ScrollTrigger.create(t, e);
  }, oy = function(e, t, i, r, s) {
    if (m6(e, t, s), !e._initted) return 1;
    if (!i && e._pt && !In && (e._dur && e.vars.lazy !== false || !e._dur && e.vars.lazy) && Q8 !== A2.frame) return vr.push(e), e._lazy = [
      s,
      r
    ], 1;
  }, EB = function n(e) {
    var t = e.parent;
    return t && t._ts && t._initted && !t._lock && (t.rawTime() < 0 || n(t));
  }, b9 = function(e) {
    var t = e.data;
    return t === "isFromStart" || t === "isStart";
  }, wB = function(e, t, i, r) {
    var s = e.ratio, o = t < 0 || !t && (!e._start && EB(e) && !(!e._initted && b9(e)) || (e._ts < 0 || e._dp._ts < 0) && !b9(e)) ? 0 : 1, a = e._rDelay, l = 0, c, u, h;
    if (a && e._repeat && (l = Pl(0, e._tDur, t), u = fa(l, a), e._yoyo && u & 1 && (o = 1 - o), u !== fa(e._tTime, a) && (s = 1 - o, e.vars.repeatRefresh && e._initted && e.invalidate())), o !== s || In || r || e._zTime === Ln || !t && e._zTime) {
      if (!e._initted && oy(e, t, r, i, l)) return;
      for (h = e._zTime, e._zTime = t || (i ? Ln : 0), i || (i = t && !h), e.ratio = o, e._from && (o = 1 - o), e._time = 0, e._tTime = l, c = e._pt; c; ) c.r(o, c.d), c = c._next;
      t < 0 && _9(e, t, i, true), e._onUpdate && !i && I2(e, "onUpdate"), l && e._repeat && !i && e.parent && I2(e, "onRepeat"), (t >= e._tDur || t < 0) && e.ratio === o && (o && Tr(e, 1), !i && !In && (I2(e, o ? "onComplete" : "onReverseComplete", true), e._prom && e._prom()));
    } else e._zTime || (e._zTime = t);
  }, MB = function(e, t, i) {
    var r;
    if (i > t) for (r = e._first; r && r._start <= i; ) {
      if (r.data === "isPause" && r._start > t) return r;
      r = r._next;
    }
    else for (r = e._last; r && r._start >= i; ) {
      if (r.data === "isPause" && r._start < t) return r;
      r = r._prev;
    }
  }, ha = function(e, t, i, r) {
    var s = e._repeat, o = cn(t) || 0, a = e._tTime / e._tDur;
    return a && !r && (e._time *= o / e._dur), e._dur = o, e._tDur = s ? s < 0 ? 1e10 : cn(o * (s + 1) + e._rDelay * s) : o, a > 0 && !r && kf(e, e._tTime = e._tDur * a), e.parent && Of(e), i || bs(e.parent, e), e;
  }, n_ = function(e) {
    return e instanceof Kn ? bs(e) : ha(e, e._dur);
  }, TB = {
    _start: 0,
    endTime: ol,
    totalDuration: ol
  }, G2 = function n(e, t, i) {
    var r = e.labels, s = e._recent || TB, o = e.duration() >= ji ? s.endTime(false) : e._dur, a, l, c;
    return pn(t) && (isNaN(t) || t in r) ? (l = t.charAt(0), c = t.substr(-1) === "%", a = t.indexOf("="), l === "<" || l === ">" ? (a >= 0 && (t = t.replace(/=/, "")), (l === "<" ? s._start : s.endTime(s._repeat >= 0)) + (parseFloat(t.substr(1)) || 0) * (c ? (a < 0 ? s : i).totalDuration() / 100 : 1)) : a < 0 ? (t in r || (r[t] = o), r[t]) : (l = parseFloat(t.charAt(a - 1) + t.substr(a + 1)), c && i && (l = l / 100 * (Fn(i) ? i[0] : i).totalDuration()), a > 1 ? n(e, t.substr(0, a - 1), i) + l : o + l)) : t == null ? o : +t;
  }, w0 = function(e, t, i) {
    var r = R3(t[1]), s = (r ? 2 : 1) + (e < 2 ? 0 : 1), o = t[s], a, l;
    if (r && (o.duration = t[1]), o.parent = i, e) {
      for (a = o, l = i; l && !("immediateRender" in a); ) a = l.vars.defaults || {}, l = p2(l.vars.inherit) && l.parent;
      o.immediateRender = p2(a.immediateRender), e < 2 ? o.runBackwards = 1 : o.startAt = t[s - 1];
    }
    return new Vt(t[0], o, t[s + 1]);
  }, Ir = function(e, t) {
    return e || e === 0 ? t(e) : t;
  }, Pl = function(e, t, i) {
    return i < e ? e : i > t ? t : i;
  }, Rn = function(e, t) {
    return !pn(e) || !(t = mB.exec(e)) ? "" : t[1];
  }, CB = function(e, t, i) {
    return Ir(i, function(r) {
      return Pl(e, t, r);
    });
  }, v9 = [].slice, ay = function(e, t) {
    return e && Ki(e) && "length" in e && (!t && !e.length || e.length - 1 in e && Ki(e[0])) && !e.nodeType && e !== Pi;
  }, AB = function(e, t, i) {
    return i === void 0 && (i = []), e.forEach(function(r) {
      var s;
      return pn(r) && !t || ay(r, 1) ? (s = i).push.apply(s, $2(r)) : i.push(r);
    }) || i;
  }, $2 = function(e, t, i) {
    return vt && !t && vt.selector ? vt.selector(e) : pn(e) && !i && (m9 || !da()) ? v9.call((t || c6).querySelectorAll(e), 0) : Fn(e) ? AB(e, i) : ay(e) ? v9.call(e, 0) : e ? [
      e
    ] : [];
  }, y9 = function(e) {
    return e = $2(e)[0] || sl("Invalid scope") || {}, function(t) {
      var i = e.current || e.nativeElement || e;
      return $2(t, i.querySelectorAll ? i : i === e ? sl("Invalid scope") || c6.createElement("div") : e);
    };
  }, ly = function(e) {
    return e.sort(function() {
      return 0.5 - Math.random();
    });
  }, cy = function(e) {
    if (Dt(e)) return e;
    var t = Ki(e) ? e : {
      each: e
    }, i = vs(t.ease), r = t.from || 0, s = parseFloat(t.base) || 0, o = {}, a = r > 0 && r < 1, l = isNaN(r) || a, c = t.axis, u = r, h = r;
    return pn(r) ? u = h = {
      center: 0.5,
      edges: 0.5,
      end: 1
    }[r] || 0 : !a && l && (u = r[0], h = r[1]), function(d, f, m) {
      var _ = (m || t).length, p = o[_], g, y, b, v, x, C, A, P, M;
      if (!p) {
        if (M = t.grid === "auto" ? 0 : (t.grid || [
          1,
          ji
        ])[1], !M) {
          for (A = -1e8; A < (A = m[M++].getBoundingClientRect().left) && M < _; ) ;
          M < _ && M--;
        }
        for (p = o[_] = [], g = l ? Math.min(M, _) * u - 0.5 : r % M, y = M === ji ? 0 : l ? _ * h / M - 0.5 : r / M | 0, A = 0, P = ji, C = 0; C < _; C++) b = C % M - g, v = y - (C / M | 0), p[C] = x = c ? Math.abs(c === "y" ? v : b) : W8(b * b + v * v), x > A && (A = x), x < P && (P = x);
        r === "random" && ly(p), p.max = A - P, p.min = P, p.v = _ = (parseFloat(t.amount) || parseFloat(t.each) * (M > _ ? _ - 1 : c ? c === "y" ? _ / M : M : Math.max(M, _ / M)) || 0) * (r === "edges" ? -1 : 1), p.b = _ < 0 ? s - _ : s, p.u = Rn(t.amount || t.each) || 0, i = i && _ < 0 ? vy(i) : i;
      }
      return _ = (p[d] - p.min) / p.max || 0, cn(p.b + (i ? i(_) : _) * p.v) + p.u;
    };
  }, x9 = function(e) {
    var t = Math.pow(10, ((e + "").split(".")[1] || "").length);
    return function(i) {
      var r = cn(Math.round(parseFloat(i) / e) * e * t);
      return (r - r % 1) / t + (R3(i) ? 0 : Rn(i));
    };
  }, uy = function(e, t) {
    var i = Fn(e), r, s;
    return !i && Ki(e) && (r = i = e.radius || ji, e.values ? (e = $2(e.values), (s = !R3(e[0])) && (r *= r)) : e = x9(e.increment)), Ir(t, i ? Dt(e) ? function(o) {
      return s = e(o), Math.abs(s - o) <= r ? s : o;
    } : function(o) {
      for (var a = parseFloat(s ? o.x : o), l = parseFloat(s ? o.y : 0), c = ji, u = 0, h = e.length, d, f; h--; ) s ? (d = e[h].x - a, f = e[h].y - l, d = d * d + f * f) : d = Math.abs(e[h] - a), d < c && (c = d, u = h);
      return u = !r || c <= r ? e[u] : o, s || u === o || R3(o) ? u : u + Rn(o);
    } : x9(e));
  }, fy = function(e, t, i, r) {
    return Ir(Fn(e) ? !t : i === true ? !!(i = 0) : !r, function() {
      return Fn(e) ? e[~~(Math.random() * e.length)] : (i = i || 1e-5) && (r = i < 1 ? Math.pow(10, (i + "").length - 2) : 1) && Math.floor(Math.round((e - i / 2 + Math.random() * (t - e + i * 0.99)) / i) * i * r) / r;
    });
  }, DB = function() {
    for (var e = arguments.length, t = new Array(e), i = 0; i < e; i++) t[i] = arguments[i];
    return function(r) {
      return t.reduce(function(s, o) {
        return o(s);
      }, r);
    };
  }, RB = function(e, t) {
    return function(i) {
      return e(parseFloat(i)) + (t || Rn(i));
    };
  }, PB = function(e, t, i) {
    return dy(e, t, 0, 1, i);
  }, hy = function(e, t, i) {
    return Ir(i, function(r) {
      return e[~~t(r)];
    });
  }, LB = function n(e, t, i) {
    var r = t - e;
    return Fn(e) ? hy(e, n(0, e.length), t) : Ir(i, function(s) {
      return (r + (s - e) % r) % r + e;
    });
  }, IB = function n(e, t, i) {
    var r = t - e, s = r * 2;
    return Fn(e) ? hy(e, n(0, e.length - 1), t) : Ir(i, function(o) {
      return o = (s + (o - e) % s) % s || 0, e + (o > r ? s - o : o);
    });
  }, al = function(e) {
    for (var t = 0, i = "", r, s, o, a; ~(r = e.indexOf("random(", t)); ) o = e.indexOf(")", r), a = e.charAt(r + 7) === "[", s = e.substr(r + 7, o - r - 7).match(a ? q8 : p9), i += e.substr(t, r - t) + fy(a ? s : +s[0], a ? 0 : +s[1], +s[2] || 1e-5), t = o + 1;
    return i + e.substr(t, e.length - t);
  }, dy = function(e, t, i, r, s) {
    var o = t - e, a = r - i;
    return Ir(s, function(l) {
      return i + ((l - e) / o * a || 0);
    });
  }, FB = function n(e, t, i, r) {
    var s = isNaN(e + t) ? 0 : function(f) {
      return (1 - f) * e + f * t;
    };
    if (!s) {
      var o = pn(e), a = {}, l, c, u, h, d;
      if (i === true && (r = 1) && (i = null), o) e = {
        p: e
      }, t = {
        p: t
      };
      else if (Fn(e) && !Fn(t)) {
        for (u = [], h = e.length, d = h - 2, c = 1; c < h; c++) u.push(n(e[c - 1], e[c]));
        h--, s = function(m) {
          m *= h;
          var _ = Math.min(d, ~~m);
          return u[_](m - _);
        }, i = t;
      } else r || (e = As(Fn(e) ? [] : {}, e));
      if (!u) {
        for (l in t) p6.call(a, e, l, "get", t[l]);
        s = function(m) {
          return b6(m, a) || (o ? e.p : e);
        };
      }
    }
    return Ir(i, s);
  }, i_ = function(e, t, i) {
    var r = e.labels, s = ji, o, a, l;
    for (o in r) a = r[o] - t, a < 0 == !!i && a && s > (a = Math.abs(a)) && (l = o, s = a);
    return l;
  }, I2 = function(e, t, i) {
    var r = e.vars, s = r[t], o = vt, a = e._ctx, l, c, u;
    if (s) return l = r[t + "Params"], c = r.callbackScope || e, i && vr.length && Bu(), a && (vt = a), u = l ? s.apply(c, l) : s.call(c), vt = o, u;
  }, Qa = function(e) {
    return Tr(e), e.scrollTrigger && e.scrollTrigger.kill(!!In), e.progress() < 1 && I2(e, "onInterrupt"), e;
  }, yo, py = [], my = function(e) {
    if (e) if (e = !e.name && e.default || e, l6() || e.headless) {
      var t = e.name, i = Dt(e), r = t && !i && e.init ? function() {
        this._props = [];
      } : e, s = {
        init: ol,
        render: b6,
        add: p6,
        kill: KB,
        modifier: YB,
        rawVars: 0
      }, o = {
        targetTest: 0,
        get: 0,
        getSetter: _6,
        aliases: {},
        register: 0
      };
      if (da(), e !== r) {
        if (M2[t]) return;
        Z2(r, Z2(Hu(e, s), o)), As(r.prototype, As(s, Hu(e, o))), M2[r.prop = t] = r, e.targetTest && (Qc.push(r), f6[t] = 1), t = (t === "css" ? "CSS" : t.charAt(0).toUpperCase() + t.substr(1)) + "Plugin";
      }
      J8(t, r), e.register && e.register(b2, r, g2);
    } else py.push(e);
  }, st = 255, Za = {
    aqua: [
      0,
      st,
      st
    ],
    lime: [
      0,
      st,
      0
    ],
    silver: [
      192,
      192,
      192
    ],
    black: [
      0,
      0,
      0
    ],
    maroon: [
      128,
      0,
      0
    ],
    teal: [
      0,
      128,
      128
    ],
    blue: [
      0,
      0,
      st
    ],
    navy: [
      0,
      0,
      128
    ],
    white: [
      st,
      st,
      st
    ],
    olive: [
      128,
      128,
      0
    ],
    yellow: [
      st,
      st,
      0
    ],
    orange: [
      st,
      165,
      0
    ],
    gray: [
      128,
      128,
      128
    ],
    purple: [
      128,
      0,
      128
    ],
    green: [
      0,
      128,
      0
    ],
    red: [
      st,
      0,
      0
    ],
    pink: [
      st,
      192,
      203
    ],
    cyan: [
      0,
      st,
      st
    ],
    transparent: [
      st,
      st,
      st,
      0
    ]
  }, fd = function(e, t, i) {
    return e += e < 0 ? 1 : e > 1 ? -1 : 0, (e * 6 < 1 ? t + (i - t) * e * 6 : e < 0.5 ? i : e * 3 < 2 ? t + (i - t) * (2 / 3 - e) * 6 : t) * st + 0.5 | 0;
  }, gy = function(e, t, i) {
    var r = e ? R3(e) ? [
      e >> 16,
      e >> 8 & st,
      e & st
    ] : 0 : Za.black, s, o, a, l, c, u, h, d, f, m;
    if (!r) {
      if (e.substr(-1) === "," && (e = e.substr(0, e.length - 1)), Za[e]) r = Za[e];
      else if (e.charAt(0) === "#") {
        if (e.length < 6 && (s = e.charAt(1), o = e.charAt(2), a = e.charAt(3), e = "#" + s + s + o + o + a + a + (e.length === 5 ? e.charAt(4) + e.charAt(4) : "")), e.length === 9) return r = parseInt(e.substr(1, 6), 16), [
          r >> 16,
          r >> 8 & st,
          r & st,
          parseInt(e.substr(7), 16) / 255
        ];
        e = parseInt(e.substr(1), 16), r = [
          e >> 16,
          e >> 8 & st,
          e & st
        ];
      } else if (e.substr(0, 3) === "hsl") {
        if (r = m = e.match(p9), !t) l = +r[0] % 360 / 360, c = +r[1] / 100, u = +r[2] / 100, o = u <= 0.5 ? u * (c + 1) : u + c - u * c, s = u * 2 - o, r.length > 3 && (r[3] *= 1), r[0] = fd(l + 1 / 3, s, o), r[1] = fd(l, s, o), r[2] = fd(l - 1 / 3, s, o);
        else if (~e.indexOf("=")) return r = e.match(X8), i && r.length < 4 && (r[3] = 1), r;
      } else r = e.match(p9) || Za.transparent;
      r = r.map(Number);
    }
    return t && !m && (s = r[0] / st, o = r[1] / st, a = r[2] / st, h = Math.max(s, o, a), d = Math.min(s, o, a), u = (h + d) / 2, h === d ? l = c = 0 : (f = h - d, c = u > 0.5 ? f / (2 - h - d) : f / (h + d), l = h === s ? (o - a) / f + (o < a ? 6 : 0) : h === o ? (a - s) / f + 2 : (s - o) / f + 4, l *= 60), r[0] = ~~(l + 0.5), r[1] = ~~(c * 100 + 0.5), r[2] = ~~(u * 100 + 0.5)), i && r.length < 4 && (r[3] = 1), r;
  }, _y = function(e) {
    var t = [], i = [], r = -1;
    return e.split(yr).forEach(function(s) {
      var o = s.match(vo) || [];
      t.push.apply(t, o), i.push(r += o.length + 1);
    }), t.c = i, t;
  }, r_ = function(e, t, i) {
    var r = "", s = (e + r).match(yr), o = t ? "hsla(" : "rgba(", a = 0, l, c, u, h;
    if (!s) return e;
    if (s = s.map(function(d) {
      return (d = gy(d, t, 1)) && o + (t ? d[0] + "," + d[1] + "%," + d[2] + "%," + d[3] : d.join(",")) + ")";
    }), i && (u = _y(e), l = i.c, l.join(r) !== u.c.join(r))) for (c = e.replace(yr, "1").split(vo), h = c.length - 1; a < h; a++) r += c[a] + (~l.indexOf(a) ? s.shift() || o + "0,0,0,0)" : (u.length ? u : s.length ? s : i).shift());
    if (!c) for (c = e.split(yr), h = c.length - 1; a < h; a++) r += c[a] + s[a];
    return r + c[h];
  }, yr = function() {
    var n = "(?:\\b(?:(?:rgb|rgba|hsl|hsla)\\(.+?\\))|\\B#(?:[0-9a-f]{3,4}){1,2}\\b", e;
    for (e in Za) n += "|" + e + "\\b";
    return new RegExp(n + ")", "gi");
  }(), OB = /hsl[a]?\(/, by = function(e) {
    var t = e.join(" "), i;
    if (yr.lastIndex = 0, yr.test(t)) return i = OB.test(t), e[1] = r_(e[1], i), e[0] = r_(e[0], i, _y(e[1])), true;
  }, ll, A2 = function() {
    var n = Date.now, e = 500, t = 33, i = n(), r = i, s = 1e3 / 240, o = s, a = [], l, c, u, h, d, f, m = function _(p) {
      var g = n() - r, y = p === true, b, v, x, C;
      if ((g > e || g < 0) && (i += g - t), r += g, x = r - i, b = x - o, (b > 0 || y) && (C = ++h.frame, d = x - h.time * 1e3, h.time = x = x / 1e3, o += b + (b >= s ? 4 : s - b), v = 1), y || (l = c(_)), v) for (f = 0; f < a.length; f++) a[f](x, d, C, p);
    };
    return h = {
      time: 0,
      frame: 0,
      tick: function() {
        m(true);
      },
      deltaRatio: function(p) {
        return d / (1e3 / (p || 60));
      },
      wake: function() {
        Y8 && (!m9 && l6() && (Pi = m9 = window, c6 = Pi.document || {}, N2.gsap = b2, (Pi.gsapVersions || (Pi.gsapVersions = [])).push(b2.version), K8(Uu || Pi.GreenSockGlobals || !Pi.gsap && Pi || {}), py.forEach(my)), u = typeof requestAnimationFrame < "u" && requestAnimationFrame, l && h.sleep(), c = u || function(p) {
          return setTimeout(p, o - h.time * 1e3 + 1 | 0);
        }, ll = 1, m(2));
      },
      sleep: function() {
        (u ? cancelAnimationFrame : clearTimeout)(l), ll = 0, c = ol;
      },
      lagSmoothing: function(p, g) {
        e = p || 1 / 0, t = Math.min(g || 33, e);
      },
      fps: function(p) {
        s = 1e3 / (p || 240), o = h.time * 1e3 + s;
      },
      add: function(p, g, y) {
        var b = g ? function(v, x, C, A) {
          p(v, x, C, A), h.remove(b);
        } : p;
        return h.remove(p), a[y ? "unshift" : "push"](b), da(), b;
      },
      remove: function(p, g) {
        ~(g = a.indexOf(p)) && a.splice(g, 1) && f >= g && f--;
      },
      _listeners: a
    }, h;
  }(), da = function() {
    return !ll && A2.wake();
  }, Xe = {}, kB = /^[\d.\-M][\d.\-,\s]/, NB = /["']/g, UB = function(e) {
    for (var t = {}, i = e.substr(1, e.length - 3).split(":"), r = i[0], s = 1, o = i.length, a, l, c; s < o; s++) l = i[s], a = s !== o - 1 ? l.lastIndexOf(",") : l.length, c = l.substr(0, a), t[r] = isNaN(c) ? c.replace(NB, "").trim() : +c, r = l.substr(a + 1).trim();
    return t;
  }, BB = function(e) {
    var t = e.indexOf("(") + 1, i = e.indexOf(")"), r = e.indexOf("(", t);
    return e.substring(t, ~r && r < i ? e.indexOf(")", i + 1) : i);
  }, HB = function(e) {
    var t = (e + "").split("("), i = Xe[t[0]];
    return i && t.length > 1 && i.config ? i.config.apply(null, ~e.indexOf("{") ? [
      UB(t[1])
    ] : BB(e).split(",").map(ty)) : Xe._CE && kB.test(e) ? Xe._CE("", e) : i;
  }, vy = function(e) {
    return function(t) {
      return 1 - e(1 - t);
    };
  }, yy = function n(e, t) {
    for (var i = e._first, r; i; ) i instanceof Kn ? n(i, t) : i.vars.yoyoEase && (!i._yoyo || !i._repeat) && i._yoyo !== t && (i.timeline ? n(i.timeline, t) : (r = i._ease, i._ease = i._yEase, i._yEase = r, i._yoyo = t)), i = i._next;
  }, vs = function(e, t) {
    return e && (Dt(e) ? e : Xe[e] || HB(e)) || t;
  }, Bs = function(e, t, i, r) {
    i === void 0 && (i = function(l) {
      return 1 - t(1 - l);
    }), r === void 0 && (r = function(l) {
      return l < 0.5 ? t(l * 2) / 2 : 1 - t((1 - l) * 2) / 2;
    });
    var s = {
      easeIn: t,
      easeOut: i,
      easeInOut: r
    }, o;
    return m2(e, function(a) {
      Xe[a] = N2[a] = s, Xe[o = a.toLowerCase()] = i;
      for (var l in s) Xe[o + (l === "easeIn" ? ".in" : l === "easeOut" ? ".out" : ".inOut")] = Xe[a + "." + l] = s[l];
    }), s;
  }, xy = function(e) {
    return function(t) {
      return t < 0.5 ? (1 - e(1 - t * 2)) / 2 : 0.5 + e((t - 0.5) * 2) / 2;
    };
  }, hd = function n(e, t, i) {
    var r = t >= 1 ? t : 1, s = (i || (e ? 0.3 : 0.45)) / (t < 1 ? t : 1), o = s / d9 * (Math.asin(1 / r) || 0), a = function(u) {
      return u === 1 ? 1 : r * Math.pow(2, -10 * u) * pB((u - o) * s) + 1;
    }, l = e === "out" ? a : e === "in" ? function(c) {
      return 1 - a(1 - c);
    } : xy(a);
    return s = d9 / s, l.config = function(c, u) {
      return n(e, c, u);
    }, l;
  }, dd = function n(e, t) {
    t === void 0 && (t = 1.70158);
    var i = function(o) {
      return o ? --o * o * ((t + 1) * o + t) + 1 : 0;
    }, r = e === "out" ? i : e === "in" ? function(s) {
      return 1 - i(1 - s);
    } : xy(i);
    return r.config = function(s) {
      return n(e, s);
    }, r;
  };
  m2("Linear,Quad,Cubic,Quart,Quint,Strong", function(n, e) {
    var t = e < 5 ? e + 1 : e;
    Bs(n + ",Power" + (t - 1), e ? function(i) {
      return Math.pow(i, t);
    } : function(i) {
      return i;
    }, function(i) {
      return 1 - Math.pow(1 - i, t);
    }, function(i) {
      return i < 0.5 ? Math.pow(i * 2, t) / 2 : 1 - Math.pow((1 - i) * 2, t) / 2;
    });
  });
  Xe.Linear.easeNone = Xe.none = Xe.Linear.easeIn;
  Bs("Elastic", hd("in"), hd("out"), hd());
  (function(n, e) {
    var t = 1 / e, i = 2 * t, r = 2.5 * t, s = function(a) {
      return a < t ? n * a * a : a < i ? n * Math.pow(a - 1.5 / e, 2) + 0.75 : a < r ? n * (a -= 2.25 / e) * a + 0.9375 : n * Math.pow(a - 2.625 / e, 2) + 0.984375;
    };
    Bs("Bounce", function(o) {
      return 1 - s(1 - o);
    }, s);
  })(7.5625, 2.75);
  Bs("Expo", function(n) {
    return n ? Math.pow(2, 10 * (n - 1)) : 0;
  });
  Bs("Circ", function(n) {
    return -(W8(1 - n * n) - 1);
  });
  Bs("Sine", function(n) {
    return n === 1 ? 1 : -dB(n * fB) + 1;
  });
  Bs("Back", dd("in"), dd("out"), dd());
  Xe.SteppedEase = Xe.steps = N2.SteppedEase = {
    config: function(e, t) {
      e === void 0 && (e = 1);
      var i = 1 / e, r = e + (t ? 0 : 1), s = t ? 1 : 0, o = 1 - Ln;
      return function(a) {
        return ((r * Pl(0, o, a) | 0) + s) * i;
      };
    }
  };
  ua.ease = Xe["quad.out"];
  m2("onComplete,onUpdate,onStart,onRepeat,onReverseComplete,onInterrupt", function(n) {
    return h6 += n + "," + n + "Params,";
  });
  var Sy = function(e, t) {
    this.id = hB++, e._gsap = this, this.target = e, this.harness = t, this.get = t ? t.get : Z8, this.set = t ? t.getSetter : _6;
  }, cl = function() {
    function n(t) {
      this.vars = t, this._delay = +t.delay || 0, (this._repeat = t.repeat === 1 / 0 ? -2 : t.repeat || 0) && (this._rDelay = t.repeatDelay || 0, this._yoyo = !!t.yoyo || !!t.yoyoEase), this._ts = 1, ha(this, +t.duration, 1, 1), this.data = t.data, vt && (this._ctx = vt, vt.data.push(this)), ll || A2.wake();
    }
    var e = n.prototype;
    return e.delay = function(i) {
      return i || i === 0 ? (this.parent && this.parent.smoothChildTiming && this.startTime(this._start + i - this._delay), this._delay = i, this) : this._delay;
    }, e.duration = function(i) {
      return arguments.length ? this.totalDuration(this._repeat > 0 ? i + (i + this._rDelay) * this._repeat : i) : this.totalDuration() && this._dur;
    }, e.totalDuration = function(i) {
      return arguments.length ? (this._dirty = 0, ha(this, this._repeat < 0 ? i : (i - this._repeat * this._rDelay) / (this._repeat + 1))) : this._tDur;
    }, e.totalTime = function(i, r) {
      if (da(), !arguments.length) return this._tTime;
      var s = this._dp;
      if (s && s.smoothChildTiming && this._ts) {
        for (kf(this, i), !s._dp || s.parent || ry(s, this); s && s.parent; ) s.parent._time !== s._start + (s._ts >= 0 ? s._tTime / s._ts : (s.totalDuration() - s._tTime) / -s._ts) && s.totalTime(s._tTime, true), s = s.parent;
        !this.parent && this._dp.autoRemoveChildren && (this._ts > 0 && i < this._tDur || this._ts < 0 && i > 0 || !this._tDur && !i) && ki(this._dp, this, this._start - this._delay);
      }
      return (this._tTime !== i || !this._dur && !r || this._initted && Math.abs(this._zTime) === Ln || !i && !this._initted && (this.add || this._ptLookup)) && (this._ts || (this._pTime = i), ey(this, i, r)), this;
    }, e.time = function(i, r) {
      return arguments.length ? this.totalTime(Math.min(this.totalDuration(), i + t_(this)) % (this._dur + this._rDelay) || (i ? this._dur : 0), r) : this._time;
    }, e.totalProgress = function(i, r) {
      return arguments.length ? this.totalTime(this.totalDuration() * i, r) : this.totalDuration() ? Math.min(1, this._tTime / this._tDur) : this.rawTime() > 0 ? 1 : 0;
    }, e.progress = function(i, r) {
      return arguments.length ? this.totalTime(this.duration() * (this._yoyo && !(this.iteration() & 1) ? 1 - i : i) + t_(this), r) : this.duration() ? Math.min(1, this._time / this._dur) : this.rawTime() > 0 ? 1 : 0;
    }, e.iteration = function(i, r) {
      var s = this.duration() + this._rDelay;
      return arguments.length ? this.totalTime(this._time + (i - 1) * s, r) : this._repeat ? fa(this._tTime, s) + 1 : 1;
    }, e.timeScale = function(i, r) {
      if (!arguments.length) return this._rts === -1e-8 ? 0 : this._rts;
      if (this._rts === i) return this;
      var s = this.parent && this._ts ? zu(this.parent._time, this) : this._tTime;
      return this._rts = +i || 0, this._ts = this._ps || i === -1e-8 ? 0 : this._rts, this.totalTime(Pl(-Math.abs(this._delay), this._tDur, s), r !== false), Of(this), xB(this);
    }, e.paused = function(i) {
      return arguments.length ? (this._ps !== i && (this._ps = i, i ? (this._pTime = this._tTime || Math.max(-this._delay, this.rawTime()), this._ts = this._act = 0) : (da(), this._ts = this._rts, this.totalTime(this.parent && !this.parent.smoothChildTiming ? this.rawTime() : this._tTime || this._pTime, this.progress() === 1 && Math.abs(this._zTime) !== Ln && (this._tTime -= Ln)))), this) : this._ps;
    }, e.startTime = function(i) {
      if (arguments.length) {
        this._start = i;
        var r = this.parent || this._dp;
        return r && (r._sort || !this.parent) && ki(r, this, i - this._delay), this;
      }
      return this._start;
    }, e.endTime = function(i) {
      return this._start + (p2(i) ? this.totalDuration() : this.duration()) / Math.abs(this._ts || 1);
    }, e.rawTime = function(i) {
      var r = this.parent || this._dp;
      return r ? i && (!this._ts || this._repeat && this._time && this.totalProgress() < 1) ? this._tTime % (this._dur + this._rDelay) : this._ts ? zu(r.rawTime(i), this) : this._tTime : this._tTime;
    }, e.revert = function(i) {
      i === void 0 && (i = _B);
      var r = In;
      return In = i, (this._initted || this._startAt) && (this.timeline && this.timeline.revert(i), this.totalTime(-0.01, i.suppressEvents)), this.data !== "nested" && i.kill !== false && this.kill(), In = r, this;
    }, e.globalTime = function(i) {
      for (var r = this, s = arguments.length ? i : r.rawTime(); r; ) s = r._start + s / (Math.abs(r._ts) || 1), r = r._dp;
      return !this.parent && this._sat ? this._sat.globalTime(i) : s;
    }, e.repeat = function(i) {
      return arguments.length ? (this._repeat = i === 1 / 0 ? -2 : i, n_(this)) : this._repeat === -2 ? 1 / 0 : this._repeat;
    }, e.repeatDelay = function(i) {
      if (arguments.length) {
        var r = this._time;
        return this._rDelay = i, n_(this), r ? this.time(r) : this;
      }
      return this._rDelay;
    }, e.yoyo = function(i) {
      return arguments.length ? (this._yoyo = i, this) : this._yoyo;
    }, e.seek = function(i, r) {
      return this.totalTime(G2(this, i), p2(r));
    }, e.restart = function(i, r) {
      return this.play().totalTime(i ? -this._delay : 0, p2(r));
    }, e.play = function(i, r) {
      return i != null && this.seek(i, r), this.reversed(false).paused(false);
    }, e.reverse = function(i, r) {
      return i != null && this.seek(i || this.totalDuration(), r), this.reversed(true).paused(false);
    }, e.pause = function(i, r) {
      return i != null && this.seek(i, r), this.paused(true);
    }, e.resume = function() {
      return this.paused(false);
    }, e.reversed = function(i) {
      return arguments.length ? (!!i !== this.reversed() && this.timeScale(-this._rts || (i ? -1e-8 : 0)), this) : this._rts < 0;
    }, e.invalidate = function() {
      return this._initted = this._act = 0, this._zTime = -1e-8, this;
    }, e.isActive = function() {
      var i = this.parent || this._dp, r = this._start, s;
      return !!(!i || this._ts && this._initted && i.isActive() && (s = i.rawTime(true)) >= r && s < this.endTime(true) - Ln);
    }, e.eventCallback = function(i, r, s) {
      var o = this.vars;
      return arguments.length > 1 ? (r ? (o[i] = r, s && (o[i + "Params"] = s), i === "onUpdate" && (this._onUpdate = r)) : delete o[i], this) : o[i];
    }, e.then = function(i) {
      var r = this;
      return new Promise(function(s) {
        var o = Dt(i) ? i : ny, a = function() {
          var c = r.then;
          r.then = null, Dt(o) && (o = o(r)) && (o.then || o === r) && (r.then = c), s(o), r.then = c;
        };
        r._initted && r.totalProgress() === 1 && r._ts >= 0 || !r._tTime && r._ts < 0 ? a() : r._prom = a;
      });
    }, e.kill = function() {
      Qa(this);
    }, n;
  }();
  Z2(cl.prototype, {
    _time: 0,
    _start: 0,
    _end: 0,
    _tTime: 0,
    _tDur: 0,
    _dirty: 0,
    _repeat: 0,
    _yoyo: false,
    parent: null,
    _initted: false,
    _rDelay: 0,
    _ts: 1,
    _dp: 0,
    ratio: 0,
    _zTime: -1e-8,
    _prom: 0,
    _ps: false,
    _rts: 1
  });
  var Kn = function(n) {
    G8(e, n);
    function e(i, r) {
      var s;
      return i === void 0 && (i = {}), s = n.call(this, i) || this, s.labels = {}, s.smoothChildTiming = !!i.smoothChildTiming, s.autoRemoveChildren = !!i.autoRemoveChildren, s._sort = p2(i.sortChildren), wt && ki(i.parent || wt, d3(s), r), i.reversed && s.reverse(), i.paused && s.paused(true), i.scrollTrigger && sy(d3(s), i.scrollTrigger), s;
    }
    var t = e.prototype;
    return t.to = function(r, s, o) {
      return w0(0, arguments, this), this;
    }, t.from = function(r, s, o) {
      return w0(1, arguments, this), this;
    }, t.fromTo = function(r, s, o, a) {
      return w0(2, arguments, this), this;
    }, t.set = function(r, s, o) {
      return s.duration = 0, s.parent = this, E0(s).repeatDelay || (s.repeat = 0), s.immediateRender = !!s.immediateRender, new Vt(r, s, G2(this, o), 1), this;
    }, t.call = function(r, s, o) {
      return ki(this, Vt.delayedCall(0, r, s), o);
    }, t.staggerTo = function(r, s, o, a, l, c, u) {
      return o.duration = s, o.stagger = o.stagger || a, o.onComplete = c, o.onCompleteParams = u, o.parent = this, new Vt(r, o, G2(this, l)), this;
    }, t.staggerFrom = function(r, s, o, a, l, c, u) {
      return o.runBackwards = 1, E0(o).immediateRender = p2(o.immediateRender), this.staggerTo(r, s, o, a, l, c, u);
    }, t.staggerFromTo = function(r, s, o, a, l, c, u, h) {
      return a.startAt = o, E0(a).immediateRender = p2(a.immediateRender), this.staggerTo(r, s, a, l, c, u, h);
    }, t.render = function(r, s, o) {
      var a = this._time, l = this._dirty ? this.totalDuration() : this._tDur, c = this._dur, u = r <= 0 ? 0 : cn(r), h = this._zTime < 0 != r < 0 && (this._initted || !c), d, f, m, _, p, g, y, b, v, x, C, A;
      if (this !== wt && u > l && r >= 0 && (u = l), u !== this._tTime || o || h) {
        if (a !== this._time && c && (u += this._time - a, r += this._time - a), d = u, v = this._start, b = this._ts, g = !b, h && (c || (a = this._zTime), (r || !s) && (this._zTime = r)), this._repeat) {
          if (C = this._yoyo, p = c + this._rDelay, this._repeat < -1 && r < 0) return this.totalTime(p * 100 + r, s, o);
          if (d = cn(u % p), u === l ? (_ = this._repeat, d = c) : (_ = ~~(u / p), _ && _ === u / p && (d = c, _--), d > c && (d = c)), x = fa(this._tTime, p), !a && this._tTime && x !== _ && this._tTime - x * p - this._dur <= 0 && (x = _), C && _ & 1 && (d = c - d, A = 1), _ !== x && !this._lock) {
            var P = C && x & 1, M = P === (C && _ & 1);
            if (_ < x && (P = !P), a = P ? 0 : u % c ? c : u, this._lock = 1, this.render(a || (A ? 0 : cn(_ * p)), s, !c)._lock = 0, this._tTime = u, !s && this.parent && I2(this, "onRepeat"), this.vars.repeatRefresh && !A && (this.invalidate()._lock = 1), a && a !== this._time || g !== !this._ts || this.vars.onRepeat && !this.parent && !this._act) return this;
            if (c = this._dur, l = this._tDur, M && (this._lock = 2, a = P ? c : -1e-4, this.render(a, true), this.vars.repeatRefresh && !A && this.invalidate()), this._lock = 0, !this._ts && !g) return this;
            yy(this, A);
          }
        }
        if (this._hasPause && !this._forcing && this._lock < 2 && (y = MB(this, cn(a), cn(d)), y && (u -= d - (d = y._start))), this._tTime = u, this._time = d, this._act = !b, this._initted || (this._onUpdate = this.vars.onUpdate, this._initted = 1, this._zTime = r, a = 0), !a && d && !s && !_ && (I2(this, "onStart"), this._tTime !== u)) return this;
        if (d >= a && r >= 0) for (f = this._first; f; ) {
          if (m = f._next, (f._act || d >= f._start) && f._ts && y !== f) {
            if (f.parent !== this) return this.render(r, s, o);
            if (f.render(f._ts > 0 ? (d - f._start) * f._ts : (f._dirty ? f.totalDuration() : f._tDur) + (d - f._start) * f._ts, s, o), d !== this._time || !this._ts && !g) {
              y = 0, m && (u += this._zTime = -1e-8);
              break;
            }
          }
          f = m;
        }
        else {
          f = this._last;
          for (var E = r < 0 ? r : d; f; ) {
            if (m = f._prev, (f._act || E <= f._end) && f._ts && y !== f) {
              if (f.parent !== this) return this.render(r, s, o);
              if (f.render(f._ts > 0 ? (E - f._start) * f._ts : (f._dirty ? f.totalDuration() : f._tDur) + (E - f._start) * f._ts, s, o || In && (f._initted || f._startAt)), d !== this._time || !this._ts && !g) {
                y = 0, m && (u += this._zTime = E ? -1e-8 : Ln);
                break;
              }
            }
            f = m;
          }
        }
        if (y && !s && (this.pause(), y.render(d >= a ? 0 : -1e-8)._zTime = d >= a ? 1 : -1, this._ts)) return this._start = v, Of(this), this.render(r, s, o);
        this._onUpdate && !s && I2(this, "onUpdate", true), (u === l && this._tTime >= this.totalDuration() || !u && a) && (v === this._start || Math.abs(b) !== Math.abs(this._ts)) && (this._lock || ((r || !c) && (u === l && this._ts > 0 || !u && this._ts < 0) && Tr(this, 1), !s && !(r < 0 && !a) && (u || a || !l) && (I2(this, u === l && r >= 0 ? "onComplete" : "onReverseComplete", true), this._prom && !(u < l && this.timeScale() > 0) && this._prom())));
      }
      return this;
    }, t.add = function(r, s) {
      var o = this;
      if (R3(s) || (s = G2(this, s, r)), !(r instanceof cl)) {
        if (Fn(r)) return r.forEach(function(a) {
          return o.add(a, s);
        }), this;
        if (pn(r)) return this.addLabel(r, s);
        if (Dt(r)) r = Vt.delayedCall(0, r);
        else return this;
      }
      return this !== r ? ki(this, r, s) : this;
    }, t.getChildren = function(r, s, o, a) {
      r === void 0 && (r = true), s === void 0 && (s = true), o === void 0 && (o = true), a === void 0 && (a = -1e8);
      for (var l = [], c = this._first; c; ) c._start >= a && (c instanceof Vt ? s && l.push(c) : (o && l.push(c), r && l.push.apply(l, c.getChildren(true, s, o)))), c = c._next;
      return l;
    }, t.getById = function(r) {
      for (var s = this.getChildren(1, 1, 1), o = s.length; o--; ) if (s[o].vars.id === r) return s[o];
    }, t.remove = function(r) {
      return pn(r) ? this.removeLabel(r) : Dt(r) ? this.killTweensOf(r) : (Ff(this, r), r === this._recent && (this._recent = this._last), bs(this));
    }, t.totalTime = function(r, s) {
      return arguments.length ? (this._forcing = 1, !this._dp && this._ts && (this._start = cn(A2.time - (this._ts > 0 ? r / this._ts : (this.totalDuration() - r) / -this._ts))), n.prototype.totalTime.call(this, r, s), this._forcing = 0, this) : this._tTime;
    }, t.addLabel = function(r, s) {
      return this.labels[r] = G2(this, s), this;
    }, t.removeLabel = function(r) {
      return delete this.labels[r], this;
    }, t.addPause = function(r, s, o) {
      var a = Vt.delayedCall(0, s || ol, o);
      return a.data = "isPause", this._hasPause = 1, ki(this, a, G2(this, r));
    }, t.removePause = function(r) {
      var s = this._first;
      for (r = G2(this, r); s; ) s._start === r && s.data === "isPause" && Tr(s), s = s._next;
    }, t.killTweensOf = function(r, s, o) {
      for (var a = this.getTweensOf(r, o), l = a.length; l--; ) lr !== a[l] && a[l].kill(r, s);
      return this;
    }, t.getTweensOf = function(r, s) {
      for (var o = [], a = $2(r), l = this._first, c = R3(s), u; l; ) l instanceof Vt ? bB(l._targets, a) && (c ? (!lr || l._initted && l._ts) && l.globalTime(0) <= s && l.globalTime(l.totalDuration()) > s : !s || l.isActive()) && o.push(l) : (u = l.getTweensOf(a, s)).length && o.push.apply(o, u), l = l._next;
      return o;
    }, t.tweenTo = function(r, s) {
      s = s || {};
      var o = this, a = G2(o, r), l = s, c = l.startAt, u = l.onStart, h = l.onStartParams, d = l.immediateRender, f, m = Vt.to(o, Z2({
        ease: s.ease || "none",
        lazy: false,
        immediateRender: false,
        time: a,
        overwrite: "auto",
        duration: s.duration || Math.abs((a - (c && "time" in c ? c.time : o._time)) / o.timeScale()) || Ln,
        onStart: function() {
          if (o.pause(), !f) {
            var p = s.duration || Math.abs((a - (c && "time" in c ? c.time : o._time)) / o.timeScale());
            m._dur !== p && ha(m, p, 0, 1).render(m._time, true, true), f = 1;
          }
          u && u.apply(m, h || []);
        }
      }, s));
      return d ? m.render(0) : m;
    }, t.tweenFromTo = function(r, s, o) {
      return this.tweenTo(s, Z2({
        startAt: {
          time: G2(this, r)
        }
      }, o));
    }, t.recent = function() {
      return this._recent;
    }, t.nextLabel = function(r) {
      return r === void 0 && (r = this._time), i_(this, G2(this, r));
    }, t.previousLabel = function(r) {
      return r === void 0 && (r = this._time), i_(this, G2(this, r), 1);
    }, t.currentLabel = function(r) {
      return arguments.length ? this.seek(r, true) : this.previousLabel(this._time + Ln);
    }, t.shiftChildren = function(r, s, o) {
      o === void 0 && (o = 0);
      for (var a = this._first, l = this.labels, c; a; ) a._start >= o && (a._start += r, a._end += r), a = a._next;
      if (s) for (c in l) l[c] >= o && (l[c] += r);
      return bs(this);
    }, t.invalidate = function(r) {
      var s = this._first;
      for (this._lock = 0; s; ) s.invalidate(r), s = s._next;
      return n.prototype.invalidate.call(this, r);
    }, t.clear = function(r) {
      r === void 0 && (r = true);
      for (var s = this._first, o; s; ) o = s._next, this.remove(s), s = o;
      return this._dp && (this._time = this._tTime = this._pTime = 0), r && (this.labels = {}), bs(this);
    }, t.totalDuration = function(r) {
      var s = 0, o = this, a = o._last, l = ji, c, u, h;
      if (arguments.length) return o.timeScale((o._repeat < 0 ? o.duration() : o.totalDuration()) / (o.reversed() ? -r : r));
      if (o._dirty) {
        for (h = o.parent; a; ) c = a._prev, a._dirty && a.totalDuration(), u = a._start, u > l && o._sort && a._ts && !o._lock ? (o._lock = 1, ki(o, a, u - a._delay, 1)._lock = 0) : l = u, u < 0 && a._ts && (s -= u, (!h && !o._dp || h && h.smoothChildTiming) && (o._start += u / o._ts, o._time -= u, o._tTime -= u), o.shiftChildren(-u, false, -1 / 0), l = 0), a._end > s && a._ts && (s = a._end), a = c;
        ha(o, o === wt && o._time > s ? o._time : s, 1, 1), o._dirty = 0;
      }
      return o._tDur;
    }, e.updateRoot = function(r) {
      if (wt._ts && (ey(wt, zu(r, wt)), Q8 = A2.frame), A2.frame >= Zg) {
        Zg += O2.autoSleep || 120;
        var s = wt._first;
        if ((!s || !s._ts) && O2.autoSleep && A2._listeners.length < 2) {
          for (; s && !s._ts; ) s = s._next;
          s || A2.sleep();
        }
      }
    }, e;
  }(cl);
  Z2(Kn.prototype, {
    _lock: 0,
    _hasPause: 0,
    _forcing: 0
  });
  var zB = function(e, t, i, r, s, o, a) {
    var l = new g2(this._pt, e, t, 0, 1, Ay, null, s), c = 0, u = 0, h, d, f, m, _, p, g, y;
    for (l.b = i, l.e = r, i += "", r += "", (g = ~r.indexOf("random(")) && (r = al(r)), o && (y = [
      i,
      r
    ], o(y, e, t), i = y[0], r = y[1]), d = i.match(cd) || []; h = cd.exec(r); ) m = h[0], _ = r.substring(c, h.index), f ? f = (f + 1) % 5 : _.substr(-5) === "rgba(" && (f = 1), m !== d[u++] && (p = parseFloat(d[u - 1]) || 0, l._pt = {
      _next: l._pt,
      p: _ || u === 1 ? _ : ",",
      s: p,
      c: m.charAt(1) === "=" ? Bo(p, m) - p : parseFloat(m) - p,
      m: f && f < 4 ? Math.round : 0
    }, c = cd.lastIndex);
    return l.c = c < r.length ? r.substring(c, r.length) : "", l.fp = a, ($8.test(r) || g) && (l.e = 0), this._pt = l, l;
  }, p6 = function(e, t, i, r, s, o, a, l, c, u) {
    Dt(r) && (r = r(s || 0, e, o));
    var h = e[t], d = i !== "get" ? i : Dt(h) ? c ? e[t.indexOf("set") || !Dt(e["get" + t.substr(3)]) ? t : "get" + t.substr(3)](c) : e[t]() : h, f = Dt(h) ? c ? XB : Ty : g6, m;
    if (pn(r) && (~r.indexOf("random(") && (r = al(r)), r.charAt(1) === "=" && (m = Bo(d, r) + (Rn(d) || 0), (m || m === 0) && (r = m))), !u || d !== r || S9) return !isNaN(d * r) && r !== "" ? (m = new g2(this._pt, e, t, +d || 0, r - (d || 0), typeof h == "boolean" ? qB : Cy, 0, f), c && (m.fp = c), a && m.modifier(a, this, e), this._pt = m) : (!h && !(t in e) && u6(t, r), zB.call(this, e, t, d, r, f, l || O2.stringFilter, c));
  }, VB = function(e, t, i, r, s) {
    if (Dt(e) && (e = M0(e, s, t, i, r)), !Ki(e) || e.style && e.nodeType || Fn(e) || j8(e)) return pn(e) ? M0(e, s, t, i, r) : e;
    var o = {}, a;
    for (a in e) o[a] = M0(e[a], s, t, i, r);
    return o;
  }, Ey = function(e, t, i, r, s, o) {
    var a, l, c, u;
    if (M2[e] && (a = new M2[e]()).init(s, a.rawVars ? t[e] : VB(t[e], r, s, o, i), i, r, o) !== false && (i._pt = l = new g2(i._pt, s, e, 0, 1, a.render, a, 0, a.priority), i !== yo)) for (c = i._ptLookup[i._targets.indexOf(s)], u = a._props.length; u--; ) c[a._props[u]] = l;
    return a;
  }, lr, S9, m6 = function n(e, t, i) {
    var r = e.vars, s = r.ease, o = r.startAt, a = r.immediateRender, l = r.lazy, c = r.onUpdate, u = r.runBackwards, h = r.yoyoEase, d = r.keyframes, f = r.autoRevert, m = e._dur, _ = e._startAt, p = e._targets, g = e.parent, y = g && g.data === "nested" ? g.vars.targets : p, b = e._overwrite === "auto" && !o6, v = e.timeline, x, C, A, P, M, E, I, k, H, K, J, z, $;
    if (v && (!d || !s) && (s = "none"), e._ease = vs(s, ua.ease), e._yEase = h ? vy(vs(h === true ? s : h, ua.ease)) : 0, h && e._yoyo && !e._repeat && (h = e._yEase, e._yEase = e._ease, e._ease = h), e._from = !v && !!r.runBackwards, !v || d && !r.stagger) {
      if (k = p[0] ? _s(p[0]).harness : 0, z = k && r[k.prop], x = Hu(r, f6), _ && (_._zTime < 0 && _.progress(1), t < 0 && u && a && !f ? _.render(-1, true) : _.revert(u && m ? Jc : gB), _._lazy = 0), o) {
        if (Tr(e._startAt = Vt.set(p, Z2({
          data: "isStart",
          overwrite: false,
          parent: g,
          immediateRender: true,
          lazy: !_ && p2(l),
          startAt: null,
          delay: 0,
          onUpdate: c && function() {
            return I2(e, "onUpdate");
          },
          stagger: 0
        }, o))), e._startAt._dp = 0, e._startAt._sat = e, t < 0 && (In || !a && !f) && e._startAt.revert(Jc), a && m && t <= 0 && i <= 0) {
          t && (e._zTime = t);
          return;
        }
      } else if (u && m && !_) {
        if (t && (a = false), A = Z2({
          overwrite: false,
          data: "isFromStart",
          lazy: a && !_ && p2(l),
          immediateRender: a,
          stagger: 0,
          parent: g
        }, x), z && (A[k.prop] = z), Tr(e._startAt = Vt.set(p, A)), e._startAt._dp = 0, e._startAt._sat = e, t < 0 && (In ? e._startAt.revert(Jc) : e._startAt.render(-1, true)), e._zTime = t, !a) n(e._startAt, Ln, Ln);
        else if (!t) return;
      }
      for (e._pt = e._ptCache = 0, l = m && p2(l) || l && !m, C = 0; C < p.length; C++) {
        if (M = p[C], I = M._gsap || d6(p)[C]._gsap, e._ptLookup[C] = K = {}, g9[I.id] && vr.length && Bu(), J = y === p ? C : y.indexOf(M), k && (H = new k()).init(M, z || x, e, J, y) !== false && (e._pt = P = new g2(e._pt, M, H.name, 0, 1, H.render, H, 0, H.priority), H._props.forEach(function(G) {
          K[G] = P;
        }), H.priority && (E = 1)), !k || z) for (A in x) M2[A] && (H = Ey(A, x, e, J, M, y)) ? H.priority && (E = 1) : K[A] = P = p6.call(e, M, A, "get", x[A], J, y, 0, r.stringFilter);
        e._op && e._op[C] && e.kill(M, e._op[C]), b && e._pt && (lr = e, wt.killTweensOf(M, K, e.globalTime(t)), $ = !e.parent, lr = 0), e._pt && l && (g9[I.id] = 1);
      }
      E && Dy(e), e._onInit && e._onInit(e);
    }
    e._onUpdate = c, e._initted = (!e._op || e._pt) && !$, d && t <= 0 && v.render(ji, true, true);
  }, GB = function(e, t, i, r, s, o, a, l) {
    var c = (e._pt && e._ptCache || (e._ptCache = {}))[t], u, h, d, f;
    if (!c) for (c = e._ptCache[t] = [], d = e._ptLookup, f = e._targets.length; f--; ) {
      if (u = d[f][t], u && u.d && u.d._pt) for (u = u.d._pt; u && u.p !== t && u.fp !== t; ) u = u._next;
      if (!u) return S9 = 1, e.vars[t] = "+=0", m6(e, a), S9 = 0, l ? sl(t + " not eligible for reset") : 1;
      c.push(u);
    }
    for (f = c.length; f--; ) h = c[f], u = h._pt || h, u.s = (r || r === 0) && !s ? r : u.s + (r || 0) + o * u.c, u.c = i - u.s, h.e && (h.e = Ft(i) + Rn(h.e)), h.b && (h.b = u.s + Rn(h.b));
  }, WB = function(e, t) {
    var i = e[0] ? _s(e[0]).harness : 0, r = i && i.aliases, s, o, a, l;
    if (!r) return t;
    s = As({}, t);
    for (o in r) if (o in s) for (l = r[o].split(","), a = l.length; a--; ) s[l[a]] = s[o];
    return s;
  }, jB = function(e, t, i, r) {
    var s = t.ease || r || "power1.inOut", o, a;
    if (Fn(t)) a = i[e] || (i[e] = []), t.forEach(function(l, c) {
      return a.push({
        t: c / (t.length - 1) * 100,
        v: l,
        e: s
      });
    });
    else for (o in t) a = i[o] || (i[o] = []), o === "ease" || a.push({
      t: parseFloat(e),
      v: t[o],
      e: s
    });
  }, M0 = function(e, t, i, r, s) {
    return Dt(e) ? e.call(t, i, r, s) : pn(e) && ~e.indexOf("random(") ? al(e) : e;
  }, wy = h6 + "repeat,repeatDelay,yoyo,repeatRefresh,yoyoEase,autoRevert", My = {};
  m2(wy + ",id,stagger,delay,duration,paused,scrollTrigger", function(n) {
    return My[n] = 1;
  });
  var Vt = function(n) {
    G8(e, n);
    function e(i, r, s, o) {
      var a;
      typeof r == "number" && (s.duration = r, r = s, s = null), a = n.call(this, o ? r : E0(r)) || this;
      var l = a.vars, c = l.duration, u = l.delay, h = l.immediateRender, d = l.stagger, f = l.overwrite, m = l.keyframes, _ = l.defaults, p = l.scrollTrigger, g = l.yoyoEase, y = r.parent || wt, b = (Fn(i) || j8(i) ? R3(i[0]) : "length" in r) ? [
        i
      ] : $2(i), v, x, C, A, P, M, E, I;
      if (a._targets = b.length ? d6(b) : sl("GSAP target " + i + " not found. https://gsap.com", !O2.nullTargetWarn) || [], a._ptLookup = [], a._overwrite = f, m || d || xc(c) || xc(u)) {
        if (r = a.vars, v = a.timeline = new Kn({
          data: "nested",
          defaults: _ || {},
          targets: y && y.data === "nested" ? y.vars.targets : b
        }), v.kill(), v.parent = v._dp = d3(a), v._start = 0, d || xc(c) || xc(u)) {
          if (A = b.length, E = d && cy(d), Ki(d)) for (P in d) ~wy.indexOf(P) && (I || (I = {}), I[P] = d[P]);
          for (x = 0; x < A; x++) C = Hu(r, My), C.stagger = 0, g && (C.yoyoEase = g), I && As(C, I), M = b[x], C.duration = +M0(c, d3(a), x, M, b), C.delay = (+M0(u, d3(a), x, M, b) || 0) - a._delay, !d && A === 1 && C.delay && (a._delay = u = C.delay, a._start += u, C.delay = 0), v.to(M, C, E ? E(x, M, b) : 0), v._ease = Xe.none;
          v.duration() ? c = u = 0 : a.timeline = 0;
        } else if (m) {
          E0(Z2(v.vars.defaults, {
            ease: "none"
          })), v._ease = vs(m.ease || r.ease || "none");
          var k = 0, H, K, J;
          if (Fn(m)) m.forEach(function(z) {
            return v.to(b, z, ">");
          }), v.duration();
          else {
            C = {};
            for (P in m) P === "ease" || P === "easeEach" || jB(P, m[P], C, m.easeEach);
            for (P in C) for (H = C[P].sort(function(z, $) {
              return z.t - $.t;
            }), k = 0, x = 0; x < H.length; x++) K = H[x], J = {
              ease: K.e,
              duration: (K.t - (x ? H[x - 1].t : 0)) / 100 * c
            }, J[P] = K.v, v.to(b, J, k), k += J.duration;
            v.duration() < c && v.to({}, {
              duration: c - v.duration()
            });
          }
        }
        c || a.duration(c = v.duration());
      } else a.timeline = 0;
      return f === true && !o6 && (lr = d3(a), wt.killTweensOf(b), lr = 0), ki(y, d3(a), s), r.reversed && a.reverse(), r.paused && a.paused(true), (h || !c && !m && a._start === cn(y._time) && p2(h) && SB(d3(a)) && y.data !== "nested") && (a._tTime = -1e-8, a.render(Math.max(0, -u) || 0)), p && sy(d3(a), p), a;
    }
    var t = e.prototype;
    return t.render = function(r, s, o) {
      var a = this._time, l = this._tDur, c = this._dur, u = r < 0, h = r > l - Ln && !u ? l : r < Ln ? 0 : r, d, f, m, _, p, g, y, b, v;
      if (!c) wB(this, r, s, o);
      else if (h !== this._tTime || !r || o || !this._initted && this._tTime || this._startAt && this._zTime < 0 !== u) {
        if (d = h, b = this.timeline, this._repeat) {
          if (_ = c + this._rDelay, this._repeat < -1 && u) return this.totalTime(_ * 100 + r, s, o);
          if (d = cn(h % _), h === l ? (m = this._repeat, d = c) : (m = ~~(h / _), m && m === cn(h / _) && (d = c, m--), d > c && (d = c)), g = this._yoyo && m & 1, g && (v = this._yEase, d = c - d), p = fa(this._tTime, _), d === a && !o && this._initted && m === p) return this._tTime = h, this;
          m !== p && (b && this._yEase && yy(b, g), this.vars.repeatRefresh && !g && !this._lock && this._time !== _ && this._initted && (this._lock = o = 1, this.render(cn(_ * m), true).invalidate()._lock = 0));
        }
        if (!this._initted) {
          if (oy(this, u ? r : d, o, s, h)) return this._tTime = 0, this;
          if (a !== this._time && !(o && this.vars.repeatRefresh && m !== p)) return this;
          if (c !== this._dur) return this.render(r, s, o);
        }
        if (this._tTime = h, this._time = d, !this._act && this._ts && (this._act = 1, this._lazy = 0), this.ratio = y = (v || this._ease)(d / c), this._from && (this.ratio = y = 1 - y), d && !a && !s && !m && (I2(this, "onStart"), this._tTime !== h)) return this;
        for (f = this._pt; f; ) f.r(y, f.d), f = f._next;
        b && b.render(r < 0 ? r : b._dur * b._ease(d / this._dur), s, o) || this._startAt && (this._zTime = r), this._onUpdate && !s && (u && _9(this, r, s, o), I2(this, "onUpdate")), this._repeat && m !== p && this.vars.onRepeat && !s && this.parent && I2(this, "onRepeat"), (h === this._tDur || !h) && this._tTime === h && (u && !this._onUpdate && _9(this, r, true, true), (r || !c) && (h === this._tDur && this._ts > 0 || !h && this._ts < 0) && Tr(this, 1), !s && !(u && !a) && (h || a || g) && (I2(this, h === l ? "onComplete" : "onReverseComplete", true), this._prom && !(h < l && this.timeScale() > 0) && this._prom()));
      }
      return this;
    }, t.targets = function() {
      return this._targets;
    }, t.invalidate = function(r) {
      return (!r || !this.vars.runBackwards) && (this._startAt = 0), this._pt = this._op = this._onUpdate = this._lazy = this.ratio = 0, this._ptLookup = [], this.timeline && this.timeline.invalidate(r), n.prototype.invalidate.call(this, r);
    }, t.resetTo = function(r, s, o, a, l) {
      ll || A2.wake(), this._ts || this.play();
      var c = Math.min(this._dur, (this._dp._time - this._start) * this._ts), u;
      return this._initted || m6(this, c), u = this._ease(c / this._dur), GB(this, r, s, o, a, u, c, l) ? this.resetTo(r, s, o, a, 1) : (kf(this, 0), this.parent || iy(this._dp, this, "_first", "_last", this._dp._sort ? "_start" : 0), this.render(0));
    }, t.kill = function(r, s) {
      if (s === void 0 && (s = "all"), !r && (!s || s === "all")) return this._lazy = this._pt = 0, this.parent ? Qa(this) : this;
      if (this.timeline) {
        var o = this.timeline.totalDuration();
        return this.timeline.killTweensOf(r, s, lr && lr.vars.overwrite !== true)._first || Qa(this), this.parent && o !== this.timeline.totalDuration() && ha(this, this._dur * this.timeline._tDur / o, 0, 1), this;
      }
      var a = this._targets, l = r ? $2(r) : a, c = this._ptLookup, u = this._pt, h, d, f, m, _, p, g;
      if ((!s || s === "all") && yB(a, l)) return s === "all" && (this._pt = 0), Qa(this);
      for (h = this._op = this._op || [], s !== "all" && (pn(s) && (_ = {}, m2(s, function(y) {
        return _[y] = 1;
      }), s = _), s = WB(a, s)), g = a.length; g--; ) if (~l.indexOf(a[g])) {
        d = c[g], s === "all" ? (h[g] = s, m = d, f = {}) : (f = h[g] = h[g] || {}, m = s);
        for (_ in m) p = d && d[_], p && ((!("kill" in p.d) || p.d.kill(_) === true) && Ff(this, p, "_pt"), delete d[_]), f !== "all" && (f[_] = 1);
      }
      return this._initted && !this._pt && u && Qa(this), this;
    }, e.to = function(r, s) {
      return new e(r, s, arguments[2]);
    }, e.from = function(r, s) {
      return w0(1, arguments);
    }, e.delayedCall = function(r, s, o, a) {
      return new e(s, 0, {
        immediateRender: false,
        lazy: false,
        overwrite: false,
        delay: r,
        onComplete: s,
        onReverseComplete: s,
        onCompleteParams: o,
        onReverseCompleteParams: o,
        callbackScope: a
      });
    }, e.fromTo = function(r, s, o) {
      return w0(2, arguments);
    }, e.set = function(r, s) {
      return s.duration = 0, s.repeatDelay || (s.repeat = 0), new e(r, s);
    }, e.killTweensOf = function(r, s, o) {
      return wt.killTweensOf(r, s, o);
    }, e;
  }(cl);
  Z2(Vt.prototype, {
    _targets: [],
    _lazy: 0,
    _startAt: 0,
    _op: 0,
    _onInit: 0
  });
  m2("staggerTo,staggerFrom,staggerFromTo", function(n) {
    Vt[n] = function() {
      var e = new Kn(), t = v9.call(arguments, 0);
      return t.splice(n === "staggerFromTo" ? 5 : 4, 0, 0), e[n].apply(e, t);
    };
  });
  var g6 = function(e, t, i) {
    return e[t] = i;
  }, Ty = function(e, t, i) {
    return e[t](i);
  }, XB = function(e, t, i, r) {
    return e[t](r.fp, i);
  }, $B = function(e, t, i) {
    return e.setAttribute(t, i);
  }, _6 = function(e, t) {
    return Dt(e[t]) ? Ty : a6(e[t]) && e.setAttribute ? $B : g6;
  }, Cy = function(e, t) {
    return t.set(t.t, t.p, Math.round((t.s + t.c * e) * 1e6) / 1e6, t);
  }, qB = function(e, t) {
    return t.set(t.t, t.p, !!(t.s + t.c * e), t);
  }, Ay = function(e, t) {
    var i = t._pt, r = "";
    if (!e && t.b) r = t.b;
    else if (e === 1 && t.e) r = t.e;
    else {
      for (; i; ) r = i.p + (i.m ? i.m(i.s + i.c * e) : Math.round((i.s + i.c * e) * 1e4) / 1e4) + r, i = i._next;
      r += t.c;
    }
    t.set(t.t, t.p, r, t);
  }, b6 = function(e, t) {
    for (var i = t._pt; i; ) i.r(e, i.d), i = i._next;
  }, YB = function(e, t, i, r) {
    for (var s = this._pt, o; s; ) o = s._next, s.p === r && s.modifier(e, t, i), s = o;
  }, KB = function(e) {
    for (var t = this._pt, i, r; t; ) r = t._next, t.p === e && !t.op || t.op === e ? Ff(this, t, "_pt") : t.dep || (i = 1), t = r;
    return !i;
  }, JB = function(e, t, i, r) {
    r.mSet(e, t, r.m.call(r.tween, i, r.mt), r);
  }, Dy = function(e) {
    for (var t = e._pt, i, r, s, o; t; ) {
      for (i = t._next, r = s; r && r.pr > t.pr; ) r = r._next;
      (t._prev = r ? r._prev : o) ? t._prev._next = t : s = t, (t._next = r) ? r._prev = t : o = t, t = i;
    }
    e._pt = s;
  }, g2 = function() {
    function n(t, i, r, s, o, a, l, c, u) {
      this.t = i, this.s = s, this.c = o, this.p = r, this.r = a || Cy, this.d = l || this, this.set = c || g6, this.pr = u || 0, this._next = t, t && (t._prev = this);
    }
    var e = n.prototype;
    return e.modifier = function(i, r, s) {
      this.mSet = this.mSet || this.set, this.set = JB, this.m = i, this.mt = s, this.tween = r;
    }, n;
  }();
  m2(h6 + "parent,duration,ease,delay,overwrite,runBackwards,startAt,yoyo,immediateRender,repeat,repeatDelay,data,paused,reversed,lazy,callbackScope,stringFilter,id,yoyoEase,stagger,inherit,repeatRefresh,keyframes,autoRevert,scrollTrigger", function(n) {
    return f6[n] = 1;
  });
  N2.TweenMax = N2.TweenLite = Vt;
  N2.TimelineLite = N2.TimelineMax = Kn;
  wt = new Kn({
    sortChildren: false,
    defaults: ua,
    autoRemoveChildren: true,
    id: "root",
    smoothChildTiming: true
  });
  O2.stringFilter = by;
  var ys = [], Zc = {}, QB = [], s_ = 0, ZB = 0, pd = function(e) {
    return (Zc[e] || QB).map(function(t) {
      return t();
    });
  }, E9 = function() {
    var e = Date.now(), t = [];
    e - s_ > 2 && (pd("matchMediaInit"), ys.forEach(function(i) {
      var r = i.queries, s = i.conditions, o, a, l, c;
      for (a in r) o = Pi.matchMedia(r[a]).matches, o && (l = 1), o !== s[a] && (s[a] = o, c = 1);
      c && (i.revert(), l && t.push(i));
    }), pd("matchMediaRevert"), t.forEach(function(i) {
      return i.onMatch(i, function(r) {
        return i.add(null, r);
      });
    }), s_ = e, pd("matchMedia"));
  }, Ry = function() {
    function n(t, i) {
      this.selector = i && y9(i), this.data = [], this._r = [], this.isReverted = false, this.id = ZB++, t && this.add(t);
    }
    var e = n.prototype;
    return e.add = function(i, r, s) {
      Dt(i) && (s = r, r = i, i = Dt);
      var o = this, a = function() {
        var c = vt, u = o.selector, h;
        return c && c !== o && c.data.push(o), s && (o.selector = y9(s)), vt = o, h = r.apply(o, arguments), Dt(h) && o._r.push(h), vt = c, o.selector = u, o.isReverted = false, h;
      };
      return o.last = a, i === Dt ? a(o, function(l) {
        return o.add(null, l);
      }) : i ? o[i] = a : a;
    }, e.ignore = function(i) {
      var r = vt;
      vt = null, i(this), vt = r;
    }, e.getTweens = function() {
      var i = [];
      return this.data.forEach(function(r) {
        return r instanceof n ? i.push.apply(i, r.getTweens()) : r instanceof Vt && !(r.parent && r.parent.data === "nested") && i.push(r);
      }), i;
    }, e.clear = function() {
      this._r.length = this.data.length = 0;
    }, e.kill = function(i, r) {
      var s = this;
      if (i ? function() {
        for (var a = s.getTweens(), l = s.data.length, c; l--; ) c = s.data[l], c.data === "isFlip" && (c.revert(), c.getChildren(true, true, false).forEach(function(u) {
          return a.splice(a.indexOf(u), 1);
        }));
        for (a.map(function(u) {
          return {
            g: u._dur || u._delay || u._sat && !u._sat.vars.immediateRender ? u.globalTime(0) : -1 / 0,
            t: u
          };
        }).sort(function(u, h) {
          return h.g - u.g || -1 / 0;
        }).forEach(function(u) {
          return u.t.revert(i);
        }), l = s.data.length; l--; ) c = s.data[l], c instanceof Kn ? c.data !== "nested" && (c.scrollTrigger && c.scrollTrigger.revert(), c.kill()) : !(c instanceof Vt) && c.revert && c.revert(i);
        s._r.forEach(function(u) {
          return u(i, s);
        }), s.isReverted = true;
      }() : this.data.forEach(function(a) {
        return a.kill && a.kill();
      }), this.clear(), r) for (var o = ys.length; o--; ) ys[o].id === this.id && ys.splice(o, 1);
    }, e.revert = function(i) {
      this.kill(i || {});
    }, n;
  }(), eH = function() {
    function n(t) {
      this.contexts = [], this.scope = t, vt && vt.data.push(this);
    }
    var e = n.prototype;
    return e.add = function(i, r, s) {
      Ki(i) || (i = {
        matches: i
      });
      var o = new Ry(0, s || this.scope), a = o.conditions = {}, l, c, u;
      vt && !o.selector && (o.selector = vt.selector), this.contexts.push(o), r = o.add("onMatch", r), o.queries = i;
      for (c in i) c === "all" ? u = 1 : (l = Pi.matchMedia(i[c]), l && (ys.indexOf(o) < 0 && ys.push(o), (a[c] = l.matches) && (u = 1), l.addListener ? l.addListener(E9) : l.addEventListener("change", E9)));
      return u && r(o, function(h) {
        return o.add(null, h);
      }), this;
    }, e.revert = function(i) {
      this.kill(i || {});
    }, e.kill = function(i) {
      this.contexts.forEach(function(r) {
        return r.kill(i, true);
      });
    }, n;
  }(), Vu = {
    registerPlugin: function() {
      for (var e = arguments.length, t = new Array(e), i = 0; i < e; i++) t[i] = arguments[i];
      t.forEach(function(r) {
        return my(r);
      });
    },
    timeline: function(e) {
      return new Kn(e);
    },
    getTweensOf: function(e, t) {
      return wt.getTweensOf(e, t);
    },
    getProperty: function(e, t, i, r) {
      pn(e) && (e = $2(e)[0]);
      var s = _s(e || {}).get, o = i ? ny : ty;
      return i === "native" && (i = ""), e && (t ? o((M2[t] && M2[t].get || s)(e, t, i, r)) : function(a, l, c) {
        return o((M2[a] && M2[a].get || s)(e, a, l, c));
      });
    },
    quickSetter: function(e, t, i) {
      if (e = $2(e), e.length > 1) {
        var r = e.map(function(u) {
          return b2.quickSetter(u, t, i);
        }), s = r.length;
        return function(u) {
          for (var h = s; h--; ) r[h](u);
        };
      }
      e = e[0] || {};
      var o = M2[t], a = _s(e), l = a.harness && (a.harness.aliases || {})[t] || t, c = o ? function(u) {
        var h = new o();
        yo._pt = 0, h.init(e, i ? u + i : u, yo, 0, [
          e
        ]), h.render(1, h), yo._pt && b6(1, yo);
      } : a.set(e, l);
      return o ? c : function(u) {
        return c(e, l, i ? u + i : u, a, 1);
      };
    },
    quickTo: function(e, t, i) {
      var r, s = b2.to(e, As((r = {}, r[t] = "+=0.1", r.paused = true, r), i || {})), o = function(l, c, u) {
        return s.resetTo(t, l, c, u);
      };
      return o.tween = s, o;
    },
    isTweening: function(e) {
      return wt.getTweensOf(e, true).length > 0;
    },
    defaults: function(e) {
      return e && e.ease && (e.ease = vs(e.ease, ua.ease)), e_(ua, e || {});
    },
    config: function(e) {
      return e_(O2, e || {});
    },
    registerEffect: function(e) {
      var t = e.name, i = e.effect, r = e.plugins, s = e.defaults, o = e.extendTimeline;
      (r || "").split(",").forEach(function(a) {
        return a && !M2[a] && !N2[a] && sl(t + " effect requires " + a + " plugin.");
      }), ud[t] = function(a, l, c) {
        return i($2(a), Z2(l || {}, s), c);
      }, o && (Kn.prototype[t] = function(a, l, c) {
        return this.add(ud[t](a, Ki(l) ? l : (c = l) && {}, this), c);
      });
    },
    registerEase: function(e, t) {
      Xe[e] = vs(t);
    },
    parseEase: function(e, t) {
      return arguments.length ? vs(e, t) : Xe;
    },
    getById: function(e) {
      return wt.getById(e);
    },
    exportRoot: function(e, t) {
      e === void 0 && (e = {});
      var i = new Kn(e), r, s;
      for (i.smoothChildTiming = p2(e.smoothChildTiming), wt.remove(i), i._dp = 0, i._time = i._tTime = wt._time, r = wt._first; r; ) s = r._next, (t || !(!r._dur && r instanceof Vt && r.vars.onComplete === r._targets[0])) && ki(i, r, r._start - r._delay), r = s;
      return ki(wt, i, 0), i;
    },
    context: function(e, t) {
      return e ? new Ry(e, t) : vt;
    },
    matchMedia: function(e) {
      return new eH(e);
    },
    matchMediaRefresh: function() {
      return ys.forEach(function(e) {
        var t = e.conditions, i, r;
        for (r in t) t[r] && (t[r] = false, i = 1);
        i && e.revert();
      }) || E9();
    },
    addEventListener: function(e, t) {
      var i = Zc[e] || (Zc[e] = []);
      ~i.indexOf(t) || i.push(t);
    },
    removeEventListener: function(e, t) {
      var i = Zc[e], r = i && i.indexOf(t);
      r >= 0 && i.splice(r, 1);
    },
    utils: {
      wrap: LB,
      wrapYoyo: IB,
      distribute: cy,
      random: fy,
      snap: uy,
      normalize: PB,
      getUnit: Rn,
      clamp: CB,
      splitColor: gy,
      toArray: $2,
      selector: y9,
      mapRange: dy,
      pipe: DB,
      unitize: RB,
      interpolate: FB,
      shuffle: ly
    },
    install: K8,
    effects: ud,
    ticker: A2,
    updateRoot: Kn.updateRoot,
    plugins: M2,
    globalTimeline: wt,
    core: {
      PropTween: g2,
      globals: J8,
      Tween: Vt,
      Timeline: Kn,
      Animation: cl,
      getCache: _s,
      _removeLinkedListItem: Ff,
      reverting: function() {
        return In;
      },
      context: function(e) {
        return e && vt && (vt.data.push(e), e._ctx = vt), vt;
      },
      suppressOverwrites: function(e) {
        return o6 = e;
      }
    }
  };
  m2("to,from,fromTo,delayedCall,set,killTweensOf", function(n) {
    return Vu[n] = Vt[n];
  });
  A2.add(Kn.updateRoot);
  yo = Vu.to({}, {
    duration: 0
  });
  var tH = function(e, t) {
    for (var i = e._pt; i && i.p !== t && i.op !== t && i.fp !== t; ) i = i._next;
    return i;
  }, nH = function(e, t) {
    var i = e._targets, r, s, o;
    for (r in t) for (s = i.length; s--; ) o = e._ptLookup[s][r], o && (o = o.d) && (o._pt && (o = tH(o, r)), o && o.modifier && o.modifier(t[r], e, i[s], r));
  }, md = function(e, t) {
    return {
      name: e,
      rawVars: 1,
      init: function(r, s, o) {
        o._onInit = function(a) {
          var l, c;
          if (pn(s) && (l = {}, m2(s, function(u) {
            return l[u] = 1;
          }), s = l), t) {
            l = {};
            for (c in s) l[c] = t(s[c]);
            s = l;
          }
          nH(a, s);
        };
      }
    };
  }, b2 = Vu.registerPlugin({
    name: "attr",
    init: function(e, t, i, r, s) {
      var o, a, l;
      this.tween = i;
      for (o in t) l = e.getAttribute(o) || "", a = this.add(e, "setAttribute", (l || 0) + "", t[o], r, s, 0, 0, o), a.op = o, a.b = l, this._props.push(o);
    },
    render: function(e, t) {
      for (var i = t._pt; i; ) In ? i.set(i.t, i.p, i.b, i) : i.r(e, i.d), i = i._next;
    }
  }, {
    name: "endArray",
    init: function(e, t) {
      for (var i = t.length; i--; ) this.add(e, i, e[i] || 0, t[i], 0, 0, 0, 0, 0, 1);
    }
  }, md("roundProps", x9), md("modifiers"), md("snap", uy)) || Vu;
  Vt.version = Kn.version = b2.version = "3.12.5";
  Y8 = 1;
  l6() && da();
  Xe.Power0;
  Xe.Power1;
  Xe.Power2;
  Xe.Power3;
  Xe.Power4;
  Xe.Linear;
  Xe.Quad;
  Xe.Cubic;
  Xe.Quart;
  Xe.Quint;
  Xe.Strong;
  Xe.Elastic;
  Xe.Back;
  Xe.SteppedEase;
  Xe.Bounce;
  Xe.Sine;
  Xe.Expo;
  Xe.Circ;
  var o_, cr, Ho, v6, us, a_, y6, iH = function() {
    return typeof window < "u";
  }, P3 = {}, ns = 180 / Math.PI, zo = Math.PI / 180, ro = Math.atan2, l_ = 1e8, x6 = /([A-Z])/g, rH = /(left|right|width|margin|padding|x)/i, sH = /[\s,\(]\S/, Vi = {
    autoAlpha: "opacity,visibility",
    scale: "scaleX,scaleY",
    alpha: "opacity"
  }, w9 = function(e, t) {
    return t.set(t.t, t.p, Math.round((t.s + t.c * e) * 1e4) / 1e4 + t.u, t);
  }, oH = function(e, t) {
    return t.set(t.t, t.p, e === 1 ? t.e : Math.round((t.s + t.c * e) * 1e4) / 1e4 + t.u, t);
  }, aH = function(e, t) {
    return t.set(t.t, t.p, e ? Math.round((t.s + t.c * e) * 1e4) / 1e4 + t.u : t.b, t);
  }, lH = function(e, t) {
    var i = t.s + t.c * e;
    t.set(t.t, t.p, ~~(i + (i < 0 ? -0.5 : 0.5)) + t.u, t);
  }, Py = function(e, t) {
    return t.set(t.t, t.p, e ? t.e : t.b, t);
  }, Ly = function(e, t) {
    return t.set(t.t, t.p, e !== 1 ? t.b : t.e, t);
  }, cH = function(e, t, i) {
    return e.style[t] = i;
  }, uH = function(e, t, i) {
    return e.style.setProperty(t, i);
  }, fH = function(e, t, i) {
    return e._gsap[t] = i;
  }, hH = function(e, t, i) {
    return e._gsap.scaleX = e._gsap.scaleY = i;
  }, dH = function(e, t, i, r, s) {
    var o = e._gsap;
    o.scaleX = o.scaleY = i, o.renderTransform(s, o);
  }, pH = function(e, t, i, r, s) {
    var o = e._gsap;
    o[t] = i, o.renderTransform(s, o);
  }, Mt = "transform", _2 = Mt + "Origin", mH = function n(e, t) {
    var i = this, r = this.target, s = r.style, o = r._gsap;
    if (e in P3 && s) {
      if (this.tfm = this.tfm || {}, e !== "transform") e = Vi[e] || e, ~e.indexOf(",") ? e.split(",").forEach(function(a) {
        return i.tfm[a] = p3(r, a);
      }) : this.tfm[e] = o.x ? o[e] : p3(r, e), e === _2 && (this.tfm.zOrigin = o.zOrigin);
      else return Vi.transform.split(",").forEach(function(a) {
        return n.call(i, a, t);
      });
      if (this.props.indexOf(Mt) >= 0) return;
      o.svg && (this.svgo = r.getAttribute("data-svg-origin"), this.props.push(_2, t, "")), e = Mt;
    }
    (s || t) && this.props.push(e, t, s[e]);
  }, Iy = function(e) {
    e.translate && (e.removeProperty("translate"), e.removeProperty("scale"), e.removeProperty("rotate"));
  }, gH = function() {
    var e = this.props, t = this.target, i = t.style, r = t._gsap, s, o;
    for (s = 0; s < e.length; s += 3) e[s + 1] ? t[e[s]] = e[s + 2] : e[s + 2] ? i[e[s]] = e[s + 2] : i.removeProperty(e[s].substr(0, 2) === "--" ? e[s] : e[s].replace(x6, "-$1").toLowerCase());
    if (this.tfm) {
      for (o in this.tfm) r[o] = this.tfm[o];
      r.svg && (r.renderTransform(), t.setAttribute("data-svg-origin", this.svgo || "")), s = y6(), (!s || !s.isStart) && !i[Mt] && (Iy(i), r.zOrigin && i[_2] && (i[_2] += " " + r.zOrigin + "px", r.zOrigin = 0, r.renderTransform()), r.uncache = 1);
    }
  }, Fy = function(e, t) {
    var i = {
      target: e,
      props: [],
      revert: gH,
      save: mH
    };
    return e._gsap || b2.core.getCache(e), t && t.split(",").forEach(function(r) {
      return i.save(r);
    }), i;
  }, Oy, M9 = function(e, t) {
    var i = cr.createElementNS ? cr.createElementNS((t || "http://www.w3.org/1999/xhtml").replace(/^https/, "http"), e) : cr.createElement(e);
    return i && i.style ? i : cr.createElement(e);
  }, Xi = function n(e, t, i) {
    var r = getComputedStyle(e);
    return r[t] || r.getPropertyValue(t.replace(x6, "-$1").toLowerCase()) || r.getPropertyValue(t) || !i && n(e, pa(t) || t, 1) || "";
  }, c_ = "O,Moz,ms,Ms,Webkit".split(","), pa = function(e, t, i) {
    var r = t || us, s = r.style, o = 5;
    if (e in s && !i) return e;
    for (e = e.charAt(0).toUpperCase() + e.substr(1); o-- && !(c_[o] + e in s); ) ;
    return o < 0 ? null : (o === 3 ? "ms" : o >= 0 ? c_[o] : "") + e;
  }, T9 = function() {
    iH() && window.document && (o_ = window, cr = o_.document, Ho = cr.documentElement, us = M9("div") || {
      style: {}
    }, M9("div"), Mt = pa(Mt), _2 = Mt + "Origin", us.style.cssText = "border-width:0;line-height:0;position:absolute;padding:0", Oy = !!pa("perspective"), y6 = b2.core.reverting, v6 = 1);
  }, gd = function n(e) {
    var t = M9("svg", this.ownerSVGElement && this.ownerSVGElement.getAttribute("xmlns") || "http://www.w3.org/2000/svg"), i = this.parentNode, r = this.nextSibling, s = this.style.cssText, o;
    if (Ho.appendChild(t), t.appendChild(this), this.style.display = "block", e) try {
      o = this.getBBox(), this._gsapBBox = this.getBBox, this.getBBox = n;
    } catch {
    }
    else this._gsapBBox && (o = this._gsapBBox());
    return i && (r ? i.insertBefore(this, r) : i.appendChild(this)), Ho.removeChild(t), this.style.cssText = s, o;
  }, u_ = function(e, t) {
    for (var i = t.length; i--; ) if (e.hasAttribute(t[i])) return e.getAttribute(t[i]);
  }, ky = function(e) {
    var t;
    try {
      t = e.getBBox();
    } catch {
      t = gd.call(e, true);
    }
    return t && (t.width || t.height) || e.getBBox === gd || (t = gd.call(e, true)), t && !t.width && !t.x && !t.y ? {
      x: +u_(e, [
        "x",
        "cx",
        "x1"
      ]) || 0,
      y: +u_(e, [
        "y",
        "cy",
        "y1"
      ]) || 0,
      width: 0,
      height: 0
    } : t;
  }, Ny = function(e) {
    return !!(e.getCTM && (!e.parentNode || e.ownerSVGElement) && ky(e));
  }, Ds = function(e, t) {
    if (t) {
      var i = e.style, r;
      t in P3 && t !== _2 && (t = Mt), i.removeProperty ? (r = t.substr(0, 2), (r === "ms" || t.substr(0, 6) === "webkit") && (t = "-" + t), i.removeProperty(r === "--" ? t : t.replace(x6, "-$1").toLowerCase())) : i.removeAttribute(t);
    }
  }, ur = function(e, t, i, r, s, o) {
    var a = new g2(e._pt, t, i, 0, 1, o ? Ly : Py);
    return e._pt = a, a.b = r, a.e = s, e._props.push(i), a;
  }, f_ = {
    deg: 1,
    rad: 1,
    turn: 1
  }, _H = {
    grid: 1,
    flex: 1
  }, Cr = function n(e, t, i, r) {
    var s = parseFloat(i) || 0, o = (i + "").trim().substr((s + "").length) || "px", a = us.style, l = rH.test(t), c = e.tagName.toLowerCase() === "svg", u = (c ? "client" : "offset") + (l ? "Width" : "Height"), h = 100, d = r === "px", f = r === "%", m, _, p, g;
    if (r === o || !s || f_[r] || f_[o]) return s;
    if (o !== "px" && !d && (s = n(e, t, i, "px")), g = e.getCTM && Ny(e), (f || o === "%") && (P3[t] || ~t.indexOf("adius"))) return m = g ? e.getBBox()[l ? "width" : "height"] : e[u], Ft(f ? s / m * h : s / 100 * m);
    if (a[l ? "width" : "height"] = h + (d ? o : r), _ = ~t.indexOf("adius") || r === "em" && e.appendChild && !c ? e : e.parentNode, g && (_ = (e.ownerSVGElement || {}).parentNode), (!_ || _ === cr || !_.appendChild) && (_ = cr.body), p = _._gsap, p && f && p.width && l && p.time === A2.time && !p.uncache) return Ft(s / p.width * h);
    if (f && (t === "height" || t === "width")) {
      var y = e.style[t];
      e.style[t] = h + r, m = e[u], y ? e.style[t] = y : Ds(e, t);
    } else (f || o === "%") && !_H[Xi(_, "display")] && (a.position = Xi(e, "position")), _ === e && (a.position = "static"), _.appendChild(us), m = us[u], _.removeChild(us), a.position = "absolute";
    return l && f && (p = _s(_), p.time = A2.time, p.width = _[u]), Ft(d ? m * s / h : m && s ? h / m * s : 0);
  }, p3 = function(e, t, i, r) {
    var s;
    return v6 || T9(), t in Vi && t !== "transform" && (t = Vi[t], ~t.indexOf(",") && (t = t.split(",")[0])), P3[t] && t !== "transform" ? (s = fl(e, r), s = t !== "transformOrigin" ? s[t] : s.svg ? s.origin : Wu(Xi(e, _2)) + " " + s.zOrigin + "px") : (s = e.style[t], (!s || s === "auto" || r || ~(s + "").indexOf("calc(")) && (s = Gu[t] && Gu[t](e, t, i) || Xi(e, t) || Z8(e, t) || (t === "opacity" ? 1 : 0))), i && !~(s + "").trim().indexOf(" ") ? Cr(e, t, s, i) + i : s;
  }, bH = function(e, t, i, r) {
    if (!i || i === "none") {
      var s = pa(t, e, 1), o = s && Xi(e, s, 1);
      o && o !== i ? (t = s, i = o) : t === "borderColor" && (i = Xi(e, "borderTopColor"));
    }
    var a = new g2(this._pt, e.style, t, 0, 1, Ay), l = 0, c = 0, u, h, d, f, m, _, p, g, y, b, v, x;
    if (a.b = i, a.e = r, i += "", r += "", r === "auto" && (_ = e.style[t], e.style[t] = r, r = Xi(e, t) || r, _ ? e.style[t] = _ : Ds(e, t)), u = [
      i,
      r
    ], by(u), i = u[0], r = u[1], d = i.match(vo) || [], x = r.match(vo) || [], x.length) {
      for (; h = vo.exec(r); ) p = h[0], y = r.substring(l, h.index), m ? m = (m + 1) % 5 : (y.substr(-5) === "rgba(" || y.substr(-5) === "hsla(") && (m = 1), p !== (_ = d[c++] || "") && (f = parseFloat(_) || 0, v = _.substr((f + "").length), p.charAt(1) === "=" && (p = Bo(f, p) + v), g = parseFloat(p), b = p.substr((g + "").length), l = vo.lastIndex - b.length, b || (b = b || O2.units[t] || v, l === r.length && (r += b, a.e += b)), v !== b && (f = Cr(e, t, _, b) || 0), a._pt = {
        _next: a._pt,
        p: y || c === 1 ? y : ",",
        s: f,
        c: g - f,
        m: m && m < 4 || t === "zIndex" ? Math.round : 0
      });
      a.c = l < r.length ? r.substring(l, r.length) : "";
    } else a.r = t === "display" && r === "none" ? Ly : Py;
    return $8.test(r) && (a.e = 0), this._pt = a, a;
  }, h_ = {
    top: "0%",
    bottom: "100%",
    left: "0%",
    right: "100%",
    center: "50%"
  }, vH = function(e) {
    var t = e.split(" "), i = t[0], r = t[1] || "50%";
    return (i === "top" || i === "bottom" || r === "left" || r === "right") && (e = i, i = r, r = e), t[0] = h_[i] || i, t[1] = h_[r] || r, t.join(" ");
  }, yH = function(e, t) {
    if (t.tween && t.tween._time === t.tween._dur) {
      var i = t.t, r = i.style, s = t.u, o = i._gsap, a, l, c;
      if (s === "all" || s === true) r.cssText = "", l = 1;
      else for (s = s.split(","), c = s.length; --c > -1; ) a = s[c], P3[a] && (l = 1, a = a === "transformOrigin" ? _2 : Mt), Ds(i, a);
      l && (Ds(i, Mt), o && (o.svg && i.removeAttribute("transform"), fl(i, 1), o.uncache = 1, Iy(r)));
    }
  }, Gu = {
    clearProps: function(e, t, i, r, s) {
      if (s.data !== "isFromStart") {
        var o = e._pt = new g2(e._pt, t, i, 0, 0, yH);
        return o.u = r, o.pr = -10, o.tween = s, e._props.push(i), 1;
      }
    }
  }, ul = [
    1,
    0,
    0,
    1,
    0,
    0
  ], Uy = {}, By = function(e) {
    return e === "matrix(1, 0, 0, 1, 0, 0)" || e === "none" || !e;
  }, d_ = function(e) {
    var t = Xi(e, Mt);
    return By(t) ? ul : t.substr(7).match(X8).map(Ft);
  }, S6 = function(e, t) {
    var i = e._gsap || _s(e), r = e.style, s = d_(e), o, a, l, c;
    return i.svg && e.getAttribute("transform") ? (l = e.transform.baseVal.consolidate().matrix, s = [
      l.a,
      l.b,
      l.c,
      l.d,
      l.e,
      l.f
    ], s.join(",") === "1,0,0,1,0,0" ? ul : s) : (s === ul && !e.offsetParent && e !== Ho && !i.svg && (l = r.display, r.display = "block", o = e.parentNode, (!o || !e.offsetParent) && (c = 1, a = e.nextElementSibling, Ho.appendChild(e)), s = d_(e), l ? r.display = l : Ds(e, "display"), c && (a ? o.insertBefore(e, a) : o ? o.appendChild(e) : Ho.removeChild(e))), t && s.length > 6 ? [
      s[0],
      s[1],
      s[4],
      s[5],
      s[12],
      s[13]
    ] : s);
  }, C9 = function(e, t, i, r, s, o) {
    var a = e._gsap, l = s || S6(e, true), c = a.xOrigin || 0, u = a.yOrigin || 0, h = a.xOffset || 0, d = a.yOffset || 0, f = l[0], m = l[1], _ = l[2], p = l[3], g = l[4], y = l[5], b = t.split(" "), v = parseFloat(b[0]) || 0, x = parseFloat(b[1]) || 0, C, A, P, M;
    i ? l !== ul && (A = f * p - m * _) && (P = v * (p / A) + x * (-_ / A) + (_ * y - p * g) / A, M = v * (-m / A) + x * (f / A) - (f * y - m * g) / A, v = P, x = M) : (C = ky(e), v = C.x + (~b[0].indexOf("%") ? v / 100 * C.width : v), x = C.y + (~(b[1] || b[0]).indexOf("%") ? x / 100 * C.height : x)), r || r !== false && a.smooth ? (g = v - c, y = x - u, a.xOffset = h + (g * f + y * _) - g, a.yOffset = d + (g * m + y * p) - y) : a.xOffset = a.yOffset = 0, a.xOrigin = v, a.yOrigin = x, a.smooth = !!r, a.origin = t, a.originIsAbsolute = !!i, e.style[_2] = "0px 0px", o && (ur(o, a, "xOrigin", c, v), ur(o, a, "yOrigin", u, x), ur(o, a, "xOffset", h, a.xOffset), ur(o, a, "yOffset", d, a.yOffset)), e.setAttribute("data-svg-origin", v + " " + x);
  }, fl = function(e, t) {
    var i = e._gsap || new Sy(e);
    if ("x" in i && !t && !i.uncache) return i;
    var r = e.style, s = i.scaleX < 0, o = "px", a = "deg", l = getComputedStyle(e), c = Xi(e, _2) || "0", u, h, d, f, m, _, p, g, y, b, v, x, C, A, P, M, E, I, k, H, K, J, z, $, G, Q, V, w1, m1, I1, Z, f1;
    return u = h = d = _ = p = g = y = b = v = 0, f = m = 1, i.svg = !!(e.getCTM && Ny(e)), l.translate && ((l.translate !== "none" || l.scale !== "none" || l.rotate !== "none") && (r[Mt] = (l.translate !== "none" ? "translate3d(" + (l.translate + " 0 0").split(" ").slice(0, 3).join(", ") + ") " : "") + (l.rotate !== "none" ? "rotate(" + l.rotate + ") " : "") + (l.scale !== "none" ? "scale(" + l.scale.split(" ").join(",") + ") " : "") + (l[Mt] !== "none" ? l[Mt] : "")), r.scale = r.rotate = r.translate = "none"), A = S6(e, i.svg), i.svg && (i.uncache ? (G = e.getBBox(), c = i.xOrigin - G.x + "px " + (i.yOrigin - G.y) + "px", $ = "") : $ = !t && e.getAttribute("data-svg-origin"), C9(e, $ || c, !!$ || i.originIsAbsolute, i.smooth !== false, A)), x = i.xOrigin || 0, C = i.yOrigin || 0, A !== ul && (I = A[0], k = A[1], H = A[2], K = A[3], u = J = A[4], h = z = A[5], A.length === 6 ? (f = Math.sqrt(I * I + k * k), m = Math.sqrt(K * K + H * H), _ = I || k ? ro(k, I) * ns : 0, y = H || K ? ro(H, K) * ns + _ : 0, y && (m *= Math.abs(Math.cos(y * zo))), i.svg && (u -= x - (x * I + C * H), h -= C - (x * k + C * K))) : (f1 = A[6], I1 = A[7], V = A[8], w1 = A[9], m1 = A[10], Z = A[11], u = A[12], h = A[13], d = A[14], P = ro(f1, m1), p = P * ns, P && (M = Math.cos(-P), E = Math.sin(-P), $ = J * M + V * E, G = z * M + w1 * E, Q = f1 * M + m1 * E, V = J * -E + V * M, w1 = z * -E + w1 * M, m1 = f1 * -E + m1 * M, Z = I1 * -E + Z * M, J = $, z = G, f1 = Q), P = ro(-H, m1), g = P * ns, P && (M = Math.cos(-P), E = Math.sin(-P), $ = I * M - V * E, G = k * M - w1 * E, Q = H * M - m1 * E, Z = K * E + Z * M, I = $, k = G, H = Q), P = ro(k, I), _ = P * ns, P && (M = Math.cos(P), E = Math.sin(P), $ = I * M + k * E, G = J * M + z * E, k = k * M - I * E, z = z * M - J * E, I = $, J = G), p && Math.abs(p) + Math.abs(_) > 359.9 && (p = _ = 0, g = 180 - g), f = Ft(Math.sqrt(I * I + k * k + H * H)), m = Ft(Math.sqrt(z * z + f1 * f1)), P = ro(J, z), y = Math.abs(P) > 2e-4 ? P * ns : 0, v = Z ? 1 / (Z < 0 ? -Z : Z) : 0), i.svg && ($ = e.getAttribute("transform"), i.forceCSS = e.setAttribute("transform", "") || !By(Xi(e, Mt)), $ && e.setAttribute("transform", $))), Math.abs(y) > 90 && Math.abs(y) < 270 && (s ? (f *= -1, y += _ <= 0 ? 180 : -180, _ += _ <= 0 ? 180 : -180) : (m *= -1, y += y <= 0 ? 180 : -180)), t = t || i.uncache, i.x = u - ((i.xPercent = u && (!t && i.xPercent || (Math.round(e.offsetWidth / 2) === Math.round(-u) ? -50 : 0))) ? e.offsetWidth * i.xPercent / 100 : 0) + o, i.y = h - ((i.yPercent = h && (!t && i.yPercent || (Math.round(e.offsetHeight / 2) === Math.round(-h) ? -50 : 0))) ? e.offsetHeight * i.yPercent / 100 : 0) + o, i.z = d + o, i.scaleX = Ft(f), i.scaleY = Ft(m), i.rotation = Ft(_) + a, i.rotationX = Ft(p) + a, i.rotationY = Ft(g) + a, i.skewX = y + a, i.skewY = b + a, i.transformPerspective = v + o, (i.zOrigin = parseFloat(c.split(" ")[2]) || !t && i.zOrigin || 0) && (r[_2] = Wu(c)), i.xOffset = i.yOffset = 0, i.force3D = O2.force3D, i.renderTransform = i.svg ? SH : Oy ? Hy : xH, i.uncache = 0, i;
  }, Wu = function(e) {
    return (e = e.split(" "))[0] + " " + e[1];
  }, _d = function(e, t, i) {
    var r = Rn(t);
    return Ft(parseFloat(t) + parseFloat(Cr(e, "x", i + "px", r))) + r;
  }, xH = function(e, t) {
    t.z = "0px", t.rotationY = t.rotationX = "0deg", t.force3D = 0, Hy(e, t);
  }, Yr = "0deg", Ga = "0px", Kr = ") ", Hy = function(e, t) {
    var i = t || this, r = i.xPercent, s = i.yPercent, o = i.x, a = i.y, l = i.z, c = i.rotation, u = i.rotationY, h = i.rotationX, d = i.skewX, f = i.skewY, m = i.scaleX, _ = i.scaleY, p = i.transformPerspective, g = i.force3D, y = i.target, b = i.zOrigin, v = "", x = g === "auto" && e && e !== 1 || g === true;
    if (b && (h !== Yr || u !== Yr)) {
      var C = parseFloat(u) * zo, A = Math.sin(C), P = Math.cos(C), M;
      C = parseFloat(h) * zo, M = Math.cos(C), o = _d(y, o, A * M * -b), a = _d(y, a, -Math.sin(C) * -b), l = _d(y, l, P * M * -b + b);
    }
    p !== Ga && (v += "perspective(" + p + Kr), (r || s) && (v += "translate(" + r + "%, " + s + "%) "), (x || o !== Ga || a !== Ga || l !== Ga) && (v += l !== Ga || x ? "translate3d(" + o + ", " + a + ", " + l + ") " : "translate(" + o + ", " + a + Kr), c !== Yr && (v += "rotate(" + c + Kr), u !== Yr && (v += "rotateY(" + u + Kr), h !== Yr && (v += "rotateX(" + h + Kr), (d !== Yr || f !== Yr) && (v += "skew(" + d + ", " + f + Kr), (m !== 1 || _ !== 1) && (v += "scale(" + m + ", " + _ + Kr), y.style[Mt] = v || "translate(0, 0)";
  }, SH = function(e, t) {
    var i = t || this, r = i.xPercent, s = i.yPercent, o = i.x, a = i.y, l = i.rotation, c = i.skewX, u = i.skewY, h = i.scaleX, d = i.scaleY, f = i.target, m = i.xOrigin, _ = i.yOrigin, p = i.xOffset, g = i.yOffset, y = i.forceCSS, b = parseFloat(o), v = parseFloat(a), x, C, A, P, M;
    l = parseFloat(l), c = parseFloat(c), u = parseFloat(u), u && (u = parseFloat(u), c += u, l += u), l || c ? (l *= zo, c *= zo, x = Math.cos(l) * h, C = Math.sin(l) * h, A = Math.sin(l - c) * -d, P = Math.cos(l - c) * d, c && (u *= zo, M = Math.tan(c - u), M = Math.sqrt(1 + M * M), A *= M, P *= M, u && (M = Math.tan(u), M = Math.sqrt(1 + M * M), x *= M, C *= M)), x = Ft(x), C = Ft(C), A = Ft(A), P = Ft(P)) : (x = h, P = d, C = A = 0), (b && !~(o + "").indexOf("px") || v && !~(a + "").indexOf("px")) && (b = Cr(f, "x", o, "px"), v = Cr(f, "y", a, "px")), (m || _ || p || g) && (b = Ft(b + m - (m * x + _ * A) + p), v = Ft(v + _ - (m * C + _ * P) + g)), (r || s) && (M = f.getBBox(), b = Ft(b + r / 100 * M.width), v = Ft(v + s / 100 * M.height)), M = "matrix(" + x + "," + C + "," + A + "," + P + "," + b + "," + v + ")", f.setAttribute("transform", M), y && (f.style[Mt] = M);
  }, EH = function(e, t, i, r, s) {
    var o = 360, a = pn(s), l = parseFloat(s) * (a && ~s.indexOf("rad") ? ns : 1), c = l - r, u = r + c + "deg", h, d;
    return a && (h = s.split("_")[1], h === "short" && (c %= o, c !== c % (o / 2) && (c += c < 0 ? o : -360)), h === "cw" && c < 0 ? c = (c + o * l_) % o - ~~(c / o) * o : h === "ccw" && c > 0 && (c = (c - o * l_) % o - ~~(c / o) * o)), e._pt = d = new g2(e._pt, t, i, r, c, oH), d.e = u, d.u = "deg", e._props.push(i), d;
  }, p_ = function(e, t) {
    for (var i in t) e[i] = t[i];
    return e;
  }, wH = function(e, t, i) {
    var r = p_({}, i._gsap), s = "perspective,force3D,transformOrigin,svgOrigin", o = i.style, a, l, c, u, h, d, f, m;
    r.svg ? (c = i.getAttribute("transform"), i.setAttribute("transform", ""), o[Mt] = t, a = fl(i, 1), Ds(i, Mt), i.setAttribute("transform", c)) : (c = getComputedStyle(i)[Mt], o[Mt] = t, a = fl(i, 1), o[Mt] = c);
    for (l in P3) c = r[l], u = a[l], c !== u && s.indexOf(l) < 0 && (f = Rn(c), m = Rn(u), h = f !== m ? Cr(i, l, c, m) : parseFloat(c), d = parseFloat(u), e._pt = new g2(e._pt, a, l, h, d - h, w9), e._pt.u = m || 0, e._props.push(l));
    p_(a, r);
  };
  m2("padding,margin,Width,Radius", function(n, e) {
    var t = "Top", i = "Right", r = "Bottom", s = "Left", o = (e < 3 ? [
      t,
      i,
      r,
      s
    ] : [
      t + s,
      t + i,
      r + i,
      r + s
    ]).map(function(a) {
      return e < 2 ? n + a : "border" + a + n;
    });
    Gu[e > 1 ? "border" + n : n] = function(a, l, c, u, h) {
      var d, f;
      if (arguments.length < 4) return d = o.map(function(m) {
        return p3(a, m, c);
      }), f = d.join(" "), f.split(d[0]).length === 5 ? d[0] : f;
      d = (u + "").split(" "), f = {}, o.forEach(function(m, _) {
        return f[m] = d[_] = d[_] || d[(_ - 1) / 2 | 0];
      }), a.init(l, f, h);
    };
  });
  var zy = {
    name: "css",
    register: T9,
    targetTest: function(e) {
      return e.style && e.nodeType;
    },
    init: function(e, t, i, r, s) {
      var o = this._props, a = e.style, l = i.vars.startAt, c, u, h, d, f, m, _, p, g, y, b, v, x, C, A, P;
      v6 || T9(), this.styles = this.styles || Fy(e), P = this.styles.props, this.tween = i;
      for (_ in t) if (_ !== "autoRound" && (u = t[_], !(M2[_] && Ey(_, t, i, r, e, s)))) {
        if (f = typeof u, m = Gu[_], f === "function" && (u = u.call(i, r, e, s), f = typeof u), f === "string" && ~u.indexOf("random(") && (u = al(u)), m) m(this, e, _, u, i) && (A = 1);
        else if (_.substr(0, 2) === "--") c = (getComputedStyle(e).getPropertyValue(_) + "").trim(), u += "", yr.lastIndex = 0, yr.test(c) || (p = Rn(c), g = Rn(u)), g ? p !== g && (c = Cr(e, _, c, g) + g) : p && (u += p), this.add(a, "setProperty", c, u, r, s, 0, 0, _), o.push(_), P.push(_, 0, a[_]);
        else if (f !== "undefined") {
          if (l && _ in l ? (c = typeof l[_] == "function" ? l[_].call(i, r, e, s) : l[_], pn(c) && ~c.indexOf("random(") && (c = al(c)), Rn(c + "") || c === "auto" || (c += O2.units[_] || Rn(p3(e, _)) || ""), (c + "").charAt(1) === "=" && (c = p3(e, _))) : c = p3(e, _), d = parseFloat(c), y = f === "string" && u.charAt(1) === "=" && u.substr(0, 2), y && (u = u.substr(2)), h = parseFloat(u), _ in Vi && (_ === "autoAlpha" && (d === 1 && p3(e, "visibility") === "hidden" && h && (d = 0), P.push("visibility", 0, a.visibility), ur(this, a, "visibility", d ? "inherit" : "hidden", h ? "inherit" : "hidden", !h)), _ !== "scale" && _ !== "transform" && (_ = Vi[_], ~_.indexOf(",") && (_ = _.split(",")[0]))), b = _ in P3, b) {
            if (this.styles.save(_), v || (x = e._gsap, x.renderTransform && !t.parseTransform || fl(e, t.parseTransform), C = t.smoothOrigin !== false && x.smooth, v = this._pt = new g2(this._pt, a, Mt, 0, 1, x.renderTransform, x, 0, -1), v.dep = 1), _ === "scale") this._pt = new g2(this._pt, x, "scaleY", x.scaleY, (y ? Bo(x.scaleY, y + h) : h) - x.scaleY || 0, w9), this._pt.u = 0, o.push("scaleY", _), _ += "X";
            else if (_ === "transformOrigin") {
              P.push(_2, 0, a[_2]), u = vH(u), x.svg ? C9(e, u, 0, C, 0, this) : (g = parseFloat(u.split(" ")[2]) || 0, g !== x.zOrigin && ur(this, x, "zOrigin", x.zOrigin, g), ur(this, a, _, Wu(c), Wu(u)));
              continue;
            } else if (_ === "svgOrigin") {
              C9(e, u, 1, C, 0, this);
              continue;
            } else if (_ in Uy) {
              EH(this, x, _, d, y ? Bo(d, y + u) : u);
              continue;
            } else if (_ === "smoothOrigin") {
              ur(this, x, "smooth", x.smooth, u);
              continue;
            } else if (_ === "force3D") {
              x[_] = u;
              continue;
            } else if (_ === "transform") {
              wH(this, u, e);
              continue;
            }
          } else _ in a || (_ = pa(_) || _);
          if (b || (h || h === 0) && (d || d === 0) && !sH.test(u) && _ in a) p = (c + "").substr((d + "").length), h || (h = 0), g = Rn(u) || (_ in O2.units ? O2.units[_] : p), p !== g && (d = Cr(e, _, c, g)), this._pt = new g2(this._pt, b ? x : a, _, d, (y ? Bo(d, y + h) : h) - d, !b && (g === "px" || _ === "zIndex") && t.autoRound !== false ? lH : w9), this._pt.u = g || 0, p !== g && g !== "%" && (this._pt.b = c, this._pt.r = aH);
          else if (_ in a) bH.call(this, e, _, c, y ? y + u : u);
          else if (_ in e) this.add(e, _, c || e[_], y ? y + u : u, r, s);
          else if (_ !== "parseTransform") {
            u6(_, u);
            continue;
          }
          b || (_ in a ? P.push(_, 0, a[_]) : P.push(_, 1, c || e[_])), o.push(_);
        }
      }
      A && Dy(this);
    },
    render: function(e, t) {
      if (t.tween._time || !y6()) for (var i = t._pt; i; ) i.r(e, i.d), i = i._next;
      else t.styles.revert();
    },
    get: p3,
    aliases: Vi,
    getSetter: function(e, t, i) {
      var r = Vi[t];
      return r && r.indexOf(",") < 0 && (t = r), t in P3 && t !== _2 && (e._gsap.x || p3(e, "x")) ? i && a_ === i ? t === "scale" ? hH : fH : (a_ = i || {}) && (t === "scale" ? dH : pH) : e.style && !a6(e.style[t]) ? cH : ~t.indexOf("-") ? uH : _6(e, t);
    },
    core: {
      _removeProperty: Ds,
      _getMatrix: S6
    }
  };
  b2.utils.checkPrefix = pa;
  b2.core.getStyleSaver = Fy;
  (function(n, e, t, i) {
    var r = m2(n + "," + e + "," + t, function(s) {
      P3[s] = 1;
    });
    m2(e, function(s) {
      O2.units[s] = "deg", Uy[s] = 1;
    }), Vi[r[13]] = n + "," + e, m2(i, function(s) {
      var o = s.split(":");
      Vi[o[1]] = r[o[0]];
    });
  })("x,y,z,scale,scaleX,scaleY,xPercent,yPercent", "rotation,rotationX,rotationY,skewX,skewY", "transform,transformOrigin,svgOrigin,force3D,smoothOrigin,transformPerspective", "0:translateX,1:translateY,2:translateZ,8:rotate,8:rotationZ,8:rotateZ,9:rotateX,10:rotateY");
  m2("x,y,z,top,right,bottom,left,width,height,fontSize,padding,margin,perspective", function(n) {
    O2.units[n] = "px";
  });
  b2.registerPlugin(zy);
  var eu = b2.registerPlugin(zy) || b2;
  eu.core.Tween;
  function MH(n, e) {
    for (var t = 0; t < e.length; t++) {
      var i = e[t];
      i.enumerable = i.enumerable || false, i.configurable = true, "value" in i && (i.writable = true), Object.defineProperty(n, i.key, i);
    }
  }
  function TH(n, e, t) {
    return e && MH(n.prototype, e), n;
  }
  var bn, tu, D2, fr, hr, Vo, Vy, is, T0, Gy, x3, si, Wy, jy = function() {
    return bn || typeof window < "u" && (bn = window.gsap) && bn.registerPlugin && bn;
  }, Xy = 1, xo = [], ke = [], $i = [], C0 = Date.now, A9 = function(e, t) {
    return t;
  }, CH = function() {
    var e = T0.core, t = e.bridge || {}, i = e._scrollers, r = e._proxies;
    i.push.apply(i, ke), r.push.apply(r, $i), ke = i, $i = r, A9 = function(o, a) {
      return t[o](a);
    };
  }, xr = function(e, t) {
    return ~$i.indexOf(e) && $i[$i.indexOf(e) + 1][t];
  }, A0 = function(e) {
    return !!~Gy.indexOf(e);
  }, Gn = function(e, t, i, r, s) {
    return e.addEventListener(t, i, {
      passive: r !== false,
      capture: !!s
    });
  }, zn = function(e, t, i, r) {
    return e.removeEventListener(t, i, !!r);
  }, Sc = "scrollLeft", Ec = "scrollTop", D9 = function() {
    return x3 && x3.isPressed || ke.cache++;
  }, ju = function(e, t) {
    var i = function r(s) {
      if (s || s === 0) {
        Xy && (D2.history.scrollRestoration = "manual");
        var o = x3 && x3.isPressed;
        s = r.v = Math.round(s) || (x3 && x3.iOS ? 1 : 0), e(s), r.cacheID = ke.cache, o && A9("ss", s);
      } else (t || ke.cache !== r.cacheID || A9("ref")) && (r.cacheID = ke.cache, r.v = e());
      return r.v + r.offset;
    };
    return i.offset = 0, e && i;
  }, Jn = {
    s: Sc,
    p: "left",
    p2: "Left",
    os: "right",
    os2: "Right",
    d: "width",
    d2: "Width",
    a: "x",
    sc: ju(function(n) {
      return arguments.length ? D2.scrollTo(n, Qt.sc()) : D2.pageXOffset || fr[Sc] || hr[Sc] || Vo[Sc] || 0;
    })
  }, Qt = {
    s: Ec,
    p: "top",
    p2: "Top",
    os: "bottom",
    os2: "Bottom",
    d: "height",
    d2: "Height",
    a: "y",
    op: Jn,
    sc: ju(function(n) {
      return arguments.length ? D2.scrollTo(Jn.sc(), n) : D2.pageYOffset || fr[Ec] || hr[Ec] || Vo[Ec] || 0;
    })
  }, o2 = function(e, t) {
    return (t && t._ctx && t._ctx.selector || bn.utils.toArray)(e)[0] || (typeof e == "string" && bn.config().nullTargetWarn !== false ? console.warn("Element not found:", e) : null);
  }, Ar = function(e, t) {
    var i = t.s, r = t.sc;
    A0(e) && (e = fr.scrollingElement || hr);
    var s = ke.indexOf(e), o = r === Qt.sc ? 1 : 2;
    !~s && (s = ke.push(e) - 1), ke[s + o] || Gn(e, "scroll", D9);
    var a = ke[s + o], l = a || (ke[s + o] = ju(xr(e, i), true) || (A0(e) ? r : ju(function(c) {
      return arguments.length ? e[i] = c : e[i];
    })));
    return l.target = e, a || (l.smooth = bn.getProperty(e, "scrollBehavior") === "smooth"), l;
  }, R9 = function(e, t, i) {
    var r = e, s = e, o = C0(), a = o, l = t || 50, c = Math.max(500, l * 3), u = function(m, _) {
      var p = C0();
      _ || p - o > l ? (s = r, r = m, a = o, o = p) : i ? r += m : r = s + (m - s) / (p - a) * (o - a);
    }, h = function() {
      s = r = i ? 0 : r, a = o = 0;
    }, d = function(m) {
      var _ = a, p = s, g = C0();
      return (m || m === 0) && m !== r && u(m), o === a || g - a > c ? 0 : (r + (i ? p : -p)) / ((i ? g : o) - _) * 1e3;
    };
    return {
      update: u,
      reset: h,
      getVelocity: d
    };
  }, Wa = function(e, t) {
    return t && !e._gsapAllow && e.preventDefault(), e.changedTouches ? e.changedTouches[0] : e;
  }, m_ = function(e) {
    var t = Math.max.apply(Math, e), i = Math.min.apply(Math, e);
    return Math.abs(t) >= Math.abs(i) ? t : i;
  }, $y = function() {
    T0 = bn.core.globals().ScrollTrigger, T0 && T0.core && CH();
  }, qy = function(e) {
    return bn = e || jy(), !tu && bn && typeof document < "u" && document.body && (D2 = window, fr = document, hr = fr.documentElement, Vo = fr.body, Gy = [
      D2,
      fr,
      hr,
      Vo
    ], bn.utils.clamp, Wy = bn.core.context || function() {
    }, is = "onpointerenter" in Vo ? "pointer" : "mouse", Vy = Tt.isTouch = D2.matchMedia && D2.matchMedia("(hover: none), (pointer: coarse)").matches ? 1 : "ontouchstart" in D2 || navigator.maxTouchPoints > 0 || navigator.msMaxTouchPoints > 0 ? 2 : 0, si = Tt.eventTypes = ("ontouchstart" in hr ? "touchstart,touchmove,touchcancel,touchend" : "onpointerdown" in hr ? "pointerdown,pointermove,pointercancel,pointerup" : "mousedown,mousemove,mouseup,mouseup").split(","), setTimeout(function() {
      return Xy = 0;
    }, 500), $y(), tu = 1), tu;
  };
  Jn.op = Qt;
  ke.cache = 0;
  var Tt = function() {
    function n(t) {
      this.init(t);
    }
    var e = n.prototype;
    return e.init = function(i) {
      tu || qy(bn) || console.warn("Please gsap.registerPlugin(Observer)"), T0 || $y();
      var r = i.tolerance, s = i.dragMinimum, o = i.type, a = i.target, l = i.lineHeight, c = i.debounce, u = i.preventDefault, h = i.onStop, d = i.onStopDelay, f = i.ignore, m = i.wheelSpeed, _ = i.event, p = i.onDragStart, g = i.onDragEnd, y = i.onDrag, b = i.onPress, v = i.onRelease, x = i.onRight, C = i.onLeft, A = i.onUp, P = i.onDown, M = i.onChangeX, E = i.onChangeY, I = i.onChange, k = i.onToggleX, H = i.onToggleY, K = i.onHover, J = i.onHoverEnd, z = i.onMove, $ = i.ignoreCheck, G = i.isNormalizer, Q = i.onGestureStart, V = i.onGestureEnd, w1 = i.onWheel, m1 = i.onEnable, I1 = i.onDisable, Z = i.onClick, f1 = i.scrollSpeed, M1 = i.capture, W = i.allowClicks, r1 = i.lockAxis, v1 = i.onLockAxis;
      this.target = a = o2(a) || hr, this.vars = i, f && (f = bn.utils.toArray(f)), r = r || 1e-9, s = s || 0, m = m || 1, f1 = f1 || 1, o = o || "wheel,touch,pointer", c = c !== false, l || (l = parseFloat(D2.getComputedStyle(Vo).lineHeight) || 22);
      var S1, z1, Z1, F, T, e1, _1, B = this, l1 = 0, D1 = 0, p1 = i.passive || !u, o1 = Ar(a, Jn), E1 = Ar(a, Qt), N = o1(), D = E1(), q = ~o.indexOf("touch") && !~o.indexOf("pointer") && si[0] === "pointerdown", c1 = A0(a), h1 = a.ownerDocument || fr, d1 = [
        0,
        0,
        0
      ], U1 = [
        0,
        0,
        0
      ], B1 = 0, j1 = function() {
        return B1 = C0();
      }, G1 = function(b1, O1) {
        return (B.event = b1) && f && ~f.indexOf(b1.target) || O1 && q && b1.pointerType !== "touch" || $ && $(b1, O1);
      }, A1 = function() {
        B._vx.reset(), B._vy.reset(), z1.pause(), h && h(B);
      }, $1 = function() {
        var b1 = B.deltaX = m_(d1), O1 = B.deltaY = m_(U1), x1 = Math.abs(b1) >= r, q1 = Math.abs(O1) >= r;
        I && (x1 || q1) && I(B, b1, O1, d1, U1), x1 && (x && B.deltaX > 0 && x(B), C && B.deltaX < 0 && C(B), M && M(B), k && B.deltaX < 0 != l1 < 0 && k(B), l1 = B.deltaX, d1[0] = d1[1] = d1[2] = 0), q1 && (P && B.deltaY > 0 && P(B), A && B.deltaY < 0 && A(B), E && E(B), H && B.deltaY < 0 != D1 < 0 && H(B), D1 = B.deltaY, U1[0] = U1[1] = U1[2] = 0), (F || Z1) && (z && z(B), Z1 && (y(B), Z1 = false), F = false), e1 && !(e1 = false) && v1 && v1(B), T && (w1(B), T = false), S1 = 0;
      }, ne = function(b1, O1, x1) {
        d1[x1] += b1, U1[x1] += O1, B._vx.update(b1), B._vy.update(O1), c ? S1 || (S1 = requestAnimationFrame($1)) : $1();
      }, K1 = function(b1, O1) {
        r1 && !_1 && (B.axis = _1 = Math.abs(b1) > Math.abs(O1) ? "x" : "y", e1 = true), _1 !== "y" && (d1[2] += b1, B._vx.update(b1, true)), _1 !== "x" && (U1[2] += O1, B._vy.update(O1, true)), c ? S1 || (S1 = requestAnimationFrame($1)) : $1();
      }, V1 = function(b1) {
        if (!G1(b1, 1)) {
          b1 = Wa(b1, u);
          var O1 = b1.clientX, x1 = b1.clientY, q1 = O1 - B.x, F1 = x1 - B.y, J1 = B.isDragging;
          B.x = O1, B.y = x1, (J1 || Math.abs(B.startX - O1) >= s || Math.abs(B.startY - x1) >= s) && (y && (Z1 = true), J1 || (B.isDragging = true), K1(q1, F1), J1 || p && p(B));
        }
      }, ie = B.onPress = function(t1) {
        G1(t1, 1) || t1 && t1.button || (B.axis = _1 = null, z1.pause(), B.isPressed = true, t1 = Wa(t1), l1 = D1 = 0, B.startX = B.x = t1.clientX, B.startY = B.y = t1.clientY, B._vx.reset(), B._vy.reset(), Gn(G ? a : h1, si[1], V1, p1, true), B.deltaX = B.deltaY = 0, b && b(B));
      }, X = B.onRelease = function(t1) {
        if (!G1(t1, 1)) {
          zn(G ? a : h1, si[1], V1, true);
          var b1 = !isNaN(B.y - B.startY), O1 = B.isDragging, x1 = O1 && (Math.abs(B.x - B.startX) > 3 || Math.abs(B.y - B.startY) > 3), q1 = Wa(t1);
          !x1 && b1 && (B._vx.reset(), B._vy.reset(), u && W && bn.delayedCall(0.08, function() {
            if (C0() - B1 > 300 && !t1.defaultPrevented) {
              if (t1.target.click) t1.target.click();
              else if (h1.createEvent) {
                var F1 = h1.createEvent("MouseEvents");
                F1.initMouseEvent("click", true, true, D2, 1, q1.screenX, q1.screenY, q1.clientX, q1.clientY, false, false, false, false, 0, null), t1.target.dispatchEvent(F1);
              }
            }
          })), B.isDragging = B.isGesturing = B.isPressed = false, h && O1 && !G && z1.restart(true), g && O1 && g(B), v && v(B, x1);
        }
      }, X1 = function(b1) {
        return b1.touches && b1.touches.length > 1 && (B.isGesturing = true) && Q(b1, B.isDragging);
      }, P1 = function() {
        return (B.isGesturing = false) || V(B);
      }, Y1 = function(b1) {
        if (!G1(b1)) {
          var O1 = o1(), x1 = E1();
          ne((O1 - N) * f1, (x1 - D) * f1, 1), N = O1, D = x1, h && z1.restart(true);
        }
      }, N1 = function(b1) {
        if (!G1(b1)) {
          b1 = Wa(b1, u), w1 && (T = true);
          var O1 = (b1.deltaMode === 1 ? l : b1.deltaMode === 2 ? D2.innerHeight : 1) * m;
          ne(b1.deltaX * O1, b1.deltaY * O1, 0), h && !G && z1.restart(true);
        }
      }, L1 = function(b1) {
        if (!G1(b1)) {
          var O1 = b1.clientX, x1 = b1.clientY, q1 = O1 - B.x, F1 = x1 - B.y;
          B.x = O1, B.y = x1, F = true, h && z1.restart(true), (q1 || F1) && K1(q1, F1);
        }
      }, R1 = function(b1) {
        B.event = b1, K(B);
      }, j = function(b1) {
        B.event = b1, J(B);
      }, T1 = function(b1) {
        return G1(b1) || Wa(b1, u) && Z(B);
      };
      z1 = B._dc = bn.delayedCall(d || 0.25, A1).pause(), B.deltaX = B.deltaY = 0, B._vx = R9(0, 50, true), B._vy = R9(0, 50, true), B.scrollX = o1, B.scrollY = E1, B.isDragging = B.isGesturing = B.isPressed = false, Wy(this), B.enable = function(t1) {
        return B.isEnabled || (Gn(c1 ? h1 : a, "scroll", D9), o.indexOf("scroll") >= 0 && Gn(c1 ? h1 : a, "scroll", Y1, p1, M1), o.indexOf("wheel") >= 0 && Gn(a, "wheel", N1, p1, M1), (o.indexOf("touch") >= 0 && Vy || o.indexOf("pointer") >= 0) && (Gn(a, si[0], ie, p1, M1), Gn(h1, si[2], X), Gn(h1, si[3], X), W && Gn(a, "click", j1, true, true), Z && Gn(a, "click", T1), Q && Gn(h1, "gesturestart", X1), V && Gn(h1, "gestureend", P1), K && Gn(a, is + "enter", R1), J && Gn(a, is + "leave", j), z && Gn(a, is + "move", L1)), B.isEnabled = true, t1 && t1.type && ie(t1), m1 && m1(B)), B;
      }, B.disable = function() {
        B.isEnabled && (xo.filter(function(t1) {
          return t1 !== B && A0(t1.target);
        }).length || zn(c1 ? h1 : a, "scroll", D9), B.isPressed && (B._vx.reset(), B._vy.reset(), zn(G ? a : h1, si[1], V1, true)), zn(c1 ? h1 : a, "scroll", Y1, M1), zn(a, "wheel", N1, M1), zn(a, si[0], ie, M1), zn(h1, si[2], X), zn(h1, si[3], X), zn(a, "click", j1, true), zn(a, "click", T1), zn(h1, "gesturestart", X1), zn(h1, "gestureend", P1), zn(a, is + "enter", R1), zn(a, is + "leave", j), zn(a, is + "move", L1), B.isEnabled = B.isPressed = B.isDragging = false, I1 && I1(B));
      }, B.kill = B.revert = function() {
        B.disable();
        var t1 = xo.indexOf(B);
        t1 >= 0 && xo.splice(t1, 1), x3 === B && (x3 = 0);
      }, xo.push(B), G && A0(a) && (x3 = B), B.enable(_);
    }, TH(n, [
      {
        key: "velocityX",
        get: function() {
          return this._vx.getVelocity();
        }
      },
      {
        key: "velocityY",
        get: function() {
          return this._vy.getVelocity();
        }
      }
    ]), n;
  }();
  Tt.version = "3.12.5";
  Tt.create = function(n) {
    return new Tt(n);
  };
  Tt.register = qy;
  Tt.getAll = function() {
    return xo.slice();
  };
  Tt.getById = function(n) {
    return xo.filter(function(e) {
      return e.vars.id === n;
    })[0];
  };
  jy() && bn.registerPlugin(Tt);
  var S3, xs, E6, Nf, e0, nu, Xu, D0, di = "transform", P9 = di + "Origin", Yy, w6 = function(e) {
    var t = e.ownerDocument || e;
    for (!(di in e.style) && ("msTransform" in e.style) && (di = "msTransform", P9 = di + "Origin"); t.parentNode && (t = t.parentNode); ) ;
    if (xs = window, Xu = new L3(), t) {
      S3 = t, E6 = t.documentElement, Nf = t.body, D0 = S3.createElementNS("http://www.w3.org/2000/svg", "g"), D0.style.transform = "none";
      var i = t.createElement("div"), r = t.createElement("div"), s = t && (t.body || t.firstElementChild);
      s && s.appendChild && (s.appendChild(i), i.appendChild(r), i.setAttribute("style", "position:static;transform:translate3d(0,0,1px)"), Yy = r.offsetParent !== i, s.removeChild(i));
    }
    return t;
  }, AH = function(e) {
    for (var t, i; e && e !== Nf; ) i = e._gsap, i && i.uncache && i.get(e, "x"), i && !i.scaleX && !i.scaleY && i.renderTransform && (i.scaleX = i.scaleY = 1e-4, i.renderTransform(1, i), t ? t.push(i) : t = [
      i
    ]), e = e.parentNode;
    return t;
  }, Ky = [], Jy = [], M6 = function() {
    return xs.pageYOffset || S3.scrollTop || E6.scrollTop || Nf.scrollTop || 0;
  }, T6 = function() {
    return xs.pageXOffset || S3.scrollLeft || E6.scrollLeft || Nf.scrollLeft || 0;
  }, C6 = function(e) {
    return e.ownerSVGElement || ((e.tagName + "").toLowerCase() === "svg" ? e : null);
  }, DH = function n(e) {
    if (xs.getComputedStyle(e).position === "fixed") return true;
    if (e = e.parentNode, e && e.nodeType === 1) return n(e);
  }, bd = function n(e, t) {
    if (e.parentNode && (S3 || w6(e))) {
      var i = C6(e), r = i ? i.getAttribute("xmlns") || "http://www.w3.org/2000/svg" : "http://www.w3.org/1999/xhtml", s = i ? t ? "rect" : "g" : "div", o = t !== 2 ? 0 : 100, a = t === 3 ? 100 : 0, l = "position:absolute;display:block;pointer-events:none;margin:0;padding:0;", c = S3.createElementNS ? S3.createElementNS(r.replace(/^https/, "http"), s) : S3.createElement(s);
      return t && (i ? (nu || (nu = n(e)), c.setAttribute("width", 0.01), c.setAttribute("height", 0.01), c.setAttribute("transform", "translate(" + o + "," + a + ")"), nu.appendChild(c)) : (e0 || (e0 = n(e), e0.style.cssText = l), c.style.cssText = l + "width:0.1px;height:0.1px;top:" + a + "px;left:" + o + "px", e0.appendChild(c))), c;
    }
    throw "Need document and parent.";
  }, RH = function(e) {
    for (var t = new L3(), i = 0; i < e.numberOfItems; i++) t.multiply(e.getItem(i).matrix);
    return t;
  }, Qy = function(e) {
    var t = e.getCTM(), i;
    return t || (i = e.style[di], e.style[di] = "none", e.appendChild(D0), t = D0.getCTM(), e.removeChild(D0), i ? e.style[di] = i : e.style.removeProperty(di.replace(/([A-Z])/g, "-$1").toLowerCase())), t || Xu.clone();
  }, PH = function(e, t) {
    var i = C6(e), r = e === i, s = i ? Ky : Jy, o = e.parentNode, a, l, c, u, h, d;
    if (e === xs) return e;
    if (s.length || s.push(bd(e, 1), bd(e, 2), bd(e, 3)), a = i ? nu : e0, i) r ? (c = Qy(e), u = -c.e / c.a, h = -c.f / c.d, l = Xu) : e.getBBox ? (c = e.getBBox(), l = e.transform ? e.transform.baseVal : {}, l = l.numberOfItems ? l.numberOfItems > 1 ? RH(l) : l.getItem(0).matrix : Xu, u = l.a * c.x + l.c * c.y, h = l.b * c.x + l.d * c.y) : (l = new L3(), u = h = 0), t && e.tagName.toLowerCase() === "g" && (u = h = 0), (r ? i : o).appendChild(a), a.setAttribute("transform", "matrix(" + l.a + "," + l.b + "," + l.c + "," + l.d + "," + (l.e + u) + "," + (l.f + h) + ")");
    else {
      if (u = h = 0, Yy) for (l = e.offsetParent, c = e; c && (c = c.parentNode) && c !== l && c.parentNode; ) (xs.getComputedStyle(c)[di] + "").length > 4 && (u = c.offsetLeft, h = c.offsetTop, c = 0);
      if (d = xs.getComputedStyle(e), d.position !== "absolute" && d.position !== "fixed") for (l = e.offsetParent; o && o !== l; ) u += o.scrollLeft || 0, h += o.scrollTop || 0, o = o.parentNode;
      c = a.style, c.top = e.offsetTop - h + "px", c.left = e.offsetLeft - u + "px", c[di] = d[di], c[P9] = d[P9], c.position = d.position === "fixed" ? "fixed" : "absolute", e.parentNode.appendChild(a);
    }
    return a;
  }, vd = function(e, t, i, r, s, o, a) {
    return e.a = t, e.b = i, e.c = r, e.d = s, e.e = o, e.f = a, e;
  }, L3 = function() {
    function n(t, i, r, s, o, a) {
      t === void 0 && (t = 1), i === void 0 && (i = 0), r === void 0 && (r = 0), s === void 0 && (s = 1), o === void 0 && (o = 0), a === void 0 && (a = 0), vd(this, t, i, r, s, o, a);
    }
    var e = n.prototype;
    return e.inverse = function() {
      var i = this.a, r = this.b, s = this.c, o = this.d, a = this.e, l = this.f, c = i * o - r * s || 1e-10;
      return vd(this, o / c, -r / c, -s / c, i / c, (s * l - o * a) / c, -(i * l - r * a) / c);
    }, e.multiply = function(i) {
      var r = this.a, s = this.b, o = this.c, a = this.d, l = this.e, c = this.f, u = i.a, h = i.c, d = i.b, f = i.d, m = i.e, _ = i.f;
      return vd(this, u * r + d * o, u * s + d * a, h * r + f * o, h * s + f * a, l + m * r + _ * o, c + m * s + _ * a);
    }, e.clone = function() {
      return new n(this.a, this.b, this.c, this.d, this.e, this.f);
    }, e.equals = function(i) {
      var r = this.a, s = this.b, o = this.c, a = this.d, l = this.e, c = this.f;
      return r === i.a && s === i.b && o === i.c && a === i.d && l === i.e && c === i.f;
    }, e.apply = function(i, r) {
      r === void 0 && (r = {});
      var s = i.x, o = i.y, a = this.a, l = this.b, c = this.c, u = this.d, h = this.e, d = this.f;
      return r.x = s * a + o * c + h || 0, r.y = s * l + o * u + d || 0, r;
    }, n;
  }();
  function _n(n, e, t, i) {
    if (!n || !n.parentNode || (S3 || w6(n)).documentElement === n) return new L3();
    var r = AH(n), s = C6(n), o = s ? Ky : Jy, a = PH(n, t), l = o[0].getBoundingClientRect(), c = o[1].getBoundingClientRect(), u = o[2].getBoundingClientRect(), h = a.parentNode, d = !i && DH(n), f = new L3((c.left - l.left) / 100, (c.top - l.top) / 100, (u.left - l.left) / 100, (u.top - l.top) / 100, l.left + (d ? 0 : T6()), l.top + (d ? 0 : M6()));
    if (h.removeChild(a), r) for (l = r.length; l--; ) c = r[l], c.scaleX = c.scaleY = 0, c.renderTransform(1, c);
    return e ? f.inverse() : f;
  }
  function g_(n) {
    if (n === void 0) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    return n;
  }
  function LH(n, e) {
    n.prototype = Object.create(e.prototype), n.prototype.constructor = n, n.__proto__ = e;
  }
  var Ve, ot, R2, _i, E3, yd, m3, L9, t0, dr, Zy, I9, hl, A6, n0, oi, i0, iu, ex, F9, $u = 0, tx = function() {
    return typeof window < "u";
  }, nx = function() {
    return Ve || tx() && (Ve = window.gsap) && Ve.registerPlugin && Ve;
  }, ir = function(e) {
    return typeof e == "function";
  }, R0 = function(e) {
    return typeof e == "object";
  }, li = function(e) {
    return typeof e > "u";
  }, ru = function() {
    return false;
  }, P0 = "transform", O9 = "transformOrigin", j3 = function(e) {
    return Math.round(e * 1e4) / 1e4;
  }, ja = Array.isArray, wc = function(e, t) {
    var i = R2.createElementNS ? R2.createElementNS("http://www.w3.org/1999/xhtml".replace(/^https/, "http"), e) : R2.createElement(e);
    return i.style ? i : R2.createElement(e);
  }, __ = 180 / Math.PI, so = 1e20, IH = new L3(), X3 = Date.now || function() {
    return (/* @__PURE__ */ new Date()).getTime();
  }, Ss = [], Go = {}, FH = 0, OH = /^(?:a|input|textarea|button|select)$/i, b_ = 0, oo = {}, u3 = {}, ix = function(e, t) {
    var i = {}, r;
    for (r in e) i[r] = t ? e[r] * t : e[r];
    return i;
  }, kH = function(e, t) {
    for (var i in t) i in e || (e[i] = t[i]);
    return e;
  }, v_ = function n(e, t) {
    for (var i = e.length, r; i--; ) t ? e[i].style.touchAction = t : e[i].style.removeProperty("touch-action"), r = e[i].children, r && r.length && n(r, t);
  }, rx = function() {
    return Ss.forEach(function(e) {
      return e();
    });
  }, NH = function(e) {
    Ss.push(e), Ss.length === 1 && Ve.ticker.add(rx);
  }, y_ = function() {
    return !Ss.length && Ve.ticker.remove(rx);
  }, x_ = function(e) {
    for (var t = Ss.length; t--; ) Ss[t] === e && Ss.splice(t, 1);
    Ve.to(y_, {
      overwrite: true,
      delay: 15,
      duration: 0,
      onComplete: y_,
      data: "_draggable"
    });
  }, UH = function(e, t) {
    for (var i in t) i in e || (e[i] = t[i]);
    return e;
  }, Yt = function(e, t, i, r) {
    if (e.addEventListener) {
      var s = hl[t];
      r = r || (Zy ? {
        passive: false
      } : null), e.addEventListener(s || t, i, r), s && t !== s && e.addEventListener(t, i, r);
    }
  }, Ut = function(e, t, i, r) {
    if (e.removeEventListener) {
      var s = hl[t];
      e.removeEventListener(s || t, i, r), s && t !== s && e.removeEventListener(t, i, r);
    }
  }, z2 = function(e) {
    e.preventDefault && e.preventDefault(), e.preventManipulation && e.preventManipulation();
  }, BH = function(e, t) {
    for (var i = e.length; i--; ) if (e[i].identifier === t) return true;
  }, HH = function n(e) {
    A6 = e.touches && $u < e.touches.length, Ut(e.target, "touchend", n);
  }, S_ = function(e) {
    A6 = e.touches && $u < e.touches.length, Yt(e.target, "touchend", HH);
  }, Wo = function(e) {
    return ot.pageYOffset || e.scrollTop || e.documentElement.scrollTop || e.body.scrollTop || 0;
  }, jo = function(e) {
    return ot.pageXOffset || e.scrollLeft || e.documentElement.scrollLeft || e.body.scrollLeft || 0;
  }, E_ = function n(e, t) {
    Yt(e, "scroll", t), ma(e.parentNode) || n(e.parentNode, t);
  }, w_ = function n(e, t) {
    Ut(e, "scroll", t), ma(e.parentNode) || n(e.parentNode, t);
  }, ma = function(e) {
    return !e || e === _i || e.nodeType === 9 || e === R2.body || e === ot || !e.nodeType || !e.parentNode;
  }, M_ = function(e, t) {
    var i = t === "x" ? "Width" : "Height", r = "scroll" + i, s = "client" + i;
    return Math.max(0, ma(e) ? Math.max(_i[r], E3[r]) - (ot["inner" + i] || _i[s] || E3[s]) : e[r] - e[s]);
  }, xd = function n(e, t) {
    var i = M_(e, "x"), r = M_(e, "y");
    ma(e) ? e = u3 : n(e.parentNode, t), e._gsMaxScrollX = i, e._gsMaxScrollY = r, t || (e._gsScrollX = e.scrollLeft || 0, e._gsScrollY = e.scrollTop || 0);
  }, Sd = function(e, t, i) {
    var r = e.style;
    r && (li(r[t]) && (t = t0(t, e) || t), i == null ? r.removeProperty && r.removeProperty(t.replace(/([A-Z])/g, "-$1").toLowerCase()) : r[t] = i);
  }, dl = function(e) {
    return ot.getComputedStyle(e instanceof Element ? e : e.host || (e.parentNode || {}).host || e);
  }, Jr = {}, ao = function(e) {
    if (e === ot) return Jr.left = Jr.top = 0, Jr.width = Jr.right = _i.clientWidth || e.innerWidth || E3.clientWidth || 0, Jr.height = Jr.bottom = (e.innerHeight || 0) - 20 < _i.clientHeight ? _i.clientHeight : e.innerHeight || E3.clientHeight || 0, Jr;
    var t = e.ownerDocument || R2, i = li(e.pageX) ? !e.nodeType && !li(e.left) && !li(e.top) ? e : dr(e)[0].getBoundingClientRect() : {
      left: e.pageX - jo(t),
      top: e.pageY - Wo(t),
      right: e.pageX - jo(t) + 1,
      bottom: e.pageY - Wo(t) + 1
    };
    return li(i.right) && !li(i.width) ? (i.right = i.left + i.width, i.bottom = i.top + i.height) : li(i.width) && (i = {
      width: i.right - i.left,
      height: i.bottom - i.top,
      right: i.right,
      left: i.left,
      bottom: i.bottom,
      top: i.top
    }), i;
  }, It = function(e, t, i) {
    var r = e.vars, s = r[i], o = e._listeners[t], a;
    return ir(s) && (a = s.apply(r.callbackScope || e, r[i + "Params"] || [
      e.pointerEvent
    ])), o && e.dispatchEvent(t) === false && (a = false), a;
  }, T_ = function(e, t) {
    var i = dr(e)[0], r, s, o;
    return !i.nodeType && i !== ot ? li(e.left) ? (s = e.min || e.minX || e.minRotation || 0, r = e.min || e.minY || 0, {
      left: s,
      top: r,
      width: (e.max || e.maxX || e.maxRotation || 0) - s,
      height: (e.max || e.maxY || 0) - r
    }) : (o = {
      x: 0,
      y: 0
    }, {
      left: e.left - o.x,
      top: e.top - o.y,
      width: e.width,
      height: e.height
    }) : zH(i, t);
  }, V2 = {}, zH = function(e, t) {
    t = dr(t)[0];
    var i = e.getBBox && e.ownerSVGElement, r = e.ownerDocument || R2, s, o, a, l, c, u, h, d, f, m, _, p, g;
    if (e === ot) a = Wo(r), s = jo(r), o = s + (r.documentElement.clientWidth || e.innerWidth || r.body.clientWidth || 0), l = a + ((e.innerHeight || 0) - 20 < r.documentElement.clientHeight ? r.documentElement.clientHeight : e.innerHeight || r.body.clientHeight || 0);
    else {
      if (t === ot || li(t)) return e.getBoundingClientRect();
      s = a = 0, i ? (m = e.getBBox(), _ = m.width, p = m.height) : (e.viewBox && (m = e.viewBox.baseVal) && (s = m.x || 0, a = m.y || 0, _ = m.width, p = m.height), _ || (g = dl(e), m = g.boxSizing === "border-box", _ = (parseFloat(g.width) || e.clientWidth || 0) + (m ? 0 : parseFloat(g.borderLeftWidth) + parseFloat(g.borderRightWidth)), p = (parseFloat(g.height) || e.clientHeight || 0) + (m ? 0 : parseFloat(g.borderTopWidth) + parseFloat(g.borderBottomWidth)))), o = _, l = p;
    }
    return e === t ? {
      left: s,
      top: a,
      width: o - s,
      height: l - a
    } : (c = _n(t, true).multiply(_n(e)), u = c.apply({
      x: s,
      y: a
    }), h = c.apply({
      x: o,
      y: a
    }), d = c.apply({
      x: o,
      y: l
    }), f = c.apply({
      x: s,
      y: l
    }), s = Math.min(u.x, h.x, d.x, f.x), a = Math.min(u.y, h.y, d.y, f.y), {
      left: s,
      top: a,
      width: Math.max(u.x, h.x, d.x, f.x) - s,
      height: Math.max(u.y, h.y, d.y, f.y) - a
    });
  }, Ed = function(e, t, i, r, s, o) {
    var a = {}, l, c, u;
    if (t) if (s !== 1 && t instanceof Array) {
      if (a.end = l = [], u = t.length, R0(t[0])) for (c = 0; c < u; c++) l[c] = ix(t[c], s);
      else for (c = 0; c < u; c++) l[c] = t[c] * s;
      i += 1.1, r -= 1.1;
    } else ir(t) ? a.end = function(h) {
      var d = t.call(e, h), f, m;
      if (s !== 1) if (R0(d)) {
        f = {};
        for (m in d) f[m] = d[m] * s;
        d = f;
      } else d *= s;
      return d;
    } : a.end = t;
    return (i || i === 0) && (a.max = i), (r || r === 0) && (a.min = r), o && (a.velocity = 0), a;
  }, VH = function n(e) {
    var t;
    return !e || !e.getAttribute || e === E3 ? false : (t = e.getAttribute("data-clickable")) === "true" || t !== "false" && (OH.test(e.nodeName + "") || e.getAttribute("contentEditable") === "true") ? true : n(e.parentNode);
  }, Mc = function(e, t) {
    for (var i = e.length, r; i--; ) r = e[i], r.ondragstart = r.onselectstart = t ? null : ru, Ve.set(r, {
      lazy: true,
      userSelect: t ? "text" : "none"
    });
  }, GH = function n(e) {
    if (dl(e).position === "fixed") return true;
    if (e = e.parentNode, e && e.nodeType === 1) return n(e);
  }, sx, k9, WH = function(e, t) {
    e = Ve.utils.toArray(e)[0], t = t || {};
    var i = document.createElement("div"), r = i.style, s = e.firstChild, o = 0, a = 0, l = e.scrollTop, c = e.scrollLeft, u = e.scrollWidth, h = e.scrollHeight, d = 0, f = 0, m = 0, _, p, g, y, b, v;
    sx && t.force3D !== false ? (b = "translate3d(", v = "px,0px)") : P0 && (b = "translate(", v = "px)"), this.scrollTop = function(x, C) {
      if (!arguments.length) return -this.top();
      this.top(-x, C);
    }, this.scrollLeft = function(x, C) {
      if (!arguments.length) return -this.left();
      this.left(-x, C);
    }, this.left = function(x, C) {
      if (!arguments.length) return -(e.scrollLeft + a);
      var A = e.scrollLeft - c, P = a;
      if ((A > 2 || A < -2) && !C) {
        c = e.scrollLeft, Ve.killTweensOf(this, {
          left: 1,
          scrollLeft: 1
        }), this.left(-c), t.onKill && t.onKill();
        return;
      }
      x = -x, x < 0 ? (a = x - 0.5 | 0, x = 0) : x > f ? (a = x - f | 0, x = f) : a = 0, (a || P) && (this._skip || (r[P0] = b + -a + "px," + -o + v), a + d >= 0 && (r.paddingRight = a + d + "px")), e.scrollLeft = x | 0, c = e.scrollLeft;
    }, this.top = function(x, C) {
      if (!arguments.length) return -(e.scrollTop + o);
      var A = e.scrollTop - l, P = o;
      if ((A > 2 || A < -2) && !C) {
        l = e.scrollTop, Ve.killTweensOf(this, {
          top: 1,
          scrollTop: 1
        }), this.top(-l), t.onKill && t.onKill();
        return;
      }
      x = -x, x < 0 ? (o = x - 0.5 | 0, x = 0) : x > m ? (o = x - m | 0, x = m) : o = 0, (o || P) && (this._skip || (r[P0] = b + -a + "px," + -o + v)), e.scrollTop = x | 0, l = e.scrollTop;
    }, this.maxScrollTop = function() {
      return m;
    }, this.maxScrollLeft = function() {
      return f;
    }, this.disable = function() {
      for (s = i.firstChild; s; ) y = s.nextSibling, e.appendChild(s), s = y;
      e === i.parentNode && e.removeChild(i);
    }, this.enable = function() {
      if (s = e.firstChild, s !== i) {
        for (; s; ) y = s.nextSibling, i.appendChild(s), s = y;
        e.appendChild(i), this.calibrate();
      }
    }, this.calibrate = function(x) {
      var C = e.clientWidth === _, A, P, M;
      l = e.scrollTop, c = e.scrollLeft, !(C && e.clientHeight === p && i.offsetHeight === g && u === e.scrollWidth && h === e.scrollHeight && !x) && ((o || a) && (P = this.left(), M = this.top(), this.left(-e.scrollLeft), this.top(-e.scrollTop)), A = dl(e), (!C || x) && (r.display = "block", r.width = "auto", r.paddingRight = "0px", d = Math.max(0, e.scrollWidth - e.clientWidth), d && (d += parseFloat(A.paddingLeft) + (k9 ? parseFloat(A.paddingRight) : 0))), r.display = "inline-block", r.position = "relative", r.overflow = "visible", r.verticalAlign = "top", r.boxSizing = "content-box", r.width = "100%", r.paddingRight = d + "px", k9 && (r.paddingBottom = A.paddingBottom), _ = e.clientWidth, p = e.clientHeight, u = e.scrollWidth, h = e.scrollHeight, f = e.scrollWidth - _, m = e.scrollHeight - p, g = i.offsetHeight, r.display = "block", (P || M) && (this.left(P), this.top(M)));
    }, this.content = i, this.element = e, this._skip = false, this.enable();
  }, wd = function(e) {
    if (tx() && document.body) {
      var t = window && window.navigator;
      ot = window, R2 = document, _i = R2.documentElement, E3 = R2.body, yd = wc("div"), iu = !!window.PointerEvent, m3 = wc("div"), m3.style.cssText = "visibility:hidden;height:1px;top:-1px;pointer-events:none;position:relative;clear:both;cursor:grab", i0 = m3.style.cursor === "grab" ? "grab" : "move", n0 = t && t.userAgent.toLowerCase().indexOf("android") !== -1, I9 = "ontouchstart" in _i && "orientation" in ot || t && (t.MaxTouchPoints > 0 || t.msMaxTouchPoints > 0), k9 = function() {
        var i = wc("div"), r = wc("div"), s = r.style, o = E3, a;
        return s.display = "inline-block", s.position = "relative", i.style.cssText = "width:90px;height:40px;padding:10px;overflow:auto;visibility:hidden", i.appendChild(r), o.appendChild(i), a = r.offsetHeight + 18 > i.scrollHeight, o.removeChild(i), a;
      }(), hl = function(i) {
        for (var r = i.split(","), s = ("onpointerdown" in yd ? "pointerdown,pointermove,pointerup,pointercancel" : "onmspointerdown" in yd ? "MSPointerDown,MSPointerMove,MSPointerUp,MSPointerCancel" : i).split(","), o = {}, a = 4; --a > -1; ) o[r[a]] = s[a], o[s[a]] = r[a];
        try {
          _i.addEventListener("test", null, Object.defineProperty({}, "passive", {
            get: function() {
              Zy = 1;
            }
          }));
        } catch {
        }
        return o;
      }("touchstart,touchmove,touchend,touchcancel"), Yt(R2, "touchcancel", ru), Yt(ot, "touchmove", ru), E3 && E3.addEventListener("touchstart", ru), Yt(R2, "contextmenu", function() {
        for (var i in Go) Go[i].isPressed && Go[i].endDrag();
      }), Ve = L9 = nx();
    }
    Ve ? (oi = Ve.plugins.inertia, ex = Ve.core.context || function() {
    }, t0 = Ve.utils.checkPrefix, P0 = t0(P0), O9 = t0(O9), dr = Ve.utils.toArray, F9 = Ve.core.getStyleSaver, sx = !!t0("perspective")) : e && console.warn("Please gsap.registerPlugin(Draggable)");
  }, jH = function() {
    function n(t) {
      this._listeners = {}, this.target = t || this;
    }
    var e = n.prototype;
    return e.addEventListener = function(i, r) {
      var s = this._listeners[i] || (this._listeners[i] = []);
      ~s.indexOf(r) || s.push(r);
    }, e.removeEventListener = function(i, r) {
      var s = this._listeners[i], o = s && s.indexOf(r);
      o >= 0 && s.splice(o, 1);
    }, e.dispatchEvent = function(i) {
      var r = this, s;
      return (this._listeners[i] || []).forEach(function(o) {
        return o.call(r, {
          type: i,
          target: r.target
        }) === false && (s = false);
      }), s;
    }, n;
  }(), ga = function(n) {
    LH(e, n);
    function e(t, i) {
      var r;
      r = n.call(this) || this, L9 || wd(1), t = dr(t)[0], r.styles = F9 && F9(t, "transform,left,top"), oi || (oi = Ve.plugins.inertia), r.vars = i = ix(i || {}), r.target = t, r.x = r.y = r.rotation = 0, r.dragResistance = parseFloat(i.dragResistance) || 0, r.edgeResistance = isNaN(i.edgeResistance) ? 1 : parseFloat(i.edgeResistance) || 0, r.lockAxis = i.lockAxis, r.autoScroll = i.autoScroll || 0, r.lockedAxis = null, r.allowEventDefault = !!i.allowEventDefault, Ve.getProperty(t, "x");
      var s = (i.type || "x,y").toLowerCase(), o = ~s.indexOf("x") || ~s.indexOf("y"), a = s.indexOf("rotation") !== -1, l = a ? "rotation" : o ? "x" : "left", c = o ? "y" : "top", u = !!(~s.indexOf("x") || ~s.indexOf("left") || s === "scroll"), h = !!(~s.indexOf("y") || ~s.indexOf("top") || s === "scroll"), d = i.minimumMovement || 2, f = g_(r), m = dr(i.trigger || i.handle || t), _ = {}, p = 0, g = false, y = i.autoScrollMarginTop || 40, b = i.autoScrollMarginRight || 40, v = i.autoScrollMarginBottom || 40, x = i.autoScrollMarginLeft || 40, C = i.clickableTest || VH, A = 0, P = t._gsap || Ve.core.getCache(t), M = GH(t), E = function(j, T1) {
        return parseFloat(P.get(t, j, T1));
      }, I = t.ownerDocument || R2, k, H, K, J, z, $, G, Q, V, w1, m1, I1, Z, f1, M1, W, r1, v1, S1, z1, Z1, F, T, e1, _1, B, l1, D1, p1, o1, E1, N, D, q = function(j) {
        return z2(j), j.stopImmediatePropagation && j.stopImmediatePropagation(), false;
      }, c1 = function R1(j) {
        if (f.autoScroll && f.isDragging && (g || r1)) {
          var T1 = t, t1 = f.autoScroll * 15, b1, O1, x1, q1, F1, J1, de, C1;
          for (g = false, u3.scrollTop = ot.pageYOffset != null ? ot.pageYOffset : I.documentElement.scrollTop != null ? I.documentElement.scrollTop : I.body.scrollTop, u3.scrollLeft = ot.pageXOffset != null ? ot.pageXOffset : I.documentElement.scrollLeft != null ? I.documentElement.scrollLeft : I.body.scrollLeft, q1 = f.pointerX - u3.scrollLeft, F1 = f.pointerY - u3.scrollTop; T1 && !O1; ) O1 = ma(T1.parentNode), b1 = O1 ? u3 : T1.parentNode, x1 = O1 ? {
            bottom: Math.max(_i.clientHeight, ot.innerHeight || 0),
            right: Math.max(_i.clientWidth, ot.innerWidth || 0),
            left: 0,
            top: 0
          } : b1.getBoundingClientRect(), J1 = de = 0, h && (C1 = b1._gsMaxScrollY - b1.scrollTop, C1 < 0 ? de = C1 : F1 > x1.bottom - v && C1 ? (g = true, de = Math.min(C1, t1 * (1 - Math.max(0, x1.bottom - F1) / v) | 0)) : F1 < x1.top + y && b1.scrollTop && (g = true, de = -Math.min(b1.scrollTop, t1 * (1 - Math.max(0, F1 - x1.top) / y) | 0)), de && (b1.scrollTop += de)), u && (C1 = b1._gsMaxScrollX - b1.scrollLeft, C1 < 0 ? J1 = C1 : q1 > x1.right - b && C1 ? (g = true, J1 = Math.min(C1, t1 * (1 - Math.max(0, x1.right - q1) / b) | 0)) : q1 < x1.left + x && b1.scrollLeft && (g = true, J1 = -Math.min(b1.scrollLeft, t1 * (1 - Math.max(0, q1 - x1.left) / x) | 0)), J1 && (b1.scrollLeft += J1)), O1 && (J1 || de) && (ot.scrollTo(b1.scrollLeft, b1.scrollTop), X1(f.pointerX + J1, f.pointerY + de)), T1 = b1;
        }
        if (r1) {
          var oe = f.x, Le = f.y;
          a ? (f.deltaX = oe - parseFloat(P.rotation), f.rotation = oe, P.rotation = oe + "deg", P.renderTransform(1, P)) : H ? (h && (f.deltaY = Le - H.top(), H.top(Le)), u && (f.deltaX = oe - H.left(), H.left(oe))) : o ? (h && (f.deltaY = Le - parseFloat(P.y), P.y = Le + "px"), u && (f.deltaX = oe - parseFloat(P.x), P.x = oe + "px"), P.renderTransform(1, P)) : (h && (f.deltaY = Le - parseFloat(t.style.top || 0), t.style.top = Le + "px"), u && (f.deltaX = oe - parseFloat(t.style.left || 0), t.style.left = oe + "px")), Q && !j && !D1 && (D1 = true, It(f, "drag", "onDrag") === false && (u && (f.x -= f.deltaX), h && (f.y -= f.deltaY), R1(true)), D1 = false);
        }
        r1 = false;
      }, h1 = function(j, T1) {
        var t1 = f.x, b1 = f.y, O1, x1;
        t._gsap || (P = Ve.core.getCache(t)), P.uncache && Ve.getProperty(t, "x"), o ? (f.x = parseFloat(P.x), f.y = parseFloat(P.y)) : a ? f.x = f.rotation = parseFloat(P.rotation) : H ? (f.y = H.top(), f.x = H.left()) : (f.y = parseFloat(t.style.top || (x1 = dl(t)) && x1.top) || 0, f.x = parseFloat(t.style.left || (x1 || {}).left) || 0), (S1 || z1 || Z1) && !T1 && (f.isDragging || f.isThrowing) && (Z1 && (oo.x = f.x, oo.y = f.y, O1 = Z1(oo), O1.x !== f.x && (f.x = O1.x, r1 = true), O1.y !== f.y && (f.y = O1.y, r1 = true)), S1 && (O1 = S1(f.x), O1 !== f.x && (f.x = O1, a && (f.rotation = O1), r1 = true)), z1 && (O1 = z1(f.y), O1 !== f.y && (f.y = O1), r1 = true)), r1 && c1(true), j || (f.deltaX = f.x - t1, f.deltaY = f.y - b1, It(f, "throwupdate", "onThrowUpdate"));
      }, d1 = function(j, T1, t1, b1) {
        return T1 == null && (T1 = -1e20), t1 == null && (t1 = so), ir(j) ? function(O1) {
          var x1 = f.isPressed ? 1 - f.edgeResistance : 1;
          return j.call(f, (O1 > t1 ? t1 + (O1 - t1) * x1 : O1 < T1 ? T1 + (O1 - T1) * x1 : O1) * b1) * b1;
        } : ja(j) ? function(O1) {
          for (var x1 = j.length, q1 = 0, F1 = so, J1, de; --x1 > -1; ) J1 = j[x1], de = J1 - O1, de < 0 && (de = -de), de < F1 && J1 >= T1 && J1 <= t1 && (q1 = x1, F1 = de);
          return j[q1];
        } : isNaN(j) ? function(O1) {
          return O1;
        } : function() {
          return j * b1;
        };
      }, U1 = function(j, T1, t1, b1, O1, x1, q1) {
        return x1 = x1 && x1 < so ? x1 * x1 : so, ir(j) ? function(F1) {
          var J1 = f.isPressed ? 1 - f.edgeResistance : 1, de = F1.x, C1 = F1.y, oe, Le, we;
          return F1.x = de = de > t1 ? t1 + (de - t1) * J1 : de < T1 ? T1 + (de - T1) * J1 : de, F1.y = C1 = C1 > O1 ? O1 + (C1 - O1) * J1 : C1 < b1 ? b1 + (C1 - b1) * J1 : C1, oe = j.call(f, F1), oe !== F1 && (F1.x = oe.x, F1.y = oe.y), q1 !== 1 && (F1.x *= q1, F1.y *= q1), x1 < so && (Le = F1.x - de, we = F1.y - C1, Le * Le + we * we > x1 && (F1.x = de, F1.y = C1)), F1;
        } : ja(j) ? function(F1) {
          for (var J1 = j.length, de = 0, C1 = so, oe, Le, we, Me; --J1 > -1; ) we = j[J1], oe = we.x - F1.x, Le = we.y - F1.y, Me = oe * oe + Le * Le, Me < C1 && (de = J1, C1 = Me);
          return C1 <= x1 ? j[de] : F1;
        } : function(F1) {
          return F1;
        };
      }, B1 = function() {
        var j, T1, t1, b1;
        G = false, H ? (H.calibrate(), f.minX = m1 = -H.maxScrollLeft(), f.minY = Z = -H.maxScrollTop(), f.maxX = w1 = f.maxY = I1 = 0, G = true) : i.bounds && (j = T_(i.bounds, t.parentNode), a ? (f.minX = m1 = j.left, f.maxX = w1 = j.left + j.width, f.minY = Z = f.maxY = I1 = 0) : !li(i.bounds.maxX) || !li(i.bounds.maxY) ? (j = i.bounds, f.minX = m1 = j.minX, f.minY = Z = j.minY, f.maxX = w1 = j.maxX, f.maxY = I1 = j.maxY) : (T1 = T_(t, t.parentNode), f.minX = m1 = Math.round(E(l, "px") + j.left - T1.left), f.minY = Z = Math.round(E(c, "px") + j.top - T1.top), f.maxX = w1 = Math.round(m1 + (j.width - T1.width)), f.maxY = I1 = Math.round(Z + (j.height - T1.height))), m1 > w1 && (f.minX = w1, f.maxX = w1 = m1, m1 = f.minX), Z > I1 && (f.minY = I1, f.maxY = I1 = Z, Z = f.minY), a && (f.minRotation = m1, f.maxRotation = w1), G = true), i.liveSnap && (t1 = i.liveSnap === true ? i.snap || {} : i.liveSnap, b1 = ja(t1) || ir(t1), a ? (S1 = d1(b1 ? t1 : t1.rotation, m1, w1, 1), z1 = null) : t1.points ? Z1 = U1(b1 ? t1 : t1.points, m1, w1, Z, I1, t1.radius, H ? -1 : 1) : (u && (S1 = d1(b1 ? t1 : t1.x || t1.left || t1.scrollLeft, m1, w1, H ? -1 : 1)), h && (z1 = d1(b1 ? t1 : t1.y || t1.top || t1.scrollTop, Z, I1, H ? -1 : 1))));
      }, j1 = function() {
        f.isThrowing = false, It(f, "throwcomplete", "onThrowComplete");
      }, G1 = function() {
        f.isThrowing = false;
      }, A1 = function(j, T1) {
        var t1, b1, O1, x1;
        j && oi ? (j === true && (t1 = i.snap || i.liveSnap || {}, b1 = ja(t1) || ir(t1), j = {
          resistance: (i.throwResistance || i.resistance || 1e3) / (a ? 10 : 1)
        }, a ? j.rotation = Ed(f, b1 ? t1 : t1.rotation, w1, m1, 1, T1) : (u && (j[l] = Ed(f, b1 ? t1 : t1.points || t1.x || t1.left, w1, m1, H ? -1 : 1, T1 || f.lockedAxis === "x")), h && (j[c] = Ed(f, b1 ? t1 : t1.points || t1.y || t1.top, I1, Z, H ? -1 : 1, T1 || f.lockedAxis === "y")), (t1.points || ja(t1) && R0(t1[0])) && (j.linkedProps = l + "," + c, j.radius = t1.radius))), f.isThrowing = true, x1 = isNaN(i.overshootTolerance) ? i.edgeResistance === 1 ? 0 : 1 - f.edgeResistance + 0.2 : i.overshootTolerance, j.duration || (j.duration = {
          max: Math.max(i.minDuration || 0, "maxDuration" in i ? i.maxDuration : 2),
          min: isNaN(i.minDuration) ? x1 === 0 || R0(j) && j.resistance > 1e3 ? 0 : 0.5 : i.minDuration,
          overshoot: x1
        }), f.tween = O1 = Ve.to(H || t, {
          inertia: j,
          data: "_draggable",
          inherit: false,
          onComplete: j1,
          onInterrupt: G1,
          onUpdate: i.fastMode ? It : h1,
          onUpdateParams: i.fastMode ? [
            f,
            "onthrowupdate",
            "onThrowUpdate"
          ] : t1 && t1.radius ? [
            false,
            true
          ] : []
        }), i.fastMode || (H && (H._skip = true), O1.render(1e9, true, true), h1(true, true), f.endX = f.x, f.endY = f.y, a && (f.endRotation = f.x), O1.play(0), h1(true, true), H && (H._skip = false))) : G && f.applyBounds();
      }, $1 = function(j) {
        var T1 = e1, t1;
        e1 = _n(t.parentNode, true), j && f.isPressed && !e1.equals(T1 || new L3()) && (t1 = T1.inverse().apply({
          x: K,
          y: J
        }), e1.apply(t1, t1), K = t1.x, J = t1.y), e1.equals(IH) && (e1 = null);
      }, ne = function() {
        var j = 1 - f.edgeResistance, T1 = M ? jo(I) : 0, t1 = M ? Wo(I) : 0, b1, O1, x1;
        o && (P.x = E(l, "px") + "px", P.y = E(c, "px") + "px", P.renderTransform()), $1(false), V2.x = f.pointerX - T1, V2.y = f.pointerY - t1, e1 && e1.apply(V2, V2), K = V2.x, J = V2.y, r1 && (X1(f.pointerX, f.pointerY), c1(true)), N = _n(t), H ? (B1(), $ = H.top(), z = H.left()) : (K1() ? (h1(true, true), B1()) : f.applyBounds(), a ? (b1 = t.ownerSVGElement ? [
          P.xOrigin - t.getBBox().x,
          P.yOrigin - t.getBBox().y
        ] : (dl(t)[O9] || "0 0").split(" "), W = f.rotationOrigin = _n(t).apply({
          x: parseFloat(b1[0]) || 0,
          y: parseFloat(b1[1]) || 0
        }), h1(true, true), O1 = f.pointerX - W.x - T1, x1 = W.y - f.pointerY + t1, z = f.x, $ = f.y = Math.atan2(x1, O1) * __) : ($ = E(c, "px"), z = E(l, "px"))), G && j && (z > w1 ? z = w1 + (z - w1) / j : z < m1 && (z = m1 - (m1 - z) / j), a || ($ > I1 ? $ = I1 + ($ - I1) / j : $ < Z && ($ = Z - (Z - $) / j))), f.startX = z = j3(z), f.startY = $ = j3($);
      }, K1 = function() {
        return f.tween && f.tween.isActive();
      }, V1 = function() {
        m3.parentNode && !K1() && !f.isDragging && m3.parentNode.removeChild(m3);
      }, ie = function(j, T1) {
        var t1;
        if (!k || f.isPressed || !j || (j.type === "mousedown" || j.type === "pointerdown") && !T1 && X3() - A < 30 && hl[f.pointerEvent.type]) {
          E1 && j && k && z2(j);
          return;
        }
        if (_1 = K1(), D = false, f.pointerEvent = j, hl[j.type] ? (T = ~j.type.indexOf("touch") ? j.currentTarget || j.target : I, Yt(T, "touchend", P1), Yt(T, "touchmove", X), Yt(T, "touchcancel", P1), Yt(I, "touchstart", S_)) : (T = null, Yt(I, "mousemove", X)), l1 = null, (!iu || !T) && (Yt(I, "mouseup", P1), j && j.target && Yt(j.target, "mouseup", P1)), F = C.call(f, j.target) && i.dragClickables === false && !T1, F) {
          Yt(j.target, "change", P1), It(f, "pressInit", "onPressInit"), It(f, "press", "onPress"), Mc(m, true), E1 = false;
          return;
        }
        if (B = !T || u === h || f.vars.allowNativeTouchScrolling === false || f.vars.allowContextMenu && j && (j.ctrlKey || j.which > 2) ? false : u ? "y" : "x", E1 = !B && !f.allowEventDefault, E1 && (z2(j), Yt(ot, "touchforcechange", z2)), j.changedTouches ? (j = f1 = j.changedTouches[0], M1 = j.identifier) : j.pointerId ? M1 = j.pointerId : f1 = M1 = null, $u++, NH(c1), J = f.pointerY = j.pageY, K = f.pointerX = j.pageX, It(f, "pressInit", "onPressInit"), (B || f.autoScroll) && xd(t.parentNode), t.parentNode && f.autoScroll && !H && !a && t.parentNode._gsMaxScrollX && !m3.parentNode && !t.getBBox && (m3.style.width = t.parentNode.scrollWidth + "px", t.parentNode.appendChild(m3)), ne(), f.tween && f.tween.kill(), f.isThrowing = false, Ve.killTweensOf(H || t, _, true), H && Ve.killTweensOf(t, {
          scrollTo: 1
        }, true), f.tween = f.lockedAxis = null, (i.zIndexBoost || !a && !H && i.zIndexBoost !== false) && (t.style.zIndex = e.zIndex++), f.isPressed = true, Q = !!(i.onDrag || f._listeners.drag), V = !!(i.onMove || f._listeners.move), i.cursor !== false || i.activeCursor) for (t1 = m.length; --t1 > -1; ) Ve.set(m[t1], {
          cursor: i.activeCursor || i.cursor || (i0 === "grab" ? "grabbing" : i0)
        });
        It(f, "press", "onPress");
      }, X = function(j) {
        var T1 = j, t1, b1, O1, x1, q1, F1;
        if (!k || A6 || !f.isPressed || !j) {
          E1 && j && k && z2(j);
          return;
        }
        if (f.pointerEvent = j, t1 = j.changedTouches, t1) {
          if (j = t1[0], j !== f1 && j.identifier !== M1) {
            for (x1 = t1.length; --x1 > -1 && (j = t1[x1]).identifier !== M1 && j.target !== t; ) ;
            if (x1 < 0) return;
          }
        } else if (j.pointerId && M1 && j.pointerId !== M1) return;
        if (T && B && !l1 && (V2.x = j.pageX - (M ? jo(I) : 0), V2.y = j.pageY - (M ? Wo(I) : 0), e1 && e1.apply(V2, V2), b1 = V2.x, O1 = V2.y, q1 = Math.abs(b1 - K), F1 = Math.abs(O1 - J), (q1 !== F1 && (q1 > d || F1 > d) || n0 && B === l1) && (l1 = q1 > F1 && u ? "x" : "y", B && l1 !== B && Yt(ot, "touchforcechange", z2), f.vars.lockAxisOnTouchScroll !== false && u && h && (f.lockedAxis = l1 === "x" ? "y" : "x", ir(f.vars.onLockAxis) && f.vars.onLockAxis.call(f, T1)), n0 && B === l1))) {
          P1(T1);
          return;
        }
        !f.allowEventDefault && (!B || l1 && B !== l1) && T1.cancelable !== false ? (z2(T1), E1 = true) : E1 && (E1 = false), f.autoScroll && (g = true), X1(j.pageX, j.pageY, V);
      }, X1 = function(j, T1, t1) {
        var b1 = 1 - f.dragResistance, O1 = 1 - f.edgeResistance, x1 = f.pointerX, q1 = f.pointerY, F1 = $, J1 = f.x, de = f.y, C1 = f.endX, oe = f.endY, Le = f.endRotation, we = r1, Me, Se, Be, _e, xt, it;
        f.pointerX = j, f.pointerY = T1, M && (j -= jo(I), T1 -= Wo(I)), a ? (_e = Math.atan2(W.y - T1, j - W.x) * __, xt = f.y - _e, xt > 180 ? ($ -= 360, f.y = _e) : xt < -180 && ($ += 360, f.y = _e), f.x !== z || Math.abs($ - _e) > d ? (f.y = _e, Be = z + ($ - _e) * b1) : Be = z) : (e1 && (it = j * e1.a + T1 * e1.c + e1.e, T1 = j * e1.b + T1 * e1.d + e1.f, j = it), Se = T1 - J, Me = j - K, Se < d && Se > -d && (Se = 0), Me < d && Me > -d && (Me = 0), (f.lockAxis || f.lockedAxis) && (Me || Se) && (it = f.lockedAxis, it || (f.lockedAxis = it = u && Math.abs(Me) > Math.abs(Se) ? "y" : h ? "x" : null, it && ir(f.vars.onLockAxis) && f.vars.onLockAxis.call(f, f.pointerEvent)), it === "y" ? Se = 0 : it === "x" && (Me = 0)), Be = j3(z + Me * b1), _e = j3($ + Se * b1)), (S1 || z1 || Z1) && (f.x !== Be || f.y !== _e && !a) && (Z1 && (oo.x = Be, oo.y = _e, it = Z1(oo), Be = j3(it.x), _e = j3(it.y)), S1 && (Be = j3(S1(Be))), z1 && (_e = j3(z1(_e)))), G && (Be > w1 ? Be = w1 + Math.round((Be - w1) * O1) : Be < m1 && (Be = m1 + Math.round((Be - m1) * O1)), a || (_e > I1 ? _e = Math.round(I1 + (_e - I1) * O1) : _e < Z && (_e = Math.round(Z + (_e - Z) * O1)))), (f.x !== Be || f.y !== _e && !a) && (a ? (f.endRotation = f.x = f.endX = Be, r1 = true) : (h && (f.y = f.endY = _e, r1 = true), u && (f.x = f.endX = Be, r1 = true)), !t1 || It(f, "move", "onMove") !== false ? !f.isDragging && f.isPressed && (f.isDragging = D = true, It(f, "dragstart", "onDragStart")) : (f.pointerX = x1, f.pointerY = q1, $ = F1, f.x = J1, f.y = de, f.endX = C1, f.endY = oe, f.endRotation = Le, r1 = we));
      }, P1 = function R1(j, T1) {
        if (!k || !f.isPressed || j && M1 != null && !T1 && (j.pointerId && j.pointerId !== M1 && j.target !== t || j.changedTouches && !BH(j.changedTouches, M1))) {
          E1 && j && k && z2(j);
          return;
        }
        f.isPressed = false;
        var t1 = j, b1 = f.isDragging, O1 = f.vars.allowContextMenu && j && (j.ctrlKey || j.which > 2), x1 = Ve.delayedCall(1e-3, V1), q1, F1, J1, de, C1;
        if (T ? (Ut(T, "touchend", R1), Ut(T, "touchmove", X), Ut(T, "touchcancel", R1), Ut(I, "touchstart", S_)) : Ut(I, "mousemove", X), Ut(ot, "touchforcechange", z2), (!iu || !T) && (Ut(I, "mouseup", R1), j && j.target && Ut(j.target, "mouseup", R1)), r1 = false, b1 && (p = b_ = X3(), f.isDragging = false), x_(c1), F && !O1) {
          j && (Ut(j.target, "change", R1), f.pointerEvent = t1), Mc(m, false), It(f, "release", "onRelease"), It(f, "click", "onClick"), F = false;
          return;
        }
        for (F1 = m.length; --F1 > -1; ) Sd(m[F1], "cursor", i.cursor || (i.cursor !== false ? i0 : null));
        if ($u--, j) {
          if (q1 = j.changedTouches, q1 && (j = q1[0], j !== f1 && j.identifier !== M1)) {
            for (F1 = q1.length; --F1 > -1 && (j = q1[F1]).identifier !== M1 && j.target !== t; ) ;
            if (F1 < 0 && !T1) return;
          }
          f.pointerEvent = t1, f.pointerX = j.pageX, f.pointerY = j.pageY;
        }
        return O1 && t1 ? (z2(t1), E1 = true, It(f, "release", "onRelease")) : t1 && !b1 ? (E1 = false, _1 && (i.snap || i.bounds) && A1(i.inertia || i.throwProps), It(f, "release", "onRelease"), (!n0 || t1.type !== "touchmove") && t1.type.indexOf("cancel") === -1 && (It(f, "click", "onClick"), X3() - A < 300 && It(f, "doubleclick", "onDoubleClick"), de = t1.target || t, A = X3(), C1 = function() {
          A !== p1 && f.enabled() && !f.isPressed && !t1.defaultPrevented && (de.click ? de.click() : I.createEvent && (J1 = I.createEvent("MouseEvents"), J1.initMouseEvent("click", true, true, ot, 1, f.pointerEvent.screenX, f.pointerEvent.screenY, f.pointerX, f.pointerY, false, false, false, false, 0, null), de.dispatchEvent(J1)));
        }, !n0 && !t1.defaultPrevented && Ve.delayedCall(0.05, C1))) : (A1(i.inertia || i.throwProps), !f.allowEventDefault && t1 && (i.dragClickables !== false || !C.call(f, t1.target)) && b1 && (!B || l1 && B === l1) && t1.cancelable !== false ? (E1 = true, z2(t1)) : E1 = false, It(f, "release", "onRelease")), K1() && x1.duration(f.tween.duration()), b1 && It(f, "dragend", "onDragEnd"), true;
      }, Y1 = function(j) {
        if (j && f.isDragging && !H) {
          var T1 = j.target || t.parentNode, t1 = T1.scrollLeft - T1._gsScrollX, b1 = T1.scrollTop - T1._gsScrollY;
          (t1 || b1) && (e1 ? (K -= t1 * e1.a + b1 * e1.c, J -= b1 * e1.d + t1 * e1.b) : (K -= t1, J -= b1), T1._gsScrollX += t1, T1._gsScrollY += b1, X1(f.pointerX, f.pointerY));
        }
      }, N1 = function(j) {
        var T1 = X3(), t1 = T1 - A < 100, b1 = T1 - p < 50, O1 = t1 && p1 === A, x1 = f.pointerEvent && f.pointerEvent.defaultPrevented, q1 = t1 && o1 === A, F1 = j.isTrusted || j.isTrusted == null && t1 && O1;
        if ((O1 || b1 && f.vars.suppressClickOnDrag !== false) && j.stopImmediatePropagation && j.stopImmediatePropagation(), t1 && !(f.pointerEvent && f.pointerEvent.defaultPrevented) && (!O1 || F1 && !q1)) {
          F1 && O1 && (o1 = A), p1 = A;
          return;
        }
        (f.isPressed || b1 || t1) && (!F1 || !j.detail || !t1 || x1) && z2(j), !t1 && !b1 && !D && (j && j.target && (f.pointerEvent = j), It(f, "click", "onClick"));
      }, L1 = function(j) {
        return e1 ? {
          x: j.x * e1.a + j.y * e1.c + e1.e,
          y: j.x * e1.b + j.y * e1.d + e1.f
        } : {
          x: j.x,
          y: j.y
        };
      };
      return v1 = e.get(t), v1 && v1.kill(), r.startDrag = function(R1, j) {
        var T1, t1, b1, O1;
        ie(R1 || f.pointerEvent, true), j && !f.hitTest(R1 || f.pointerEvent) && (T1 = ao(R1 || f.pointerEvent), t1 = ao(t), b1 = L1({
          x: T1.left + T1.width / 2,
          y: T1.top + T1.height / 2
        }), O1 = L1({
          x: t1.left + t1.width / 2,
          y: t1.top + t1.height / 2
        }), K -= b1.x - O1.x, J -= b1.y - O1.y), f.isDragging || (f.isDragging = D = true, It(f, "dragstart", "onDragStart"));
      }, r.drag = X, r.endDrag = function(R1) {
        return P1(R1 || f.pointerEvent, true);
      }, r.timeSinceDrag = function() {
        return f.isDragging ? 0 : (X3() - p) / 1e3;
      }, r.timeSinceClick = function() {
        return (X3() - A) / 1e3;
      }, r.hitTest = function(R1, j) {
        return e.hitTest(f.target, R1, j);
      }, r.getDirection = function(R1, j) {
        var T1 = R1 === "velocity" && oi ? R1 : R0(R1) && !a ? "element" : "start", t1, b1, O1, x1, q1, F1;
        return T1 === "element" && (q1 = ao(f.target), F1 = ao(R1)), t1 = T1 === "start" ? f.x - z : T1 === "velocity" ? oi.getVelocity(t, l) : q1.left + q1.width / 2 - (F1.left + F1.width / 2), a ? t1 < 0 ? "counter-clockwise" : "clockwise" : (j = j || 2, b1 = T1 === "start" ? f.y - $ : T1 === "velocity" ? oi.getVelocity(t, c) : q1.top + q1.height / 2 - (F1.top + F1.height / 2), O1 = Math.abs(t1 / b1), x1 = O1 < 1 / j ? "" : t1 < 0 ? "left" : "right", O1 < j && (x1 !== "" && (x1 += "-"), x1 += b1 < 0 ? "up" : "down"), x1);
      }, r.applyBounds = function(R1, j) {
        var T1, t1, b1, O1, x1, q1;
        if (R1 && i.bounds !== R1) return i.bounds = R1, f.update(true, j);
        if (h1(true), B1(), G && !K1()) {
          if (T1 = f.x, t1 = f.y, T1 > w1 ? T1 = w1 : T1 < m1 && (T1 = m1), t1 > I1 ? t1 = I1 : t1 < Z && (t1 = Z), (f.x !== T1 || f.y !== t1) && (b1 = true, f.x = f.endX = T1, a ? f.endRotation = T1 : f.y = f.endY = t1, r1 = true, c1(true), f.autoScroll && !f.isDragging)) for (xd(t.parentNode), O1 = t, u3.scrollTop = ot.pageYOffset != null ? ot.pageYOffset : I.documentElement.scrollTop != null ? I.documentElement.scrollTop : I.body.scrollTop, u3.scrollLeft = ot.pageXOffset != null ? ot.pageXOffset : I.documentElement.scrollLeft != null ? I.documentElement.scrollLeft : I.body.scrollLeft; O1 && !q1; ) q1 = ma(O1.parentNode), x1 = q1 ? u3 : O1.parentNode, h && x1.scrollTop > x1._gsMaxScrollY && (x1.scrollTop = x1._gsMaxScrollY), u && x1.scrollLeft > x1._gsMaxScrollX && (x1.scrollLeft = x1._gsMaxScrollX), O1 = x1;
          f.isThrowing && (b1 || f.endX > w1 || f.endX < m1 || f.endY > I1 || f.endY < Z) && A1(i.inertia || i.throwProps, b1);
        }
        return f;
      }, r.update = function(R1, j, T1) {
        if (j && f.isPressed) {
          var t1 = _n(t), b1 = N.apply({
            x: f.x - z,
            y: f.y - $
          }), O1 = _n(t.parentNode, true);
          O1.apply({
            x: t1.e - b1.x,
            y: t1.f - b1.y
          }, b1), f.x -= b1.x - O1.e, f.y -= b1.y - O1.f, c1(true), ne();
        }
        var x1 = f.x, q1 = f.y;
        return $1(!j), R1 ? f.applyBounds() : (r1 && T1 && c1(true), h1(true)), j && (X1(f.pointerX, f.pointerY), r1 && c1(true)), f.isPressed && !j && (u && Math.abs(x1 - f.x) > 0.01 || h && Math.abs(q1 - f.y) > 0.01 && !a) && ne(), f.autoScroll && (xd(t.parentNode, f.isDragging), g = f.isDragging, c1(true), w_(t, Y1), E_(t, Y1)), f;
      }, r.enable = function(R1) {
        var j = {
          lazy: true
        }, T1, t1, b1;
        if (i.cursor !== false && (j.cursor = i.cursor || i0), Ve.utils.checkPrefix("touchCallout") && (j.touchCallout = "none"), R1 !== "soft") {
          for (v_(m, u === h ? "none" : i.allowNativeTouchScrolling && t.scrollHeight === t.clientHeight == (t.scrollWidth === t.clientHeight) || i.allowEventDefault ? "manipulation" : u ? "pan-y" : "pan-x"), t1 = m.length; --t1 > -1; ) b1 = m[t1], iu || Yt(b1, "mousedown", ie), Yt(b1, "touchstart", ie), Yt(b1, "click", N1, true), Ve.set(b1, j), b1.getBBox && b1.ownerSVGElement && u !== h && Ve.set(b1.ownerSVGElement, {
            touchAction: i.allowNativeTouchScrolling || i.allowEventDefault ? "manipulation" : u ? "pan-y" : "pan-x"
          }), i.allowContextMenu || Yt(b1, "contextmenu", q);
          Mc(m, false);
        }
        return E_(t, Y1), k = true, oi && R1 !== "soft" && oi.track(H || t, o ? "x,y" : a ? "rotation" : "top,left"), t._gsDragID = T1 = "d" + FH++, Go[T1] = f, H && (H.enable(), H.element._gsDragID = T1), (i.bounds || a) && ne(), i.bounds && f.applyBounds(), f;
      }, r.disable = function(R1) {
        for (var j = f.isDragging, T1 = m.length, t1; --T1 > -1; ) Sd(m[T1], "cursor", null);
        if (R1 !== "soft") {
          for (v_(m, null), T1 = m.length; --T1 > -1; ) t1 = m[T1], Sd(t1, "touchCallout", null), Ut(t1, "mousedown", ie), Ut(t1, "touchstart", ie), Ut(t1, "click", N1, true), Ut(t1, "contextmenu", q);
          Mc(m, true), T && (Ut(T, "touchcancel", P1), Ut(T, "touchend", P1), Ut(T, "touchmove", X)), Ut(I, "mouseup", P1), Ut(I, "mousemove", X);
        }
        return w_(t, Y1), k = false, oi && R1 !== "soft" && (oi.untrack(H || t, o ? "x,y" : a ? "rotation" : "top,left"), f.tween && f.tween.kill()), H && H.disable(), x_(c1), f.isDragging = f.isPressed = F = false, j && It(f, "dragend", "onDragEnd"), f;
      }, r.enabled = function(R1, j) {
        return arguments.length ? R1 ? f.enable(j) : f.disable(j) : k;
      }, r.kill = function() {
        return f.isThrowing = false, f.tween && f.tween.kill(), f.disable(), Ve.set(m, {
          clearProps: "userSelect"
        }), delete Go[t._gsDragID], f;
      }, r.revert = function() {
        this.kill(), this.styles && this.styles.revert();
      }, ~s.indexOf("scroll") && (H = r.scrollProxy = new WH(t, kH({
        onKill: function() {
          f.isPressed && P1(null);
        }
      }, i)), t.style.overflowY = h && !I9 ? "auto" : "hidden", t.style.overflowX = u && !I9 ? "auto" : "hidden", t = H.content), a ? _.rotation = 1 : (u && (_[l] = 1), h && (_[c] = 1)), P.force3D = "force3D" in i ? i.force3D : true, ex(g_(r)), r.enable(), r;
    }
    return e.register = function(i) {
      Ve = i, wd();
    }, e.create = function(i, r) {
      return L9 || wd(true), dr(i).map(function(s) {
        return new e(s, r);
      });
    }, e.get = function(i) {
      return Go[(dr(i)[0] || {})._gsDragID];
    }, e.timeSinceDrag = function() {
      return (X3() - b_) / 1e3;
    }, e.hitTest = function(i, r, s) {
      if (i === r) return false;
      var o = ao(i), a = ao(r), l = o.top, c = o.left, u = o.right, h = o.bottom, d = o.width, f = o.height, m = a.left > u || a.right < c || a.top > h || a.bottom < l, _, p, g;
      return m || !s ? !m : (g = (s + "").indexOf("%") !== -1, s = parseFloat(s) || 0, _ = {
        left: Math.max(c, a.left),
        top: Math.max(l, a.top)
      }, _.width = Math.min(u, a.right) - _.left, _.height = Math.min(h, a.bottom) - _.top, _.width < 0 || _.height < 0 ? false : g ? (s *= 0.01, p = _.width * _.height, p >= d * f * s || p >= a.width * a.height * s) : _.width > s && _.height > s);
    }, e;
  }(jH);
  UH(ga.prototype, {
    pointerX: 0,
    pointerY: 0,
    startX: 0,
    startY: 0,
    deltaX: 0,
    deltaY: 0,
    isDragging: false,
    isPressed: false
  });
  ga.zIndex = 1e3;
  ga.version = "3.12.5";
  nx() && Ve.registerPlugin(ga);
  var Fi, N9, L0, ox, po, So, U9, ax, lx = function() {
    return Fi || typeof window < "u" && (Fi = window.gsap);
  }, B9 = {}, XH = function(e) {
    return Math.round(e * 1e4) / 1e4;
  }, H9 = function(e) {
    return ax(e).id;
  }, r0 = function(e) {
    return B9[H9(typeof e == "string" ? L0(e)[0] : e)];
  }, C_ = function(e) {
    var t = po, i;
    if (e - U9 >= 0.05) for (U9 = e; t; ) i = t.g(t.t, t.p), (i !== t.v1 || e - t.t1 > 0.2) && (t.v2 = t.v1, t.v1 = i, t.t2 = t.t1, t.t1 = e), t = t._next;
  }, $H = {
    deg: 360,
    rad: Math.PI * 2
  }, Md = function() {
    Fi = lx(), Fi && (L0 = Fi.utils.toArray, ox = Fi.utils.getUnit, ax = Fi.core.getCache, So = Fi.ticker, N9 = 1);
  }, qH = function(e, t, i, r) {
    this.t = e, this.p = t, this.g = e._gsap.get, this.rCap = $H[i || ox(this.g(e, t))], this.v1 = this.v2 = 0, this.t1 = this.t2 = So.time, r && (this._next = r, r._prev = this);
  }, Ll = function() {
    function n(t, i) {
      N9 || Md(), this.target = L0(t)[0], B9[H9(this.target)] = this, this._props = {}, i && this.add(i);
    }
    n.register = function(i) {
      Fi = i, Md();
    };
    var e = n.prototype;
    return e.get = function(i, r) {
      var s = this._props[i] || console.warn("Not tracking " + i + " velocity."), o, a, l;
      return o = parseFloat(r ? s.v1 : s.g(s.t, s.p)), a = o - parseFloat(s.v2), l = s.rCap, l && (a = a % l, a !== a % (l / 2) && (a = a < 0 ? a + l : a - l)), XH(a / ((r ? s.t1 : So.time) - s.t2));
    }, e.getAll = function() {
      var i = {}, r = this._props, s;
      for (s in r) i[s] = this.get(s);
      return i;
    }, e.isTracking = function(i) {
      return i in this._props;
    }, e.add = function(i, r) {
      i in this._props || (po || (So.add(C_), U9 = So.time), po = this._props[i] = new qH(this.target, i, r, po));
    }, e.remove = function(i) {
      var r = this._props[i], s, o;
      r && (s = r._prev, o = r._next, s && (s._next = o), o ? o._prev = s : po === r && (So.remove(C_), po = 0), delete this._props[i]);
    }, e.kill = function(i) {
      for (var r in this._props) this.remove(r);
      i || delete B9[H9(this.target)];
    }, n.track = function(i, r, s) {
      N9 || Md();
      for (var o = [], a = L0(i), l = r.split(","), c = (s || "").split(","), u = a.length, h, d; u--; ) {
        for (h = r0(a[u]) || new n(a[u]), d = l.length; d--; ) h.add(l[d], c[d] || c[0]);
        o.push(h);
      }
      return o;
    }, n.untrack = function(i, r) {
      var s = (r || "").split(",");
      L0(i).forEach(function(o) {
        var a = r0(o);
        a && (s.length ? s.forEach(function(l) {
          return a.remove(l);
        }) : a.kill(1));
      });
    }, n.isTracking = function(i, r) {
      var s = r0(i);
      return s && s.isTracking(r);
    }, n.getVelocity = function(i, r) {
      var s = r0(i);
      return !s || !s.isTracking(r) ? console.warn("Not tracking velocity of " + r) : s.get(r);
    }, n;
  }();
  Ll.getByTarget = r0;
  lx() && Fi.registerPlugin(Ll);
  var Kt, cx, A_, ux, z9, I0, fx, hx, dx, D6, px, F0, V9, mx, qu = Ll.getByTarget, gx = function() {
    return Kt || typeof window < "u" && (Kt = window.gsap) && Kt.registerPlugin && Kt;
  }, YH = function(e) {
    return typeof e == "string";
  }, pl = function(e) {
    return typeof e == "number";
  }, Sr = function(e) {
    return typeof e == "object";
  }, G9 = function(e) {
    return typeof e == "function";
  }, KH = 1, _x = Array.isArray, JH = function(e) {
    return e;
  }, Xo = 1e10, D_ = 1 / Xo, bx = 0.05, QH = function(e) {
    return Math.round(e * 1e4) / 1e4;
  }, ZH = function(e, t, i) {
    for (var r in t) !(r in e) && r !== i && (e[r] = t[r]);
    return e;
  }, ez = function n(e) {
    var t = {}, i, r;
    for (i in e) t[i] = Sr(r = e[i]) && !_x(r) ? n(r) : r;
    return t;
  }, R_ = function(e, t, i, r, s) {
    var o = t.length, a = 0, l = Xo, c, u, h, d;
    if (Sr(e)) {
      for (; o--; ) {
        c = t[o], u = 0;
        for (h in e) d = c[h] - e[h], u += d * d;
        u < l && (a = o, l = u);
      }
      if ((s || Xo) < Xo && s < Math.sqrt(l)) return e;
    } else for (; o--; ) c = t[o], u = c - e, u < 0 && (u = -u), u < l && c >= r && c <= i && (a = o, l = u);
    return t[a];
  }, vx = function(e, t, i, r, s, o, a) {
    if (e.end === "auto") return e;
    var l = e.end, c, u;
    if (i = isNaN(i) ? Xo : i, r = isNaN(r) ? -1e10 : r, Sr(t)) {
      if (c = t.calculated ? t : (G9(l) ? l(t, a) : R_(t, l, i, r, o)) || t, !t.calculated) {
        for (u in c) t[u] = c[u];
        t.calculated = true;
      }
      c = c[s];
    } else c = G9(l) ? l(t, a) : _x(l) ? R_(t, l, i, r, o) : parseFloat(l);
    return c > i ? c = i : c < r && (c = r), {
      max: c,
      min: c,
      unitFactor: e.unitFactor
    };
  }, Yu = function(e, t, i) {
    return isNaN(e[t]) ? i : +e[t];
  }, R6 = function(e, t) {
    return t * bx * e / D6;
  }, P_ = function(e, t, i) {
    return Math.abs((t - e) * D6 / i / bx);
  }, yx = {
    resistance: 1,
    checkpoint: 1,
    preventOvershoot: 1,
    linkedProps: 1,
    radius: 1,
    duration: 1
  }, xx = function(e, t, i, r) {
    if (t.linkedProps) {
      var s = t.linkedProps.split(","), o = {}, a, l, c, u, h, d;
      for (a = 0; a < s.length; a++) l = s[a], c = t[l], c && (pl(c.velocity) ? u = c.velocity : (h = h || qu(e), u = h && h.isTracking(l) ? h.get(l) : 0), d = Math.abs(u / Yu(c, "resistance", r)), o[l] = parseFloat(i(e, l)) + R6(u, d));
      return o;
    }
  }, tz = function(e, t, i, r, s, o) {
    if (i === void 0 && (i = 10), r === void 0 && (r = 0.2), s === void 0 && (s = 1), YH(e) && (e = ux(e)[0]), !e) return 0;
    var a = 0, l = Xo, c = t.inertia || t, u = dx(e).get, h = Yu(c, "resistance", I0.resistance), d, f, m, _, p, g, y, b, v, x;
    x = xx(e, c, u, h);
    for (d in c) yx[d] || (f = c[d], Sr(f) || (b = b || qu(e), b && b.isTracking(d) ? f = pl(f) ? {
      velocity: f
    } : {
      velocity: b.get(d)
    } : (_ = +f || 0, m = Math.abs(_ / h))), Sr(f) && (pl(f.velocity) ? _ = f.velocity : (b = b || qu(e), _ = b && b.isTracking(d) ? b.get(d) : 0), m = px(r, i, Math.abs(_ / Yu(f, "resistance", h))), p = parseFloat(u(e, d)) || 0, g = p + R6(_, m), "end" in f && (f = vx(f, x && d in x ? x : g, f.max, f.min, d, c.radius, _), F0 === t && (F0 = c = ez(t)), c[d] = ZH(f, c[d], "end")), "max" in f && g > +f.max + D_ ? (v = f.unitFactor || I0.unitFactors[d] || 1, y = p > f.max && f.min !== f.max || _ * v > -15 && _ * v < 45 ? r + (i - r) * 0.1 : P_(p, f.max, _), y + s < l && (l = y + s)) : "min" in f && g < +f.min - D_ && (v = f.unitFactor || I0.unitFactors[d] || 1, y = p < f.min && f.min !== f.max || _ * v > -45 && _ * v < 15 ? r + (i - r) * 0.1 : P_(p, f.min, _), y + s < l && (l = y + s)), y > a && (a = y)), m > a && (a = m));
    return a > l && (a = l), a > i ? i : a < r ? r : a;
  }, L_ = function() {
    Kt = gx(), Kt && (A_ = Kt.parseEase, ux = Kt.utils.toArray, fx = Kt.utils.getUnit, dx = Kt.core.getCache, px = Kt.utils.clamp, V9 = Kt.core.getStyleSaver, mx = Kt.core.reverting || function() {
    }, z9 = A_("power3"), D6 = z9(0.05), hx = Kt.core.PropTween, Kt.config({
      resistance: 100,
      unitFactors: {
        time: 1e3,
        totalTime: 1e3,
        progress: 1e3,
        totalProgress: 1e3
      }
    }), I0 = Kt.config(), Kt.registerPlugin(Ll), cx = 1);
  }, P6 = {
    version: "3.12.5",
    name: "inertia",
    register: function(e) {
      Kt = e, L_();
    },
    init: function(e, t, i, r, s) {
      cx || L_();
      var o = qu(e);
      if (t === "auto") {
        if (!o) {
          console.warn("No inertia tracking on " + e + ". InertiaPlugin.track(target) first.");
          return;
        }
        t = o.getAll();
      }
      this.styles = V9 && typeof e.style == "object" && V9(e), this.target = e, this.tween = i, F0 = t;
      var a = e._gsap, l = a.get, c = t.duration, u = Sr(c), h = t.preventOvershoot || u && c.overshoot === 0, d = Yu(t, "resistance", I0.resistance), f = pl(c) ? c : tz(e, t, u && c.max || 10, u && c.min || 0.2, u && "overshoot" in c ? +c.overshoot : h ? 0 : 1), m, _, p, g, y, b, v, x, C;
      t = F0, F0 = 0, C = xx(e, t, l, d);
      for (m in t) yx[m] || (_ = t[m], G9(_) && (_ = _(r, e, s)), pl(_) ? y = _ : Sr(_) && !isNaN(_.velocity) ? y = +_.velocity : o && o.isTracking(m) ? y = o.get(m) : console.warn("ERROR: No velocity was defined for " + e + " property: " + m), b = R6(y, f), x = 0, p = l(e, m), g = fx(p), p = parseFloat(p), Sr(_) && (v = p + b, "end" in _ && (_ = vx(_, C && m in C ? C : v, _.max, _.min, m, t.radius, y)), "max" in _ && +_.max < v ? h || _.preventOvershoot ? b = _.max - p : x = _.max - p - b : "min" in _ && +_.min > v && (h || _.preventOvershoot ? b = _.min - p : x = _.min - p - b)), this._props.push(m), this.styles && this.styles.save(m), this._pt = new hx(this._pt, e, m, p, 0, JH, 0, a.set(e, m, this)), this._pt.u = g || 0, this._pt.c1 = b, this._pt.c2 = x);
      return i.duration(f), KH;
    },
    render: function(e, t) {
      var i = t._pt;
      if (e = z9(t.tween._time / t.tween._dur), e || !mx()) for (; i; ) i.set(i.t, i.p, QH(i.s + i.c1 * e + i.c2 * e * e) + i.u, i.d, e), i = i._next;
      else t.styles.revert();
    }
  };
  "track,untrack,isTracking,getVelocity,getByTarget".split(",").forEach(function(n) {
    return P6[n] = Ll[n];
  });
  gx() && Kt.registerPlugin(P6);
  var nz = 1, _a, Dn, dt, O0, sr, w3, W9, I_ = function(e, t) {
    return e.actions.forEach(function(i) {
      return i.vars[t] && i.vars[t](i);
    });
  }, j9 = {}, F_ = 180 / Math.PI, iz = Math.PI / 180, Ku = {}, O_ = {}, Uf = {}, L6 = function(e) {
    return typeof e == "string" ? e.split(" ").join("").split(",") : e;
  }, rz = L6("onStart,onUpdate,onComplete,onReverseComplete,onInterrupt"), Bf = L6("transform,transformOrigin,width,height,position,top,left,opacity,zIndex,maxWidth,maxHeight,minWidth,minHeight"), k0 = function(e) {
    return _a(e)[0] || console.warn("Element not found:", e);
  }, Eo = function(e) {
    return Math.round(e * 1e4) / 1e4 || 0;
  }, Td = function(e, t, i) {
    return e.forEach(function(r) {
      return r.classList[i](t);
    });
  }, k_ = {
    zIndex: 1,
    kill: 1,
    simple: 1,
    spin: 1,
    clearProps: 1,
    targets: 1,
    toggleClass: 1,
    onComplete: 1,
    onUpdate: 1,
    onInterrupt: 1,
    onStart: 1,
    delay: 1,
    repeat: 1,
    repeatDelay: 1,
    yoyo: 1,
    scale: 1,
    fade: 1,
    absolute: 1,
    props: 1,
    onEnter: 1,
    onLeave: 1,
    custom: 1,
    paused: 1,
    nested: 1,
    prune: 1,
    absoluteOnLeave: 1
  }, Sx = {
    zIndex: 1,
    simple: 1,
    clearProps: 1,
    scale: 1,
    absolute: 1,
    fitChild: 1,
    getVars: 1,
    props: 1
  }, Ex = function(e) {
    return e.replace(/([A-Z])/g, "-$1").toLowerCase();
  }, wo = function(e, t) {
    var i = {}, r;
    for (r in e) t[r] || (i[r] = e[r]);
    return i;
  }, I6 = {}, wx = function(e) {
    var t = I6[e] = L6(e);
    return Uf[e] = t.concat(Bf), t;
  }, sz = function(e) {
    var t = e._gsap || Dn.core.getCache(e);
    return t.gmCache === Dn.ticker.frame ? t.gMatrix : (t.gmCache = Dn.ticker.frame, t.gMatrix = _n(e, true, false, true));
  }, oz = function n(e, t, i) {
    i === void 0 && (i = 0);
    for (var r = e.parentNode, s = 1e3 * Math.pow(10, i) * (t ? -1 : 1), o = t ? -s * 900 : 0; e; ) o += s, e = e.previousSibling;
    return r ? o + n(r, t, i + 1) : o;
  }, Ju = function(e, t, i) {
    return e.forEach(function(r) {
      return r.d = oz(i ? r.element : r.t, t);
    }), e.sort(function(r, s) {
      return r.d - s.d;
    }), e;
  }, ml = function(e, t) {
    for (var i = e.element.style, r = e.css = e.css || [], s = t.length, o, a; s--; ) o = t[s], a = i[o] || i.getPropertyValue(o), r.push(a ? o : O_[o] || (O_[o] = Ex(o)), a);
    return i;
  }, Qu = function(e) {
    var t = e.css, i = e.element.style, r = 0;
    for (e.cache.uncache = 1; r < t.length; r += 2) t[r + 1] ? i[t[r]] = t[r + 1] : i.removeProperty(t[r]);
    !t[t.indexOf("transform") + 1] && i.translate && (i.removeProperty("translate"), i.removeProperty("scale"), i.removeProperty("rotate"));
  }, N_ = function(e, t) {
    e.forEach(function(i) {
      return i.a.cache.uncache = 1;
    }), t || e.finalStates.forEach(Qu);
  }, Cd = "paddingTop,paddingRight,paddingBottom,paddingLeft,gridArea,transition".split(","), F6 = function(e, t, i) {
    var r = e.element, s = e.width, o = e.height, a = e.uncache, l = e.getProp, c = r.style, u = 4, h, d, f;
    if (typeof t != "object" && (t = e), dt && i !== 1) return dt._abs.push({
      t: r,
      b: e,
      a: e,
      sd: 0
    }), dt._final.push(function() {
      return (e.cache.uncache = 1) && Qu(e);
    }), r;
    for (d = l("display") === "none", (!e.isVisible || d) && (d && (ml(e, [
      "display"
    ]).display = t.display), e.matrix = t.matrix, e.width = s = e.width || t.width, e.height = o = e.height || t.height), ml(e, Cd), f = window.getComputedStyle(r); u--; ) c[Cd[u]] = f[Cd[u]];
    if (c.gridArea = "1 / 1 / 1 / 1", c.transition = "none", c.position = "absolute", c.width = s + "px", c.height = o + "px", c.top || (c.top = "0px"), c.left || (c.left = "0px"), a) h = new Rs(r);
    else if (h = wo(e, Ku), h.position = "absolute", e.simple) {
      var m = r.getBoundingClientRect();
      h.matrix = new L3(1, 0, 0, 1, m.left + T6(), m.top + M6());
    } else h.matrix = _n(r, false, false, true);
    return h = $o(h, e, true), e.x = w3(h.x, 0.01), e.y = w3(h.y, 0.01), r;
  }, U_ = function(e, t) {
    return t !== true && (t = _a(t), e = e.filter(function(i) {
      if (t.indexOf((i.sd < 0 ? i.b : i.a).element) !== -1) return true;
      i.t._gsap.renderTransform(1), i.b.isVisible && (i.t.style.width = i.b.width + "px", i.t.style.height = i.b.height + "px");
    })), e;
  }, Mx = function(e) {
    return Ju(e, true).forEach(function(t) {
      return (t.a.isVisible || t.b.isVisible) && F6(t.sd < 0 ? t.b : t.a, t.b, 1);
    });
  }, az = function(e, t) {
    return t && e.idLookup[X9(t).id] || e.elementStates[0];
  }, X9 = function(e, t, i, r) {
    return e instanceof Rs ? e : e instanceof bi ? az(e, r) : new Rs(typeof e == "string" ? k0(e) || console.warn(e + " not found") : e, t, i);
  }, lz = function(e, t) {
    for (var i = Dn.getProperty(e.element, null, "native"), r = e.props = {}, s = t.length; s--; ) r[t[s]] = (i(t[s]) + "").trim();
    return r.zIndex && (r.zIndex = parseFloat(r.zIndex) || 0), e;
  }, Tx = function(e, t) {
    var i = e.style || e, r;
    for (r in t) i[r] = t[r];
  }, cz = function(e) {
    var t = e.getAttribute("data-flip-id");
    return t || e.setAttribute("data-flip-id", t = "auto-" + nz++), t;
  }, Cx = function(e) {
    return e.map(function(t) {
      return t.element;
    });
  }, B_ = function(e, t, i) {
    return e && t.length && i.add(e(Cx(t), i, new bi(t, 0, true)), 0);
  }, $o = function(e, t, i, r, s, o) {
    var a = e.element, l = e.cache, c = e.parent, u = e.x, h = e.y, d = t.width, f = t.height, m = t.scaleX, _ = t.scaleY, p = t.rotation, g = t.bounds, y = o && W9 && W9(a, "transform"), b = e, v = t.matrix, x = v.e, C = v.f, A = e.bounds.width !== g.width || e.bounds.height !== g.height || e.scaleX !== m || e.scaleY !== _ || e.rotation !== p, P = !A && e.simple && t.simple && !s, M, E, I, k, H, K, J;
    return P || !c ? (m = _ = 1, p = M = 0) : (H = sz(c), K = H.clone().multiply(t.ctm ? t.matrix.clone().multiply(t.ctm) : t.matrix), p = Eo(Math.atan2(K.b, K.a) * F_), M = Eo(Math.atan2(K.c, K.d) * F_ + p) % 360, m = Math.sqrt(Math.pow(K.a, 2) + Math.pow(K.b, 2)), _ = Math.sqrt(Math.pow(K.c, 2) + Math.pow(K.d, 2)) * Math.cos(M * iz), s && (s = _a(s)[0], k = Dn.getProperty(s), J = s.getBBox && typeof s.getBBox == "function" && s.getBBox(), b = {
      scaleX: k("scaleX"),
      scaleY: k("scaleY"),
      width: J ? J.width : Math.ceil(parseFloat(k("width", "px"))),
      height: J ? J.height : parseFloat(k("height", "px"))
    }), l.rotation = p + "deg", l.skewX = M + "deg"), i ? (m *= d === b.width || !b.width ? 1 : d / b.width, _ *= f === b.height || !b.height ? 1 : f / b.height, l.scaleX = m, l.scaleY = _) : (d = w3(d * m / b.scaleX, 0), f = w3(f * _ / b.scaleY, 0), a.style.width = d + "px", a.style.height = f + "px"), r && Tx(a, t.props), P || !c ? (u += x - e.matrix.e, h += C - e.matrix.f) : A || c !== t.parent ? (l.renderTransform(1, l), K = _n(s || a, false, false, true), E = H.apply({
      x: K.e,
      y: K.f
    }), I = H.apply({
      x,
      y: C
    }), u += I.x - E.x, h += I.y - E.y) : (H.e = H.f = 0, I = H.apply({
      x: x - e.matrix.e,
      y: C - e.matrix.f
    }), u += I.x, h += I.y), u = w3(u, 0.02), h = w3(h, 0.02), o && !(o instanceof Rs) ? y && y.revert() : (l.x = u + "px", l.y = h + "px", l.renderTransform(1, l)), o && (o.x = u, o.y = h, o.rotation = p, o.skewX = M, i ? (o.scaleX = m, o.scaleY = _) : (o.width = d, o.height = f)), o || l;
  }, Ad = function(e, t) {
    return e instanceof bi ? e : new bi(e, t);
  }, Ax = function(e, t, i) {
    var r = e.idLookup[i], s = e.alt[i];
    return s.isVisible && (!(t.getElementState(s.element) || s).isVisible || !r.isVisible) ? s : r;
  }, Dd = [], Rd = "width,height,overflowX,overflowY".split(","), Tc, H_ = function(e) {
    if (e !== Tc) {
      var t = sr.style, i = sr.clientWidth === window.outerWidth, r = sr.clientHeight === window.outerHeight, s = 4;
      if (e && (i || r)) {
        for (; s--; ) Dd[s] = t[Rd[s]];
        i && (t.width = sr.clientWidth + "px", t.overflowY = "hidden"), r && (t.height = sr.clientHeight + "px", t.overflowX = "hidden"), Tc = e;
      } else if (Tc) {
        for (; s--; ) Dd[s] ? t[Rd[s]] = Dd[s] : t.removeProperty(Ex(Rd[s]));
        Tc = e;
      }
    }
  }, Pd = function(e, t, i, r) {
    e instanceof bi && t instanceof bi || console.warn("Not a valid state object."), i = i || {};
    var s = i, o = s.clearProps, a = s.onEnter, l = s.onLeave, c = s.absolute, u = s.absoluteOnLeave, h = s.custom, d = s.delay, f = s.paused, m = s.repeat, _ = s.repeatDelay, p = s.yoyo, g = s.toggleClass, y = s.nested, b = s.zIndex, v = s.scale, x = s.fade, C = s.stagger, A = s.spin, P = s.prune, M = ("props" in i ? i : e).props, E = wo(i, k_), I = Dn.timeline({
      delay: d,
      paused: f,
      repeat: m,
      repeatDelay: _,
      yoyo: p,
      data: "isFlip"
    }), k = E, H = [], K = [], J = [], z = [], $ = A === true ? 1 : A || 0, G = typeof A == "function" ? A : function() {
      return $;
    }, Q = e.interrupted || t.interrupted, V = I[r !== 1 ? "to" : "from"], w1, m1, I1, Z, f1, M1, W, r1, v1, S1, z1, Z1, F, T;
    for (m1 in t.idLookup) z1 = t.alt[m1] ? Ax(t, e, m1) : t.idLookup[m1], f1 = z1.element, S1 = e.idLookup[m1], e.alt[m1] && f1 === S1.element && (e.alt[m1].isVisible || !z1.isVisible) && (S1 = e.alt[m1]), S1 ? (M1 = {
      t: f1,
      b: S1,
      a: z1,
      sd: S1.element === f1 ? 0 : z1.isVisible ? 1 : -1
    }, J.push(M1), M1.sd && (M1.sd < 0 && (M1.b = z1, M1.a = S1), Q && ml(M1.b, M ? Uf[M] : Bf), x && J.push(M1.swap = {
      t: S1.element,
      b: M1.b,
      a: M1.a,
      sd: -M1.sd,
      swap: M1
    })), f1._flip = S1.element._flip = dt ? dt.timeline : I) : z1.isVisible && (J.push({
      t: f1,
      b: wo(z1, {
        isVisible: 1
      }),
      a: z1,
      sd: 0,
      entering: 1
    }), f1._flip = dt ? dt.timeline : I);
    if (M && (I6[M] || wx(M)).forEach(function(B) {
      return E[B] = function(l1) {
        return J[l1].a.props[B];
      };
    }), J.finalStates = v1 = [], Z1 = function() {
      for (Ju(J), H_(true), Z = 0; Z < J.length; Z++) M1 = J[Z], F = M1.a, T = M1.b, P && !F.isDifferent(T) && !M1.entering ? J.splice(Z--, 1) : (f1 = M1.t, y && !(M1.sd < 0) && Z && (F.matrix = _n(f1, false, false, true)), T.isVisible && F.isVisible ? (M1.sd < 0 ? (W = new Rs(f1, M, e.simple), $o(W, F, v, 0, 0, W), W.matrix = _n(f1, false, false, true), W.css = M1.b.css, M1.a = F = W, x && (f1.style.opacity = Q ? T.opacity : F.opacity), C && z.push(f1)) : M1.sd > 0 && x && (f1.style.opacity = Q ? F.opacity - T.opacity : "0"), $o(F, T, v, M)) : T.isVisible !== F.isVisible && (T.isVisible ? F.isVisible || (T.css = F.css, K.push(T), J.splice(Z--, 1), c && y && $o(F, T, v, M)) : (F.isVisible && H.push(F), J.splice(Z--, 1))), v || (f1.style.maxWidth = Math.max(F.width, T.width) + "px", f1.style.maxHeight = Math.max(F.height, T.height) + "px", f1.style.minWidth = Math.min(F.width, T.width) + "px", f1.style.minHeight = Math.min(F.height, T.height) + "px"), y && g && f1.classList.add(g)), v1.push(F);
      var l1;
      if (g && (l1 = v1.map(function(o1) {
        return o1.element;
      }), y && l1.forEach(function(o1) {
        return o1.classList.remove(g);
      })), H_(false), v ? (E.scaleX = function(o1) {
        return J[o1].a.scaleX;
      }, E.scaleY = function(o1) {
        return J[o1].a.scaleY;
      }) : (E.width = function(o1) {
        return J[o1].a.width + "px";
      }, E.height = function(o1) {
        return J[o1].a.height + "px";
      }, E.autoRound = i.autoRound || false), E.x = function(o1) {
        return J[o1].a.x + "px";
      }, E.y = function(o1) {
        return J[o1].a.y + "px";
      }, E.rotation = function(o1) {
        return J[o1].a.rotation + (A ? G(o1, r1[o1], r1) * 360 : 0);
      }, E.skewX = function(o1) {
        return J[o1].a.skewX;
      }, r1 = J.map(function(o1) {
        return o1.t;
      }), (b || b === 0) && (E.modifiers = {
        zIndex: function() {
          return b;
        }
      }, E.zIndex = b, E.immediateRender = i.immediateRender !== false), x && (E.opacity = function(o1) {
        return J[o1].sd < 0 ? 0 : J[o1].sd > 0 ? J[o1].a.opacity : "+=0";
      }), z.length) {
        C = Dn.utils.distribute(C);
        var D1 = r1.slice(z.length);
        E.stagger = function(o1, E1) {
          return C(~z.indexOf(E1) ? r1.indexOf(J[o1].swap.t) : o1, E1, D1);
        };
      }
      if (rz.forEach(function(o1) {
        return i[o1] && I.eventCallback(o1, i[o1], i[o1 + "Params"]);
      }), h && r1.length) {
        k = wo(E, k_), "scale" in h && (h.scaleX = h.scaleY = h.scale, delete h.scale);
        for (m1 in h) w1 = wo(h[m1], Sx), w1[m1] = E[m1], !("duration" in w1) && "duration" in E && (w1.duration = E.duration), w1.stagger = E.stagger, V.call(I, r1, w1, 0), delete k[m1];
      }
      (r1.length || K.length || H.length) && (g && I.add(function() {
        return Td(l1, g, I._zTime < 0 ? "remove" : "add");
      }, 0) && !f && Td(l1, g, "add"), r1.length && V.call(I, r1, k, 0)), B_(a, H, I), B_(l, K, I);
      var p1 = dt && dt.timeline;
      p1 && (p1.add(I, 0), dt._final.push(function() {
        return N_(J, !o);
      })), I1 = I.duration(), I.call(function() {
        var o1 = I.time() >= I1;
        o1 && !p1 && N_(J, !o), g && Td(l1, g, o1 ? "remove" : "add");
      });
    }, u && (c = J.filter(function(B) {
      return !B.sd && !B.a.isVisible && B.b.isVisible;
    }).map(function(B) {
      return B.a.element;
    })), dt) {
      var e1;
      c && (e1 = dt._abs).push.apply(e1, U_(J, c)), dt._run.push(Z1);
    } else c && Mx(U_(J, c)), Z1();
    var _1 = dt ? dt.timeline : I;
    return _1.revert = function() {
      return O6(_1, 1, 1);
    }, _1;
  }, uz = function n(e) {
    e.vars.onInterrupt && e.vars.onInterrupt.apply(e, e.vars.onInterruptParams || []), e.getChildren(true, false, true).forEach(n);
  }, O6 = function(e, t, i) {
    if (e && e.progress() < 1 && (!e.paused() || i)) return t && (uz(e), t < 2 && e.progress(1), e.kill()), true;
  }, Cc = function(e) {
    for (var t = e.idLookup = {}, i = e.alt = {}, r = e.elementStates, s = r.length, o; s--; ) o = r[s], t[o.id] ? i[o.id] = o : t[o.id] = o;
  }, bi = function() {
    function n(t, i, r) {
      if (this.props = i && i.props, this.simple = !!(i && i.simple), r) this.targets = Cx(t), this.elementStates = t, Cc(this);
      else {
        this.targets = _a(t);
        var s = i && (i.kill === false || i.batch && !i.kill);
        dt && !s && dt._kill.push(this), this.update(s || !!dt);
      }
    }
    var e = n.prototype;
    return e.update = function(i) {
      var r = this;
      return this.elementStates = this.targets.map(function(s) {
        return new Rs(s, r.props, r.simple);
      }), Cc(this), this.interrupt(i), this.recordInlineStyles(), this;
    }, e.clear = function() {
      return this.targets.length = this.elementStates.length = 0, Cc(this), this;
    }, e.fit = function(i, r, s) {
      for (var o = Ju(this.elementStates.slice(0), false, true), a = (i || this).idLookup, l = 0, c, u; l < o.length; l++) c = o[l], s && (c.matrix = _n(c.element, false, false, true)), u = a[c.id], u && $o(c, u, r, true, 0, c), c.matrix = _n(c.element, false, false, true);
      return this;
    }, e.getProperty = function(i, r) {
      var s = this.getElementState(i) || Ku;
      return (r in s ? s : s.props || Ku)[r];
    }, e.add = function(i) {
      for (var r = i.targets.length, s = this.idLookup, o = this.alt, a, l, c; r--; ) l = i.elementStates[r], c = s[l.id], c && (l.element === c.element || o[l.id] && o[l.id].element === l.element) ? (a = this.elementStates.indexOf(l.element === c.element ? c : o[l.id]), this.targets.splice(a, 1, i.targets[r]), this.elementStates.splice(a, 1, l)) : (this.targets.push(i.targets[r]), this.elementStates.push(l));
      return i.interrupted && (this.interrupted = true), i.simple || (this.simple = false), Cc(this), this;
    }, e.compare = function(i) {
      var r = i.idLookup, s = this.idLookup, o = [], a = [], l = [], c = [], u = [], h = i.alt, d = this.alt, f = function(P, M, E) {
        return (P.isVisible !== M.isVisible ? P.isVisible ? l : c : P.isVisible ? a : o).push(E) && u.push(E);
      }, m = function(P, M, E) {
        return u.indexOf(E) < 0 && f(P, M, E);
      }, _, p, g, y, b, v, x, C;
      for (g in r) b = h[g], v = d[g], _ = b ? Ax(i, this, g) : r[g], y = _.element, p = s[g], v ? (C = p.isVisible || !v.isVisible && y === p.element ? p : v, x = b && !_.isVisible && !b.isVisible && C.element === b.element ? b : _, x.isVisible && C.isVisible && x.element !== C.element ? ((x.isDifferent(C) ? a : o).push(x.element, C.element), u.push(x.element, C.element)) : f(x, C, x.element), b && x.element === b.element && (b = r[g]), m(x.element !== p.element && b ? b : x, p, p.element), m(b && b.element === v.element ? b : x, v, v.element), b && m(b, v.element === b.element ? v : p, b.element)) : (p ? p.isDifferent(_) ? f(_, p, y) : o.push(y) : l.push(y), b && m(b, p, b.element));
      for (g in s) r[g] || (c.push(s[g].element), d[g] && c.push(d[g].element));
      return {
        changed: a,
        unchanged: o,
        enter: l,
        leave: c
      };
    }, e.recordInlineStyles = function() {
      for (var i = Uf[this.props] || Bf, r = this.elementStates.length; r--; ) ml(this.elementStates[r], i);
    }, e.interrupt = function(i) {
      var r = this, s = [];
      this.targets.forEach(function(o) {
        var a = o._flip, l = O6(a, i ? 0 : 1);
        i && l && s.indexOf(a) < 0 && a.add(function() {
          return r.updateVisibility();
        }), l && s.push(a);
      }), !i && s.length && this.updateVisibility(), this.interrupted || (this.interrupted = !!s.length);
    }, e.updateVisibility = function() {
      this.elementStates.forEach(function(i) {
        var r = i.element.getBoundingClientRect();
        i.isVisible = !!(r.width || r.height || r.top || r.left), i.uncache = 1;
      });
    }, e.getElementState = function(i) {
      return this.elementStates[this.targets.indexOf(k0(i))];
    }, e.makeAbsolute = function() {
      return Ju(this.elementStates.slice(0), true, true).map(F6);
    }, n;
  }(), Rs = function() {
    function n(t, i, r) {
      this.element = t, this.update(i, r);
    }
    var e = n.prototype;
    return e.isDifferent = function(i) {
      var r = this.bounds, s = i.bounds;
      return r.top !== s.top || r.left !== s.left || r.width !== s.width || r.height !== s.height || !this.matrix.equals(i.matrix) || this.opacity !== i.opacity || this.props && i.props && JSON.stringify(this.props) !== JSON.stringify(i.props);
    }, e.update = function(i, r) {
      var s = this, o = s.element, a = Dn.getProperty(o), l = Dn.core.getCache(o), c = o.getBoundingClientRect(), u = o.getBBox && typeof o.getBBox == "function" && o.nodeName.toLowerCase() !== "svg" && o.getBBox(), h = r ? new L3(1, 0, 0, 1, c.left + T6(), c.top + M6()) : _n(o, false, false, true);
      s.getProp = a, s.element = o, s.id = cz(o), s.matrix = h, s.cache = l, s.bounds = c, s.isVisible = !!(c.width || c.height || c.left || c.top), s.display = a("display"), s.position = a("position"), s.parent = o.parentNode, s.x = a("x"), s.y = a("y"), s.scaleX = l.scaleX, s.scaleY = l.scaleY, s.rotation = a("rotation"), s.skewX = a("skewX"), s.opacity = a("opacity"), s.width = u ? u.width : w3(a("width", "px"), 0.04), s.height = u ? u.height : w3(a("height", "px"), 0.04), i && lz(s, I6[i] || wx(i)), s.ctm = o.getCTM && o.nodeName.toLowerCase() === "svg" && Qy(o).inverse(), s.simple = r || Eo(h.a) === 1 && !Eo(h.b) && !Eo(h.c) && Eo(h.d) === 1, s.uncache = 0;
    }, n;
  }(), fz = function() {
    function n(t, i) {
      this.vars = t, this.batch = i, this.states = [], this.timeline = i.timeline;
    }
    var e = n.prototype;
    return e.getStateById = function(i) {
      for (var r = this.states.length; r--; ) if (this.states[r].idLookup[i]) return this.states[r];
    }, e.kill = function() {
      this.batch.remove(this);
    }, n;
  }(), hz = function() {
    function n(t) {
      this.id = t, this.actions = [], this._kill = [], this._final = [], this._abs = [], this._run = [], this.data = {}, this.state = new bi(), this.timeline = Dn.timeline();
    }
    var e = n.prototype;
    return e.add = function(i) {
      var r = this.actions.filter(function(s) {
        return s.vars === i;
      });
      return r.length ? r[0] : (r = new fz(typeof i == "function" ? {
        animate: i
      } : i, this), this.actions.push(r), r);
    }, e.remove = function(i) {
      var r = this.actions.indexOf(i);
      return r >= 0 && this.actions.splice(r, 1), this;
    }, e.getState = function(i) {
      var r = this, s = dt, o = O0;
      return dt = this, this.state.clear(), this._kill.length = 0, this.actions.forEach(function(a) {
        a.vars.getState && (a.states.length = 0, O0 = a, a.state = a.vars.getState(a)), i && a.states.forEach(function(l) {
          return r.state.add(l);
        });
      }), O0 = o, dt = s, this.killConflicts(), this;
    }, e.animate = function() {
      var i = this, r = dt, s = this.timeline, o = this.actions.length, a, l;
      for (dt = this, s.clear(), this._abs.length = this._final.length = this._run.length = 0, this.actions.forEach(function(c) {
        c.vars.animate && c.vars.animate(c);
        var u = c.vars.onEnter, h = c.vars.onLeave, d = c.targets, f, m;
        d && d.length && (u || h) && (f = new bi(), c.states.forEach(function(_) {
          return f.add(_);
        }), m = f.compare(gl.getState(d)), m.enter.length && u && u(m.enter), m.leave.length && h && h(m.leave));
      }), Mx(this._abs), this._run.forEach(function(c) {
        return c();
      }), l = s.duration(), a = this._final.slice(0), s.add(function() {
        l <= s.time() && (a.forEach(function(c) {
          return c();
        }), I_(i, "onComplete"));
      }), dt = r; o--; ) this.actions[o].vars.once && this.actions[o].kill();
      return I_(this, "onStart"), s.restart(), this;
    }, e.loadState = function(i) {
      i || (i = function() {
        return 0;
      });
      var r = [];
      return this.actions.forEach(function(s) {
        if (s.vars.loadState) {
          var o, a = function l(c) {
            c && (s.targets = c), o = r.indexOf(l), ~o && (r.splice(o, 1), r.length || i());
          };
          r.push(a), s.vars.loadState(a);
        }
      }), r.length || i(), this;
    }, e.setState = function() {
      return this.actions.forEach(function(i) {
        return i.targets = i.vars.setState && i.vars.setState(i);
      }), this;
    }, e.killConflicts = function(i) {
      return this.state.interrupt(i), this._kill.forEach(function(r) {
        return r.interrupt(i);
      }), this;
    }, e.run = function(i, r) {
      var s = this;
      return this !== dt && (i || this.getState(r), this.loadState(function() {
        s._killed || (s.setState(), s.animate());
      })), this;
    }, e.clear = function(i) {
      this.state.clear(), i || (this.actions.length = 0);
    }, e.getStateById = function(i) {
      for (var r = this.actions.length, s; r--; ) if (s = this.actions[r].getStateById(i), s) return s;
      return this.state.idLookup[i] && this.state;
    }, e.kill = function() {
      this._killed = 1, this.clear(), delete j9[this.id];
    }, n;
  }(), gl = function() {
    function n() {
    }
    return n.getState = function(t, i) {
      var r = Ad(t, i);
      return O0 && O0.states.push(r), i && i.batch && n.batch(i.batch).state.add(r), r;
    }, n.from = function(t, i) {
      return i = i || {}, "clearProps" in i || (i.clearProps = true), Pd(t, Ad(i.targets || t.targets, {
        props: i.props || t.props,
        simple: i.simple,
        kill: !!i.kill
      }), i, -1);
    }, n.to = function(t, i) {
      return Pd(t, Ad(i.targets || t.targets, {
        props: i.props || t.props,
        simple: i.simple,
        kill: !!i.kill
      }), i, 1);
    }, n.fromTo = function(t, i, r) {
      return Pd(t, i, r);
    }, n.fit = function(t, i, r) {
      var s = r ? wo(r, Sx) : {}, o = r || s, a = o.absolute, l = o.scale, c = o.getVars, u = o.props, h = o.runBackwards, d = o.onComplete, f = o.simple, m = r && r.fitChild && k0(r.fitChild), _ = X9(i, u, f, t), p = X9(t, 0, f, _), g = u ? Uf[u] : Bf, y = Dn.context();
      return u && Tx(s, _.props), ml(p, g), h && ("immediateRender" in s || (s.immediateRender = true), s.onComplete = function() {
        Qu(p), d && d.apply(this, arguments);
      }), a && F6(p, _), s = $o(p, _, l || m, u, m, s.duration || c ? s : 0), y && !c && y.add(function() {
        return function() {
          return Qu(p);
        };
      }), c ? s : s.duration ? Dn.to(p.element, s) : null;
    }, n.makeAbsolute = function(t, i) {
      return (t instanceof bi ? t : new bi(t, i)).makeAbsolute();
    }, n.batch = function(t) {
      return t || (t = "default"), j9[t] || (j9[t] = new hz(t));
    }, n.killFlipsOf = function(t, i) {
      (t instanceof bi ? t.targets : _a(t)).forEach(function(r) {
        return r && O6(r._flip, i !== false ? 1 : 2);
      });
    }, n.isFlipping = function(t) {
      var i = n.getByTarget(t);
      return !!i && i.isActive();
    }, n.getByTarget = function(t) {
      return (k0(t) || Ku)._flip;
    }, n.getElementState = function(t, i) {
      return new Rs(k0(t), i);
    }, n.convertCoordinates = function(t, i, r) {
      var s = _n(i, true, true).multiply(_n(t));
      return r ? s.apply(r) : s;
    }, n.register = function(t) {
      if (sr = typeof document < "u" && document.body, sr) {
        Dn = t, w6(sr), _a = Dn.utils.toArray, W9 = Dn.core.getStyleSaver;
        var i = Dn.utils.snap(0.1);
        w3 = function(s, o) {
          return i(parseFloat(s) + o);
        };
      }
    }, n;
  }();
  gl.version = "3.12.5";
  typeof window < "u" && window.gsap && window.gsap.registerPlugin(gl);
  var ae, mo, Ge, St, ci, ht, Dx, Zu, _l, N0, s0, Ac, wn, Hf, $9, $n, z_, V_, go, Rx, Ld, Px, jn, q9, Lx, Ix, Y3, Y9, k6, qo, N6, ef, K9, Id, Dc = 1, Tn = Date.now, Fd = Tn(), K2 = 0, o0 = 0, G_ = function(e, t, i) {
    var r = w2(e) && (e.substr(0, 6) === "clamp(" || e.indexOf("max") > -1);
    return i["_" + t + "Clamp"] = r, r ? e.substr(6, e.length - 7) : e;
  }, W_ = function(e, t) {
    return t && (!w2(e) || e.substr(0, 6) !== "clamp(") ? "clamp(" + e + ")" : e;
  }, dz = function n() {
    return o0 && requestAnimationFrame(n);
  }, j_ = function() {
    return Hf = 1;
  }, X_ = function() {
    return Hf = 0;
  }, Li = function(e) {
    return e;
  }, a0 = function(e) {
    return Math.round(e * 1e5) / 1e5 || 0;
  }, Fx = function() {
    return typeof window < "u";
  }, Ox = function() {
    return ae || Fx() && (ae = window.gsap) && ae.registerPlugin && ae;
  }, Ps = function(e) {
    return !!~Dx.indexOf(e);
  }, kx = function(e) {
    return (e === "Height" ? N6 : Ge["inner" + e]) || ci["client" + e] || ht["client" + e];
  }, Nx = function(e) {
    return xr(e, "getBoundingClientRect") || (Ps(e) ? function() {
      return cu.width = Ge.innerWidth, cu.height = N6, cu;
    } : function() {
      return v3(e);
    });
  }, pz = function(e, t, i) {
    var r = i.d, s = i.d2, o = i.a;
    return (o = xr(e, "getBoundingClientRect")) ? function() {
      return o()[r];
    } : function() {
      return (t ? kx(s) : e["client" + s]) || 0;
    };
  }, mz = function(e, t) {
    return !t || ~$i.indexOf(e) ? Nx(e) : function() {
      return cu;
    };
  }, Gi = function(e, t) {
    var i = t.s, r = t.d2, s = t.d, o = t.a;
    return Math.max(0, (i = "scroll" + r) && (o = xr(e, i)) ? o() - Nx(e)()[s] : Ps(e) ? (ci[i] || ht[i]) - kx(r) : e[i] - e["offset" + r]);
  }, Rc = function(e, t) {
    for (var i = 0; i < go.length; i += 3) (!t || ~t.indexOf(go[i + 1])) && e(go[i], go[i + 1], go[i + 2]);
  }, w2 = function(e) {
    return typeof e == "string";
  }, Qn = function(e) {
    return typeof e == "function";
  }, l0 = function(e) {
    return typeof e == "number";
  }, rs = function(e) {
    return typeof e == "object";
  }, Xa = function(e, t, i) {
    return e && e.progress(t ? 0 : 1) && i && e.pause();
  }, Od = function(e, t) {
    if (e.enabled) {
      var i = e._ctx ? e._ctx.add(function() {
        return t(e);
      }) : t(e);
      i && i.totalTime && (e.callbackAnimation = i);
    }
  }, lo = Math.abs, Ux = "left", Bx = "top", U6 = "right", B6 = "bottom", Es = "width", ws = "height", U0 = "Right", B0 = "Left", H0 = "Top", z0 = "Bottom", Ht = "padding", j2 = "margin", ba = "Width", H6 = "Height", qt = "px", X2 = function(e) {
    return Ge.getComputedStyle(e);
  }, gz = function(e) {
    var t = X2(e).position;
    e.style.position = t === "absolute" || t === "fixed" ? t : "relative";
  }, $_ = function(e, t) {
    for (var i in t) i in e || (e[i] = t[i]);
    return e;
  }, v3 = function(e, t) {
    var i = t && X2(e)[$9] !== "matrix(1, 0, 0, 1, 0, 0)" && ae.to(e, {
      x: 0,
      y: 0,
      xPercent: 0,
      yPercent: 0,
      rotation: 0,
      rotationX: 0,
      rotationY: 0,
      scale: 1,
      skewX: 0,
      skewY: 0
    }).progress(1), r = e.getBoundingClientRect();
    return i && i.progress(0).kill(), r;
  }, tf = function(e, t) {
    var i = t.d2;
    return e["offset" + i] || e["client" + i] || 0;
  }, Hx = function(e) {
    var t = [], i = e.labels, r = e.duration(), s;
    for (s in i) t.push(i[s] / r);
    return t;
  }, _z = function(e) {
    return function(t) {
      return ae.utils.snap(Hx(e), t);
    };
  }, z6 = function(e) {
    var t = ae.utils.snap(e), i = Array.isArray(e) && e.slice(0).sort(function(r, s) {
      return r - s;
    });
    return i ? function(r, s, o) {
      o === void 0 && (o = 1e-3);
      var a;
      if (!s) return t(r);
      if (s > 0) {
        for (r -= o, a = 0; a < i.length; a++) if (i[a] >= r) return i[a];
        return i[a - 1];
      } else for (a = i.length, r += o; a--; ) if (i[a] <= r) return i[a];
      return i[0];
    } : function(r, s, o) {
      o === void 0 && (o = 1e-3);
      var a = t(r);
      return !s || Math.abs(a - r) < o || a - r < 0 == s < 0 ? a : t(s < 0 ? r - e : r + e);
    };
  }, bz = function(e) {
    return function(t, i) {
      return z6(Hx(e))(t, i.direction);
    };
  }, Pc = function(e, t, i, r) {
    return i.split(",").forEach(function(s) {
      return e(t, s, r);
    });
  }, ln = function(e, t, i, r, s) {
    return e.addEventListener(t, i, {
      passive: !r,
      capture: !!s
    });
  }, an = function(e, t, i, r) {
    return e.removeEventListener(t, i, !!r);
  }, Lc = function(e, t, i) {
    i = i && i.wheelHandler, i && (e(t, "wheel", i), e(t, "touchmove", i));
  }, q_ = {
    startColor: "green",
    endColor: "red",
    indent: 0,
    fontSize: "16px",
    fontWeight: "normal"
  }, Ic = {
    toggleActions: "play",
    anticipatePin: 0
  }, nf = {
    top: 0,
    left: 0,
    center: 0.5,
    bottom: 1,
    right: 1
  }, su = function(e, t) {
    if (w2(e)) {
      var i = e.indexOf("="), r = ~i ? +(e.charAt(i - 1) + 1) * parseFloat(e.substr(i + 1)) : 0;
      ~i && (e.indexOf("%") > i && (r *= t / 100), e = e.substr(0, i - 1)), e = r + (e in nf ? nf[e] * t : ~e.indexOf("%") ? parseFloat(e) * t / 100 : parseFloat(e) || 0);
    }
    return e;
  }, Fc = function(e, t, i, r, s, o, a, l) {
    var c = s.startColor, u = s.endColor, h = s.fontSize, d = s.indent, f = s.fontWeight, m = St.createElement("div"), _ = Ps(i) || xr(i, "pinType") === "fixed", p = e.indexOf("scroller") !== -1, g = _ ? ht : i, y = e.indexOf("start") !== -1, b = y ? c : u, v = "border-color:" + b + ";font-size:" + h + ";color:" + b + ";font-weight:" + f + ";pointer-events:none;white-space:nowrap;font-family:sans-serif,Arial;z-index:1000;padding:4px 8px;border-width:0;border-style:solid;";
    return v += "position:" + ((p || l) && _ ? "fixed;" : "absolute;"), (p || l || !_) && (v += (r === Qt ? U6 : B6) + ":" + (o + parseFloat(d)) + "px;"), a && (v += "box-sizing:border-box;text-align:left;width:" + a.offsetWidth + "px;"), m._isStart = y, m.setAttribute("class", "gsap-marker-" + e + (t ? " marker-" + t : "")), m.style.cssText = v, m.innerText = t || t === 0 ? e + "-" + t : e, g.children[0] ? g.insertBefore(m, g.children[0]) : g.appendChild(m), m._offset = m["offset" + r.op.d2], ou(m, 0, r, y), m;
  }, ou = function(e, t, i, r) {
    var s = {
      display: "block"
    }, o = i[r ? "os2" : "p2"], a = i[r ? "p2" : "os2"];
    e._isFlipped = r, s[i.a + "Percent"] = r ? -100 : 0, s[i.a] = r ? "1px" : 0, s["border" + o + ba] = 1, s["border" + a + ba] = 0, s[i.p] = t + "px", ae.set(e, s);
  }, Fe = [], J9 = {}, bl, Y_ = function() {
    return Tn() - K2 > 34 && (bl || (bl = requestAnimationFrame(C3)));
  }, co = function() {
    (!jn || !jn.isPressed || jn.startX > ht.clientWidth) && (ke.cache++, jn ? bl || (bl = requestAnimationFrame(C3)) : C3(), K2 || Is("scrollStart"), K2 = Tn());
  }, kd = function() {
    Ix = Ge.innerWidth, Lx = Ge.innerHeight;
  }, c0 = function() {
    ke.cache++, !wn && !Px && !St.fullscreenElement && !St.webkitFullscreenElement && (!q9 || Ix !== Ge.innerWidth || Math.abs(Ge.innerHeight - Lx) > Ge.innerHeight * 0.25) && Zu.restart(true);
  }, Ls = {}, vz = [], zx = function n() {
    return an(Oe, "scrollEnd", n) || fs(true);
  }, Is = function(e) {
    return Ls[e] && Ls[e].map(function(t) {
      return t();
    }) || vz;
  }, E2 = [], Vx = function(e) {
    for (var t = 0; t < E2.length; t += 5) (!e || E2[t + 4] && E2[t + 4].query === e) && (E2[t].style.cssText = E2[t + 1], E2[t].getBBox && E2[t].setAttribute("transform", E2[t + 2] || ""), E2[t + 3].uncache = 1);
  }, V6 = function(e, t) {
    var i;
    for ($n = 0; $n < Fe.length; $n++) i = Fe[$n], i && (!t || i._ctx === t) && (e ? i.kill(1) : i.revert(true, true));
    ef = true, t && Vx(t), t || Is("revert");
  }, Gx = function(e, t) {
    ke.cache++, (t || !qn) && ke.forEach(function(i) {
      return Qn(i) && i.cacheID++ && (i.rec = 0);
    }), w2(e) && (Ge.history.scrollRestoration = k6 = e);
  }, qn, Ms = 0, K_, yz = function() {
    if (K_ !== Ms) {
      var e = K_ = Ms;
      requestAnimationFrame(function() {
        return e === Ms && fs(true);
      });
    }
  }, Wx = function() {
    ht.appendChild(qo), N6 = !jn && qo.offsetHeight || Ge.innerHeight, ht.removeChild(qo);
  }, J_ = function(e) {
    return _l(".gsap-marker-start, .gsap-marker-end, .gsap-marker-scroller-start, .gsap-marker-scroller-end").forEach(function(t) {
      return t.style.display = e ? "none" : "block";
    });
  }, fs = function(e, t) {
    if (K2 && !e && !ef) {
      ln(Oe, "scrollEnd", zx);
      return;
    }
    Wx(), qn = Oe.isRefreshing = true, ke.forEach(function(r) {
      return Qn(r) && ++r.cacheID && (r.rec = r());
    });
    var i = Is("refreshInit");
    Rx && Oe.sort(), t || V6(), ke.forEach(function(r) {
      Qn(r) && (r.smooth && (r.target.style.scrollBehavior = "auto"), r(0));
    }), Fe.slice(0).forEach(function(r) {
      return r.refresh();
    }), ef = false, Fe.forEach(function(r) {
      if (r._subPinOffset && r.pin) {
        var s = r.vars.horizontal ? "offsetWidth" : "offsetHeight", o = r.pin[s];
        r.revert(true, 1), r.adjustPinSpacing(r.pin[s] - o), r.refresh();
      }
    }), K9 = 1, J_(true), Fe.forEach(function(r) {
      var s = Gi(r.scroller, r._dir), o = r.vars.end === "max" || r._endClamp && r.end > s, a = r._startClamp && r.start >= s;
      (o || a) && r.setPositions(a ? s - 1 : r.start, o ? Math.max(a ? s : r.start + 1, s) : r.end, true);
    }), J_(false), K9 = 0, i.forEach(function(r) {
      return r && r.render && r.render(-1);
    }), ke.forEach(function(r) {
      Qn(r) && (r.smooth && requestAnimationFrame(function() {
        return r.target.style.scrollBehavior = "smooth";
      }), r.rec && r(r.rec));
    }), Gx(k6, 1), Zu.pause(), Ms++, qn = 2, C3(2), Fe.forEach(function(r) {
      return Qn(r.vars.onRefresh) && r.vars.onRefresh(r);
    }), qn = Oe.isRefreshing = false, Is("refresh");
  }, Q9 = 0, au = 1, V0, C3 = function(e) {
    if (e === 2 || !qn && !ef) {
      Oe.isUpdating = true, V0 && V0.update(0);
      var t = Fe.length, i = Tn(), r = i - Fd >= 50, s = t && Fe[0].scroll();
      if (au = Q9 > s ? -1 : 1, qn || (Q9 = s), r && (K2 && !Hf && i - K2 > 200 && (K2 = 0, Is("scrollEnd")), s0 = Fd, Fd = i), au < 0) {
        for ($n = t; $n-- > 0; ) Fe[$n] && Fe[$n].update(0, r);
        au = 1;
      } else for ($n = 0; $n < t; $n++) Fe[$n] && Fe[$n].update(0, r);
      Oe.isUpdating = false;
    }
    bl = 0;
  }, Z9 = [
    Ux,
    Bx,
    B6,
    U6,
    j2 + z0,
    j2 + U0,
    j2 + H0,
    j2 + B0,
    "display",
    "flexShrink",
    "float",
    "zIndex",
    "gridColumnStart",
    "gridColumnEnd",
    "gridRowStart",
    "gridRowEnd",
    "gridArea",
    "justifySelf",
    "alignSelf",
    "placeSelf",
    "order"
  ], lu = Z9.concat([
    Es,
    ws,
    "boxSizing",
    "max" + ba,
    "max" + H6,
    "position",
    j2,
    Ht,
    Ht + H0,
    Ht + U0,
    Ht + z0,
    Ht + B0
  ]), xz = function(e, t, i) {
    Yo(i);
    var r = e._gsap;
    if (r.spacerIsNative) Yo(r.spacerState);
    else if (e._gsap.swappedIn) {
      var s = t.parentNode;
      s && (s.insertBefore(e, t), s.removeChild(t));
    }
    e._gsap.swappedIn = false;
  }, Nd = function(e, t, i, r) {
    if (!e._gsap.swappedIn) {
      for (var s = Z9.length, o = t.style, a = e.style, l; s--; ) l = Z9[s], o[l] = i[l];
      o.position = i.position === "absolute" ? "absolute" : "relative", i.display === "inline" && (o.display = "inline-block"), a[B6] = a[U6] = "auto", o.flexBasis = i.flexBasis || "auto", o.overflow = "visible", o.boxSizing = "border-box", o[Es] = tf(e, Jn) + qt, o[ws] = tf(e, Qt) + qt, o[Ht] = a[j2] = a[Bx] = a[Ux] = "0", Yo(r), a[Es] = a["max" + ba] = i[Es], a[ws] = a["max" + H6] = i[ws], a[Ht] = i[Ht], e.parentNode !== t && (e.parentNode.insertBefore(t, e), t.appendChild(e)), e._gsap.swappedIn = true;
    }
  }, Sz = /([A-Z])/g, Yo = function(e) {
    if (e) {
      var t = e.t.style, i = e.length, r = 0, s, o;
      for ((e.t._gsap || ae.core.getCache(e.t)).uncache = 1; r < i; r += 2) o = e[r + 1], s = e[r], o ? t[s] = o : t[s] && t.removeProperty(s.replace(Sz, "-$1").toLowerCase());
    }
  }, Oc = function(e) {
    for (var t = lu.length, i = e.style, r = [], s = 0; s < t; s++) r.push(lu[s], i[lu[s]]);
    return r.t = e, r;
  }, Ez = function(e, t, i) {
    for (var r = [], s = e.length, o = i ? 8 : 0, a; o < s; o += 2) a = e[o], r.push(a, a in t ? t[a] : e[o + 1]);
    return r.t = e.t, r;
  }, cu = {
    left: 0,
    top: 0
  }, Q_ = function(e, t, i, r, s, o, a, l, c, u, h, d, f, m) {
    Qn(e) && (e = e(l)), w2(e) && e.substr(0, 3) === "max" && (e = d + (e.charAt(4) === "=" ? su("0" + e.substr(3), i) : 0));
    var _ = f ? f.time() : 0, p, g, y;
    if (f && f.seek(0), isNaN(e) || (e = +e), l0(e)) f && (e = ae.utils.mapRange(f.scrollTrigger.start, f.scrollTrigger.end, 0, d, e)), a && ou(a, i, r, true);
    else {
      Qn(t) && (t = t(l));
      var b = (e || "0").split(" "), v, x, C, A;
      y = o2(t, l) || ht, v = v3(y) || {}, (!v || !v.left && !v.top) && X2(y).display === "none" && (A = y.style.display, y.style.display = "block", v = v3(y), A ? y.style.display = A : y.style.removeProperty("display")), x = su(b[0], v[r.d]), C = su(b[1] || "0", i), e = v[r.p] - c[r.p] - u + x + s - C, a && ou(a, C, r, i - C < 20 || a._isStart && C > 20), i -= i - C;
    }
    if (m && (l[m] = e || -1e-3, e < 0 && (e = 0)), o) {
      var P = e + i, M = o._isStart;
      p = "scroll" + r.d2, ou(o, P, r, M && P > 20 || !M && (h ? Math.max(ht[p], ci[p]) : o.parentNode[p]) <= P + 1), h && (c = v3(a), h && (o.style[r.op.p] = c[r.op.p] - r.op.m - o._offset + qt));
    }
    return f && y && (p = v3(y), f.seek(d), g = v3(y), f._caScrollDist = p[r.p] - g[r.p], e = e / f._caScrollDist * d), f && f.seek(_), f ? e : Math.round(e);
  }, wz = /(webkit|moz|length|cssText|inset)/i, Z_ = function(e, t, i, r) {
    if (e.parentNode !== t) {
      var s = e.style, o, a;
      if (t === ht) {
        e._stOrig = s.cssText, a = X2(e);
        for (o in a) !+o && !wz.test(o) && a[o] && typeof s[o] == "string" && o !== "0" && (s[o] = a[o]);
        s.top = i, s.left = r;
      } else s.cssText = e._stOrig;
      ae.core.getCache(e).uncache = 1, t.appendChild(e);
    }
  }, jx = function(e, t, i) {
    var r = t, s = r;
    return function(o) {
      var a = Math.round(e());
      return a !== r && a !== s && Math.abs(a - r) > 3 && Math.abs(a - s) > 3 && (o = a, i && i()), s = r, r = o, o;
    };
  }, kc = function(e, t, i) {
    var r = {};
    r[t.p] = "+=" + i, ae.set(e, r);
  }, e7 = function(e, t) {
    var i = Ar(e, t), r = "_scroll" + t.p2, s = function o(a, l, c, u, h) {
      var d = o.tween, f = l.onComplete, m = {};
      c = c || i();
      var _ = jx(i, c, function() {
        d.kill(), o.tween = 0;
      });
      return h = u && h || 0, u = u || a - c, d && d.kill(), l[r] = a, l.inherit = false, l.modifiers = m, m[r] = function() {
        return _(c + u * d.ratio + h * d.ratio * d.ratio);
      }, l.onUpdate = function() {
        ke.cache++, o.tween && C3();
      }, l.onComplete = function() {
        o.tween = 0, f && f.call(d);
      }, d = o.tween = ae.to(e, l), d;
    };
    return e[r] = i, i.wheelHandler = function() {
      return s.tween && s.tween.kill() && (s.tween = 0);
    }, ln(e, "wheel", i.wheelHandler), Oe.isTouch && ln(e, "touchmove", i.wheelHandler), s;
  }, Oe = function() {
    function n(t, i) {
      mo || n.register(ae) || console.warn("Please gsap.registerPlugin(ScrollTrigger)"), Y9(this), this.init(t, i);
    }
    var e = n.prototype;
    return e.init = function(i, r) {
      if (this.progress = this.start = 0, this.vars && this.kill(true, true), !o0) {
        this.update = this.refresh = this.kill = Li;
        return;
      }
      i = $_(w2(i) || l0(i) || i.nodeType ? {
        trigger: i
      } : i, Ic);
      var s = i, o = s.onUpdate, a = s.toggleClass, l = s.id, c = s.onToggle, u = s.onRefresh, h = s.scrub, d = s.trigger, f = s.pin, m = s.pinSpacing, _ = s.invalidateOnRefresh, p = s.anticipatePin, g = s.onScrubComplete, y = s.onSnapComplete, b = s.once, v = s.snap, x = s.pinReparent, C = s.pinSpacer, A = s.containerAnimation, P = s.fastScrollEnd, M = s.preventOverlaps, E = i.horizontal || i.containerAnimation && i.horizontal !== false ? Jn : Qt, I = !h && h !== 0, k = o2(i.scroller || Ge), H = ae.core.getCache(k), K = Ps(k), J = ("pinType" in i ? i.pinType : xr(k, "pinType") || K && "fixed") === "fixed", z = [
        i.onEnter,
        i.onLeave,
        i.onEnterBack,
        i.onLeaveBack
      ], $ = I && i.toggleActions.split(" "), G = "markers" in i ? i.markers : Ic.markers, Q = K ? 0 : parseFloat(X2(k)["border" + E.p2 + ba]) || 0, V = this, w1 = i.onRefreshInit && function() {
        return i.onRefreshInit(V);
      }, m1 = pz(k, K, E), I1 = mz(k, K), Z = 0, f1 = 0, M1 = 0, W = Ar(k, E), r1, v1, S1, z1, Z1, F, T, e1, _1, B, l1, D1, p1, o1, E1, N, D, q, c1, h1, d1, U1, B1, j1, G1, A1, $1, ne, K1, V1, ie, X, X1, P1, Y1, N1, L1, R1, j;
      if (V._startClamp = V._endClamp = false, V._dir = E, p *= 45, V.scroller = k, V.scroll = A ? A.time.bind(A) : W, z1 = W(), V.vars = i, r = r || i.animation, "refreshPriority" in i && (Rx = 1, i.refreshPriority === -9999 && (V0 = V)), H.tweenScroll = H.tweenScroll || {
        top: e7(k, Qt),
        left: e7(k, Jn)
      }, V.tweenTo = r1 = H.tweenScroll[E.p], V.scrubDuration = function(x1) {
        X1 = l0(x1) && x1, X1 ? X ? X.duration(x1) : X = ae.to(r, {
          ease: "expo",
          totalProgress: "+=0",
          inherit: false,
          duration: X1,
          paused: true,
          onComplete: function() {
            return g && g(V);
          }
        }) : (X && X.progress(1).kill(), X = 0);
      }, r && (r.vars.lazy = false, r._initted && !V.isReverted || r.vars.immediateRender !== false && i.immediateRender !== false && r.duration() && r.render(0, true, true), V.animation = r.pause(), r.scrollTrigger = V, V.scrubDuration(h), V1 = 0, l || (l = r.vars.id)), v && ((!rs(v) || v.push) && (v = {
        snapTo: v
      }), "scrollBehavior" in ht.style && ae.set(K ? [
        ht,
        ci
      ] : k, {
        scrollBehavior: "auto"
      }), ke.forEach(function(x1) {
        return Qn(x1) && x1.target === (K ? St.scrollingElement || ci : k) && (x1.smooth = false);
      }), S1 = Qn(v.snapTo) ? v.snapTo : v.snapTo === "labels" ? _z(r) : v.snapTo === "labelsDirectional" ? bz(r) : v.directional !== false ? function(x1, q1) {
        return z6(v.snapTo)(x1, Tn() - f1 < 500 ? 0 : q1.direction);
      } : ae.utils.snap(v.snapTo), P1 = v.duration || {
        min: 0.1,
        max: 2
      }, P1 = rs(P1) ? N0(P1.min, P1.max) : N0(P1, P1), Y1 = ae.delayedCall(v.delay || X1 / 2 || 0.1, function() {
        var x1 = W(), q1 = Tn() - f1 < 500, F1 = r1.tween;
        if ((q1 || Math.abs(V.getVelocity()) < 10) && !F1 && !Hf && Z !== x1) {
          var J1 = (x1 - F) / o1, de = r && !I ? r.totalProgress() : J1, C1 = q1 ? 0 : (de - ie) / (Tn() - s0) * 1e3 || 0, oe = ae.utils.clamp(-J1, 1 - J1, lo(C1 / 2) * C1 / 0.185), Le = J1 + (v.inertia === false ? 0 : oe), we, Me, Se = v, Be = Se.onStart, _e = Se.onInterrupt, xt = Se.onComplete;
          if (we = S1(Le, V), l0(we) || (we = Le), Me = Math.round(F + we * o1), x1 <= T && x1 >= F && Me !== x1) {
            if (F1 && !F1._initted && F1.data <= lo(Me - x1)) return;
            v.inertia === false && (oe = we - J1), r1(Me, {
              duration: P1(lo(Math.max(lo(Le - de), lo(we - de)) * 0.185 / C1 / 0.05 || 0)),
              ease: v.ease || "power3",
              data: lo(Me - x1),
              onInterrupt: function() {
                return Y1.restart(true) && _e && _e(V);
              },
              onComplete: function() {
                V.update(), Z = W(), r && (X ? X.resetTo("totalProgress", we, r._tTime / r._tDur) : r.progress(we)), V1 = ie = r && !I ? r.totalProgress() : V.progress, y && y(V), xt && xt(V);
              }
            }, x1, oe * o1, Me - x1 - oe * o1), Be && Be(V, r1.tween);
          }
        } else V.isActive && Z !== x1 && Y1.restart(true);
      }).pause()), l && (J9[l] = V), d = V.trigger = o2(d || f !== true && f), j = d && d._gsap && d._gsap.stRevert, j && (j = j(V)), f = f === true ? d : o2(f), w2(a) && (a = {
        targets: d,
        className: a
      }), f && (m === false || m === j2 || (m = !m && f.parentNode && f.parentNode.style && X2(f.parentNode).display === "flex" ? false : Ht), V.pin = f, v1 = ae.core.getCache(f), v1.spacer ? E1 = v1.pinState : (C && (C = o2(C), C && !C.nodeType && (C = C.current || C.nativeElement), v1.spacerIsNative = !!C, C && (v1.spacerState = Oc(C))), v1.spacer = q = C || St.createElement("div"), q.classList.add("pin-spacer"), l && q.classList.add("pin-spacer-" + l), v1.pinState = E1 = Oc(f)), i.force3D !== false && ae.set(f, {
        force3D: true
      }), V.spacer = q = v1.spacer, K1 = X2(f), j1 = K1[m + E.os2], h1 = ae.getProperty(f), d1 = ae.quickSetter(f, E.a, qt), Nd(f, q, K1), D = Oc(f)), G) {
        D1 = rs(G) ? $_(G, q_) : q_, B = Fc("scroller-start", l, k, E, D1, 0), l1 = Fc("scroller-end", l, k, E, D1, 0, B), c1 = B["offset" + E.op.d2];
        var T1 = o2(xr(k, "content") || k);
        e1 = this.markerStart = Fc("start", l, T1, E, D1, c1, 0, A), _1 = this.markerEnd = Fc("end", l, T1, E, D1, c1, 0, A), A && (R1 = ae.quickSetter([
          e1,
          _1
        ], E.a, qt)), !J && !($i.length && xr(k, "fixedMarkers") === true) && (gz(K ? ht : k), ae.set([
          B,
          l1
        ], {
          force3D: true
        }), A1 = ae.quickSetter(B, E.a, qt), ne = ae.quickSetter(l1, E.a, qt));
      }
      if (A) {
        var t1 = A.vars.onUpdate, b1 = A.vars.onUpdateParams;
        A.eventCallback("onUpdate", function() {
          V.update(0, 0, 1), t1 && t1.apply(A, b1 || []);
        });
      }
      if (V.previous = function() {
        return Fe[Fe.indexOf(V) - 1];
      }, V.next = function() {
        return Fe[Fe.indexOf(V) + 1];
      }, V.revert = function(x1, q1) {
        if (!q1) return V.kill(true);
        var F1 = x1 !== false || !V.enabled, J1 = wn;
        F1 !== V.isReverted && (F1 && (N1 = Math.max(W(), V.scroll.rec || 0), M1 = V.progress, L1 = r && r.progress()), e1 && [
          e1,
          _1,
          B,
          l1
        ].forEach(function(de) {
          return de.style.display = F1 ? "none" : "block";
        }), F1 && (wn = V, V.update(F1)), f && (!x || !V.isActive) && (F1 ? xz(f, q, E1) : Nd(f, q, X2(f), G1)), F1 || V.update(F1), wn = J1, V.isReverted = F1);
      }, V.refresh = function(x1, q1, F1, J1) {
        if (!((wn || !V.enabled) && !q1)) {
          if (f && x1 && K2) {
            ln(n, "scrollEnd", zx);
            return;
          }
          !qn && w1 && w1(V), wn = V, r1.tween && !F1 && (r1.tween.kill(), r1.tween = 0), X && X.pause(), _ && r && r.revert({
            kill: false
          }).invalidate(), V.isReverted || V.revert(true, true), V._subPinOffset = false;
          var de = m1(), C1 = I1(), oe = A ? A.duration() : Gi(k, E), Le = o1 <= 0.01, we = 0, Me = J1 || 0, Se = rs(F1) ? F1.end : i.end, Be = i.endTrigger || d, _e = rs(F1) ? F1.start : i.start || (i.start === 0 || !d ? 0 : f ? "0 0" : "0 100%"), xt = V.pinnedContainer = i.pinnedContainer && o2(i.pinnedContainer, V), it = d && Math.max(0, Fe.indexOf(V)) || 0, Rt = it, Pt, O, a1, y1, g1, i1, H1, ee, se, re, he, me, ce;
          for (G && rs(F1) && (me = ae.getProperty(B, E.p), ce = ae.getProperty(l1, E.p)); Rt--; ) i1 = Fe[Rt], i1.end || i1.refresh(0, 1) || (wn = V), H1 = i1.pin, H1 && (H1 === d || H1 === f || H1 === xt) && !i1.isReverted && (re || (re = []), re.unshift(i1), i1.revert(true, true)), i1 !== Fe[Rt] && (it--, Rt--);
          for (Qn(_e) && (_e = _e(V)), _e = G_(_e, "start", V), F = Q_(_e, d, de, E, W(), e1, B, V, C1, Q, J, oe, A, V._startClamp && "_startClamp") || (f ? -1e-3 : 0), Qn(Se) && (Se = Se(V)), w2(Se) && !Se.indexOf("+=") && (~Se.indexOf(" ") ? Se = (w2(_e) ? _e.split(" ")[0] : "") + Se : (we = su(Se.substr(2), de), Se = w2(_e) ? _e : (A ? ae.utils.mapRange(0, A.duration(), A.scrollTrigger.start, A.scrollTrigger.end, F) : F) + we, Be = d)), Se = G_(Se, "end", V), T = Math.max(F, Q_(Se || (Be ? "100% 0" : oe), Be, de, E, W() + we, _1, l1, V, C1, Q, J, oe, A, V._endClamp && "_endClamp")) || -1e-3, we = 0, Rt = it; Rt--; ) i1 = Fe[Rt], H1 = i1.pin, H1 && i1.start - i1._pinPush <= F && !A && i1.end > 0 && (Pt = i1.end - (V._startClamp ? Math.max(0, i1.start) : i1.start), (H1 === d && i1.start - i1._pinPush < F || H1 === xt) && isNaN(_e) && (we += Pt * (1 - i1.progress)), H1 === f && (Me += Pt));
          if (F += we, T += we, V._startClamp && (V._startClamp += we), V._endClamp && !qn && (V._endClamp = T || -1e-3, T = Math.min(T, Gi(k, E))), o1 = T - F || (F -= 0.01) && 1e-3, Le && (M1 = ae.utils.clamp(0, 1, ae.utils.normalize(F, T, N1))), V._pinPush = Me, e1 && we && (Pt = {}, Pt[E.a] = "+=" + we, xt && (Pt[E.p] = "-=" + W()), ae.set([
            e1,
            _1
          ], Pt)), f && !(K9 && V.end >= Gi(k, E))) Pt = X2(f), y1 = E === Qt, a1 = W(), U1 = parseFloat(h1(E.a)) + Me, !oe && T > 1 && (he = (K ? St.scrollingElement || ci : k).style, he = {
            style: he,
            value: he["overflow" + E.a.toUpperCase()]
          }, K && X2(ht)["overflow" + E.a.toUpperCase()] !== "scroll" && (he.style["overflow" + E.a.toUpperCase()] = "scroll")), Nd(f, q, Pt), D = Oc(f), O = v3(f, true), ee = J && Ar(k, y1 ? Jn : Qt)(), m ? (G1 = [
            m + E.os2,
            o1 + Me + qt
          ], G1.t = q, Rt = m === Ht ? tf(f, E) + o1 + Me : 0, Rt && (G1.push(E.d, Rt + qt), q.style.flexBasis !== "auto" && (q.style.flexBasis = Rt + qt)), Yo(G1), xt && Fe.forEach(function(ye) {
            ye.pin === xt && ye.vars.pinSpacing !== false && (ye._subPinOffset = true);
          }), J && W(N1)) : (Rt = tf(f, E), Rt && q.style.flexBasis !== "auto" && (q.style.flexBasis = Rt + qt)), J && (g1 = {
            top: O.top + (y1 ? a1 - F : ee) + qt,
            left: O.left + (y1 ? ee : a1 - F) + qt,
            boxSizing: "border-box",
            position: "fixed"
          }, g1[Es] = g1["max" + ba] = Math.ceil(O.width) + qt, g1[ws] = g1["max" + H6] = Math.ceil(O.height) + qt, g1[j2] = g1[j2 + H0] = g1[j2 + U0] = g1[j2 + z0] = g1[j2 + B0] = "0", g1[Ht] = Pt[Ht], g1[Ht + H0] = Pt[Ht + H0], g1[Ht + U0] = Pt[Ht + U0], g1[Ht + z0] = Pt[Ht + z0], g1[Ht + B0] = Pt[Ht + B0], N = Ez(E1, g1, x), qn && W(0)), r ? (se = r._initted, Ld(1), r.render(r.duration(), true, true), B1 = h1(E.a) - U1 + o1 + Me, $1 = Math.abs(o1 - B1) > 1, J && $1 && N.splice(N.length - 2, 2), r.render(0, true, true), se || r.invalidate(true), r.parent || r.totalTime(r.totalTime()), Ld(0)) : B1 = o1, he && (he.value ? he.style["overflow" + E.a.toUpperCase()] = he.value : he.style.removeProperty("overflow-" + E.a));
          else if (d && W() && !A) for (O = d.parentNode; O && O !== ht; ) O._pinOffset && (F -= O._pinOffset, T -= O._pinOffset), O = O.parentNode;
          re && re.forEach(function(ye) {
            return ye.revert(false, true);
          }), V.start = F, V.end = T, z1 = Z1 = qn ? N1 : W(), !A && !qn && (z1 < N1 && W(N1), V.scroll.rec = 0), V.revert(false, true), f1 = Tn(), Y1 && (Z = -1, Y1.restart(true)), wn = 0, r && I && (r._initted || L1) && r.progress() !== L1 && r.progress(L1 || 0, true).render(r.time(), true, true), (Le || M1 !== V.progress || A || _) && (r && !I && r.totalProgress(A && F < -1e-3 && !M1 ? ae.utils.normalize(F, T, 0) : M1, true), V.progress = Le || (z1 - F) / o1 === M1 ? 0 : M1), f && m && (q._pinOffset = Math.round(V.progress * B1)), X && X.invalidate(), isNaN(me) || (me -= ae.getProperty(B, E.p), ce -= ae.getProperty(l1, E.p), kc(B, E, me), kc(e1, E, me - (J1 || 0)), kc(l1, E, ce), kc(_1, E, ce - (J1 || 0))), Le && !qn && V.update(), u && !qn && !p1 && (p1 = true, u(V), p1 = false);
        }
      }, V.getVelocity = function() {
        return (W() - Z1) / (Tn() - s0) * 1e3 || 0;
      }, V.endAnimation = function() {
        Xa(V.callbackAnimation), r && (X ? X.progress(1) : r.paused() ? I || Xa(r, V.direction < 0, 1) : Xa(r, r.reversed()));
      }, V.labelToScroll = function(x1) {
        return r && r.labels && (F || V.refresh() || F) + r.labels[x1] / r.duration() * o1 || 0;
      }, V.getTrailing = function(x1) {
        var q1 = Fe.indexOf(V), F1 = V.direction > 0 ? Fe.slice(0, q1).reverse() : Fe.slice(q1 + 1);
        return (w2(x1) ? F1.filter(function(J1) {
          return J1.vars.preventOverlaps === x1;
        }) : F1).filter(function(J1) {
          return V.direction > 0 ? J1.end <= F : J1.start >= T;
        });
      }, V.update = function(x1, q1, F1) {
        if (!(A && !F1 && !x1)) {
          var J1 = qn === true ? N1 : V.scroll(), de = x1 ? 0 : (J1 - F) / o1, C1 = de < 0 ? 0 : de > 1 ? 1 : de || 0, oe = V.progress, Le, we, Me, Se, Be, _e, xt, it;
          if (q1 && (Z1 = z1, z1 = A ? W() : J1, v && (ie = V1, V1 = r && !I ? r.totalProgress() : C1)), p && f && !wn && !Dc && K2 && (!C1 && F < J1 + (J1 - Z1) / (Tn() - s0) * p ? C1 = 1e-4 : C1 === 1 && T > J1 + (J1 - Z1) / (Tn() - s0) * p && (C1 = 0.9999)), C1 !== oe && V.enabled) {
            if (Le = V.isActive = !!C1 && C1 < 1, we = !!oe && oe < 1, _e = Le !== we, Be = _e || !!C1 != !!oe, V.direction = C1 > oe ? 1 : -1, V.progress = C1, Be && !wn && (Me = C1 && !oe ? 0 : C1 === 1 ? 1 : oe === 1 ? 2 : 3, I && (Se = !_e && $[Me + 1] !== "none" && $[Me + 1] || $[Me], it = r && (Se === "complete" || Se === "reset" || Se in r))), M && (_e || it) && (it || h || !r) && (Qn(M) ? M(V) : V.getTrailing(M).forEach(function(a1) {
              return a1.endAnimation();
            })), I || (X && !wn && !Dc ? (X._dp._time - X._start !== X._time && X.render(X._dp._time - X._start), X.resetTo ? X.resetTo("totalProgress", C1, r._tTime / r._tDur) : (X.vars.totalProgress = C1, X.invalidate().restart())) : r && r.totalProgress(C1, !!(wn && (f1 || x1)))), f) {
              if (x1 && m && (q.style[m + E.os2] = j1), !J) d1(a0(U1 + B1 * C1));
              else if (Be) {
                if (xt = !x1 && C1 > oe && T + 1 > J1 && J1 + 1 >= Gi(k, E), x) if (!x1 && (Le || xt)) {
                  var Rt = v3(f, true), Pt = J1 - F;
                  Z_(f, ht, Rt.top + (E === Qt ? Pt : 0) + qt, Rt.left + (E === Qt ? 0 : Pt) + qt);
                } else Z_(f, q);
                Yo(Le || xt ? N : D), $1 && C1 < 1 && Le || d1(U1 + (C1 === 1 && !xt ? B1 : 0));
              }
            }
            v && !r1.tween && !wn && !Dc && Y1.restart(true), a && (_e || b && C1 && (C1 < 1 || !Id)) && _l(a.targets).forEach(function(a1) {
              return a1.classList[Le || b ? "add" : "remove"](a.className);
            }), o && !I && !x1 && o(V), Be && !wn ? (I && (it && (Se === "complete" ? r.pause().totalProgress(1) : Se === "reset" ? r.restart(true).pause() : Se === "restart" ? r.restart(true) : r[Se]()), o && o(V)), (_e || !Id) && (c && _e && Od(V, c), z[Me] && Od(V, z[Me]), b && (C1 === 1 ? V.kill(false, 1) : z[Me] = 0), _e || (Me = C1 === 1 ? 1 : 3, z[Me] && Od(V, z[Me]))), P && !Le && Math.abs(V.getVelocity()) > (l0(P) ? P : 2500) && (Xa(V.callbackAnimation), X ? X.progress(1) : Xa(r, Se === "reverse" ? 1 : !C1, 1))) : I && o && !wn && o(V);
          }
          if (ne) {
            var O = A ? J1 / A.duration() * (A._caScrollDist || 0) : J1;
            A1(O + (B._isFlipped ? 1 : 0)), ne(O);
          }
          R1 && R1(-J1 / A.duration() * (A._caScrollDist || 0));
        }
      }, V.enable = function(x1, q1) {
        V.enabled || (V.enabled = true, ln(k, "resize", c0), K || ln(k, "scroll", co), w1 && ln(n, "refreshInit", w1), x1 !== false && (V.progress = M1 = 0, z1 = Z1 = Z = W()), q1 !== false && V.refresh());
      }, V.getTween = function(x1) {
        return x1 && r1 ? r1.tween : X;
      }, V.setPositions = function(x1, q1, F1, J1) {
        if (A) {
          var de = A.scrollTrigger, C1 = A.duration(), oe = de.end - de.start;
          x1 = de.start + oe * x1 / C1, q1 = de.start + oe * q1 / C1;
        }
        V.refresh(false, false, {
          start: W_(x1, F1 && !!V._startClamp),
          end: W_(q1, F1 && !!V._endClamp)
        }, J1), V.update();
      }, V.adjustPinSpacing = function(x1) {
        if (G1 && x1) {
          var q1 = G1.indexOf(E.d) + 1;
          G1[q1] = parseFloat(G1[q1]) + x1 + qt, G1[1] = parseFloat(G1[1]) + x1 + qt, Yo(G1);
        }
      }, V.disable = function(x1, q1) {
        if (V.enabled && (x1 !== false && V.revert(true, true), V.enabled = V.isActive = false, q1 || X && X.pause(), N1 = 0, v1 && (v1.uncache = 1), w1 && an(n, "refreshInit", w1), Y1 && (Y1.pause(), r1.tween && r1.tween.kill() && (r1.tween = 0)), !K)) {
          for (var F1 = Fe.length; F1--; ) if (Fe[F1].scroller === k && Fe[F1] !== V) return;
          an(k, "resize", c0), K || an(k, "scroll", co);
        }
      }, V.kill = function(x1, q1) {
        V.disable(x1, q1), X && !q1 && X.kill(), l && delete J9[l];
        var F1 = Fe.indexOf(V);
        F1 >= 0 && Fe.splice(F1, 1), F1 === $n && au > 0 && $n--, F1 = 0, Fe.forEach(function(J1) {
          return J1.scroller === V.scroller && (F1 = 1);
        }), F1 || qn || (V.scroll.rec = 0), r && (r.scrollTrigger = null, x1 && r.revert({
          kill: false
        }), q1 || r.kill()), e1 && [
          e1,
          _1,
          B,
          l1
        ].forEach(function(J1) {
          return J1.parentNode && J1.parentNode.removeChild(J1);
        }), V0 === V && (V0 = 0), f && (v1 && (v1.uncache = 1), F1 = 0, Fe.forEach(function(J1) {
          return J1.pin === f && F1++;
        }), F1 || (v1.spacer = 0)), i.onKill && i.onKill(V);
      }, Fe.push(V), V.enable(false, false), j && j(V), r && r.add && !o1) {
        var O1 = V.update;
        V.update = function() {
          V.update = O1, F || T || V.refresh();
        }, ae.delayedCall(0.01, V.update), o1 = 0.01, F = T = 0;
      } else V.refresh();
      f && yz();
    }, n.register = function(i) {
      return mo || (ae = i || Ox(), Fx() && window.document && n.enable(), mo = o0), mo;
    }, n.defaults = function(i) {
      if (i) for (var r in i) Ic[r] = i[r];
      return Ic;
    }, n.disable = function(i, r) {
      o0 = 0, Fe.forEach(function(o) {
        return o[r ? "kill" : "disable"](i);
      }), an(Ge, "wheel", co), an(St, "scroll", co), clearInterval(Ac), an(St, "touchcancel", Li), an(ht, "touchstart", Li), Pc(an, St, "pointerdown,touchstart,mousedown", j_), Pc(an, St, "pointerup,touchend,mouseup", X_), Zu.kill(), Rc(an);
      for (var s = 0; s < ke.length; s += 3) Lc(an, ke[s], ke[s + 1]), Lc(an, ke[s], ke[s + 2]);
    }, n.enable = function() {
      if (Ge = window, St = document, ci = St.documentElement, ht = St.body, ae && (_l = ae.utils.toArray, N0 = ae.utils.clamp, Y9 = ae.core.context || Li, Ld = ae.core.suppressOverwrites || Li, k6 = Ge.history.scrollRestoration || "auto", Q9 = Ge.pageYOffset, ae.core.globals("ScrollTrigger", n), ht)) {
        o0 = 1, qo = document.createElement("div"), qo.style.height = "100vh", qo.style.position = "absolute", Wx(), dz(), Tt.register(ae), n.isTouch = Tt.isTouch, Y3 = Tt.isTouch && /(iPad|iPhone|iPod|Mac)/g.test(navigator.userAgent), q9 = Tt.isTouch === 1, ln(Ge, "wheel", co), Dx = [
          Ge,
          St,
          ci,
          ht
        ], ae.matchMedia ? (n.matchMedia = function(l) {
          var c = ae.matchMedia(), u;
          for (u in l) c.add(u, l[u]);
          return c;
        }, ae.addEventListener("matchMediaInit", function() {
          return V6();
        }), ae.addEventListener("matchMediaRevert", function() {
          return Vx();
        }), ae.addEventListener("matchMedia", function() {
          fs(0, 1), Is("matchMedia");
        }), ae.matchMedia("(orientation: portrait)", function() {
          return kd(), kd;
        })) : console.warn("Requires GSAP 3.11.0 or later"), kd(), ln(St, "scroll", co);
        var i = ht.style, r = i.borderTopStyle, s = ae.core.Animation.prototype, o, a;
        for (s.revert || Object.defineProperty(s, "revert", {
          value: function() {
            return this.time(-0.01, true);
          }
        }), i.borderTopStyle = "solid", o = v3(ht), Qt.m = Math.round(o.top + Qt.sc()) || 0, Jn.m = Math.round(o.left + Jn.sc()) || 0, r ? i.borderTopStyle = r : i.removeProperty("border-top-style"), Ac = setInterval(Y_, 250), ae.delayedCall(0.5, function() {
          return Dc = 0;
        }), ln(St, "touchcancel", Li), ln(ht, "touchstart", Li), Pc(ln, St, "pointerdown,touchstart,mousedown", j_), Pc(ln, St, "pointerup,touchend,mouseup", X_), $9 = ae.utils.checkPrefix("transform"), lu.push($9), mo = Tn(), Zu = ae.delayedCall(0.2, fs).pause(), go = [
          St,
          "visibilitychange",
          function() {
            var l = Ge.innerWidth, c = Ge.innerHeight;
            St.hidden ? (z_ = l, V_ = c) : (z_ !== l || V_ !== c) && c0();
          },
          St,
          "DOMContentLoaded",
          fs,
          Ge,
          "load",
          fs,
          Ge,
          "resize",
          c0
        ], Rc(ln), Fe.forEach(function(l) {
          return l.enable(0, 1);
        }), a = 0; a < ke.length; a += 3) Lc(an, ke[a], ke[a + 1]), Lc(an, ke[a], ke[a + 2]);
      }
    }, n.config = function(i) {
      "limitCallbacks" in i && (Id = !!i.limitCallbacks);
      var r = i.syncInterval;
      r && clearInterval(Ac) || (Ac = r) && setInterval(Y_, r), "ignoreMobileResize" in i && (q9 = n.isTouch === 1 && i.ignoreMobileResize), "autoRefreshEvents" in i && (Rc(an) || Rc(ln, i.autoRefreshEvents || "none"), Px = (i.autoRefreshEvents + "").indexOf("resize") === -1);
    }, n.scrollerProxy = function(i, r) {
      var s = o2(i), o = ke.indexOf(s), a = Ps(s);
      ~o && ke.splice(o, a ? 6 : 2), r && (a ? $i.unshift(Ge, r, ht, r, ci, r) : $i.unshift(s, r));
    }, n.clearMatchMedia = function(i) {
      Fe.forEach(function(r) {
        return r._ctx && r._ctx.query === i && r._ctx.kill(true, true);
      });
    }, n.isInViewport = function(i, r, s) {
      var o = (w2(i) ? o2(i) : i).getBoundingClientRect(), a = o[s ? Es : ws] * r || 0;
      return s ? o.right - a > 0 && o.left + a < Ge.innerWidth : o.bottom - a > 0 && o.top + a < Ge.innerHeight;
    }, n.positionInViewport = function(i, r, s) {
      w2(i) && (i = o2(i));
      var o = i.getBoundingClientRect(), a = o[s ? Es : ws], l = r == null ? a / 2 : r in nf ? nf[r] * a : ~r.indexOf("%") ? parseFloat(r) * a / 100 : parseFloat(r) || 0;
      return s ? (o.left + l) / Ge.innerWidth : (o.top + l) / Ge.innerHeight;
    }, n.killAll = function(i) {
      if (Fe.slice(0).forEach(function(s) {
        return s.vars.id !== "ScrollSmoother" && s.kill();
      }), i !== true) {
        var r = Ls.killAll || [];
        Ls = {}, r.forEach(function(s) {
          return s();
        });
      }
    }, n;
  }();
  Oe.version = "3.12.5";
  Oe.saveStyles = function(n) {
    return n ? _l(n).forEach(function(e) {
      if (e && e.style) {
        var t = E2.indexOf(e);
        t >= 0 && E2.splice(t, 5), E2.push(e, e.style.cssText, e.getBBox && e.getAttribute("transform"), ae.core.getCache(e), Y9());
      }
    }) : E2;
  };
  Oe.revert = function(n, e) {
    return V6(!n, e);
  };
  Oe.create = function(n, e) {
    return new Oe(n, e);
  };
  Oe.refresh = function(n) {
    return n ? c0() : (mo || Oe.register()) && fs(true);
  };
  Oe.update = function(n) {
    return ++ke.cache && C3(n === true ? 2 : 0);
  };
  Oe.clearScrollMemory = Gx;
  Oe.maxScroll = function(n, e) {
    return Gi(n, e ? Jn : Qt);
  };
  Oe.getScrollFunc = function(n, e) {
    return Ar(o2(n), e ? Jn : Qt);
  };
  Oe.getById = function(n) {
    return J9[n];
  };
  Oe.getAll = function() {
    return Fe.filter(function(n) {
      return n.vars.id !== "ScrollSmoother";
    });
  };
  Oe.isScrolling = function() {
    return !!K2;
  };
  Oe.snapDirectional = z6;
  Oe.addEventListener = function(n, e) {
    var t = Ls[n] || (Ls[n] = []);
    ~t.indexOf(e) || t.push(e);
  };
  Oe.removeEventListener = function(n, e) {
    var t = Ls[n], i = t && t.indexOf(e);
    i >= 0 && t.splice(i, 1);
  };
  Oe.batch = function(n, e) {
    var t = [], i = {}, r = e.interval || 0.016, s = e.batchMax || 1e9, o = function(c, u) {
      var h = [], d = [], f = ae.delayedCall(r, function() {
        u(h, d), h = [], d = [];
      }).pause();
      return function(m) {
        h.length || f.restart(true), h.push(m.trigger), d.push(m), s <= h.length && f.progress(1);
      };
    }, a;
    for (a in e) i[a] = a.substr(0, 2) === "on" && Qn(e[a]) && a !== "onRefreshInit" ? o(a, e[a]) : e[a];
    return Qn(s) && (s = s(), ln(Oe, "refresh", function() {
      return s = e.batchMax();
    })), _l(n).forEach(function(l) {
      var c = {};
      for (a in i) c[a] = i[a];
      c.trigger = l, t.push(Oe.create(c));
    }), t;
  };
  var t7 = function(e, t, i, r) {
    return t > r ? e(r) : t < 0 && e(0), i > r ? (r - t) / (i - t) : i < 0 ? t / (t - i) : 1;
  }, Ud = function n(e, t) {
    t === true ? e.style.removeProperty("touch-action") : e.style.touchAction = t === true ? "auto" : t ? "pan-" + t + (Tt.isTouch ? " pinch-zoom" : "") : "none", e === ci && n(ht, t);
  }, Nc = {
    auto: 1,
    scroll: 1
  }, Mz = function(e) {
    var t = e.event, i = e.target, r = e.axis, s = (t.changedTouches ? t.changedTouches[0] : t).target, o = s._gsap || ae.core.getCache(s), a = Tn(), l;
    if (!o._isScrollT || a - o._isScrollT > 2e3) {
      for (; s && s !== ht && (s.scrollHeight <= s.clientHeight && s.scrollWidth <= s.clientWidth || !(Nc[(l = X2(s)).overflowY] || Nc[l.overflowX])); ) s = s.parentNode;
      o._isScroll = s && s !== i && !Ps(s) && (Nc[(l = X2(s)).overflowY] || Nc[l.overflowX]), o._isScrollT = a;
    }
    (o._isScroll || r === "x") && (t.stopPropagation(), t._gsapAllow = true);
  }, Xx = function(e, t, i, r) {
    return Tt.create({
      target: e,
      capture: true,
      debounce: false,
      lockAxis: true,
      type: t,
      onWheel: r = r && Mz,
      onPress: r,
      onDrag: r,
      onScroll: r,
      onEnable: function() {
        return i && ln(St, Tt.eventTypes[0], i7, false, true);
      },
      onDisable: function() {
        return an(St, Tt.eventTypes[0], i7, true);
      }
    });
  }, Tz = /(input|label|select|textarea)/i, n7, i7 = function(e) {
    var t = Tz.test(e.target.tagName);
    (t || n7) && (e._gsapAllow = true, n7 = t);
  }, Cz = function(e) {
    rs(e) || (e = {}), e.preventDefault = e.isNormalizer = e.allowClicks = true, e.type || (e.type = "wheel,touch"), e.debounce = !!e.debounce, e.id = e.id || "normalizer";
    var t = e, i = t.normalizeScrollX, r = t.momentum, s = t.allowNestedScroll, o = t.onRelease, a, l, c = o2(e.target) || ci, u = ae.core.globals().ScrollSmoother, h = u && u.get(), d = Y3 && (e.content && o2(e.content) || h && e.content !== false && !h.smooth() && h.content()), f = Ar(c, Qt), m = Ar(c, Jn), _ = 1, p = (Tt.isTouch && Ge.visualViewport ? Ge.visualViewport.scale * Ge.visualViewport.width : Ge.outerWidth) / Ge.innerWidth, g = 0, y = Qn(r) ? function() {
      return r(a);
    } : function() {
      return r || 2.8;
    }, b, v, x = Xx(c, e.type, true, s), C = function() {
      return v = false;
    }, A = Li, P = Li, M = function() {
      l = Gi(c, Qt), P = N0(Y3 ? 1 : 0, l), i && (A = N0(0, Gi(c, Jn))), b = Ms;
    }, E = function() {
      d._gsap.y = a0(parseFloat(d._gsap.y) + f.offset) + "px", d.style.transform = "matrix3d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, " + parseFloat(d._gsap.y) + ", 0, 1)", f.offset = f.cacheID = 0;
    }, I = function() {
      if (v) {
        requestAnimationFrame(C);
        var G = a0(a.deltaY / 2), Q = P(f.v - G);
        if (d && Q !== f.v + f.offset) {
          f.offset = Q - f.v;
          var V = a0((parseFloat(d && d._gsap.y) || 0) - f.offset);
          d.style.transform = "matrix3d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, " + V + ", 0, 1)", d._gsap.y = V + "px", f.cacheID = ke.cache, C3();
        }
        return true;
      }
      f.offset && E(), v = true;
    }, k, H, K, J, z = function() {
      M(), k.isActive() && k.vars.scrollY > l && (f() > l ? k.progress(1) && f(l) : k.resetTo("scrollY", l));
    };
    return d && ae.set(d, {
      y: "+=0"
    }), e.ignoreCheck = function($) {
      return Y3 && $.type === "touchmove" && I() || _ > 1.05 && $.type !== "touchstart" || a.isGesturing || $.touches && $.touches.length > 1;
    }, e.onPress = function() {
      v = false;
      var $ = _;
      _ = a0((Ge.visualViewport && Ge.visualViewport.scale || 1) / p), k.pause(), $ !== _ && Ud(c, _ > 1.01 ? true : i ? false : "x"), H = m(), K = f(), M(), b = Ms;
    }, e.onRelease = e.onGestureStart = function($, G) {
      if (f.offset && E(), !G) J.restart(true);
      else {
        ke.cache++;
        var Q = y(), V, w1;
        i && (V = m(), w1 = V + Q * 0.05 * -$.velocityX / 0.227, Q *= t7(m, V, w1, Gi(c, Jn)), k.vars.scrollX = A(w1)), V = f(), w1 = V + Q * 0.05 * -$.velocityY / 0.227, Q *= t7(f, V, w1, Gi(c, Qt)), k.vars.scrollY = P(w1), k.invalidate().duration(Q).play(0.01), (Y3 && k.vars.scrollY >= l || V >= l - 1) && ae.to({}, {
          onUpdate: z,
          duration: Q
        });
      }
      o && o($);
    }, e.onWheel = function() {
      k._ts && k.pause(), Tn() - g > 1e3 && (b = 0, g = Tn());
    }, e.onChange = function($, G, Q, V, w1) {
      if (Ms !== b && M(), G && i && m(A(V[2] === G ? H + ($.startX - $.x) : m() + G - V[1])), Q) {
        f.offset && E();
        var m1 = w1[2] === Q, I1 = m1 ? K + $.startY - $.y : f() + Q - w1[1], Z = P(I1);
        m1 && I1 !== Z && (K += Z - I1), f(Z);
      }
      (Q || G) && C3();
    }, e.onEnable = function() {
      Ud(c, i ? false : "x"), Oe.addEventListener("refresh", z), ln(Ge, "resize", z), f.smooth && (f.target.style.scrollBehavior = "auto", f.smooth = m.smooth = false), x.enable();
    }, e.onDisable = function() {
      Ud(c, true), an(Ge, "resize", z), Oe.removeEventListener("refresh", z), x.kill();
    }, e.lockAxis = e.lockAxis !== false, a = new Tt(e), a.iOS = Y3, Y3 && !f() && f(1), Y3 && ae.ticker.add(Li), J = a._dc, k = ae.to(a, {
      ease: "power4",
      paused: true,
      inherit: false,
      scrollX: i ? "+=0.1" : "+=0",
      scrollY: "+=0.1",
      modifiers: {
        scrollY: jx(f, f(), function() {
          return k.pause();
        })
      },
      onUpdate: C3,
      onComplete: J.vars.onComplete
    }), a;
  };
  Oe.sort = function(n) {
    return Fe.sort(n || function(e, t) {
      return (e.vars.refreshPriority || 0) * -1e6 + e.start - (t.start + (t.vars.refreshPriority || 0) * -1e6);
    });
  };
  Oe.observe = function(n) {
    return new Tt(n);
  };
  Oe.normalizeScroll = function(n) {
    if (typeof n > "u") return jn;
    if (n === true && jn) return jn.enable();
    if (n === false) {
      jn && jn.kill(), jn = n;
      return;
    }
    var e = n instanceof Tt ? n : Cz(n);
    return jn && jn.target === e.target && jn.kill(), Ps(e.target) && (jn = e), e;
  };
  Oe.core = {
    _getVelocityProp: R9,
    _inputObserver: Xx,
    _scrollers: ke,
    _proxies: $i,
    bridge: {
      ss: function() {
        K2 || Is("scrollStart"), K2 = Tn();
      },
      ref: function() {
        return wn;
      }
    }
  };
  Ox() && ae.registerPlugin(Oe);
  var Az = /(?:^\s+|\s+$)/g, $x = /([\uD800-\uDBFF][\uDC00-\uDFFF](?:[\u200D\uFE0F][\uD800-\uDBFF][\uDC00-\uDFFF]){2,}|\uD83D\uDC69(?:\u200D(?:(?:\uD83D\uDC69\u200D)?\uD83D\uDC67|(?:\uD83D\uDC69\u200D)?\uD83D\uDC66)|\uD83C[\uDFFB-\uDFFF])|\uD83D\uDC69\u200D(?:\uD83D\uDC69\u200D)?\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC69\u200D(?:\uD83D\uDC69\u200D)?\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67])|\uD83C\uDFF3\uFE0F\u200D\uD83C\uDF08|(?:\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD37-\uDD39\uDD3D\uDD3E\uDDD6-\uDDDD])(?:\uD83C[\uDFFB-\uDFFF])\u200D[\u2640\u2642]\uFE0F|\uD83D\uDC69(?:\uD83C[\uDFFB-\uDFFF])\u200D(?:\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92])|(?:\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC6F\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD37-\uDD39\uDD3C-\uDD3E\uDDD6-\uDDDF])\u200D[\u2640\u2642]\uFE0F|\uD83C\uDDFD\uD83C\uDDF0|\uD83C\uDDF6\uD83C\uDDE6|\uD83C\uDDF4\uD83C\uDDF2|\uD83C\uDDE9(?:\uD83C[\uDDEA\uDDEC\uDDEF\uDDF0\uDDF2\uDDF4\uDDFF])|\uD83C\uDDF7(?:\uD83C[\uDDEA\uDDF4\uDDF8\uDDFA\uDDFC])|\uD83C\uDDE8(?:\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDEE\uDDF0-\uDDF5\uDDF7\uDDFA-\uDDFF])|(?:\u26F9|\uD83C[\uDFCB\uDFCC]|\uD83D\uDD75)(?:\uFE0F\u200D[\u2640\u2642]|(?:\uD83C[\uDFFB-\uDFFF])\u200D[\u2640\u2642])\uFE0F|(?:\uD83D\uDC41\uFE0F\u200D\uD83D\uDDE8|\uD83D\uDC69(?:\uD83C[\uDFFB-\uDFFF])\u200D[\u2695\u2696\u2708]|\uD83D\uDC69\u200D[\u2695\u2696\u2708]|\uD83D\uDC68(?:(?:\uD83C[\uDFFB-\uDFFF])\u200D[\u2695\u2696\u2708]|\u200D[\u2695\u2696\u2708]))\uFE0F|\uD83C\uDDF2(?:\uD83C[\uDDE6\uDDE8-\uDDED\uDDF0-\uDDFF])|\uD83D\uDC69\u200D(?:\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D(?:\uD83D[\uDC68\uDC69])|\uD83D[\uDC68\uDC69]))|\uD83C\uDDF1(?:\uD83C[\uDDE6-\uDDE8\uDDEE\uDDF0\uDDF7-\uDDFB\uDDFE])|\uD83C\uDDEF(?:\uD83C[\uDDEA\uDDF2\uDDF4\uDDF5])|\uD83C\uDDED(?:\uD83C[\uDDF0\uDDF2\uDDF3\uDDF7\uDDF9\uDDFA])|\uD83C\uDDEB(?:\uD83C[\uDDEE-\uDDF0\uDDF2\uDDF4\uDDF7])|[#\*0-9]\uFE0F\u20E3|\uD83C\uDDE7(?:\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEF\uDDF1-\uDDF4\uDDF6-\uDDF9\uDDFB\uDDFC\uDDFE\uDDFF])|\uD83C\uDDE6(?:\uD83C[\uDDE8-\uDDEC\uDDEE\uDDF1\uDDF2\uDDF4\uDDF6-\uDDFA\uDDFC\uDDFD\uDDFF])|\uD83C\uDDFF(?:\uD83C[\uDDE6\uDDF2\uDDFC])|\uD83C\uDDF5(?:\uD83C[\uDDE6\uDDEA-\uDDED\uDDF0-\uDDF3\uDDF7-\uDDF9\uDDFC\uDDFE])|\uD83C\uDDFB(?:\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDEE\uDDF3\uDDFA])|\uD83C\uDDF3(?:\uD83C[\uDDE6\uDDE8\uDDEA-\uDDEC\uDDEE\uDDF1\uDDF4\uDDF5\uDDF7\uDDFA\uDDFF])|\uD83C\uDFF4\uDB40\uDC67\uDB40\uDC62(?:\uDB40\uDC77\uDB40\uDC6C\uDB40\uDC73|\uDB40\uDC73\uDB40\uDC63\uDB40\uDC74|\uDB40\uDC65\uDB40\uDC6E\uDB40\uDC67)\uDB40\uDC7F|\uD83D\uDC68(?:\u200D(?:\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D)?\uD83D\uDC68|(?:(?:\uD83D[\uDC68\uDC69])\u200D)?\uD83D\uDC66\u200D\uD83D\uDC66|(?:(?:\uD83D[\uDC68\uDC69])\u200D)?\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92])|(?:\uD83C[\uDFFB-\uDFFF])\u200D(?:\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]))|\uD83C\uDDF8(?:\uD83C[\uDDE6-\uDDEA\uDDEC-\uDDF4\uDDF7-\uDDF9\uDDFB\uDDFD-\uDDFF])|\uD83C\uDDF0(?:\uD83C[\uDDEA\uDDEC-\uDDEE\uDDF2\uDDF3\uDDF5\uDDF7\uDDFC\uDDFE\uDDFF])|\uD83C\uDDFE(?:\uD83C[\uDDEA\uDDF9])|\uD83C\uDDEE(?:\uD83C[\uDDE8-\uDDEA\uDDF1-\uDDF4\uDDF6-\uDDF9])|\uD83C\uDDF9(?:\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDED\uDDEF-\uDDF4\uDDF7\uDDF9\uDDFB\uDDFC\uDDFF])|\uD83C\uDDEC(?:\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEE\uDDF1-\uDDF3\uDDF5-\uDDFA\uDDFC\uDDFE])|\uD83C\uDDFA(?:\uD83C[\uDDE6\uDDEC\uDDF2\uDDF3\uDDF8\uDDFE\uDDFF])|\uD83C\uDDEA(?:\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDED\uDDF7-\uDDFA])|\uD83C\uDDFC(?:\uD83C[\uDDEB\uDDF8])|(?:\u26F9|\uD83C[\uDFCB\uDFCC]|\uD83D\uDD75)(?:\uD83C[\uDFFB-\uDFFF])|(?:\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD37-\uDD39\uDD3D\uDD3E\uDDD6-\uDDDD])(?:\uD83C[\uDFFB-\uDFFF])|(?:[\u261D\u270A-\u270D]|\uD83C[\uDF85\uDFC2\uDFC7]|\uD83D[\uDC42\uDC43\uDC46-\uDC50\uDC66\uDC67\uDC70\uDC72\uDC74-\uDC76\uDC78\uDC7C\uDC83\uDC85\uDCAA\uDD74\uDD7A\uDD90\uDD95\uDD96\uDE4C\uDE4F\uDEC0\uDECC]|\uD83E[\uDD18-\uDD1C\uDD1E\uDD1F\uDD30-\uDD36\uDDD1-\uDDD5])(?:\uD83C[\uDFFB-\uDFFF])|\uD83D\uDC68(?:\u200D(?:(?:(?:\uD83D[\uDC68\uDC69])\u200D)?\uD83D\uDC67|(?:(?:\uD83D[\uDC68\uDC69])\u200D)?\uD83D\uDC66)|\uD83C[\uDFFB-\uDFFF])|(?:[\u261D\u26F9\u270A-\u270D]|\uD83C[\uDF85\uDFC2-\uDFC4\uDFC7\uDFCA-\uDFCC]|\uD83D[\uDC42\uDC43\uDC46-\uDC50\uDC66-\uDC69\uDC6E\uDC70-\uDC78\uDC7C\uDC81-\uDC83\uDC85-\uDC87\uDCAA\uDD74\uDD75\uDD7A\uDD90\uDD95\uDD96\uDE45-\uDE47\uDE4B-\uDE4F\uDEA3\uDEB4-\uDEB6\uDEC0\uDECC]|\uD83E[\uDD18-\uDD1C\uDD1E\uDD1F\uDD26\uDD30-\uDD39\uDD3D\uDD3E\uDDD1-\uDDDD])(?:\uD83C[\uDFFB-\uDFFF])?|(?:[\u231A\u231B\u23E9-\u23EC\u23F0\u23F3\u25FD\u25FE\u2614\u2615\u2648-\u2653\u267F\u2693\u26A1\u26AA\u26AB\u26BD\u26BE\u26C4\u26C5\u26CE\u26D4\u26EA\u26F2\u26F3\u26F5\u26FA\u26FD\u2705\u270A\u270B\u2728\u274C\u274E\u2753-\u2755\u2757\u2795-\u2797\u27B0\u27BF\u2B1B\u2B1C\u2B50\u2B55]|\uD83C[\uDC04\uDCCF\uDD8E\uDD91-\uDD9A\uDDE6-\uDDFF\uDE01\uDE1A\uDE2F\uDE32-\uDE36\uDE38-\uDE3A\uDE50\uDE51\uDF00-\uDF20\uDF2D-\uDF35\uDF37-\uDF7C\uDF7E-\uDF93\uDFA0-\uDFCA\uDFCF-\uDFD3\uDFE0-\uDFF0\uDFF4\uDFF8-\uDFFF]|\uD83D[\uDC00-\uDC3E\uDC40\uDC42-\uDCFC\uDCFF-\uDD3D\uDD4B-\uDD4E\uDD50-\uDD67\uDD7A\uDD95\uDD96\uDDA4\uDDFB-\uDE4F\uDE80-\uDEC5\uDECC\uDED0-\uDED2\uDEEB\uDEEC\uDEF4-\uDEF8]|\uD83E[\uDD10-\uDD3A\uDD3C-\uDD3E\uDD40-\uDD45\uDD47-\uDD4C\uDD50-\uDD6B\uDD80-\uDD97\uDDC0\uDDD0-\uDDE6])|(?:[#\*0-9\xA9\xAE\u203C\u2049\u2122\u2139\u2194-\u2199\u21A9\u21AA\u231A\u231B\u2328\u23CF\u23E9-\u23F3\u23F8-\u23FA\u24C2\u25AA\u25AB\u25B6\u25C0\u25FB-\u25FE\u2600-\u2604\u260E\u2611\u2614\u2615\u2618\u261D\u2620\u2622\u2623\u2626\u262A\u262E\u262F\u2638-\u263A\u2640\u2642\u2648-\u2653\u2660\u2663\u2665\u2666\u2668\u267B\u267F\u2692-\u2697\u2699\u269B\u269C\u26A0\u26A1\u26AA\u26AB\u26B0\u26B1\u26BD\u26BE\u26C4\u26C5\u26C8\u26CE\u26CF\u26D1\u26D3\u26D4\u26E9\u26EA\u26F0-\u26F5\u26F7-\u26FA\u26FD\u2702\u2705\u2708-\u270D\u270F\u2712\u2714\u2716\u271D\u2721\u2728\u2733\u2734\u2744\u2747\u274C\u274E\u2753-\u2755\u2757\u2763\u2764\u2795-\u2797\u27A1\u27B0\u27BF\u2934\u2935\u2B05-\u2B07\u2B1B\u2B1C\u2B50\u2B55\u3030\u303D\u3297\u3299]|\uD83C[\uDC04\uDCCF\uDD70\uDD71\uDD7E\uDD7F\uDD8E\uDD91-\uDD9A\uDDE6-\uDDFF\uDE01\uDE02\uDE1A\uDE2F\uDE32-\uDE3A\uDE50\uDE51\uDF00-\uDF21\uDF24-\uDF93\uDF96\uDF97\uDF99-\uDF9B\uDF9E-\uDFF0\uDFF3-\uDFF5\uDFF7-\uDFFF]|\uD83D[\uDC00-\uDCFD\uDCFF-\uDD3D\uDD49-\uDD4E\uDD50-\uDD67\uDD6F\uDD70\uDD73-\uDD7A\uDD87\uDD8A-\uDD8D\uDD90\uDD95\uDD96\uDDA4\uDDA5\uDDA8\uDDB1\uDDB2\uDDBC\uDDC2-\uDDC4\uDDD1-\uDDD3\uDDDC-\uDDDE\uDDE1\uDDE3\uDDE8\uDDEF\uDDF3\uDDFA-\uDE4F\uDE80-\uDEC5\uDECB-\uDED2\uDEE0-\uDEE5\uDEE9\uDEEB\uDEEC\uDEF0\uDEF3-\uDEF8]|\uD83E[\uDD10-\uDD3A\uDD3C-\uDD3E\uDD40-\uDD45\uDD47-\uDD4C\uDD50-\uDD6B\uDD80-\uDD97\uDDC0\uDDD0-\uDDE6])\uFE0F)/;
  function zf(n) {
    var e = n.nodeType, t = "";
    if (e === 1 || e === 9 || e === 11) {
      if (typeof n.textContent == "string") return n.textContent;
      for (n = n.firstChild; n; n = n.nextSibling) t += zf(n);
    } else if (e === 3 || e === 4) return n.nodeValue;
    return t;
  }
  function Di(n, e, t, i) {
    if (n += "", t && (n = n.trim ? n.trim() : n.replace(Az, "")), e && e !== "") return n.replace(/>/g, "&gt;").replace(/</g, "&lt;").split(e);
    for (var r = [], s = n.length, o = 0, a, l; o < s; o++) l = n.charAt(o), (l.charCodeAt(0) >= 55296 && l.charCodeAt(0) <= 56319 || n.charCodeAt(o + 1) >= 65024 && n.charCodeAt(o + 1) <= 65039) && (a = ((n.substr(o, 12).split($x) || [])[1] || "").length || 2, l = n.substr(o, a), r.emoji = 1, o += a - 1), r.push(l === ">" ? "&gt;" : l === "<" ? "&lt;" : i && l === " " && (n.charAt(o - 1) === " " || n.charAt(o + 1) === " ") ? "&nbsp;" : l);
    return r;
  }
  var Mo, ep, qx, $a, Yx, Vf, Dz = /(?:\r|\n|\t\t)/g, Rz = /(?:\s\s+)/g, Pz = "\xA0", Kx = function(e) {
    Mo = document, ep = window, $a = $a || e || ep.gsap || console.warn("Please gsap.registerPlugin(SplitText)"), $a && (Vf = $a.utils.toArray, Yx = $a.core.context || function() {
    }, qx = 1);
  }, Jx = function(e) {
    return ep.getComputedStyle(e);
  }, G6 = function(e) {
    return e.position === "absolute" || e.absolute === true;
  }, Lz = function(e, t) {
    for (var i = t.length, r; --i > -1; ) if (r = t[i], e.substr(0, r.length) === r) return r.length;
  }, Iz = " style='position:relative;display:inline-block;'", r7 = function(e, t) {
    e === void 0 && (e = "");
    var i = ~e.indexOf("++"), r = 1;
    return i && (e = e.split("++").join("")), function() {
      return "<" + t + Iz + (e ? " class='" + e + (i ? r++ : "") + "'>" : ">");
    };
  }, Qx = function n(e, t, i) {
    var r = e.nodeType;
    if (r === 1 || r === 9 || r === 11) for (e = e.firstChild; e; e = e.nextSibling) n(e, t, i);
    else (r === 3 || r === 4) && (e.nodeValue = e.nodeValue.split(t).join(i));
  }, Bd = function(e, t) {
    for (var i = t.length; --i > -1; ) e.push(t[i]);
  }, s7 = function(e, t, i) {
    for (var r; e && e !== t; ) {
      if (r = e._next || e.nextSibling, r) return r.textContent.charAt(0) === i;
      e = e.parentNode || e._parent;
    }
  }, Fz = function n(e) {
    var t = Vf(e.childNodes), i = t.length, r, s;
    for (r = 0; r < i; r++) s = t[r], s._isSplit ? n(s) : r && s.previousSibling && s.previousSibling.nodeType === 3 ? (s.previousSibling.nodeValue += s.nodeType === 3 ? s.nodeValue : s.firstChild.nodeValue, e.removeChild(s)) : s.nodeType !== 3 && (e.insertBefore(s.firstChild, s), e.removeChild(s));
  }, Ci = function(e, t) {
    return parseFloat(t[e]) || 0;
  }, Oz = function(e, t, i, r, s, o, a) {
    var l = Jx(e), c = Ci("paddingLeft", l), u = -999, h = Ci("borderBottomWidth", l) + Ci("borderTopWidth", l), d = Ci("borderLeftWidth", l) + Ci("borderRightWidth", l), f = Ci("paddingTop", l) + Ci("paddingBottom", l), m = Ci("paddingLeft", l) + Ci("paddingRight", l), _ = Ci("fontSize", l) * (t.lineThreshold || 0.2), p = l.textAlign, g = [], y = [], b = [], v = t.wordDelimiter || " ", x = t.tag ? t.tag : t.span ? "span" : "div", C = t.type || t.split || "chars,words,lines", A = s && ~C.indexOf("lines") ? [] : null, P = ~C.indexOf("words"), M = ~C.indexOf("chars"), E = G6(t), I = t.linesClass, k = ~(I || "").indexOf("++"), H = [], K = l.display === "flex", J = e.style.display, z, $, G, Q, V, w1, m1, I1, Z, f1, M1, W;
    for (k && (I = I.split("++").join("")), K && (e.style.display = "block"), $ = e.getElementsByTagName("*"), G = $.length, V = [], z = 0; z < G; z++) V[z] = $[z];
    if (A || E) for (z = 0; z < G; z++) Q = V[z], w1 = Q.parentNode === e, (w1 || E || M && !P) && (W = Q.offsetTop, A && w1 && Math.abs(W - u) > _ && (Q.nodeName !== "BR" || z === 0) && (m1 = [], A.push(m1), u = W), E && (Q._x = Q.offsetLeft, Q._y = W, Q._w = Q.offsetWidth, Q._h = Q.offsetHeight), A && ((Q._isSplit && w1 || !M && w1 || P && w1 || !P && Q.parentNode.parentNode === e && !Q.parentNode._isSplit) && (m1.push(Q), Q._x -= c, s7(Q, e, v) && (Q._wordEnd = true)), Q.nodeName === "BR" && (Q.nextSibling && Q.nextSibling.nodeName === "BR" || z === 0) && A.push([])));
    for (z = 0; z < G; z++) {
      if (Q = V[z], w1 = Q.parentNode === e, Q.nodeName === "BR") {
        A || E ? (Q.parentNode && Q.parentNode.removeChild(Q), V.splice(z--, 1), G--) : P || e.appendChild(Q);
        continue;
      }
      if (E && (Z = Q.style, !P && !w1 && (Q._x += Q.parentNode._x, Q._y += Q.parentNode._y), Z.left = Q._x + "px", Z.top = Q._y + "px", Z.position = "absolute", Z.display = "block", Z.width = Q._w + 1 + "px", Z.height = Q._h + "px"), !P && M) if (Q._isSplit) for (Q._next = $ = Q.nextSibling, Q.parentNode.appendChild(Q); $ && $.nodeType === 3 && $.textContent === " "; ) Q._next = $.nextSibling, Q.parentNode.appendChild($), $ = $.nextSibling;
      else Q.parentNode._isSplit ? (Q._parent = Q.parentNode, !Q.previousSibling && Q.firstChild && (Q.firstChild._isFirst = true), Q.nextSibling && Q.nextSibling.textContent === " " && !Q.nextSibling.nextSibling && H.push(Q.nextSibling), Q._next = Q.nextSibling && Q.nextSibling._isFirst ? null : Q.nextSibling, Q.parentNode.removeChild(Q), V.splice(z--, 1), G--) : w1 || (W = !Q.nextSibling && s7(Q.parentNode, e, v), Q.parentNode._parent && Q.parentNode._parent.appendChild(Q), W && Q.parentNode.appendChild(Mo.createTextNode(" ")), x === "span" && (Q.style.display = "inline"), g.push(Q));
      else Q.parentNode._isSplit && !Q._isSplit && Q.innerHTML !== "" ? y.push(Q) : M && !Q._isSplit && (x === "span" && (Q.style.display = "inline"), g.push(Q));
    }
    for (z = H.length; --z > -1; ) H[z].parentNode.removeChild(H[z]);
    if (A) {
      for (E && (f1 = Mo.createElement(x), e.appendChild(f1), M1 = f1.offsetWidth + "px", W = f1.offsetParent === e ? 0 : e.offsetLeft, e.removeChild(f1)), Z = e.style.cssText, e.style.cssText = "display:none;"; e.firstChild; ) e.removeChild(e.firstChild);
      for (I1 = v === " " && (!E || !P && !M), z = 0; z < A.length; z++) {
        for (m1 = A[z], f1 = Mo.createElement(x), f1.style.cssText = "display:block;text-align:" + p + ";position:" + (E ? "absolute;" : "relative;"), I && (f1.className = I + (k ? z + 1 : "")), b.push(f1), G = m1.length, $ = 0; $ < G; $++) m1[$].nodeName !== "BR" && (Q = m1[$], f1.appendChild(Q), I1 && Q._wordEnd && f1.appendChild(Mo.createTextNode(" ")), E && ($ === 0 && (f1.style.top = Q._y + "px", f1.style.left = c + W + "px"), Q.style.top = "0px", W && (Q.style.left = Q._x - W + "px")));
        G === 0 ? f1.innerHTML = "&nbsp;" : !P && !M && (Fz(f1), Qx(f1, "\xA0", " ")), E && (f1.style.width = M1, f1.style.height = Q._h + "px"), e.appendChild(f1);
      }
      e.style.cssText = Z;
    }
    E && (a > e.clientHeight && (e.style.height = a - f + "px", e.clientHeight < a && (e.style.height = a + h + "px")), o > e.clientWidth && (e.style.width = o - m + "px", e.clientWidth < o && (e.style.width = o + d + "px"))), K && (J ? e.style.display = J : e.style.removeProperty("display")), Bd(i, g), P && Bd(r, y), Bd(s, b);
  }, kz = function(e, t, i, r) {
    var s = t.tag ? t.tag : t.span ? "span" : "div", o = t.type || t.split || "chars,words,lines", a = ~o.indexOf("chars"), l = G6(t), c = t.wordDelimiter || " ", u = function(E) {
      return E === c || E === Pz && c === " ";
    }, h = c !== " " ? "" : l ? "&#173; " : " ", d = "</" + s + ">", f = 1, m = t.specialChars ? typeof t.specialChars == "function" ? t.specialChars : Lz : null, _, p, g, y, b, v, x, C, A = Mo.createElement("div"), P = e.parentNode;
    for (P.insertBefore(A, e), A.textContent = e.nodeValue, P.removeChild(e), e = A, _ = zf(e), x = _.indexOf("<") !== -1, t.reduceWhiteSpace !== false && (_ = _.replace(Rz, " ").replace(Dz, "")), x && (_ = _.split("<").join("{{LT}}")), b = _.length, p = (_.charAt(0) === " " ? h : "") + i(), g = 0; g < b; g++) if (v = _.charAt(g), m && (C = m(_.substr(g), t.specialChars))) v = _.substr(g, C || 1), p += a && v !== " " ? r() + v + "</" + s + ">" : v, g += C - 1;
    else if (u(v) && !u(_.charAt(g - 1)) && g) {
      for (p += f ? d : "", f = 0; u(_.charAt(g + 1)); ) p += h, g++;
      g === b - 1 ? p += h : _.charAt(g + 1) !== ")" && (p += h + i(), f = 1);
    } else v === "{" && _.substr(g, 6) === "{{LT}}" ? (p += a ? r() + "{{LT}}</" + s + ">" : "{{LT}}", g += 5) : v.charCodeAt(0) >= 55296 && v.charCodeAt(0) <= 56319 || _.charCodeAt(g + 1) >= 65024 && _.charCodeAt(g + 1) <= 65039 ? (y = ((_.substr(g, 12).split($x) || [])[1] || "").length || 2, p += a && v !== " " ? r() + _.substr(g, y) + "</" + s + ">" : _.substr(g, y), g += y - 1) : p += a && v !== " " ? r() + v + "</" + s + ">" : v;
    e.outerHTML = p + (f ? d : ""), x && Qx(P, "{{LT}}", "<");
  }, Nz = function n(e, t, i, r) {
    var s = Vf(e.childNodes), o = s.length, a = G6(t), l, c;
    if (e.nodeType !== 3 || o > 1) {
      for (t.absolute = false, l = 0; l < o; l++) c = s[l], c._next = c._isFirst = c._parent = c._wordEnd = null, (c.nodeType !== 3 || /\S+/.test(c.nodeValue)) && (a && c.nodeType !== 3 && Jx(c).display === "inline" && (c.style.display = "inline-block", c.style.position = "relative"), c._isSplit = true, n(c, t, i, r));
      t.absolute = a, e._isSplit = true;
      return;
    }
    kz(e, t, i, r);
  }, rf = function() {
    function n(t, i) {
      qx || Kx(), this.elements = Vf(t), this.chars = [], this.words = [], this.lines = [], this._originals = [], this.vars = i || {}, Yx(this), this.split(i);
    }
    var e = n.prototype;
    return e.split = function(i) {
      this.isSplit && this.revert(), this.vars = i = i || this.vars, this._originals.length = this.chars.length = this.words.length = this.lines.length = 0;
      for (var r = this.elements.length, s = i.tag ? i.tag : i.span ? "span" : "div", o = r7(i.wordsClass, s), a = r7(i.charsClass, s), l, c, u; --r > -1; ) u = this.elements[r], this._originals[r] = {
        html: u.innerHTML,
        style: u.getAttribute("style")
      }, l = u.clientHeight, c = u.clientWidth, Nz(u, i, o, a), Oz(u, i, this.chars, this.words, this.lines, c, l);
      return this.chars.reverse(), this.words.reverse(), this.lines.reverse(), this.isSplit = true, this;
    }, e.revert = function() {
      var i = this._originals;
      if (!i) throw "revert() call wasn't scoped properly.";
      return this.elements.forEach(function(r, s) {
        r.innerHTML = i[s].html, r.setAttribute("style", i[s].style);
      }), this.chars = [], this.words = [], this.lines = [], this.isSplit = false, this;
    }, n.create = function(i, r) {
      return new n(i, r);
    }, n;
  }();
  rf.version = "3.12.5";
  rf.register = Kx;
  var uu = function() {
    function n(t) {
      this.chars = Di(t), this.sets = [], this.length = 50;
      for (var i = 0; i < 20; i++) this.sets[i] = a7(80, this.chars);
    }
    var e = n.prototype;
    return e.grow = function(i) {
      for (var r = 0; r < 20; r++) this.sets[r] += a7(i - this.length, this.chars);
      this.length = i;
    }, n;
  }(), hs, Zx, eS = function() {
    return hs || typeof window < "u" && (hs = window.gsap) && hs.registerPlugin && hs;
  }, Uz = 1, o7 = /\s+/g, a7 = function(e, t) {
    for (var i = t.length, r = ""; --e > -1; ) r += t[~~(Math.random() * i)];
    return r;
  }, tp = "ABCDEFGHIJKLMNOPQRSTUVWXYZ", l7 = tp.toLowerCase(), Bz = {
    upperCase: new uu(tp),
    lowerCase: new uu(l7),
    upperAndLowerCase: new uu(tp + l7)
  }, c7 = function() {
    Zx = hs = eS();
  }, Gf = {
    version: "3.12.5",
    name: "scrambleText",
    register: function(e, t, i) {
      hs = e, c7();
    },
    init: function(e, t, i, r, s) {
      if (Zx || c7(), this.prop = "innerHTML" in e ? "innerHTML" : "textContent" in e ? "textContent" : 0, !!this.prop) {
        this.target = e, typeof t != "object" && (t = {
          text: t
        });
        var o = t.text || t.value || "", a = t.trim !== false, l = this, c, u, h, d;
        return l.delimiter = c = t.delimiter || "", l.original = Di(zf(e).replace(o7, " ").split("&nbsp;").join(""), c, a), (o === "{original}" || o === true || o == null) && (o = l.original.join(c)), l.text = Di((o || "").replace(o7, " "), c, a), l.hasClass = !!(t.newClass || t.oldClass), l.newClass = t.newClass, l.oldClass = t.oldClass, d = c === "", l.textHasEmoji = d && !!l.text.emoji, l.charsHaveEmoji = !!t.chars && !!Di(t.chars).emoji, l.length = d ? l.original.length : l.original.join(c).length, l.lengthDif = (d ? l.text.length : l.text.join(c).length) - l.length, l.fillChar = t.fillChar || t.chars && ~t.chars.indexOf(" ") ? "&nbsp;" : "", l.charSet = h = Bz[t.chars || "upperCase"] || new uu(t.chars), l.speed = 0.05 / (t.speed || 1), l.prevScrambleTime = 0, l.setIndex = Math.random() * 20 | 0, u = l.length + Math.max(l.lengthDif, 0), u > h.length && h.grow(u), l.chars = h.sets[l.setIndex], l.revealDelay = t.revealDelay || 0, l.tweenLength = t.tweenLength !== false, l.tween = i, l.rightToLeft = !!t.rightToLeft, l._props.push("scrambleText", "text"), Uz;
      }
    },
    render: function(e, t) {
      var i = t.target, r = t.prop, s = t.text, o = t.delimiter, a = t.tween, l = t.prevScrambleTime, c = t.revealDelay, u = t.setIndex, h = t.chars, d = t.charSet, f = t.length, m = t.textHasEmoji, _ = t.charsHaveEmoji, p = t.lengthDif, g = t.tweenLength, y = t.oldClass, b = t.newClass, v = t.rightToLeft, x = t.fillChar, C = t.speed, A = t.original, P = t.hasClass, M = s.length, E = a._time, I = E - l, k, H, K, J, z, $, G, Q, V, w1, m1;
      c && (a._from && (E = a._dur - E), e = E === 0 ? 0 : E < c ? 1e-6 : E === a._dur ? 1 : a._ease((E - c) / (a._dur - c))), e < 0 ? e = 0 : e > 1 && (e = 1), v && (e = 1 - e), k = ~~(e * M + 0.5), e ? ((I > C || I < -C) && (t.setIndex = u = (u + (Math.random() * 19 | 0)) % 20, t.chars = d.sets[u], t.prevScrambleTime += I), J = h) : J = A.join(o), m1 = a._from ? e : 1 - e, w1 = f + (g ? a._from ? m1 * m1 * m1 : 1 - m1 * m1 * m1 : 1) * p, v ? e === 1 && (a._from || a.data === "isFromStart") ? (K = "", J = A.join(o)) : (G = s.slice(k).join(o), _ ? K = Di(J).slice(0, w1 - (m ? Di(G) : G).length + 0.5 | 0).join("") : K = J.substr(0, w1 - (m ? Di(G) : G).length + 0.5 | 0), J = G) : (K = s.slice(0, k).join(o), H = (m ? Di(K) : K).length, _ ? J = Di(J).slice(H, w1 + 0.5 | 0).join("") : J = J.substr(H, w1 - H + 0.5 | 0)), P ? (Q = v ? y : b, V = v ? b : y, z = Q && k !== 0, $ = V && k !== M, G = (z ? "<span class='" + Q + "'>" : "") + K + (z ? "</span>" : "") + ($ ? "<span class='" + V + "'>" : "") + o + J + ($ ? "</span>" : "")) : G = K + o + J, i[r] = x === "&nbsp;" && ~G.indexOf("  ") ? G.split("  ").join("&nbsp;&nbsp;") : G;
    }
  };
  Gf.emojiSafeSplit = Di;
  Gf.getText = zf;
  eS() && hs.registerPlugin(Gf);
  Wf = function() {
    return eu.ticker.fps(60), eu.registerPlugin(Tt, ga, P6, gl, Oe, rf, Gf), Oe.config({
      ignoreMobileResize: true
    }), {
      gsap: eu,
      Observer: Tt,
      Draggable: ga,
      Flip: gl,
      ScrollTrigger: Oe,
      SplitText: rf
    };
  };
  np = function(n) {
    return i8("history")[n] !== void 0;
  };
  ZV = function(n, e) {
    return i8("history")[n] === e;
  };
  eG = function(n, e, t) {
    return Math.min(1, Math.max(0, (t - n) / (e - n)));
  };
  const Hz = {
    class: "w-full col-start-1 row-start-1 place-self-center flex flex-col items-center"
  }, zz = [
    "data-visible"
  ], u7 = 11, Vz = {
    __name: "Preloader",
    setup(n) {
      const e = r6(), t = s6(), i = V8(), r = pe(null), s = pe(null), o = pe(null), a = pe("000"), l = pe(null), c = pe(false), u = pe(false), h = pe(false), d = pe(false), f = pe(false), { gsap: m } = Wf(), { width: _ } = nr(s);
      let p = null, g = 0;
      v2(async () => {
        await e2(), zt(c, np("alt_layout")), zt(u, true), await e2(), rt(l).getDotLottieInstance().addEventListener("complete", () => {
          zt(d, true);
        }), p = m.to(rt(o), {
          paused: true,
          x: rt(_),
          xPercent: -100,
          duration: 1,
          ease: "power2.out",
          transformOrigin: "center right",
          onUpdate: () => {
            zt(a, Math.round(p.progress() * 100).toString().padStart(3, "0"));
          }
        }), If.onProgress = () => {
          y();
        };
      }), Et.on(Bt.WORKER_MODEL_LOADED, () => {
        y();
      }), je([
        f,
        d
      ], ([x, C]) => {
        zt(u, !x || !C), zt(h, x && C);
      });
      function y() {
        g++, m.to(p, {
          progress: () => g / u7,
          duration: 1,
          ease: "power2.out",
          overwrite: true
        }), zt(f, g >= u7);
      }
      function b() {
        m.fromTo(rt(r).$el, {
          clipPath: "polygon(0% 0%, 100% 0%, 100% 100%, 0% 100%)"
        }, {
          clipPath: "polygon(0% 0%, 100% 0%, 100% 0%, 0% 0%)",
          duration: 1,
          ease: "power2.out",
          onComplete: async () => {
            t.setPreloaderVisible(false), await e2(), window.dispatchEvent(new Event("resize"));
          }
        }), m.delayedCall(0.8, () => {
          e.setInit(true);
        });
      }
      function v() {
        zt(h, false), t.setCursorColor("white"), e.setSoundEnabled(true), Et.once(Bt.BG_SOUND_LOADED, () => {
          m.delayedCall(0.25, () => {
            i.setEnabled(true), Et.emit(Bt.START_ANIMATE_IN), Et.emit(Bt.SCROLL_TOP), b();
          });
        });
      }
      return (x, C) => {
        const A = Vv, P = Gv;
        return jt(), C2(P, {
          class: "preloader",
          "data-alt-layout": Pe(c),
          ref_key: "componentRef",
          ref: r
        }, {
          default: Wi(() => [
            Ye(wp, {
              name: "counter"
            }, {
              default: Wi(() => [
                uw(u2("div", {
                  class: "counter-wrapper",
                  ref_key: "counterWrapperRef",
                  ref: s
                }, [
                  u2("span", {
                    class: "counter | body-1",
                    ref_key: "counterRef",
                    ref: o
                  }, E7(Pe(a)), 513)
                ], 512), [
                  [
                    MM,
                    Pe(u)
                  ]
                ])
              ]),
              _: 1
            }),
            u2("div", Hz, [
              Ye(Pe(HR), {
                class: "lottie",
                src: "/preloader.json",
                autoplay: true,
                ref_key: "lottieRef",
                ref: l
              }, null, 512),
              u2("div", {
                class: "enter-button",
                "data-visible": Pe(h)
              }, [
                Ye(A, {
                  class: "body-1",
                  theme: "red",
                  onClickOnce: v
                }, {
                  default: Wi(() => C[0] || (C[0] = [
                    Sp("Enter")
                  ])),
                  _: 1
                })
              ], 8, zz)
            ])
          ]),
          _: 1
        }, 8, [
          "data-alt-layout"
        ]);
      };
    }
  }, tS = Tf(Vz, [
    [
      "__scopeId",
      "data-v-ec53098b"
    ]
  ]), Gz = Object.freeze(Object.defineProperty({
    __proto__: null,
    default: tS
  }, Symbol.toStringTag, {
    value: "Module"
  })), nS = (n = "RouteProvider") => xi({
    name: n,
    props: {
      vnode: {
        type: Object,
        required: true
      },
      route: {
        type: Object,
        required: true
      },
      vnodeRef: Object,
      renderKey: String,
      trackRootNodes: Boolean
    },
    setup(e) {
      const t = e.renderKey, i = e.route, r = {};
      for (const s in e.route) Object.defineProperty(r, s, {
        get: () => t === e.renderKey ? e.route[s] : i[s],
        enumerable: true
      });
      return gr(wl, y3(r)), () => Xt(e.vnode, {
        ref: e.vnodeRef
      });
    }
  }), Wz = nS(), f7 = /* @__PURE__ */ new WeakMap(), jz = xi({
    name: "NuxtPage",
    inheritAttrs: false,
    props: {
      name: {
        type: String
      },
      transition: {
        type: [
          Boolean,
          Object
        ],
        default: void 0
      },
      keepalive: {
        type: [
          Boolean,
          Object
        ],
        default: void 0
      },
      route: {
        type: Object
      },
      pageKey: {
        type: [
          Function,
          String
        ],
        default: null
      }
    },
    setup(n, { attrs: e, slots: t, expose: i }) {
      const r = At(), s = vn(), o = fn(wl, null);
      let a;
      i({
        pageRef: s
      });
      const l = fn(dv, null);
      let c;
      const u = r.deferHydration();
      if (r.isHydrating) {
        const d = r.hooks.hookOnce("app:error", u);
        On().beforeEach(d);
      }
      n.pageKey && je(() => n.pageKey, (d, f) => {
        d !== f && r.callHook("page:loading:start");
      });
      let h = false;
      {
        const d = On().beforeResolve(() => {
          h = false;
        });
        Os(() => {
          d();
        });
      }
      return () => Xt(Uv, {
        name: n.name,
        route: n.route,
        ...e
      }, {
        default: (d) => {
          const f = $z(o, d.route, d.Component), m = o && o.matched.length === d.route.matched.length;
          if (!d.Component) {
            if (c && !m) return c;
            u();
            return;
          }
          if (c && l && !l.isCurrent(d.route)) return c;
          if (f && o && (!l || (l == null ? void 0 : l.isCurrent(o)))) return m ? c : null;
          const _ = v4(d, n.pageKey), p = qz(o, d.route, d.Component);
          !r.isHydrating && a === _ && !p && (r.callHook("page:loading:end"), h = true), a = _;
          const g = !!(n.transition ?? d.route.meta.pageTransition ?? a4), y = g && Xz([
            n.transition,
            d.route.meta.pageTransition,
            a4,
            {
              onAfterLeave: () => {
                r.callHook("page:transition:finish", d.Component);
              }
            }
          ]), b = n.keepalive ?? d.route.meta.keepalive ?? JT;
          return c = Bv(g && y, RD(b, Xt(xp, {
            suspensible: true,
            onPending: () => r.callHook("page:start", d.Component),
            onResolve: () => {
              e2(() => r.callHook("page:finish", d.Component).then(() => {
                if (!h && !p) return h = true, r.callHook("page:loading:end");
              }).finally(u));
            }
          }, {
            default: () => {
              const v = {
                key: _ || void 0,
                vnode: t.default ? Yz(t.default, d) : d.Component,
                route: d.route,
                renderKey: _ || void 0,
                trackRootNodes: g,
                vnodeRef: s
              };
              if (!b) return Xt(Wz, v);
              const x = d.Component.type, C = x;
              let A = f7.get(C);
              return A || (A = nS(x.name || x.__name), f7.set(C, A)), Xt(A, v);
            }
          }))).default(), c;
        }
      });
    }
  });
  function Xz(n) {
    const e = n.filter(Boolean).map((t) => ({
      ...t,
      onAfterLeave: t.onAfterLeave ? kp(t.onAfterLeave) : void 0
    }));
    return fv(...e);
  }
  function $z(n, e, t) {
    if (!n) return false;
    const i = e.matched.findIndex((r) => {
      var _a2;
      return ((_a2 = r.components) == null ? void 0 : _a2.default) === (t == null ? void 0 : t.type);
    });
    return !i || i === -1 ? false : e.matched.slice(0, i).some((r, s) => {
      var _a2, _b2, _c2;
      return ((_a2 = r.components) == null ? void 0 : _a2.default) !== ((_c2 = (_b2 = n.matched[s]) == null ? void 0 : _b2.components) == null ? void 0 : _c2.default);
    }) || t && v4({
      route: e,
      Component: t
    }) !== v4({
      route: n,
      Component: t
    });
  }
  function qz(n, e, t) {
    return n ? e.matched.findIndex((r) => {
      var _a2;
      return ((_a2 = r.components) == null ? void 0 : _a2.default) === (t == null ? void 0 : t.type);
    }) < e.matched.length - 1 : false;
  }
  function Yz(n, e) {
    const t = n(e);
    return t.length === 1 ? Xt(t[0]) : Xt(gn, void 0, t);
  }
  let Kz, Jz, Qz, Zz, eV, tV, nV, iV, rV, sV, oV, aV, iS, lV, cV;
  Kz = xi({
    name: "LayoutLoader",
    inheritAttrs: false,
    props: {
      name: String,
      layoutProps: Object
    },
    setup(n, e) {
      return () => Xt(or[n.name], n.layoutProps, e.slots);
    }
  });
  Jz = {
    name: {
      type: [
        String,
        Boolean,
        Object
      ],
      default: null
    },
    fallback: {
      type: [
        String,
        Object
      ],
      default: null
    }
  };
  Qz = xi({
    name: "NuxtLayout",
    inheritAttrs: false,
    props: Jz,
    setup(n, e) {
      const t = At(), i = fn(wl), r = i === Ap() ? MD() : i, s = qe(() => {
        let l = Pe(n.name) ?? r.meta.layout ?? "default";
        return l && !(l in or) && n.fallback && (l = Pe(n.fallback)), l;
      }), o = vn();
      e.expose({
        layoutRef: o
      });
      const a = t.deferHydration();
      if (t.isHydrating) {
        const l = t.hooks.hookOnce("app:error", a);
        On().beforeEach(l);
      }
      return () => {
        const l = s.value && s.value in or, c = r.meta.layoutTransition ?? KT;
        return Bv(l && c, {
          default: () => Xt(xp, {
            suspensible: true,
            onResolve: () => {
              e2(a);
            }
          }, {
            default: () => Xt(Zz, {
              layoutProps: Vb(e.attrs, {
                ref: o
              }),
              key: s.value || void 0,
              name: s.value,
              shouldProvide: !n.name,
              hasTransition: !!c
            }, e.slots)
          })
        }).default();
      };
    }
  });
  Zz = xi({
    name: "NuxtLayoutProvider",
    inheritAttrs: false,
    props: {
      name: {
        type: [
          String,
          Boolean
        ]
      },
      layoutProps: {
        type: Object
      },
      hasTransition: {
        type: Boolean
      },
      shouldProvide: {
        type: Boolean
      }
    },
    setup(n, e) {
      const t = n.name;
      return n.shouldProvide && gr(dv, {
        isCurrent: (i) => t === (i.meta.layout ?? "default")
      }), () => {
        var _a2, _b2;
        return !t || typeof t == "string" && !(t in or) ? (_b2 = (_a2 = e.slots).default) == null ? void 0 : _b2.call(_a2) : Xt(Kz, {
          key: t,
          layoutProps: n.layoutProps,
          name: t
        }, e.slots);
      };
    }
  });
  eV = {
    class: "webgl-background"
  };
  tV = {
    class: "canvas-wrapper"
  };
  nV = {
    __name: "index",
    setup(n) {
      const e = oP(), t = pe(null), i = pe(false), { gsap: r, Observer: s } = Wf(), { pixelRatio: o } = aP(), { width: a, height: l } = nr(e);
      let c = null, u = null;
      v2(async () => {
        await e2(), c = rt(t).transferControlToOffscreen(), u = new Worker(new URL("" + new URL("worker-BeWseCUL.js", import.meta.url).href, import.meta.url), {
          type: "module"
        }), u.postMessage({
          init: true,
          canvas: c,
          width: rt(a),
          height: rt(l)
        }, [
          c
        ]), u.onmessage = (f) => {
          const { data: m } = f;
          m.init && (zt(i, true), d(), r.ticker.add(h));
        };
      }), je([
        a,
        l,
        i
      ], (f) => {
        f[2] && u.postMessage({
          resize: true,
          width: f[0],
          height: f[1]
        });
      }), je([
        o,
        i
      ], (f) => {
        f[1] && u.postMessage({
          dpr: f[0]
        });
      });
      function h(f) {
        u.postMessage({
          update: true,
          tick: f
        });
      }
      function d() {
        s.create({
          target: window,
          type: "pointer,touch",
          onMove: (f) => {
            u.postMessage({
              mouse: true,
              x: f.x,
              y: f.y
            });
          }
        });
      }
      return (f, m) => (jt(), gs("div", eV, [
        u2("div", tV, [
          u2("canvas", {
            class: "size-full",
            ref_key: "canvasRef",
            ref: t
          }, null, 512)
        ])
      ]));
    }
  };
  iV = Tf(nV, [
    [
      "__scopeId",
      "data-v-f7d5041e"
    ]
  ]);
  rV = [
    "data-state"
  ];
  sV = [
    "data-color",
    "data-static-color"
  ];
  oV = {
    key: 0,
    x: "5",
    y: "5",
    class: "label | body-2",
    "text-anchor": "middle",
    "alignment-baseline": "middle"
  };
  aV = {
    __name: "MouseCursor",
    props: {
      cursorColor: {
        type: String,
        default: "#fff",
        validator: (n) => /^#([0-9A-F]{3}|[0-9A-F]{6})$/i.test(n)
      },
      staticColor: {
        type: Boolean,
        default: false
      }
    },
    setup(n) {
      TM((l) => ({
        "1bba7016": n.cursorColor
      }));
      const e = s6(), t = pe(null), i = pe(null), r = pe(null), { gsap: s, Observer: o } = Wf();
      v2(async () => {
        await e2(), a();
      }), je(() => e.getCursorState, (l) => {
        s.to(rt(r), {
          attr: {
            r: l === "icon-hover" ? 120 : 4
          },
          overwrite: true,
          duration: 0.2,
          ease: "power2.out"
        });
      });
      function a() {
        const l = s.matchMedia();
        let c;
        l.add({
          isDesktop: "(min-width: 1024px)",
          isMobile: "(max-width: 1023px)"
        }, (u) => {
          const { isDesktop: h, isMobile: d } = u.conditions;
          d && (c == null ? void 0 : c.kill()), h && (c = o.create({
            target: window,
            type: "pointer",
            onMove: (f) => {
              s.set(rt(i), {
                scale: 1
              }), s.set(rt(t), {
                x: f.x,
                y: f.y
              });
            }
          }));
        });
      }
      return (l, c) => (jt(), gs("div", {
        class: "mouse-cursor",
        "data-state": Pe(e).getCursorState,
        "aria-hidden": "true"
      }, [
        u2("div", {
          class: "wrapper",
          ref_key: "wrapperRef",
          ref: t
        }, [
          (jt(), gs("svg", {
            class: "dot",
            xmlns: "http://www.w3.org/2000/svg",
            "data-color": Pe(e).getCursorColor,
            "data-static-color": n.staticColor,
            ref_key: "dotRef",
            ref: i,
            viewBox: "0 0 10 10",
            overflow: "visible"
          }, [
            u2("circle", {
              cx: "5",
              cy: "5",
              r: "4",
              ref_key: "circleRef",
              ref: r
            }, null, 512),
            Ye(wp, {
              name: "label"
            }, {
              default: Wi(() => [
                Pe(e).getCursorLabel === "drag" ? (jt(), gs("text", oV, " Hold and drag ")) : zb("", true)
              ]),
              _: 1
            })
          ], 8, sV))
        ], 512)
      ], 8, rV));
    }
  };
  iS = Tf(aV, [
    [
      "__scopeId",
      "data-v-d35e5ef8"
    ]
  ]);
  lV = Object.freeze(Object.defineProperty({
    __proto__: null,
    default: iS
  }, Symbol.toStringTag, {
    value: "Module"
  }));
  cV = Symbol.for("nuxt:client-only");
  uV = xi({
    name: "ClientOnly",
    inheritAttrs: false,
    props: [
      "fallback",
      "placeholder",
      "placeholderTag",
      "fallbackTag"
    ],
    setup(n, { slots: e, attrs: t }) {
      const i = vn(false);
      return v2(() => {
        i.value = true;
      }), gr(cV, true), (r) => {
        var _a2;
        if (i.value) return (_a2 = e.default) == null ? void 0 : _a2.call(e);
        const s = e.fallback || e.placeholder;
        if (s) return s();
        const o = r.fallback || r.placeholder || "", a = r.fallbackTag || r.placeholderTag || "span";
        return gs(a, t, o);
      };
    }
  });
  var fV = "1.2.3";
  function rS(n, e, t) {
    return Math.max(n, Math.min(e, t));
  }
  function hV(n, e, t) {
    return (1 - t) * n + t * e;
  }
  function dV(n, e, t, i) {
    return hV(n, e, 1 - Math.exp(-t * i));
  }
  function pV(n, e) {
    return (n % e + e) % e;
  }
  var mV = class {
    constructor() {
      __publicField(this, "isRunning", false);
      __publicField(this, "value", 0);
      __publicField(this, "from", 0);
      __publicField(this, "to", 0);
      __publicField(this, "currentTime", 0);
      __publicField(this, "lerp");
      __publicField(this, "duration");
      __publicField(this, "easing");
      __publicField(this, "onUpdate");
    }
    advance(n) {
      var _a2;
      if (!this.isRunning) return;
      let e = false;
      if (this.duration && this.easing) {
        this.currentTime += n;
        const t = rS(0, this.currentTime / this.duration, 1);
        e = t >= 1;
        const i = e ? 1 : this.easing(t);
        this.value = this.from + (this.to - this.from) * i;
      } else this.lerp ? (this.value = dV(this.value, this.to, this.lerp * 60, n), Math.round(this.value) === this.to && (this.value = this.to, e = true)) : (this.value = this.to, e = true);
      e && this.stop(), (_a2 = this.onUpdate) == null ? void 0 : _a2.call(this, this.value, e);
    }
    stop() {
      this.isRunning = false;
    }
    fromTo(n, e, { lerp: t, duration: i, easing: r, onStart: s, onUpdate: o }) {
      this.from = this.value = n, this.to = e, this.lerp = t, this.duration = i, this.easing = r, this.currentTime = 0, this.isRunning = true, s == null ? void 0 : s(), this.onUpdate = o;
    }
  };
  function gV(n, e) {
    let t;
    return function(...i) {
      let r = this;
      clearTimeout(t), t = setTimeout(() => {
        t = void 0, n.apply(r, i);
      }, e);
    };
  }
  var _V = class {
    constructor(n, e, { autoResize: t = true, debounce: i = 250 } = {}) {
      __publicField(this, "width", 0);
      __publicField(this, "height", 0);
      __publicField(this, "scrollHeight", 0);
      __publicField(this, "scrollWidth", 0);
      __publicField(this, "debouncedResize");
      __publicField(this, "wrapperResizeObserver");
      __publicField(this, "contentResizeObserver");
      __publicField(this, "resize", () => {
        this.onWrapperResize(), this.onContentResize();
      });
      __publicField(this, "onWrapperResize", () => {
        this.wrapper instanceof Window ? (this.width = window.innerWidth, this.height = window.innerHeight) : (this.width = this.wrapper.clientWidth, this.height = this.wrapper.clientHeight);
      });
      __publicField(this, "onContentResize", () => {
        this.wrapper instanceof Window ? (this.scrollHeight = this.content.scrollHeight, this.scrollWidth = this.content.scrollWidth) : (this.scrollHeight = this.wrapper.scrollHeight, this.scrollWidth = this.wrapper.scrollWidth);
      });
      this.wrapper = n, this.content = e, t && (this.debouncedResize = gV(this.resize, i), this.wrapper instanceof Window ? window.addEventListener("resize", this.debouncedResize, false) : (this.wrapperResizeObserver = new ResizeObserver(this.debouncedResize), this.wrapperResizeObserver.observe(this.wrapper)), this.contentResizeObserver = new ResizeObserver(this.debouncedResize), this.contentResizeObserver.observe(this.content)), this.resize();
    }
    destroy() {
      var _a2, _b2;
      (_a2 = this.wrapperResizeObserver) == null ? void 0 : _a2.disconnect(), (_b2 = this.contentResizeObserver) == null ? void 0 : _b2.disconnect(), this.wrapper === window && this.debouncedResize && window.removeEventListener("resize", this.debouncedResize, false);
    }
    get limit() {
      return {
        x: this.scrollWidth - this.width,
        y: this.scrollHeight - this.height
      };
    }
  }, sS = class {
    constructor() {
      __publicField(this, "events", {});
    }
    emit(n, ...e) {
      var _a2;
      let t = this.events[n] || [];
      for (let i = 0, r = t.length; i < r; i++) (_a2 = t[i]) == null ? void 0 : _a2.call(t, ...e);
    }
    on(n, e) {
      var _a2;
      return ((_a2 = this.events[n]) == null ? void 0 : _a2.push(e)) || (this.events[n] = [
        e
      ]), () => {
        var _a3;
        this.events[n] = (_a3 = this.events[n]) == null ? void 0 : _a3.filter((t) => e !== t);
      };
    }
    off(n, e) {
      var _a2;
      this.events[n] = (_a2 = this.events[n]) == null ? void 0 : _a2.filter((t) => e !== t);
    }
    destroy() {
      this.events = {};
    }
  }, h7 = 100 / 6, $3 = {
    passive: false
  }, bV = class {
    constructor(n, e = {
      wheelMultiplier: 1,
      touchMultiplier: 1
    }) {
      __publicField(this, "touchStart", {
        x: 0,
        y: 0
      });
      __publicField(this, "lastDelta", {
        x: 0,
        y: 0
      });
      __publicField(this, "window", {
        width: 0,
        height: 0
      });
      __publicField(this, "emitter", new sS());
      __publicField(this, "onTouchStart", (n) => {
        const { clientX: e, clientY: t } = n.targetTouches ? n.targetTouches[0] : n;
        this.touchStart.x = e, this.touchStart.y = t, this.lastDelta = {
          x: 0,
          y: 0
        }, this.emitter.emit("scroll", {
          deltaX: 0,
          deltaY: 0,
          event: n
        });
      });
      __publicField(this, "onTouchMove", (n) => {
        const { clientX: e, clientY: t } = n.targetTouches ? n.targetTouches[0] : n, i = -(e - this.touchStart.x) * this.options.touchMultiplier, r = -(t - this.touchStart.y) * this.options.touchMultiplier;
        this.touchStart.x = e, this.touchStart.y = t, this.lastDelta = {
          x: i,
          y: r
        }, this.emitter.emit("scroll", {
          deltaX: i,
          deltaY: r,
          event: n
        });
      });
      __publicField(this, "onTouchEnd", (n) => {
        this.emitter.emit("scroll", {
          deltaX: this.lastDelta.x,
          deltaY: this.lastDelta.y,
          event: n
        });
      });
      __publicField(this, "onWheel", (n) => {
        let { deltaX: e, deltaY: t, deltaMode: i } = n;
        const r = i === 1 ? h7 : i === 2 ? this.window.width : 1, s = i === 1 ? h7 : i === 2 ? this.window.height : 1;
        e *= r, t *= s, e *= this.options.wheelMultiplier, t *= this.options.wheelMultiplier, this.emitter.emit("scroll", {
          deltaX: e,
          deltaY: t,
          event: n
        });
      });
      __publicField(this, "onWindowResize", () => {
        this.window = {
          width: window.innerWidth,
          height: window.innerHeight
        };
      });
      this.element = n, this.options = e, window.addEventListener("resize", this.onWindowResize, false), this.onWindowResize(), this.element.addEventListener("wheel", this.onWheel, $3), this.element.addEventListener("touchstart", this.onTouchStart, $3), this.element.addEventListener("touchmove", this.onTouchMove, $3), this.element.addEventListener("touchend", this.onTouchEnd, $3);
    }
    on(n, e) {
      return this.emitter.on(n, e);
    }
    destroy() {
      this.emitter.destroy(), window.removeEventListener("resize", this.onWindowResize, false), this.element.removeEventListener("wheel", this.onWheel, $3), this.element.removeEventListener("touchstart", this.onTouchStart, $3), this.element.removeEventListener("touchmove", this.onTouchMove, $3), this.element.removeEventListener("touchend", this.onTouchEnd, $3);
    }
  }, vV = class {
    constructor({ wrapper: n = window, content: e = document.documentElement, eventsTarget: t = n, smoothWheel: i = true, syncTouch: r = false, syncTouchLerp: s = 0.075, touchInertiaMultiplier: o = 35, duration: a, easing: l = (C) => Math.min(1, 1.001 - Math.pow(2, -10 * C)), lerp: c = 0.1, infinite: u = false, orientation: h = "vertical", gestureOrientation: d = "vertical", touchMultiplier: f = 1, wheelMultiplier: m = 1, autoResize: _ = true, prevent: p, virtualScroll: g, overscroll: y = true, autoRaf: b = false, anchors: v = false, __experimental__naiveDimensions: x = false } = {}) {
      __publicField(this, "_isScrolling", false);
      __publicField(this, "_isStopped", false);
      __publicField(this, "_isLocked", false);
      __publicField(this, "_preventNextNativeScrollEvent", false);
      __publicField(this, "_resetVelocityTimeout", null);
      __publicField(this, "__rafID", null);
      __publicField(this, "isTouching");
      __publicField(this, "time", 0);
      __publicField(this, "userData", {});
      __publicField(this, "lastVelocity", 0);
      __publicField(this, "velocity", 0);
      __publicField(this, "direction", 0);
      __publicField(this, "options");
      __publicField(this, "targetScroll");
      __publicField(this, "animatedScroll");
      __publicField(this, "animate", new mV());
      __publicField(this, "emitter", new sS());
      __publicField(this, "dimensions");
      __publicField(this, "virtualScroll");
      __publicField(this, "onScrollEnd", (n) => {
        n instanceof CustomEvent || (this.isScrolling === "smooth" || this.isScrolling === false) && n.stopPropagation();
      });
      __publicField(this, "dispatchScrollendEvent", () => {
        this.options.wrapper.dispatchEvent(new CustomEvent("scrollend", {
          bubbles: this.options.wrapper === window,
          detail: {
            lenisScrollEnd: true
          }
        }));
      });
      __publicField(this, "onClick", (n) => {
        const t = n.composedPath().find((i) => {
          var _a2, _b2, _c2;
          return i instanceof HTMLAnchorElement && (((_a2 = i.getAttribute("href")) == null ? void 0 : _a2.startsWith("#")) || ((_b2 = i.getAttribute("href")) == null ? void 0 : _b2.startsWith("/#")) || ((_c2 = i.getAttribute("href")) == null ? void 0 : _c2.startsWith("./#")));
        });
        if (t) {
          const i = t.getAttribute("href");
          if (i) {
            const r = typeof this.options.anchors == "object" && this.options.anchors ? this.options.anchors : void 0;
            this.scrollTo(`#${i.split("#")[1]}`, r);
          }
        }
      });
      __publicField(this, "onPointerDown", (n) => {
        n.button === 1 && this.reset();
      });
      __publicField(this, "onVirtualScroll", (n) => {
        if (typeof this.options.virtualScroll == "function" && this.options.virtualScroll(n) === false) return;
        const { deltaX: e, deltaY: t, event: i } = n;
        if (this.emitter.emit("virtual-scroll", {
          deltaX: e,
          deltaY: t,
          event: i
        }), i.ctrlKey || i.lenisStopPropagation) return;
        const r = i.type.includes("touch"), s = i.type.includes("wheel");
        this.isTouching = i.type === "touchstart" || i.type === "touchmove";
        const o = e === 0 && t === 0;
        if (this.options.syncTouch && r && i.type === "touchstart" && o && !this.isStopped && !this.isLocked) {
          this.reset();
          return;
        }
        const l = this.options.gestureOrientation === "vertical" && t === 0 || this.options.gestureOrientation === "horizontal" && e === 0;
        if (o || l) return;
        let c = i.composedPath();
        c = c.slice(0, c.indexOf(this.rootElement));
        const u = this.options.prevent;
        if (c.find((p) => {
          var _a2, _b2, _c2;
          return p instanceof HTMLElement && (typeof u == "function" && (u == null ? void 0 : u(p)) || ((_a2 = p.hasAttribute) == null ? void 0 : _a2.call(p, "data-lenis-prevent")) || r && ((_b2 = p.hasAttribute) == null ? void 0 : _b2.call(p, "data-lenis-prevent-touch")) || s && ((_c2 = p.hasAttribute) == null ? void 0 : _c2.call(p, "data-lenis-prevent-wheel")));
        })) return;
        if (this.isStopped || this.isLocked) {
          i.preventDefault();
          return;
        }
        if (!(this.options.syncTouch && r || this.options.smoothWheel && s)) {
          this.isScrolling = "native", this.animate.stop(), i.lenisStopPropagation = true;
          return;
        }
        let d = t;
        this.options.gestureOrientation === "both" ? d = Math.abs(t) > Math.abs(e) ? t : e : this.options.gestureOrientation === "horizontal" && (d = e), (!this.options.overscroll || this.options.infinite || this.options.wrapper !== window && (this.animatedScroll > 0 && this.animatedScroll < this.limit || this.animatedScroll === 0 && t > 0 || this.animatedScroll === this.limit && t < 0)) && (i.lenisStopPropagation = true), i.preventDefault();
        const f = r && this.options.syncTouch, _ = r && i.type === "touchend" && Math.abs(d) > 5;
        _ && (d = this.velocity * this.options.touchInertiaMultiplier), this.scrollTo(this.targetScroll + d, {
          programmatic: false,
          ...f ? {
            lerp: _ ? this.options.syncTouchLerp : 1
          } : {
            lerp: this.options.lerp,
            duration: this.options.duration,
            easing: this.options.easing
          }
        });
      });
      __publicField(this, "onNativeScroll", () => {
        if (this._resetVelocityTimeout !== null && (clearTimeout(this._resetVelocityTimeout), this._resetVelocityTimeout = null), this._preventNextNativeScrollEvent) {
          this._preventNextNativeScrollEvent = false;
          return;
        }
        if (this.isScrolling === false || this.isScrolling === "native") {
          const n = this.animatedScroll;
          this.animatedScroll = this.targetScroll = this.actualScroll, this.lastVelocity = this.velocity, this.velocity = this.animatedScroll - n, this.direction = Math.sign(this.animatedScroll - n), this.isStopped || (this.isScrolling = "native"), this.emit(), this.velocity !== 0 && (this._resetVelocityTimeout = setTimeout(() => {
            this.lastVelocity = this.velocity, this.velocity = 0, this.isScrolling = false, this.emit();
          }, 400));
        }
      });
      __publicField(this, "raf", (n) => {
        const e = n - (this.time || n);
        this.time = n, this.animate.advance(e * 1e-3), this.options.autoRaf && (this.__rafID = requestAnimationFrame(this.raf));
      });
      window.lenisVersion = fV, (!n || n === document.documentElement) && (n = window), this.options = {
        wrapper: n,
        content: e,
        eventsTarget: t,
        smoothWheel: i,
        syncTouch: r,
        syncTouchLerp: s,
        touchInertiaMultiplier: o,
        duration: a,
        easing: l,
        lerp: c,
        infinite: u,
        gestureOrientation: d,
        orientation: h,
        touchMultiplier: f,
        wheelMultiplier: m,
        autoResize: _,
        prevent: p,
        virtualScroll: g,
        overscroll: y,
        autoRaf: b,
        anchors: v,
        __experimental__naiveDimensions: x
      }, this.dimensions = new _V(n, e, {
        autoResize: _
      }), this.updateClassName(), this.targetScroll = this.animatedScroll = this.actualScroll, this.options.wrapper.addEventListener("scroll", this.onNativeScroll, false), this.options.wrapper.addEventListener("scrollend", this.onScrollEnd, {
        capture: true
      }), this.options.anchors && this.options.wrapper === window && this.options.wrapper.addEventListener("click", this.onClick, false), this.options.wrapper.addEventListener("pointerdown", this.onPointerDown, false), this.virtualScroll = new bV(t, {
        touchMultiplier: f,
        wheelMultiplier: m
      }), this.virtualScroll.on("scroll", this.onVirtualScroll), this.options.autoRaf && (this.__rafID = requestAnimationFrame(this.raf));
    }
    destroy() {
      this.emitter.destroy(), this.options.wrapper.removeEventListener("scroll", this.onNativeScroll, false), this.options.wrapper.removeEventListener("scrollend", this.onScrollEnd, {
        capture: true
      }), this.options.wrapper.removeEventListener("pointerdown", this.onPointerDown, false), this.options.anchors && this.options.wrapper === window && this.options.wrapper.removeEventListener("click", this.onClick, false), this.virtualScroll.destroy(), this.dimensions.destroy(), this.cleanUpClassName(), this.__rafID && cancelAnimationFrame(this.__rafID);
    }
    on(n, e) {
      return this.emitter.on(n, e);
    }
    off(n, e) {
      return this.emitter.off(n, e);
    }
    setScroll(n) {
      this.isHorizontal ? this.options.wrapper.scrollTo({
        left: n,
        behavior: "instant"
      }) : this.options.wrapper.scrollTo({
        top: n,
        behavior: "instant"
      });
    }
    resize() {
      this.dimensions.resize(), this.animatedScroll = this.targetScroll = this.actualScroll, this.emit();
    }
    emit() {
      this.emitter.emit("scroll", this);
    }
    reset() {
      this.isLocked = false, this.isScrolling = false, this.animatedScroll = this.targetScroll = this.actualScroll, this.lastVelocity = this.velocity = 0, this.animate.stop();
    }
    start() {
      this.isStopped && (this.reset(), this.isStopped = false);
    }
    stop() {
      this.isStopped || (this.reset(), this.isStopped = true);
    }
    scrollTo(n, { offset: e = 0, immediate: t = false, lock: i = false, duration: r = this.options.duration, easing: s = this.options.easing, lerp: o = this.options.lerp, onStart: a, onComplete: l, force: c = false, programmatic: u = true, userData: h } = {}) {
      if (!((this.isStopped || this.isLocked) && !c)) {
        if (typeof n == "string" && [
          "top",
          "left",
          "start"
        ].includes(n)) n = 0;
        else if (typeof n == "string" && [
          "bottom",
          "right",
          "end"
        ].includes(n)) n = this.limit;
        else {
          let d;
          if (typeof n == "string" ? d = document.querySelector(n) : n instanceof HTMLElement && (n == null ? void 0 : n.nodeType) && (d = n), d) {
            if (this.options.wrapper !== window) {
              const m = this.rootElement.getBoundingClientRect();
              e -= this.isHorizontal ? m.left : m.top;
            }
            const f = d.getBoundingClientRect();
            n = (this.isHorizontal ? f.left : f.top) + this.animatedScroll;
          }
        }
        if (typeof n == "number") {
          if (n += e, n = Math.round(n), this.options.infinite ? u && (this.targetScroll = this.animatedScroll = this.scroll) : n = rS(0, n, this.limit), n === this.targetScroll) {
            a == null ? void 0 : a(this), l == null ? void 0 : l(this);
            return;
          }
          if (this.userData = h ?? {}, t) {
            this.animatedScroll = this.targetScroll = n, this.setScroll(this.scroll), this.reset(), this.preventNextNativeScrollEvent(), this.emit(), l == null ? void 0 : l(this), this.userData = {}, requestAnimationFrame(() => {
              this.dispatchScrollendEvent();
            });
            return;
          }
          u || (this.targetScroll = n), this.animate.fromTo(this.animatedScroll, n, {
            duration: r,
            easing: s,
            lerp: o,
            onStart: () => {
              i && (this.isLocked = true), this.isScrolling = "smooth", a == null ? void 0 : a(this);
            },
            onUpdate: (d, f) => {
              this.isScrolling = "smooth", this.lastVelocity = this.velocity, this.velocity = d - this.animatedScroll, this.direction = Math.sign(this.velocity), this.animatedScroll = d, this.setScroll(this.scroll), u && (this.targetScroll = d), f || this.emit(), f && (this.reset(), this.emit(), l == null ? void 0 : l(this), this.userData = {}, requestAnimationFrame(() => {
                this.dispatchScrollendEvent();
              }), this.preventNextNativeScrollEvent());
            }
          });
        }
      }
    }
    preventNextNativeScrollEvent() {
      this._preventNextNativeScrollEvent = true, requestAnimationFrame(() => {
        this._preventNextNativeScrollEvent = false;
      });
    }
    get rootElement() {
      return this.options.wrapper === window ? document.documentElement : this.options.wrapper;
    }
    get limit() {
      return this.options.__experimental__naiveDimensions ? this.isHorizontal ? this.rootElement.scrollWidth - this.rootElement.clientWidth : this.rootElement.scrollHeight - this.rootElement.clientHeight : this.dimensions.limit[this.isHorizontal ? "x" : "y"];
    }
    get isHorizontal() {
      return this.options.orientation === "horizontal";
    }
    get actualScroll() {
      const n = this.options.wrapper;
      return this.isHorizontal ? n.scrollX ?? n.scrollLeft : n.scrollY ?? n.scrollTop;
    }
    get scroll() {
      return this.options.infinite ? pV(this.animatedScroll, this.limit) : this.animatedScroll;
    }
    get progress() {
      return this.limit === 0 ? 1 : this.scroll / this.limit;
    }
    get isScrolling() {
      return this._isScrolling;
    }
    set isScrolling(n) {
      this._isScrolling !== n && (this._isScrolling = n, this.updateClassName());
    }
    get isStopped() {
      return this._isStopped;
    }
    set isStopped(n) {
      this._isStopped !== n && (this._isStopped = n, this.updateClassName());
    }
    get isLocked() {
      return this._isLocked;
    }
    set isLocked(n) {
      this._isLocked !== n && (this._isLocked = n, this.updateClassName());
    }
    get isSmooth() {
      return this.isScrolling === "smooth";
    }
    get className() {
      let n = "lenis";
      return this.isStopped && (n += " lenis-stopped"), this.isLocked && (n += " lenis-locked"), this.isScrolling && (n += " lenis-scrolling"), this.isScrolling === "smooth" && (n += " lenis-smooth"), n;
    }
    updateClassName() {
      this.cleanUpClassName(), this.rootElement.className = `${this.rootElement.className} ${this.className}`.trim();
    }
    cleanUpClassName() {
      this.rootElement.className = this.rootElement.className.replace(/lenis(-\w+)?/g, "").trim();
    }
  };
  const yV = {
    __name: "app",
    setup(n) {
      const e = Ns(), t = s6(), i = r6(), r = V8(), { gsap: s, ScrollTrigger: o } = Wf();
      let a;
      const l = pe(null), c = nr(l), u = pe(null), h = pe(null), d = nr(h), f = pe(null), m = nr(f), _ = pe(null), p = nr(_), g = pe(null), y = nr(g), b = pe(null), v = nr(b), x = pe(null), C = pe(null), A = pe(null), P = pe(null), M = pe(null), E = pe(null), I = qe(() => np("debug"));
      v2(async () => {
        await e2(), np("alt_layout") && e.public.showHoldingPage && t.setPreloaderVisible(false), k(), zt(l, document.querySelector("[data-site-header-white]")), zt(u, document.querySelector("[data-site-header-black]")), zt(h, document.querySelector("[data-panel-01]")), zt(f, document.querySelector("[data-panel-02]")), zt(_, document.querySelector("[data-services]")), zt(g, document.querySelector("[data-footer]")), zt(b, document.querySelector("[data-bottom-bar]")), zt(x, document.querySelector("[data-bottom-bar-white]")), zt(C, document.querySelector("[data-bottom-bar-black]")), zt(A, document.querySelector("[data-mouse-trail-white]")), zt(P, document.querySelector("[data-mouse-trail-orange]"));
      }), e8(() => i.isSoundEnabled, async () => {
        const m1 = await Gt(() => import("./DZuHH_Ny.js").then((I1) => I1.P), [], import.meta.url);
        V(m1), w1(m1), J(m1), G(m1), Q(m1), $(m1), z(m1);
      }), je(() => r.isEnabled, (m1) => {
        m1 ? a == null ? void 0 : a.start() : a == null ? void 0 : a.stop();
      }), je(() => t.isContactOverlayVisible, (m1) => {
        r.setEnabled(!m1);
      }), je(() => r.isEnabled, (m1) => {
        m1 ? a == null ? void 0 : a.start() : a == null ? void 0 : a.stop();
      }), Et.on(Bt.SCROLL_TOP, () => {
        a.scrollTo(0, {
          immediate: true,
          force: true
        });
      }), Et.on(Bt.SCROLL_TO, ({ target: m1, options: I1 = {} }) => {
        a.scrollTo(m1, I1);
      }), Et.once(Bt.START_ANIMATE_IN, () => {
        s.set([
          rt(E).$el,
          rt(C)
        ], {
          clipPath: "polygon(0% 0%, 0% 0%, 0% 0%, 0% 0%)"
        });
      });
      function k() {
        a = new vV({
          duration: 0.08,
          easing: (m1) => Math.min(1, 1.001 - Math.pow(2, -10 * m1)),
          orientation: "vertical",
          smoothWheel: true,
          wheelMultiplier: 3
        }), !r.isEnabled && a.stop(), a.on("scroll", H), s.ticker.add(K), s.ticker.lagSmoothing(0);
      }
      function H(m1) {
        if (r.setProgress(m1.progress), r.setAnimatedScroll(m1.animatedScroll), o.update(), e.public.showHoldingPage) return;
        const { value: I1 } = rt(c).top, { value: Z } = rt(d).top, { value: f1 } = rt(m).top, { value: M1 } = rt(p).top, { value: W } = rt(y).top, { value: r1 } = rt(y).bottom, { value: v1 } = rt(v).top, S1 = `
		evenodd,

		0% 0px,
		100% 0px,
		100% ${-(I1 - Z)}px,
		0% ${-(I1 - Z)}px,

		0% ${Math.max(0, Math.round(-(I1 - W)))}px,
		100% ${Math.max(0, Math.round(-(I1 - W)))}px,
		100% ${Math.max(0, Math.round(-(I1 - r1)))}px,
		0% ${Math.max(0, Math.round(-(I1 - r1)))}px
	`, z1 = `
		evenodd,

		0% ${-(I1 - Z)}px,
		100% ${-(I1 - Z)}px,
		100% ${-(I1 - W)}px,
		0% ${-(I1 - W)}px
	`, Z1 = `
		evenodd,

		0% 0px,
		100% 0px,
		100% ${Z}px,
		0% ${Z}px,

		0% ${W}px,
		100% ${W}px,
		100% ${r1}px,
		0% ${r1}px
	`, F = `
		evenodd,

		0% ${Z}px,
		100% ${Z}px,
		100% ${M1}px,
		0% ${M1}px,

		0% ${f1}px,
		100% ${f1}px,
		100% ${W}px,
		0% ${W}px
	`, T = `
		evenodd,

		0% 0px,
		100% 0px,
		100% ${-(v1 - Z)}px,
		0% ${-(v1 - Z)}px,
	`, e1 = `
		evenodd,

		0% ${-(v1 - Z)}px,
		100% ${-(v1 - Z)}px,
		100% ${-(v1 - W)}px,
		0% ${-(v1 - W)}px
	`;
        s.set(rt(l), {
          clipPath: () => t.isForceUiWhite ? null : `polygon(${S1})`
        }), s.set(rt(x), {
          clipPath: () => t.isForceUiWhite ? null : `polygon(${T})`
        }), s.set(rt(u), {
          clipPath: () => t.isForceUiWhite ? "polygon(0% 0%, 0% 0%, 0% 0%, 0% 0%)" : `polygon(${z1})`
        }), s.set(rt(C), {
          clipPath: () => t.isForceUiWhite ? "polygon(0% 0%, 0% 0%, 0% 0%, 0% 0%)" : `polygon(${e1})`
        }), s.set([
          rt(A),
          rt(M).$el
        ], {
          clipPath: () => t.isForceUiWhite ? null : `polygon(${Z1})`
        }), s.set([
          rt(P),
          rt(E).$el
        ], {
          clipPath: () => t.isForceUiWhite ? "polygon(0% 0%, 0% 0%, 0% 0%, 0% 0%)" : `polygon(${F})`
        });
      }
      function K(m1, I1, Z) {
        a.raf(Z);
      }
      async function J(m1) {
        let I1 = [];
        const f1 = [
          "/sound/KODE WEBSITE - 270125 - GLASS SMASH 1 - RVSD.mp3",
          "/sound/KODE WEBSITE - 270125 - GLASS SMASH 2 - RVSD.mp3",
          "/sound/KODE WEBSITE - 270125 - GLASS SMASH 3 - RVSD.mp3",
          "/sound/KODE WEBSITE - 270125 - GLASS SMASH 4 - RVSD.mp3",
          "/sound/KODE WEBSITE - 270125 - GLASS SMASH 5 - RVSD.mp3"
        ].map((W) => new Promise((r1) => {
          const v1 = new m1.Sound({
            source: "file",
            options: {
              path: W,
              volume: 0.3
            }
          }, () => {
            r1(v1);
          });
        }));
        I1 = [
          ...await Promise.all(f1)
        ], Et.on(Bt.PLAY_RANDOM_SHATTER_SFX, () => {
          if (!i.isInit) return;
          I1.forEach((r1) => r1.stop());
          const W = s.utils.random(0, I1.length - 1, 1);
          I1[W].play();
        });
      }
      async function z(m1) {
        let I1 = [];
        const f1 = [
          "/sound/KODE WEBSITE - 130225 - FOOTER ICONS - 1.mp3",
          "/sound/KODE WEBSITE - 130225 - FOOTER ICONS - 2.mp3",
          "/sound/KODE WEBSITE - 130225 - FOOTER ICONS - 3.mp3",
          "/sound/KODE WEBSITE - 130225 - FOOTER ICONS - 4.mp3",
          "/sound/KODE WEBSITE - 130225 - FOOTER ICONS - 5.mp3",
          "/sound/KODE WEBSITE - 130225 - FOOTER ICONS - 6.mp3"
        ].map((W) => new Promise((r1) => {
          const v1 = new m1.Sound({
            source: "file",
            options: {
              path: W,
              volume: 0.3
            }
          }, () => {
            r1(v1);
          });
        }));
        I1 = [
          ...await Promise.all(f1)
        ], Et.on(Bt.PLAY_FOOTER_SFX, () => {
          I1.forEach((r1) => r1.stop());
          const W = s.utils.random(0, I1.length - 1, 1);
          I1[W].play();
        });
      }
      async function $(m1) {
        let I1 = [], Z = true, f1 = null;
        const W = [
          "/sound/KODE WEBSITE - 030225 - PLUS 1.1.mp3",
          "/sound/KODE WEBSITE - 030225 - PLUS 1.2.mp3",
          "/sound/KODE WEBSITE - 030225 - PLUS 1.3.mp3",
          "/sound/KODE WEBSITE - 030225 - PLUS 1.4.mp3",
          "/sound/KODE WEBSITE - 030225 - PLUS 1.5.mp3",
          "/sound/KODE WEBSITE - 030225 - PLUS 1.6.mp3",
          "/sound/KODE WEBSITE - 030225 - PLUS 1.mp3",
          "/sound/KODE WEBSITE - 030225 - PLUS 2.mp3",
          "/sound/KODE WEBSITE - 030225 - PLUS 3.mp3",
          "/sound/KODE WEBSITE - 030225 - PLUS 4.mp3",
          "/sound/KODE WEBSITE - 030225 - PLUS 5.mp3",
          "/sound/KODE WEBSITE - 030225 - PLUS 6.mp3"
        ].map((v1) => new Promise((S1) => {
          const z1 = new m1.Sound({
            source: "file",
            options: {
              path: v1,
              volume: 0.3,
              release: 0.5,
              attack: 0.35
            }
          }, () => {
            z1.on("play", () => {
              f1 == null ? void 0 : f1.pause(), Z = false, f1 = s.delayedCall(0.5, () => {
                Z = true, f1 = null;
              });
            }), S1(z1);
          });
        }));
        I1 = [
          ...await Promise.all(W)
        ], Et.on(Bt.PLAY_BALOON_SFX, () => {
          if (!i.isInit || !Z) return;
          I1.forEach((S1) => S1.stop());
          const v1 = s.utils.random(0, I1.length - 1, 1);
          I1[v1].play();
        }), Et.on(Bt.STOP_BALOON_SFX, () => {
          I1.forEach((v1) => v1.stop());
        });
      }
      async function G(m1) {
        const I1 = new m1.Sound({
          source: "file",
          options: {
            path: "/sound/KODE WEBSITE - 130225 - ASTERISK - MAGNET STATIC - LOOP.mp3",
            volume: 1,
            loop: true,
            release: 0.5,
            attack: 0.35
          }
        }, () => {
          Et.on(Bt.PLAY_ASTERISK_SFX, () => {
            i.isInit && I1.play();
          }), Et.on(Bt.STOP_ASTERISK_SFX, () => {
            I1.stop();
          });
        });
      }
      async function Q(m1) {
        const I1 = new m1.Sound({
          source: "file",
          options: {
            path: "/sound/KODE WEBSITE - 030225 - CIRCLE - LOOP_0.mp3",
            volume: 1,
            loop: true,
            release: 0.5,
            attack: 0.35
          }
        }, () => {
          Et.on(Bt.PLAY_CIRCLE_SFX, () => {
            i.isInit && I1.play();
          }), Et.on(Bt.STOP_CIRCLE_SFX, () => {
            I1.stop();
          });
        });
      }
      function V(m1) {
        let Z, f1, M1;
        Z = new m1.Sound({
          source: "file",
          options: {
            path: "/sound/KODE WEBSITE - BACKGROUND AMBIENT LOOP - PREF.mp3",
            volume: 0.3,
            loop: true
          }
        }, () => {
          Et.emit(Bt.BG_SOUND_LOADED), Z.play(), vu(() => {
            Z.volume = i.isSoundEnabled ? 0.3 : 0;
          }), Et.on(Bt.BG_SWITCH_TO_DEFAULT, () => {
            i.getBgSoundTrack !== "default" && (i.setBgSoundTrack("default"), Z.play(), M1 == null ? void 0 : M1.stop(), i.isSoundEnabled && (M1 == null ? void 0 : M1.play()), f1 == null ? void 0 : f1.stop());
          });
        }), f1 = new m1.Sound({
          source: "file",
          options: {
            path: "/sound/KODE WEBSITE - BACKGROUND AMBIENT LOOP - PREF - FILTERED.mp3",
            volume: 0.3,
            loop: true
          }
        }, () => {
          vu(() => {
            f1.volume = i.isSoundEnabled ? 0.3 : 0;
          }), Et.on(Bt.BG_SWITCH_TO_FILTERED, () => {
            i.getBgSoundTrack !== "filtered" && (i.setBgSoundTrack("filtered"), f1.play(), M1 == null ? void 0 : M1.stop(), i.isSoundEnabled && (M1 == null ? void 0 : M1.play()), Z == null ? void 0 : Z.stop());
          });
        }), M1 = new m1.Sound({
          source: "file",
          options: {
            path: "/sound/ENVIRO SWITCH GLITCH USE.mp3",
            volume: 1
          }
        });
      }
      async function w1(m1) {
        const I1 = new m1.Sound({
          source: "file",
          options: {
            path: "/sound/BUTTON HOVER.mp3",
            volume: 1
          }
        }, () => {
          Et.on(Bt.BUTTON_HOVER, () => {
            I1.stop(), i.isInit && i.isSoundEnabled && I1.play();
          });
        });
      }
      return (m1, I1) => {
        const Z = tS, f1 = jz, M1 = Qz, W = iV, r1 = iS, v1 = uV;
        return jt(), gs("div", null, [
          Pe(t).isPreloaderVisible && !Pe(I) ? (jt(), C2(Z, {
            key: 0
          })) : zb("", true),
          Ye(M1, {
            name: Pe(e).public.showHoldingPage ? "holding" : "default"
          }, {
            default: Wi(() => [
              Ye(f1)
            ]),
            _: 1
          }, 8, [
            "name"
          ]),
          Ye(W, {
            class: "fixed inset-x-0 top-0 h-screen z-0 pointer-events-none"
          }),
          Ye(v1, null, {
            default: Wi(() => [
              Ye(r1, {
                ref_key: "mouseCursorWhiteRef",
                ref: M
              }, null, 512),
              Ye(r1, {
                "static-color": true,
                "cursor-color": "#FF4C00",
                ref_key: "mouseCursorOrangeRef",
                ref: E
              }, null, 512)
            ]),
            _: 1
          })
        ]);
      };
    }
  }, xV = {
    __name: "nuxt-error-page",
    props: {
      error: Object
    },
    setup(n) {
      const t = n.error;
      t.stack && t.stack.split(`
`).splice(1).map((h) => ({
        text: h.replace("webpack:/", "").replace(".vue", ".js").trim(),
        internal: h.includes("node_modules") && !h.includes(".cache") || h.includes("internal") || h.includes("new Promise")
      })).map((h) => `<span class="stack${h.internal ? " internal" : ""}">${h.text}</span>`).join(`
`);
      const i = Number(t.statusCode || 500), r = i === 404, s = t.statusMessage ?? (r ? "Page Not Found" : "Internal Server Error"), o = t.message || t.toString(), a = void 0, u = r ? Q2(() => Gt(() => import("./B7xq1DED.js"), __vite__mapDeps([29,30]), import.meta.url)) : Q2(() => Gt(() => import("./DAXZmV_2.js"), __vite__mapDeps([31,32]), import.meta.url));
      return (h, d) => (jt(), C2(Pe(u), RE(Hb({
        statusCode: Pe(i),
        statusMessage: Pe(s),
        description: Pe(o),
        stack: Pe(a)
      })), null, 16));
    }
  }, SV = {
    key: 0
  }, d7 = {
    __name: "nuxt-root",
    setup(n) {
      const e = () => null, t = At(), i = t.deferHydration();
      if (t.isHydrating) {
        const l = t.hooks.hookOnce("app:error", i);
        On().beforeEach(l);
      }
      const r = false;
      gr(wl, Ap()), t.hooks.callHookWith((l) => l.map((c) => c()), "vue:setup");
      const s = xf(), o = false;
      hb((l, c, u) => {
        if (t.hooks.callHook("vue:error", l, c, u).catch((h) => console.error("[nuxt] Error in `vue:error` hook", h)), mv(l) && (l.fatal || l.unhandled)) return t.runWithContext(() => Z3(l)), false;
      });
      const a = false;
      return (l, c) => (jt(), C2(xp, {
        onResolve: Pe(i)
      }, {
        default: Wi(() => [
          Pe(o) ? (jt(), gs("div", SV)) : Pe(s) ? (jt(), C2(Pe(xV), {
            key: 1,
            error: Pe(s)
          }, null, 8, [
            "error"
          ])) : Pe(a) ? (jt(), C2(Pe(e), {
            key: 2,
            context: Pe(a)
          }, null, 8, [
            "context"
          ])) : Pe(r) ? (jt(), C2(_p(Pe(r)), {
            key: 3
          })) : (jt(), C2(Pe(yV), {
            key: 4
          }))
        ]),
        _: 1
      }, 8, [
        "onResolve"
      ]));
    }
  };
  let p7;
  {
    let n;
    p7 = async function() {
      var _a2, _b2;
      if (n) return n;
      const i = !!(((_a2 = window.__NUXT__) == null ? void 0 : _a2.serverRendered) ?? ((_b2 = document.getElementById("__NUXT_DATA__")) == null ? void 0 : _b2.dataset.ssr) === "true") ? jM(d7) : WM(d7), r = iC({
        vueApp: i
      });
      async function s(o) {
        var _a3;
        await r.callHook("app:error", o), (_a3 = r.payload).error || (_a3.error = Sf(o));
      }
      i.config.errorHandler = s, r.hook("app:suspense:resolve", () => {
        i.config.errorHandler === s && (i.config.errorHandler = void 0);
      });
      try {
        await oC(r, gR);
      } catch (o) {
        s(o);
      }
      try {
        await r.hooks.callHook("app:created", i), await r.hooks.callHook("app:beforeMount", i), i.mount(eC), await r.hooks.callHook("app:mounted", i), await e2();
      } catch (o) {
        s(o);
      }
      return i;
    }, n = p7().catch((e) => {
      throw console.error("Error while mounting app:", e), e;
    });
  }
})();
export {
  Ee as $,
  np as A,
  zt as B,
  Et as C,
  GV as D,
  Bt as E,
  L2 as F,
  AV as G,
  Tl as H,
  je as I,
  rt as J,
  If as K,
  kn as L,
  P4 as M,
  QV as N,
  Ji as O,
  l2 as P,
  HV as Q,
  jV as R,
  BV as S,
  cs as T,
  Pf as U,
  Ue as V,
  YV as W,
  ls as X,
  Zn as Y,
  Pe as Z,
  Tf as _,
  __tla,
  u2 as a,
  FP as a$,
  u1 as a0,
  gb as a1,
  C2 as a2,
  Gv as a3,
  e8 as a4,
  gn as a5,
  wV as a6,
  lf as a7,
  cf as a8,
  EV as a9,
  Mr as aA,
  Y2 as aB,
  Re as aC,
  qe as aD,
  LV as aE,
  eG as aF,
  Vv as aG,
  CV as aH,
  yt as aI,
  TV as aJ,
  zb as aK,
  qV as aL,
  OV as aM,
  kV as aN,
  Pr as aO,
  XV as aP,
  gL as aQ,
  IV as aR,
  n2 as aS,
  T8 as aT,
  cI as aU,
  R8 as aV,
  DV as aW,
  iv as aX,
  MV as aY,
  lP as aZ,
  br as a_,
  wp as aa,
  uw as ab,
  MM as ac,
  uV as ad,
  vn as ae,
  JV as af,
  Wt as ag,
  VV as ah,
  NP as ai,
  D8 as aj,
  zV as ak,
  Oi as al,
  nn as am,
  es as an,
  $V as ao,
  hi as ap,
  d2 as aq,
  F2 as ar,
  h2 as as,
  Np as at,
  D3 as au,
  Cl as av,
  i2 as aw,
  Cs as ax,
  f2 as ay,
  e6 as az,
  Ye as b,
  OP as b0,
  kP as b1,
  BP as b2,
  HP as b3,
  gs as c,
  Sp as d,
  JD as e,
  UV as f,
  Pn as g,
  s6 as h,
  r6 as i,
  V8 as j,
  Wf as k,
  oP as l,
  PV as m,
  aP as n,
  jt as o,
  FV as p,
  nr as q,
  RV as r,
  pe as s,
  E7 as t,
  lA as u,
  v2 as v,
  Wi as w,
  e2 as x,
  ZV as y,
  Gt as z
};
